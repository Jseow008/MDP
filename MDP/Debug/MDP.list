
MDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bf4  0800ba7c  0800ba7c  0001ba7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c670  0800c670  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800c670  0800c670  0001c670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c678  0800c678  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c678  0800c678  0001c678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c67c  0800c67c  0001c67c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800c680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00005130  20000078  20000078  00020078  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200051a8  200051a8  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b6cf  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003b35  00000000  00000000  0003b7ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001900  00000000  00000000  0003f2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001391  00000000  00000000  00040bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000049c4  00000000  00000000  00041f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d620  00000000  00000000  00046945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d8bca  00000000  00000000  00063f65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000713c  00000000  00000000  0013cb30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  00143c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ba64 	.word	0x0800ba64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800ba64 	.word	0x0800ba64

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b970 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9e08      	ldr	r6, [sp, #32]
 8000be2:	460d      	mov	r5, r1
 8000be4:	4604      	mov	r4, r0
 8000be6:	460f      	mov	r7, r1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d14a      	bne.n	8000c82 <__udivmoddi4+0xa6>
 8000bec:	428a      	cmp	r2, r1
 8000bee:	4694      	mov	ip, r2
 8000bf0:	d965      	bls.n	8000cbe <__udivmoddi4+0xe2>
 8000bf2:	fab2 f382 	clz	r3, r2
 8000bf6:	b143      	cbz	r3, 8000c0a <__udivmoddi4+0x2e>
 8000bf8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bfc:	f1c3 0220 	rsb	r2, r3, #32
 8000c00:	409f      	lsls	r7, r3
 8000c02:	fa20 f202 	lsr.w	r2, r0, r2
 8000c06:	4317      	orrs	r7, r2
 8000c08:	409c      	lsls	r4, r3
 8000c0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0e:	fa1f f58c 	uxth.w	r5, ip
 8000c12:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c16:	0c22      	lsrs	r2, r4, #16
 8000c18:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c20:	fb01 f005 	mul.w	r0, r1, r5
 8000c24:	4290      	cmp	r0, r2
 8000c26:	d90a      	bls.n	8000c3e <__udivmoddi4+0x62>
 8000c28:	eb1c 0202 	adds.w	r2, ip, r2
 8000c2c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c30:	f080 811c 	bcs.w	8000e6c <__udivmoddi4+0x290>
 8000c34:	4290      	cmp	r0, r2
 8000c36:	f240 8119 	bls.w	8000e6c <__udivmoddi4+0x290>
 8000c3a:	3902      	subs	r1, #2
 8000c3c:	4462      	add	r2, ip
 8000c3e:	1a12      	subs	r2, r2, r0
 8000c40:	b2a4      	uxth	r4, r4
 8000c42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4e:	fb00 f505 	mul.w	r5, r0, r5
 8000c52:	42a5      	cmp	r5, r4
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x90>
 8000c56:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5e:	f080 8107 	bcs.w	8000e70 <__udivmoddi4+0x294>
 8000c62:	42a5      	cmp	r5, r4
 8000c64:	f240 8104 	bls.w	8000e70 <__udivmoddi4+0x294>
 8000c68:	4464      	add	r4, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c70:	1b64      	subs	r4, r4, r5
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11e      	cbz	r6, 8000c7e <__udivmoddi4+0xa2>
 8000c76:	40dc      	lsrs	r4, r3
 8000c78:	2300      	movs	r3, #0
 8000c7a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d908      	bls.n	8000c98 <__udivmoddi4+0xbc>
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	f000 80ed 	beq.w	8000e66 <__udivmoddi4+0x28a>
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c92:	4608      	mov	r0, r1
 8000c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	d149      	bne.n	8000d34 <__udivmoddi4+0x158>
 8000ca0:	42ab      	cmp	r3, r5
 8000ca2:	d302      	bcc.n	8000caa <__udivmoddi4+0xce>
 8000ca4:	4282      	cmp	r2, r0
 8000ca6:	f200 80f8 	bhi.w	8000e9a <__udivmoddi4+0x2be>
 8000caa:	1a84      	subs	r4, r0, r2
 8000cac:	eb65 0203 	sbc.w	r2, r5, r3
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	4617      	mov	r7, r2
 8000cb4:	2e00      	cmp	r6, #0
 8000cb6:	d0e2      	beq.n	8000c7e <__udivmoddi4+0xa2>
 8000cb8:	e9c6 4700 	strd	r4, r7, [r6]
 8000cbc:	e7df      	b.n	8000c7e <__udivmoddi4+0xa2>
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xe6>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f382 	clz	r3, r2
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x210>
 8000ccc:	1a8a      	subs	r2, r1, r2
 8000cce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd2:	fa1f fe8c 	uxth.w	lr, ip
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cdc:	fb07 2015 	mls	r0, r7, r5, r2
 8000ce0:	0c22      	lsrs	r2, r4, #16
 8000ce2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce6:	fb0e f005 	mul.w	r0, lr, r5
 8000cea:	4290      	cmp	r0, r2
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x124>
 8000cee:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x122>
 8000cf8:	4290      	cmp	r0, r2
 8000cfa:	f200 80cb 	bhi.w	8000e94 <__udivmoddi4+0x2b8>
 8000cfe:	4645      	mov	r5, r8
 8000d00:	1a12      	subs	r2, r2, r0
 8000d02:	b2a4      	uxth	r4, r4
 8000d04:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d08:	fb07 2210 	mls	r2, r7, r0, r2
 8000d0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d10:	fb0e fe00 	mul.w	lr, lr, r0
 8000d14:	45a6      	cmp	lr, r4
 8000d16:	d908      	bls.n	8000d2a <__udivmoddi4+0x14e>
 8000d18:	eb1c 0404 	adds.w	r4, ip, r4
 8000d1c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d20:	d202      	bcs.n	8000d28 <__udivmoddi4+0x14c>
 8000d22:	45a6      	cmp	lr, r4
 8000d24:	f200 80bb 	bhi.w	8000e9e <__udivmoddi4+0x2c2>
 8000d28:	4610      	mov	r0, r2
 8000d2a:	eba4 040e 	sub.w	r4, r4, lr
 8000d2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d32:	e79f      	b.n	8000c74 <__udivmoddi4+0x98>
 8000d34:	f1c1 0720 	rsb	r7, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d42:	fa05 f401 	lsl.w	r4, r5, r1
 8000d46:	fa20 f307 	lsr.w	r3, r0, r7
 8000d4a:	40fd      	lsrs	r5, r7
 8000d4c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d56:	fa1f fe8c 	uxth.w	lr, ip
 8000d5a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d64:	fb08 f50e 	mul.w	r5, r8, lr
 8000d68:	42a5      	cmp	r5, r4
 8000d6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d72:	d90b      	bls.n	8000d8c <__udivmoddi4+0x1b0>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d7c:	f080 8088 	bcs.w	8000e90 <__udivmoddi4+0x2b4>
 8000d80:	42a5      	cmp	r5, r4
 8000d82:	f240 8085 	bls.w	8000e90 <__udivmoddi4+0x2b4>
 8000d86:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8a:	4464      	add	r4, ip
 8000d8c:	1b64      	subs	r4, r4, r5
 8000d8e:	b29d      	uxth	r5, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000da0:	45a6      	cmp	lr, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1da>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dac:	d26c      	bcs.n	8000e88 <__udivmoddi4+0x2ac>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	d96a      	bls.n	8000e88 <__udivmoddi4+0x2ac>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	4464      	add	r4, ip
 8000db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dba:	fba3 9502 	umull	r9, r5, r3, r2
 8000dbe:	eba4 040e 	sub.w	r4, r4, lr
 8000dc2:	42ac      	cmp	r4, r5
 8000dc4:	46c8      	mov	r8, r9
 8000dc6:	46ae      	mov	lr, r5
 8000dc8:	d356      	bcc.n	8000e78 <__udivmoddi4+0x29c>
 8000dca:	d053      	beq.n	8000e74 <__udivmoddi4+0x298>
 8000dcc:	b156      	cbz	r6, 8000de4 <__udivmoddi4+0x208>
 8000dce:	ebb0 0208 	subs.w	r2, r0, r8
 8000dd2:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dda:	40ca      	lsrs	r2, r1
 8000ddc:	40cc      	lsrs	r4, r1
 8000dde:	4317      	orrs	r7, r2
 8000de0:	e9c6 7400 	strd	r7, r4, [r6]
 8000de4:	4618      	mov	r0, r3
 8000de6:	2100      	movs	r1, #0
 8000de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dec:	f1c3 0120 	rsb	r1, r3, #32
 8000df0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df4:	fa20 f201 	lsr.w	r2, r0, r1
 8000df8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dfc:	409d      	lsls	r5, r3
 8000dfe:	432a      	orrs	r2, r5
 8000e00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e04:	fa1f fe8c 	uxth.w	lr, ip
 8000e08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e0c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e10:	0c11      	lsrs	r1, r2, #16
 8000e12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e16:	fb00 f50e 	mul.w	r5, r0, lr
 8000e1a:	428d      	cmp	r5, r1
 8000e1c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x258>
 8000e22:	eb1c 0101 	adds.w	r1, ip, r1
 8000e26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2a:	d22f      	bcs.n	8000e8c <__udivmoddi4+0x2b0>
 8000e2c:	428d      	cmp	r5, r1
 8000e2e:	d92d      	bls.n	8000e8c <__udivmoddi4+0x2b0>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4461      	add	r1, ip
 8000e34:	1b49      	subs	r1, r1, r5
 8000e36:	b292      	uxth	r2, r2
 8000e38:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e3c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e44:	fb05 f10e 	mul.w	r1, r5, lr
 8000e48:	4291      	cmp	r1, r2
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x282>
 8000e4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e50:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e54:	d216      	bcs.n	8000e84 <__udivmoddi4+0x2a8>
 8000e56:	4291      	cmp	r1, r2
 8000e58:	d914      	bls.n	8000e84 <__udivmoddi4+0x2a8>
 8000e5a:	3d02      	subs	r5, #2
 8000e5c:	4462      	add	r2, ip
 8000e5e:	1a52      	subs	r2, r2, r1
 8000e60:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e64:	e738      	b.n	8000cd8 <__udivmoddi4+0xfc>
 8000e66:	4631      	mov	r1, r6
 8000e68:	4630      	mov	r0, r6
 8000e6a:	e708      	b.n	8000c7e <__udivmoddi4+0xa2>
 8000e6c:	4639      	mov	r1, r7
 8000e6e:	e6e6      	b.n	8000c3e <__udivmoddi4+0x62>
 8000e70:	4610      	mov	r0, r2
 8000e72:	e6fb      	b.n	8000c6c <__udivmoddi4+0x90>
 8000e74:	4548      	cmp	r0, r9
 8000e76:	d2a9      	bcs.n	8000dcc <__udivmoddi4+0x1f0>
 8000e78:	ebb9 0802 	subs.w	r8, r9, r2
 8000e7c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e80:	3b01      	subs	r3, #1
 8000e82:	e7a3      	b.n	8000dcc <__udivmoddi4+0x1f0>
 8000e84:	4645      	mov	r5, r8
 8000e86:	e7ea      	b.n	8000e5e <__udivmoddi4+0x282>
 8000e88:	462b      	mov	r3, r5
 8000e8a:	e794      	b.n	8000db6 <__udivmoddi4+0x1da>
 8000e8c:	4640      	mov	r0, r8
 8000e8e:	e7d1      	b.n	8000e34 <__udivmoddi4+0x258>
 8000e90:	46d0      	mov	r8, sl
 8000e92:	e77b      	b.n	8000d8c <__udivmoddi4+0x1b0>
 8000e94:	3d02      	subs	r5, #2
 8000e96:	4462      	add	r2, ip
 8000e98:	e732      	b.n	8000d00 <__udivmoddi4+0x124>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e70a      	b.n	8000cb4 <__udivmoddi4+0xd8>
 8000e9e:	4464      	add	r4, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e742      	b.n	8000d2a <__udivmoddi4+0x14e>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <usDelay>:
int dequeue(Queue *qPtr);
void getFront(Queue q);
int isEmptyQueue(Queue q);
void deleteQueue(Queue *qPtr);

void usDelay(uint16_t time){
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim5, 0);
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <usDelay+0x30>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER (&htim5) < time);
 8000eba:	bf00      	nop
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <usDelay+0x30>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ec2:	88fb      	ldrh	r3, [r7, #6]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d3f9      	bcc.n	8000ebc <usDelay+0x14>
}
 8000ec8:	bf00      	nop
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	200001c0 	.word	0x200001c0

08000edc <HCSR04_Read>:
uint32_t Difference = 0;
uint8_t Is_First_Captured = 0;	//1st value captured
uint8_t Distance = 5;

void HCSR04_Read (void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee6:	480b      	ldr	r0, [pc, #44]	; (8000f14 <HCSR04_Read+0x38>)
 8000ee8:	f002 fe72 	bl	8003bd0 <HAL_GPIO_WritePin>
	usDelay(10);  // wait for 10 us
 8000eec:	200a      	movs	r0, #10
 8000eee:	f7ff ffdb 	bl	8000ea8 <usDelay>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ef8:	4806      	ldr	r0, [pc, #24]	; (8000f14 <HCSR04_Read+0x38>)
 8000efa:	f002 fe69 	bl	8003bd0 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim5, TIM_IT_CC2);
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HCSR04_Read+0x3c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <HCSR04_Read+0x3c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f042 0204 	orr.w	r2, r2, #4
 8000f0c:	60da      	str	r2, [r3, #12]
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40020800 	.word	0x40020800
 8000f18:	200001c0 	.word	0x200001c0

08000f1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f20:	f002 fa80 	bl	8003424 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f24:	f000 f86e 	bl	8001004 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f28:	f000 fb66 	bl	80015f8 <MX_GPIO_Init>
  MX_TIM8_Init();
 8000f2c:	f000 fa90 	bl	8001450 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000f30:	f000 f992 	bl	8001258 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f34:	f000 f9e4 	bl	8001300 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000f38:	f000 fb34 	bl	80015a4 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000f3c:	f000 f8ee 	bl	800111c <MX_TIM1_Init>
  MX_I2C1_Init();
 8000f40:	f000 f8be 	bl	80010c0 <MX_I2C1_Init>
  MX_TIM5_Init();
 8000f44:	f000 fa30 	bl	80013a8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000f48:	f00a f84c 	bl	800afe4 <OLED_Init>
  gyroInit();
 8000f4c:	f009 fe10 	bl	800ab70 <gyroInit>
  HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 10);
 8000f50:	220a      	movs	r2, #10
 8000f52:	491a      	ldr	r1, [pc, #104]	; (8000fbc <main+0xa0>)
 8000f54:	481a      	ldr	r0, [pc, #104]	; (8000fc0 <main+0xa4>)
 8000f56:	f006 f850 	bl	8006ffa <HAL_UART_Receive_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);
 8000f5a:	2104      	movs	r1, #4
 8000f5c:	4819      	ldr	r0, [pc, #100]	; (8000fc4 <main+0xa8>)
 8000f5e:	f004 fca5 	bl	80058ac <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f62:	f006 fff9 	bl	8007f58 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f66:	4a18      	ldr	r2, [pc, #96]	; (8000fc8 <main+0xac>)
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4818      	ldr	r0, [pc, #96]	; (8000fcc <main+0xb0>)
 8000f6c:	f007 f83e 	bl	8007fec <osThreadNew>
 8000f70:	4603      	mov	r3, r0
 8000f72:	4a17      	ldr	r2, [pc, #92]	; (8000fd0 <main+0xb4>)
 8000f74:	6013      	str	r3, [r2, #0]

  /* creation of show */
  showHandle = osThreadNew(showMsg, NULL, &show_attributes);
 8000f76:	4a17      	ldr	r2, [pc, #92]	; (8000fd4 <main+0xb8>)
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4817      	ldr	r0, [pc, #92]	; (8000fd8 <main+0xbc>)
 8000f7c:	f007 f836 	bl	8007fec <osThreadNew>
 8000f80:	4603      	mov	r3, r0
 8000f82:	4a16      	ldr	r2, [pc, #88]	; (8000fdc <main+0xc0>)
 8000f84:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motors, NULL, &MotorTask_attributes);
 8000f86:	4a16      	ldr	r2, [pc, #88]	; (8000fe0 <main+0xc4>)
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4816      	ldr	r0, [pc, #88]	; (8000fe4 <main+0xc8>)
 8000f8c:	f007 f82e 	bl	8007fec <osThreadNew>
 8000f90:	4603      	mov	r3, r0
 8000f92:	4a15      	ldr	r2, [pc, #84]	; (8000fe8 <main+0xcc>)
 8000f94:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(encoder, NULL, &EncoderTask_attributes);
 8000f96:	4a15      	ldr	r2, [pc, #84]	; (8000fec <main+0xd0>)
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4815      	ldr	r0, [pc, #84]	; (8000ff0 <main+0xd4>)
 8000f9c:	f007 f826 	bl	8007fec <osThreadNew>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4a14      	ldr	r2, [pc, #80]	; (8000ff4 <main+0xd8>)
 8000fa4:	6013      	str	r3, [r2, #0]

  /* creation of GyroTask */
  GyroTaskHandle = osThreadNew(gryo_task, NULL, &GyroTask_attributes);
 8000fa6:	4a14      	ldr	r2, [pc, #80]	; (8000ff8 <main+0xdc>)
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4814      	ldr	r0, [pc, #80]	; (8000ffc <main+0xe0>)
 8000fac:	f007 f81e 	bl	8007fec <osThreadNew>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	4a13      	ldr	r2, [pc, #76]	; (8001000 <main+0xe4>)
 8000fb4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fb6:	f006 fff3 	bl	8007fa0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <main+0x9e>
 8000fbc:	200002ac 	.word	0x200002ac
 8000fc0:	20000250 	.word	0x20000250
 8000fc4:	200001c0 	.word	0x200001c0
 8000fc8:	0800bb0c 	.word	0x0800bb0c
 8000fcc:	080018cd 	.word	0x080018cd
 8000fd0:	20000298 	.word	0x20000298
 8000fd4:	0800bb30 	.word	0x0800bb30
 8000fd8:	08001919 	.word	0x08001919
 8000fdc:	2000029c 	.word	0x2000029c
 8000fe0:	0800bb54 	.word	0x0800bb54
 8000fe4:	08001971 	.word	0x08001971
 8000fe8:	200002a0 	.word	0x200002a0
 8000fec:	0800bb78 	.word	0x0800bb78
 8000ff0:	08002c55 	.word	0x08002c55
 8000ff4:	200002a4 	.word	0x200002a4
 8000ff8:	0800bb9c 	.word	0x0800bb9c
 8000ffc:	08002d61 	.word	0x08002d61
 8001000:	200002a8 	.word	0x200002a8

08001004 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b094      	sub	sp, #80	; 0x50
 8001008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100a:	f107 0320 	add.w	r3, r7, #32
 800100e:	2230      	movs	r2, #48	; 0x30
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f00a f94e 	bl	800b2b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001028:	2300      	movs	r3, #0
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <SystemClock_Config+0xb4>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	4a21      	ldr	r2, [pc, #132]	; (80010b8 <SystemClock_Config+0xb4>)
 8001032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001036:	6413      	str	r3, [r2, #64]	; 0x40
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <SystemClock_Config+0xb4>)
 800103a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001044:	2300      	movs	r3, #0
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <SystemClock_Config+0xb8>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a1b      	ldr	r2, [pc, #108]	; (80010bc <SystemClock_Config+0xb8>)
 800104e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	4b19      	ldr	r3, [pc, #100]	; (80010bc <SystemClock_Config+0xb8>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001060:	2302      	movs	r3, #2
 8001062:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001064:	2301      	movs	r3, #1
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001068:	2310      	movs	r3, #16
 800106a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800106c:	2300      	movs	r3, #0
 800106e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001070:	f107 0320 	add.w	r3, r7, #32
 8001074:	4618      	mov	r0, r3
 8001076:	f003 fe01 	bl	8004c7c <HAL_RCC_OscConfig>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001080:	f001 feda 	bl	8002e38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001084:	230f      	movs	r3, #15
 8001086:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001088:	2300      	movs	r3, #0
 800108a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f004 f864 	bl	800516c <HAL_RCC_ClockConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80010aa:	f001 fec5 	bl	8002e38 <Error_Handler>
  }
}
 80010ae:	bf00      	nop
 80010b0:	3750      	adds	r7, #80	; 0x50
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40007000 	.word	0x40007000

080010c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <MX_I2C1_Init+0x50>)
 80010c6:	4a13      	ldr	r2, [pc, #76]	; (8001114 <MX_I2C1_Init+0x54>)
 80010c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <MX_I2C1_Init+0x50>)
 80010cc:	4a12      	ldr	r2, [pc, #72]	; (8001118 <MX_I2C1_Init+0x58>)
 80010ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <MX_I2C1_Init+0x50>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <MX_I2C1_Init+0x50>)
 80010d8:	2200      	movs	r2, #0
 80010da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <MX_I2C1_Init+0x50>)
 80010de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e4:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <MX_I2C1_Init+0x50>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <MX_I2C1_Init+0x50>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010f0:	4b07      	ldr	r3, [pc, #28]	; (8001110 <MX_I2C1_Init+0x50>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <MX_I2C1_Init+0x50>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010fc:	4804      	ldr	r0, [pc, #16]	; (8001110 <MX_I2C1_Init+0x50>)
 80010fe:	f002 fd9b 	bl	8003c38 <HAL_I2C_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001108:	f001 fe96 	bl	8002e38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000094 	.word	0x20000094
 8001114:	40005400 	.word	0x40005400
 8001118:	000186a0 	.word	0x000186a0

0800111c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b096      	sub	sp, #88	; 0x58
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001122:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001130:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800113a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	611a      	str	r2, [r3, #16]
 800114a:	615a      	str	r2, [r3, #20]
 800114c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	2220      	movs	r2, #32
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f00a f8ad 	bl	800b2b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800115a:	4b3d      	ldr	r3, [pc, #244]	; (8001250 <MX_TIM1_Init+0x134>)
 800115c:	4a3d      	ldr	r2, [pc, #244]	; (8001254 <MX_TIM1_Init+0x138>)
 800115e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8001160:	4b3b      	ldr	r3, [pc, #236]	; (8001250 <MX_TIM1_Init+0x134>)
 8001162:	22a0      	movs	r2, #160	; 0xa0
 8001164:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001166:	4b3a      	ldr	r3, [pc, #232]	; (8001250 <MX_TIM1_Init+0x134>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800116c:	4b38      	ldr	r3, [pc, #224]	; (8001250 <MX_TIM1_Init+0x134>)
 800116e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001172:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001174:	4b36      	ldr	r3, [pc, #216]	; (8001250 <MX_TIM1_Init+0x134>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800117a:	4b35      	ldr	r3, [pc, #212]	; (8001250 <MX_TIM1_Init+0x134>)
 800117c:	2200      	movs	r2, #0
 800117e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001180:	4b33      	ldr	r3, [pc, #204]	; (8001250 <MX_TIM1_Init+0x134>)
 8001182:	2280      	movs	r2, #128	; 0x80
 8001184:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001186:	4832      	ldr	r0, [pc, #200]	; (8001250 <MX_TIM1_Init+0x134>)
 8001188:	f004 f9d0 	bl	800552c <HAL_TIM_Base_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001192:	f001 fe51 	bl	8002e38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001196:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800119c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011a0:	4619      	mov	r1, r3
 80011a2:	482b      	ldr	r0, [pc, #172]	; (8001250 <MX_TIM1_Init+0x134>)
 80011a4:	f005 f82c 	bl	8006200 <HAL_TIM_ConfigClockSource>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011ae:	f001 fe43 	bl	8002e38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011b2:	4827      	ldr	r0, [pc, #156]	; (8001250 <MX_TIM1_Init+0x134>)
 80011b4:	f004 fa09 	bl	80055ca <HAL_TIM_PWM_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80011be:	f001 fe3b 	bl	8002e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c2:	2300      	movs	r3, #0
 80011c4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011ce:	4619      	mov	r1, r3
 80011d0:	481f      	ldr	r0, [pc, #124]	; (8001250 <MX_TIM1_Init+0x134>)
 80011d2:	f005 fd55 	bl	8006c80 <HAL_TIMEx_MasterConfigSynchronization>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80011dc:	f001 fe2c 	bl	8002e38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e0:	2360      	movs	r3, #96	; 0x60
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011f0:	2300      	movs	r3, #0
 80011f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011f4:	2300      	movs	r3, #0
 80011f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fc:	220c      	movs	r2, #12
 80011fe:	4619      	mov	r1, r3
 8001200:	4813      	ldr	r0, [pc, #76]	; (8001250 <MX_TIM1_Init+0x134>)
 8001202:	f004 ff3b 	bl	800607c <HAL_TIM_PWM_ConfigChannel>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 800120c:	f001 fe14 	bl	8002e38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001214:	2300      	movs	r3, #0
 8001216:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001224:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001228:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	4619      	mov	r1, r3
 8001232:	4807      	ldr	r0, [pc, #28]	; (8001250 <MX_TIM1_Init+0x134>)
 8001234:	f005 fda0 	bl	8006d78 <HAL_TIMEx_ConfigBreakDeadTime>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800123e:	f001 fdfb 	bl	8002e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001242:	4803      	ldr	r0, [pc, #12]	; (8001250 <MX_TIM1_Init+0x134>)
 8001244:	f001 ffba 	bl	80031bc <HAL_TIM_MspPostInit>

}
 8001248:	bf00      	nop
 800124a:	3758      	adds	r7, #88	; 0x58
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200000e8 	.word	0x200000e8
 8001254:	40010000 	.word	0x40010000

08001258 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08c      	sub	sp, #48	; 0x30
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800125e:	f107 030c 	add.w	r3, r7, #12
 8001262:	2224      	movs	r2, #36	; 0x24
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f00a f824 	bl	800b2b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001274:	4b21      	ldr	r3, [pc, #132]	; (80012fc <MX_TIM2_Init+0xa4>)
 8001276:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800127a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800127c:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <MX_TIM2_Init+0xa4>)
 800127e:	2200      	movs	r2, #0
 8001280:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001282:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <MX_TIM2_Init+0xa4>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001288:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <MX_TIM2_Init+0xa4>)
 800128a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800128e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001290:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <MX_TIM2_Init+0xa4>)
 8001292:	2200      	movs	r2, #0
 8001294:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001296:	4b19      	ldr	r3, [pc, #100]	; (80012fc <MX_TIM2_Init+0xa4>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800129c:	2303      	movs	r3, #3
 800129e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012a0:	2300      	movs	r3, #0
 80012a2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012a4:	2301      	movs	r3, #1
 80012a6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80012ac:	230a      	movs	r3, #10
 80012ae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012b0:	2300      	movs	r3, #0
 80012b2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012b4:	2301      	movs	r3, #1
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	4619      	mov	r1, r3
 80012c6:	480d      	ldr	r0, [pc, #52]	; (80012fc <MX_TIM2_Init+0xa4>)
 80012c8:	f004 fc18 	bl	8005afc <HAL_TIM_Encoder_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80012d2:	f001 fdb1 	bl	8002e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	4619      	mov	r1, r3
 80012e2:	4806      	ldr	r0, [pc, #24]	; (80012fc <MX_TIM2_Init+0xa4>)
 80012e4:	f005 fccc 	bl	8006c80 <HAL_TIMEx_MasterConfigSynchronization>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80012ee:	f001 fda3 	bl	8002e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	3730      	adds	r7, #48	; 0x30
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000130 	.word	0x20000130

08001300 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08c      	sub	sp, #48	; 0x30
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001306:	f107 030c 	add.w	r3, r7, #12
 800130a:	2224      	movs	r2, #36	; 0x24
 800130c:	2100      	movs	r1, #0
 800130e:	4618      	mov	r0, r3
 8001310:	f009 ffd0 	bl	800b2b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800131c:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <MX_TIM3_Init+0xa0>)
 800131e:	4a21      	ldr	r2, [pc, #132]	; (80013a4 <MX_TIM3_Init+0xa4>)
 8001320:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001322:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <MX_TIM3_Init+0xa0>)
 8001324:	2200      	movs	r2, #0
 8001326:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001328:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <MX_TIM3_Init+0xa0>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800132e:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <MX_TIM3_Init+0xa0>)
 8001330:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001334:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001336:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <MX_TIM3_Init+0xa0>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133c:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <MX_TIM3_Init+0xa0>)
 800133e:	2200      	movs	r2, #0
 8001340:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001342:	2303      	movs	r3, #3
 8001344:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001346:	2300      	movs	r3, #0
 8001348:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800134a:	2301      	movs	r3, #1
 800134c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800134e:	2300      	movs	r3, #0
 8001350:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001352:	230a      	movs	r3, #10
 8001354:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001356:	2300      	movs	r3, #0
 8001358:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800135a:	2301      	movs	r3, #1
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800135e:	2300      	movs	r3, #0
 8001360:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001362:	230a      	movs	r3, #10
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001366:	f107 030c 	add.w	r3, r7, #12
 800136a:	4619      	mov	r1, r3
 800136c:	480c      	ldr	r0, [pc, #48]	; (80013a0 <MX_TIM3_Init+0xa0>)
 800136e:	f004 fbc5 	bl	8005afc <HAL_TIM_Encoder_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001378:	f001 fd5e 	bl	8002e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137c:	2300      	movs	r3, #0
 800137e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	4619      	mov	r1, r3
 8001388:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_TIM3_Init+0xa0>)
 800138a:	f005 fc79 	bl	8006c80 <HAL_TIMEx_MasterConfigSynchronization>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001394:	f001 fd50 	bl	8002e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	3730      	adds	r7, #48	; 0x30
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000178 	.word	0x20000178
 80013a4:	40000400 	.word	0x40000400

080013a8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ae:	f107 0310 	add.w	r3, r7, #16
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013b8:	463b      	mov	r3, r7
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80013c4:	4b20      	ldr	r3, [pc, #128]	; (8001448 <MX_TIM5_Init+0xa0>)
 80013c6:	4a21      	ldr	r2, [pc, #132]	; (800144c <MX_TIM5_Init+0xa4>)
 80013c8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16-1;
 80013ca:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <MX_TIM5_Init+0xa0>)
 80013cc:	220f      	movs	r2, #15
 80013ce:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d0:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <MX_TIM5_Init+0xa0>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80013d6:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <MX_TIM5_Init+0xa0>)
 80013d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013dc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013de:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <MX_TIM5_Init+0xa0>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e4:	4b18      	ldr	r3, [pc, #96]	; (8001448 <MX_TIM5_Init+0xa0>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80013ea:	4817      	ldr	r0, [pc, #92]	; (8001448 <MX_TIM5_Init+0xa0>)
 80013ec:	f004 fa0e 	bl	800580c <HAL_TIM_IC_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80013f6:	f001 fd1f 	bl	8002e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001402:	f107 0310 	add.w	r3, r7, #16
 8001406:	4619      	mov	r1, r3
 8001408:	480f      	ldr	r0, [pc, #60]	; (8001448 <MX_TIM5_Init+0xa0>)
 800140a:	f005 fc39 	bl	8006c80 <HAL_TIMEx_MasterConfigSynchronization>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001414:	f001 fd10 	bl	8002e38 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001418:	2300      	movs	r3, #0
 800141a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800141c:	2301      	movs	r3, #1
 800141e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001420:	2300      	movs	r3, #0
 8001422:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001428:	463b      	mov	r3, r7
 800142a:	2204      	movs	r2, #4
 800142c:	4619      	mov	r1, r3
 800142e:	4806      	ldr	r0, [pc, #24]	; (8001448 <MX_TIM5_Init+0xa0>)
 8001430:	f004 fd88 	bl	8005f44 <HAL_TIM_IC_ConfigChannel>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 800143a:	f001 fcfd 	bl	8002e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800143e:	bf00      	nop
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200001c0 	.word	0x200001c0
 800144c:	40000c00 	.word	0x40000c00

08001450 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b096      	sub	sp, #88	; 0x58
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001456:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001464:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800146e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
 800147c:	611a      	str	r2, [r3, #16]
 800147e:	615a      	str	r2, [r3, #20]
 8001480:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	2220      	movs	r2, #32
 8001486:	2100      	movs	r1, #0
 8001488:	4618      	mov	r0, r3
 800148a:	f009 ff13 	bl	800b2b4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800148e:	4b43      	ldr	r3, [pc, #268]	; (800159c <MX_TIM8_Init+0x14c>)
 8001490:	4a43      	ldr	r2, [pc, #268]	; (80015a0 <MX_TIM8_Init+0x150>)
 8001492:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001494:	4b41      	ldr	r3, [pc, #260]	; (800159c <MX_TIM8_Init+0x14c>)
 8001496:	2200      	movs	r2, #0
 8001498:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149a:	4b40      	ldr	r3, [pc, #256]	; (800159c <MX_TIM8_Init+0x14c>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80014a0:	4b3e      	ldr	r3, [pc, #248]	; (800159c <MX_TIM8_Init+0x14c>)
 80014a2:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80014a6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a8:	4b3c      	ldr	r3, [pc, #240]	; (800159c <MX_TIM8_Init+0x14c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80014ae:	4b3b      	ldr	r3, [pc, #236]	; (800159c <MX_TIM8_Init+0x14c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b4:	4b39      	ldr	r3, [pc, #228]	; (800159c <MX_TIM8_Init+0x14c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80014ba:	4838      	ldr	r0, [pc, #224]	; (800159c <MX_TIM8_Init+0x14c>)
 80014bc:	f004 f836 	bl	800552c <HAL_TIM_Base_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80014c6:	f001 fcb7 	bl	8002e38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80014d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014d4:	4619      	mov	r1, r3
 80014d6:	4831      	ldr	r0, [pc, #196]	; (800159c <MX_TIM8_Init+0x14c>)
 80014d8:	f004 fe92 	bl	8006200 <HAL_TIM_ConfigClockSource>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80014e2:	f001 fca9 	bl	8002e38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80014e6:	482d      	ldr	r0, [pc, #180]	; (800159c <MX_TIM8_Init+0x14c>)
 80014e8:	f004 f86f 	bl	80055ca <HAL_TIM_PWM_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80014f2:	f001 fca1 	bl	8002e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f6:	2300      	movs	r3, #0
 80014f8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80014fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001502:	4619      	mov	r1, r3
 8001504:	4825      	ldr	r0, [pc, #148]	; (800159c <MX_TIM8_Init+0x14c>)
 8001506:	f005 fbbb 	bl	8006c80 <HAL_TIMEx_MasterConfigSynchronization>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001510:	f001 fc92 	bl	8002e38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001514:	2360      	movs	r3, #96	; 0x60
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800151c:	2300      	movs	r3, #0
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001520:	2300      	movs	r3, #0
 8001522:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001528:	2300      	movs	r3, #0
 800152a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800152c:	2300      	movs	r3, #0
 800152e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001534:	2200      	movs	r2, #0
 8001536:	4619      	mov	r1, r3
 8001538:	4818      	ldr	r0, [pc, #96]	; (800159c <MX_TIM8_Init+0x14c>)
 800153a:	f004 fd9f 	bl	800607c <HAL_TIM_PWM_ConfigChannel>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001544:	f001 fc78 	bl	8002e38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154c:	2204      	movs	r2, #4
 800154e:	4619      	mov	r1, r3
 8001550:	4812      	ldr	r0, [pc, #72]	; (800159c <MX_TIM8_Init+0x14c>)
 8001552:	f004 fd93 	bl	800607c <HAL_TIM_PWM_ConfigChannel>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 800155c:	f001 fc6c 	bl	8002e38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001574:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001578:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800157a:	2300      	movs	r3, #0
 800157c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	4619      	mov	r1, r3
 8001582:	4806      	ldr	r0, [pc, #24]	; (800159c <MX_TIM8_Init+0x14c>)
 8001584:	f005 fbf8 	bl	8006d78 <HAL_TIMEx_ConfigBreakDeadTime>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800158e:	f001 fc53 	bl	8002e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001592:	bf00      	nop
 8001594:	3758      	adds	r7, #88	; 0x58
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000208 	.word	0x20000208
 80015a0:	40010400 	.word	0x40010400

080015a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <MX_USART3_UART_Init+0x4c>)
 80015aa:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <MX_USART3_UART_Init+0x50>)
 80015ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <MX_USART3_UART_Init+0x4c>)
 80015b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <MX_USART3_UART_Init+0x4c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <MX_USART3_UART_Init+0x4c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <MX_USART3_UART_Init+0x4c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_USART3_UART_Init+0x4c>)
 80015ca:	220c      	movs	r2, #12
 80015cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <MX_USART3_UART_Init+0x4c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_USART3_UART_Init+0x4c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015da:	4805      	ldr	r0, [pc, #20]	; (80015f0 <MX_USART3_UART_Init+0x4c>)
 80015dc:	f005 fc32 	bl	8006e44 <HAL_UART_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015e6:	f001 fc27 	bl	8002e38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000250 	.word	0x20000250
 80015f4:	40004800 	.word	0x40004800

080015f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	; 0x28
 80015fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fe:	f107 0314 	add.w	r3, r7, #20
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
 800160c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	4b42      	ldr	r3, [pc, #264]	; (800171c <MX_GPIO_Init+0x124>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a41      	ldr	r2, [pc, #260]	; (800171c <MX_GPIO_Init+0x124>)
 8001618:	f043 0310 	orr.w	r3, r3, #16
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b3f      	ldr	r3, [pc, #252]	; (800171c <MX_GPIO_Init+0x124>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0310 	and.w	r3, r3, #16
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	4b3b      	ldr	r3, [pc, #236]	; (800171c <MX_GPIO_Init+0x124>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4a3a      	ldr	r2, [pc, #232]	; (800171c <MX_GPIO_Init+0x124>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4b38      	ldr	r3, [pc, #224]	; (800171c <MX_GPIO_Init+0x124>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	4b34      	ldr	r3, [pc, #208]	; (800171c <MX_GPIO_Init+0x124>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a33      	ldr	r2, [pc, #204]	; (800171c <MX_GPIO_Init+0x124>)
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b31      	ldr	r3, [pc, #196]	; (800171c <MX_GPIO_Init+0x124>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	4b2d      	ldr	r3, [pc, #180]	; (800171c <MX_GPIO_Init+0x124>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a2c      	ldr	r2, [pc, #176]	; (800171c <MX_GPIO_Init+0x124>)
 800166c:	f043 0302 	orr.w	r3, r3, #2
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b2a      	ldr	r3, [pc, #168]	; (800171c <MX_GPIO_Init+0x124>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 800167e:	2200      	movs	r2, #0
 8001680:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8001684:	4826      	ldr	r0, [pc, #152]	; (8001720 <MX_GPIO_Init+0x128>)
 8001686:	f002 faa3 	bl	8003bd0 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 800168a:	2200      	movs	r2, #0
 800168c:	213c      	movs	r1, #60	; 0x3c
 800168e:	4825      	ldr	r0, [pc, #148]	; (8001724 <MX_GPIO_Init+0x12c>)
 8001690:	f002 fa9e 	bl	8003bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001694:	2200      	movs	r2, #0
 8001696:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800169a:	4823      	ldr	r0, [pc, #140]	; (8001728 <MX_GPIO_Init+0x130>)
 800169c:	f002 fa98 	bl	8003bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 80016a0:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 80016a4:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a6:	2301      	movs	r3, #1
 80016a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ae:	2300      	movs	r3, #0
 80016b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	4619      	mov	r1, r3
 80016b8:	4819      	ldr	r0, [pc, #100]	; (8001720 <MX_GPIO_Init+0x128>)
 80016ba:	f002 f8ed 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin;
 80016be:	230c      	movs	r3, #12
 80016c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c2:	2301      	movs	r3, #1
 80016c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ca:	2302      	movs	r3, #2
 80016cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4619      	mov	r1, r3
 80016d4:	4813      	ldr	r0, [pc, #76]	; (8001724 <MX_GPIO_Init+0x12c>)
 80016d6:	f002 f8df 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = BIN1_Pin|BIN2_Pin;
 80016da:	2330      	movs	r3, #48	; 0x30
 80016dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016de:	2301      	movs	r3, #1
 80016e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2300      	movs	r3, #0
 80016e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	4619      	mov	r1, r3
 80016f0:	480c      	ldr	r0, [pc, #48]	; (8001724 <MX_GPIO_Init+0x12c>)
 80016f2:	f002 f8d1 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 80016f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fc:	2301      	movs	r3, #1
 80016fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	4619      	mov	r1, r3
 800170e:	4806      	ldr	r0, [pc, #24]	; (8001728 <MX_GPIO_Init+0x130>)
 8001710:	f002 f8c2 	bl	8003898 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001714:	bf00      	nop
 8001716:	3728      	adds	r7, #40	; 0x28
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40023800 	.word	0x40023800
 8001720:	40021000 	.word	0x40021000
 8001724:	40020000 	.word	0x40020000
 8001728:	40020800 	.word	0x40020800

0800172c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]

	UNUSED(huart);

	//enqueue(&q,aRxBuffer);

	HAL_UART_Transmit(&huart3,(uint8_t *) aRxBuffer,10,0xFFFF);
 8001734:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001738:	220a      	movs	r2, #10
 800173a:	4906      	ldr	r1, [pc, #24]	; (8001754 <HAL_UART_RxCpltCallback+0x28>)
 800173c:	4806      	ldr	r0, [pc, #24]	; (8001758 <HAL_UART_RxCpltCallback+0x2c>)
 800173e:	f005 fbd1 	bl	8006ee4 <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001742:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001746:	4805      	ldr	r0, [pc, #20]	; (800175c <HAL_UART_RxCpltCallback+0x30>)
 8001748:	f002 fa5b 	bl	8003c02 <HAL_GPIO_TogglePin>
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	200002ac 	.word	0x200002ac
 8001758:	20000250 	.word	0x20000250
 800175c:	40021000 	.word	0x40021000

08001760 <reset_motorVal>:



//linked list code
void reset_motorVal(){
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
	// Reset Values
	frontback = 'w';	// Front/back character
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <reset_motorVal+0x28>)
 8001766:	2277      	movs	r2, #119	; 0x77
 8001768:	701a      	strb	r2, [r3, #0]
	fb_speed = '0';	// Front/back speed
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <reset_motorVal+0x2c>)
 800176c:	2230      	movs	r2, #48	; 0x30
 800176e:	701a      	strb	r2, [r3, #0]
	leftright = 'a';	// Left/right character
 8001770:	4b07      	ldr	r3, [pc, #28]	; (8001790 <reset_motorVal+0x30>)
 8001772:	2261      	movs	r2, #97	; 0x61
 8001774:	701a      	strb	r2, [r3, #0]
	lr_speed = '0';	// Left/right speed
 8001776:	4b07      	ldr	r3, [pc, #28]	; (8001794 <reset_motorVal+0x34>)
 8001778:	2230      	movs	r2, #48	; 0x30
 800177a:	701a      	strb	r2, [r3, #0]
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20000000 	.word	0x20000000
 800178c:	20000001 	.word	0x20000001
 8001790:	20000002 	.word	0x20000002
 8001794:	20000003 	.word	0x20000003

08001798 <enqueue>:

//input stuff into the queue
void enqueue(Queue *qPtr, uint8_t msg[4]){
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
    QueueNode *newNode;
    newNode = (QueueNode *) malloc(sizeof(QueueNode));
 80017a2:	2008      	movs	r0, #8
 80017a4:	f009 fcaa 	bl	800b0fc <malloc>
 80017a8:	4603      	mov	r3, r0
 80017aa:	60bb      	str	r3, [r7, #8]
    for(int i=0; i<4; i++){
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	e00b      	b.n	80017ca <enqueue+0x32>
        newNode->msg[i] = msg[i];
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	4413      	add	r3, r2
 80017b8:	7819      	ldrb	r1, [r3, #0]
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4413      	add	r3, r2
 80017c0:	460a      	mov	r2, r1
 80017c2:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<4; i++){
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	3301      	adds	r3, #1
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	ddf0      	ble.n	80017b2 <enqueue+0x1a>
    }
    newNode->next = NULL;
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	2200      	movs	r2, #0
 80017d4:	605a      	str	r2, [r3, #4]

    if(isEmptyQueue(*qPtr))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017dc:	f000 f864 	bl	80018a8 <isEmptyQueue>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d003      	beq.n	80017ee <enqueue+0x56>
        qPtr->head=newNode;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68ba      	ldr	r2, [r7, #8]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	e003      	b.n	80017f6 <enqueue+0x5e>
    else
        qPtr->tail->next = newNode;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	605a      	str	r2, [r3, #4]

    qPtr->tail = newNode;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68ba      	ldr	r2, [r7, #8]
 80017fa:	609a      	str	r2, [r3, #8]
    qPtr->size++;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	1c5a      	adds	r2, r3, #1
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	601a      	str	r2, [r3, #0]
}
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <dequeue>:
int dequeue(Queue *qPtr){
 800180e:	b580      	push	{r7, lr}
 8001810:	b084      	sub	sp, #16
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
    if(qPtr==NULL || qPtr->head==NULL){ //Queue is empty or NULL pointer
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <dequeue+0x16>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <dequeue+0x1a>
        return 0;
 8001824:	2300      	movs	r3, #0
 8001826:	e017      	b.n	8001858 <dequeue+0x4a>
    }
    else{
       QueueNode *temp = qPtr->head;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	60fb      	str	r3, [r7, #12]
       qPtr->head = qPtr->head->next;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	605a      	str	r2, [r3, #4]
       if(qPtr->head == NULL) //Queue is emptied
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d102      	bne.n	8001846 <dequeue+0x38>
           qPtr->tail = NULL;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]

       free(temp);
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f009 fc60 	bl	800b10c <free>
       qPtr->size--;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	1e5a      	subs	r2, r3, #1
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	601a      	str	r2, [r3, #0]
       return 1;
 8001856:	2301      	movs	r3, #1
    }
}
 8001858:	4618      	mov	r0, r3
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <getFront>:

//get the front of the queue (not sure if working)
void getFront(Queue q){
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        frontback = (uint8_t)(q.head->msg[0]);
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	781a      	ldrb	r2, [r3, #0]
 8001870:	4b09      	ldr	r3, [pc, #36]	; (8001898 <getFront+0x38>)
 8001872:	701a      	strb	r2, [r3, #0]
        fb_speed = (uint8_t)(q.head->msg[1]);
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	785a      	ldrb	r2, [r3, #1]
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <getFront+0x3c>)
 800187a:	701a      	strb	r2, [r3, #0]
        leftright = (uint8_t)(q.head->msg[2]);
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	789a      	ldrb	r2, [r3, #2]
 8001880:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <getFront+0x40>)
 8001882:	701a      	strb	r2, [r3, #0]
        lr_speed = (uint8_t)(q.head->msg[3]);
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	78da      	ldrb	r2, [r3, #3]
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <getFront+0x44>)
 800188a:	701a      	strb	r2, [r3, #0]
}
 800188c:	bf00      	nop
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	20000000 	.word	0x20000000
 800189c:	20000001 	.word	0x20000001
 80018a0:	20000002 	.word	0x20000002
 80018a4:	20000003 	.word	0x20000003

080018a8 <isEmptyQueue>:

//check if queue is empty (output 1 if empty, 0 if not empty)
int isEmptyQueue(Queue q){
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if(q.size==0) return 1;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <isEmptyQueue+0x16>
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <isEmptyQueue+0x18>
    else return 0;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  uint8_t ch = 'A';
 80018d4:	2341      	movs	r3, #65	; 0x41
 80018d6:	73fb      	strb	r3, [r7, #15]
  for(;;)
  {
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch,1, 0xFFFF);
 80018d8:	f107 010f 	add.w	r1, r7, #15
 80018dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018e0:	2201      	movs	r2, #1
 80018e2:	480b      	ldr	r0, [pc, #44]	; (8001910 <StartDefaultTask+0x44>)
 80018e4:	f005 fafe 	bl	8006ee4 <HAL_UART_Transmit>
	if(ch<'Z')
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
 80018ea:	2b59      	cmp	r3, #89	; 0x59
 80018ec:	d804      	bhi.n	80018f8 <StartDefaultTask+0x2c>
		ch++;
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
 80018f0:	3301      	adds	r3, #1
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	73fb      	strb	r3, [r7, #15]
 80018f6:	e001      	b.n	80018fc <StartDefaultTask+0x30>
	else ch = 'A';
 80018f8:	2341      	movs	r3, #65	; 0x41
 80018fa:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80018fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001900:	4804      	ldr	r0, [pc, #16]	; (8001914 <StartDefaultTask+0x48>)
 8001902:	f002 f97e 	bl	8003c02 <HAL_GPIO_TogglePin>
	osDelay(1000);
 8001906:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800190a:	f006 fc01 	bl	8008110 <osDelay>
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch,1, 0xFFFF);
 800190e:	e7e3      	b.n	80018d8 <StartDefaultTask+0xc>
 8001910:	20000250 	.word	0x20000250
 8001914:	40021000 	.word	0x40021000

08001918 <showMsg>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_showMsg */
void showMsg(void *argument)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b088      	sub	sp, #32
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN showMsg */
  uint8_t test[20] = "testing\0";
 8001920:	4a10      	ldr	r2, [pc, #64]	; (8001964 <showMsg+0x4c>)
 8001922:	f107 030c 	add.w	r3, r7, #12
 8001926:	ca07      	ldmia	r2, {r0, r1, r2}
 8001928:	c303      	stmia	r3!, {r0, r1}
 800192a:	701a      	strb	r2, [r3, #0]
 800192c:	f107 0315 	add.w	r3, r7, #21
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	f8c3 2007 	str.w	r2, [r3, #7]

  /* Infinite loop */
  for(;;)
  {
   sprintf(test, "%s\0", aRxBuffer);
 800193a:	f107 030c 	add.w	r3, r7, #12
 800193e:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <showMsg+0x50>)
 8001940:	490a      	ldr	r1, [pc, #40]	; (800196c <showMsg+0x54>)
 8001942:	4618      	mov	r0, r3
 8001944:	f009 fc96 	bl	800b274 <siprintf>
   OLED_ShowString(10,20,test);
 8001948:	f107 030c 	add.w	r3, r7, #12
 800194c:	461a      	mov	r2, r3
 800194e:	2114      	movs	r1, #20
 8001950:	200a      	movs	r0, #10
 8001952:	f009 fb15 	bl	800af80 <OLED_ShowString>
   OLED_Refresh_Gram();
 8001956:	f009 f99f 	bl	800ac98 <OLED_Refresh_Gram>
   osDelay(1000);
 800195a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800195e:	f006 fbd7 	bl	8008110 <osDelay>
   sprintf(test, "%s\0", aRxBuffer);
 8001962:	e7ea      	b.n	800193a <showMsg+0x22>
 8001964:	0800bab8 	.word	0x0800bab8
 8001968:	200002ac 	.word	0x200002ac
 800196c:	0800bab4 	.word	0x0800bab4

08001970 <motors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motors */
void motors(void *argument)
{
 8001970:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001974:	b09e      	sub	sp, #120	; 0x78
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN motor */
	uint16_t servo_max = 5;		// Servo_max * (0-9) = servo_value
 800197a:	2305      	movs	r3, #5
 800197c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

	// For differential steering
	double motor_offset_r = 1;
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	4bb8      	ldr	r3, [pc, #736]	; (8001c68 <motors+0x2f8>)
 8001986:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	double motor_offset_l = 1;
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	4bb6      	ldr	r3, [pc, #728]	; (8001c68 <motors+0x2f8>)
 8001990:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

	uint16_t pwmVal_motor = 0;	// Current motor pwm value
 8001994:	2300      	movs	r3, #0
 8001996:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	uint16_t motor_min = 1000;// Min value for pwm to complete 2 instruction without stopping
 800199a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800199e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	uint16_t motor_increment = 100;
 80019a2:	2364      	movs	r3, #100	; 0x64
 80019a4:	87fb      	strh	r3, [r7, #62]	; 0x3e

	uint16_t motor_reference;	// Reference pwm value for motor
	uint32_t target_dist;	// Distance to travel

	// PID Values
	uint8_t kp = 3;
 80019a6:	2303      	movs	r3, #3
 80019a8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	uint8_t ki = 0.8;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a

	uint8_t kp_back = 2;
 80019b2:	2302      	movs	r3, #2
 80019b4:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	// Distance Values
	uint8_t grad = 160;
 80019b8:	23a0      	movs	r3, #160	; 0xa0
 80019ba:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	uint8_t y_intercept = 55;
 80019be:	2337      	movs	r3, #55	; 0x37
 80019c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	int16_t eintegral = 0;	// Integral error
 80019c4:	2300      	movs	r3, #0
 80019c6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	int32_t err;			// To total error for Integral
	int back_angle_threshold;

	// Set servo value to centre
	uint8_t servo_val = pwmVal_servo;
 80019ca:	4ba8      	ldr	r3, [pc, #672]	; (8001c6c <motors+0x2fc>)
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	// Adds to servo middle value to find the goddamn pictures
	uint8_t search_dir = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80019d8:	2100      	movs	r1, #0
 80019da:	48a5      	ldr	r0, [pc, #660]	; (8001c70 <motors+0x300>)
 80019dc:	f003 fe4e 	bl	800567c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80019e0:	2104      	movs	r1, #4
 80019e2:	48a3      	ldr	r0, [pc, #652]	; (8001c70 <motors+0x300>)
 80019e4:	f003 fe4a 	bl	800567c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80019e8:	210c      	movs	r1, #12
 80019ea:	48a2      	ldr	r0, [pc, #648]	; (8001c74 <motors+0x304>)
 80019ec:	f003 fe46 	bl	800567c <HAL_TIM_PWM_Start>

	int turn_angle;
	int stuck;
	// Initialize your queue
	Queue q = { 0, NULL, NULL };
 80019f0:	2300      	movs	r3, #0
 80019f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80019f4:	2300      	movs	r3, #0
 80019f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019f8:	2300      	movs	r3, #0
 80019fa:	633b      	str	r3, [r7, #48]	; 0x30
	// msg[1] - Distance back and front
	// msg[2] - Left/Right instruction ('a' for left, 'd' for right, '0' for center)
	// msg[3] - Speed for turning

	// Create instructions
	uint8_t stop[] = {'k', '0', '0', '0'}; // Stop
 80019fc:	4b9e      	ldr	r3, [pc, #632]	; (8001c78 <motors+0x308>)
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
	//uint8_t F3[] = {'w', '1', '0', '0'}; // Move forward with speed level 3 and turn left with speed level 4
	//uint8_t F4[] = {'w', '0', '0','0'}; // Move forward with speed level 3 and turn left with speed level 4
	uint8_t F3[] = {'w', '5', 'a','7'}; // Move forward with speed level 3 and turn left with speed level 4
 8001a00:	4b9e      	ldr	r3, [pc, #632]	; (8001c7c <motors+0x30c>)
 8001a02:	623b      	str	r3, [r7, #32]
	uint8_t F4[] = {'w', '5', 'a','8'}; // Move forward with speed level 3 and turn left with speed level 4
 8001a04:	4b9e      	ldr	r3, [pc, #632]	; (8001c80 <motors+0x310>)
 8001a06:	61fb      	str	r3, [r7, #28]

	// Enqueue the instructions
	enqueue(&q,stop);
 8001a08:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001a0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a10:	4611      	mov	r1, r2
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff fec0 	bl	8001798 <enqueue>
	enqueue(&q, F4);
 8001a18:	f107 021c 	add.w	r2, r7, #28
 8001a1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a20:	4611      	mov	r1, r2
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff feb8 	bl	8001798 <enqueue>
	enqueue(&q,stop);
 8001a28:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001a2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a30:	4611      	mov	r1, r2
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff feb0 	bl	8001798 <enqueue>
	enqueue(&q, F4);
 8001a38:	f107 021c 	add.w	r2, r7, #28
 8001a3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a40:	4611      	mov	r1, r2
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff fea8 	bl	8001798 <enqueue>
	//enqueue(&q, F5);
	//enqueue(&q, F6);

	/* Infinite loop */
	for (;;) {
		if (isEmptyQueue(q) != 1) {
 8001a48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a4c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a50:	f7ff ff2a 	bl	80018a8 <isEmptyQueue>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	f001 80d1 	beq.w	8002bfe <motors+0x128e>
			stuck = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	64bb      	str	r3, [r7, #72]	; 0x48
			uint8_t hello[20];

			// Setting values according to queue head
			getFront(q);
 8001a60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a64:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a68:	f7ff fefa 	bl	8001860 <getFront>
			// Reset Encoder distance measurement
			encoder_dist = 0;
 8001a6c:	4b85      	ldr	r3, [pc, #532]	; (8001c84 <motors+0x314>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
			// Integral error
			eintegral = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

			// Default: Start with acceleration
			accelerate = 1;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			target_dist = (int) ((fb_speed - 48) * grad - y_intercept);
 8001a7e:	4b82      	ldr	r3, [pc, #520]	; (8001c88 <motors+0x318>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	3b30      	subs	r3, #48	; 0x30
 8001a84:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8001a88:	fb03 f202 	mul.w	r2, r3, r2
 8001a8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (target_dist <= 0)
 8001a94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <motors+0x12e>
				target_dist = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	65fb      	str	r3, [r7, #92]	; 0x5c

			// Display direction of movement
			sprintf(hello, "Dir %c : %3d\0", frontback, (fb_speed - 48));
 8001a9e:	4b7b      	ldr	r3, [pc, #492]	; (8001c8c <motors+0x31c>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	4b78      	ldr	r3, [pc, #480]	; (8001c88 <motors+0x318>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	3b30      	subs	r3, #48	; 0x30
 8001aaa:	f107 0008 	add.w	r0, r7, #8
 8001aae:	4978      	ldr	r1, [pc, #480]	; (8001c90 <motors+0x320>)
 8001ab0:	f009 fbe0 	bl	800b274 <siprintf>
			OLED_ShowString(10, 30, hello);
 8001ab4:	f107 0308 	add.w	r3, r7, #8
 8001ab8:	461a      	mov	r2, r3
 8001aba:	211e      	movs	r1, #30
 8001abc:	200a      	movs	r0, #10
 8001abe:	f009 fa5f 	bl	800af80 <OLED_ShowString>

			// Check if moving straight or turn
			if (lr_speed == '0') {
 8001ac2:	4b74      	ldr	r3, [pc, #464]	; (8001c94 <motors+0x324>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b30      	cmp	r3, #48	; 0x30
 8001ac8:	d104      	bne.n	8001ad4 <motors+0x164>
				//Move faster if straight
				motor_reference = 2800;
 8001aca:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8001ace:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8001ad2:	e003      	b.n	8001adc <motors+0x16c>
			}

			else
				motor_reference = 1600;
 8001ad4:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8001ad8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

			// Turn Servo to desired position
			// Centre - offset for left turn
			if (leftright == 'a') {
 8001adc:	4b6e      	ldr	r3, [pc, #440]	; (8001c98 <motors+0x328>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b61      	cmp	r3, #97	; 0x61
 8001ae2:	d159      	bne.n	8001b98 <motors+0x228>
				// Decrease in servo's position from center
				// -48 to convert ASCII to integer
				// servo_max declared at 5
				htim1.Instance->CCR4 = pwmVal_servo - 1.1 * (lr_speed - 48) * servo_max;
 8001ae4:	4b61      	ldr	r3, [pc, #388]	; (8001c6c <motors+0x2fc>)
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fd13 	bl	8000514 <__aeabi_i2d>
 8001aee:	4604      	mov	r4, r0
 8001af0:	460d      	mov	r5, r1
 8001af2:	4b68      	ldr	r3, [pc, #416]	; (8001c94 <motors+0x324>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	3b30      	subs	r3, #48	; 0x30
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fd0b 	bl	8000514 <__aeabi_i2d>
 8001afe:	a354      	add	r3, pc, #336	; (adr r3, 8001c50 <motors+0x2e0>)
 8001b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b04:	f7fe fd70 	bl	80005e8 <__aeabi_dmul>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4690      	mov	r8, r2
 8001b0e:	4699      	mov	r9, r3
 8001b10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7fe fcfd 	bl	8000514 <__aeabi_i2d>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4640      	mov	r0, r8
 8001b20:	4649      	mov	r1, r9
 8001b22:	f7fe fd61 	bl	80005e8 <__aeabi_dmul>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	4629      	mov	r1, r5
 8001b2e:	f7fe fba3 	bl	8000278 <__aeabi_dsub>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	494f      	ldr	r1, [pc, #316]	; (8001c74 <motors+0x304>)
 8001b38:	680c      	ldr	r4, [r1, #0]
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f7ff f815 	bl	8000b6c <__aeabi_d2uiz>
 8001b42:	4603      	mov	r3, r0
 8001b44:	6423      	str	r3, [r4, #64]	; 0x40
				// right motor offset
				// right motor spins more due to differential steering
				motor_offset_r = 0.03 * (lr_speed - 48) + 1;
 8001b46:	4b53      	ldr	r3, [pc, #332]	; (8001c94 <motors+0x324>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	3b30      	subs	r3, #48	; 0x30
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe fce1 	bl	8000514 <__aeabi_i2d>
 8001b52:	a341      	add	r3, pc, #260	; (adr r3, 8001c58 <motors+0x2e8>)
 8001b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b58:	f7fe fd46 	bl	80005e8 <__aeabi_dmul>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4610      	mov	r0, r2
 8001b62:	4619      	mov	r1, r3
 8001b64:	f04f 0200 	mov.w	r2, #0
 8001b68:	4b3f      	ldr	r3, [pc, #252]	; (8001c68 <motors+0x2f8>)
 8001b6a:	f7fe fb87 	bl	800027c <__adddf3>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				motor_offset_l = 1;
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	4b3b      	ldr	r3, [pc, #236]	; (8001c68 <motors+0x2f8>)
 8001b7c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

				// Front Gyro threshold
				if (frontback == 'w')
 8001b80:	4b42      	ldr	r3, [pc, #264]	; (8001c8c <motors+0x31c>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b77      	cmp	r3, #119	; 0x77
 8001b86:	d103      	bne.n	8001b90 <motors+0x220>
					// if traveling forward then angle = left turn angle
					turn_angle = turn_angle_l;
 8001b88:	4b44      	ldr	r3, [pc, #272]	; (8001c9c <motors+0x32c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b8e:	e08c      	b.n	8001caa <motors+0x33a>
				// Back Gyro threshold
				else
					// angle = right turn angle
					turn_angle = turn_angle_r;
 8001b90:	4b43      	ldr	r3, [pc, #268]	; (8001ca0 <motors+0x330>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b96:	e088      	b.n	8001caa <motors+0x33a>

			} else if (leftright == 'd') {
 8001b98:	4b3f      	ldr	r3, [pc, #252]	; (8001c98 <motors+0x328>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b64      	cmp	r3, #100	; 0x64
 8001b9e:	f040 8084 	bne.w	8001caa <motors+0x33a>
				htim1.Instance->CCR4 = pwmVal_servo + 1.73 * (lr_speed - 48) * servo_max;
 8001ba2:	4b32      	ldr	r3, [pc, #200]	; (8001c6c <motors+0x2fc>)
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fcb4 	bl	8000514 <__aeabi_i2d>
 8001bac:	4604      	mov	r4, r0
 8001bae:	460d      	mov	r5, r1
 8001bb0:	4b38      	ldr	r3, [pc, #224]	; (8001c94 <motors+0x324>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	3b30      	subs	r3, #48	; 0x30
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe fcac 	bl	8000514 <__aeabi_i2d>
 8001bbc:	a328      	add	r3, pc, #160	; (adr r3, 8001c60 <motors+0x2f0>)
 8001bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc2:	f7fe fd11 	bl	80005e8 <__aeabi_dmul>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4690      	mov	r8, r2
 8001bcc:	4699      	mov	r9, r3
 8001bce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7fe fc9e 	bl	8000514 <__aeabi_i2d>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4640      	mov	r0, r8
 8001bde:	4649      	mov	r1, r9
 8001be0:	f7fe fd02 	bl	80005e8 <__aeabi_dmul>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4620      	mov	r0, r4
 8001bea:	4629      	mov	r1, r5
 8001bec:	f7fe fb46 	bl	800027c <__adddf3>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	491f      	ldr	r1, [pc, #124]	; (8001c74 <motors+0x304>)
 8001bf6:	680c      	ldr	r4, [r1, #0]
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	f7fe ffb6 	bl	8000b6c <__aeabi_d2uiz>
 8001c00:	4603      	mov	r3, r0
 8001c02:	6423      	str	r3, [r4, #64]	; 0x40
				// left motor offset
				motor_offset_r = 1;
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <motors+0x2f8>)
 8001c0a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
				motor_offset_l = 0.03 * (lr_speed - 48) + 1;
 8001c0e:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <motors+0x324>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	3b30      	subs	r3, #48	; 0x30
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fc7d 	bl	8000514 <__aeabi_i2d>
 8001c1a:	a30f      	add	r3, pc, #60	; (adr r3, 8001c58 <motors+0x2e8>)
 8001c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c20:	f7fe fce2 	bl	80005e8 <__aeabi_dmul>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4610      	mov	r0, r2
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <motors+0x2f8>)
 8001c32:	f7fe fb23 	bl	800027c <__adddf3>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

				// Front Gyro Threshold
				if (frontback == 'w')
 8001c3e:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <motors+0x31c>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b77      	cmp	r3, #119	; 0x77
 8001c44:	d12e      	bne.n	8001ca4 <motors+0x334>
					turn_angle = turn_angle_r;
 8001c46:	4b16      	ldr	r3, [pc, #88]	; (8001ca0 <motors+0x330>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c4c:	e02d      	b.n	8001caa <motors+0x33a>
 8001c4e:	bf00      	nop
 8001c50:	9999999a 	.word	0x9999999a
 8001c54:	3ff19999 	.word	0x3ff19999
 8001c58:	eb851eb8 	.word	0xeb851eb8
 8001c5c:	3f9eb851 	.word	0x3f9eb851
 8001c60:	7ae147ae 	.word	0x7ae147ae
 8001c64:	3ffbae14 	.word	0x3ffbae14
 8001c68:	3ff00000 	.word	0x3ff00000
 8001c6c:	20000004 	.word	0x20000004
 8001c70:	20000208 	.word	0x20000208
 8001c74:	200000e8 	.word	0x200000e8
 8001c78:	3030306b 	.word	0x3030306b
 8001c7c:	37613577 	.word	0x37613577
 8001c80:	38613577 	.word	0x38613577
 8001c84:	200002f0 	.word	0x200002f0
 8001c88:	20000001 	.word	0x20000001
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	0800bacc 	.word	0x0800bacc
 8001c94:	20000003 	.word	0x20000003
 8001c98:	20000002 	.word	0x20000002
 8001c9c:	20000008 	.word	0x20000008
 8001ca0:	2000000c 	.word	0x2000000c
				// Back Gyro threshold
				else
					turn_angle = turn_angle_l;
 8001ca4:	4bbc      	ldr	r3, [pc, #752]	; (8001f98 <motors+0x628>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
			}

			pwmVal_motor = motor_min;
 8001caa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001cae:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

			// Move Motor forward (Normal)
			if (frontback == 'w') {
 8001cb2:	4bba      	ldr	r3, [pc, #744]	; (8001f9c <motors+0x62c>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b77      	cmp	r3, #119	; 0x77
 8001cb8:	f040 8267 	bne.w	800218a <motors+0x81a>
				for (;;) {
					// H-Bridge Circuit for AINx; 1 turn on, the other turns off
					// MOTOR A
					HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	2104      	movs	r1, #4
 8001cc0:	48b7      	ldr	r0, [pc, #732]	; (8001fa0 <motors+0x630>)
 8001cc2:	f001 ff85 	bl	8003bd0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2108      	movs	r1, #8
 8001cca:	48b5      	ldr	r0, [pc, #724]	; (8001fa0 <motors+0x630>)
 8001ccc:	f001 ff80 	bl	8003bd0 <HAL_GPIO_WritePin>

					// MOTOR B
					HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	2120      	movs	r1, #32
 8001cd4:	48b2      	ldr	r0, [pc, #712]	; (8001fa0 <motors+0x630>)
 8001cd6:	f001 ff7b 	bl	8003bd0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2110      	movs	r1, #16
 8001cde:	48b0      	ldr	r0, [pc, #704]	; (8001fa0 <motors+0x630>)
 8001ce0:	f001 ff76 	bl	8003bd0 <HAL_GPIO_WritePin>

					// Going straight only
					if (lr_speed == '0') {
 8001ce4:	4baf      	ldr	r3, [pc, #700]	; (8001fa4 <motors+0x634>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b30      	cmp	r3, #48	; 0x30
 8001cea:	f040 80aa 	bne.w	8001e42 <motors+0x4d2>
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, motor_offset_r*pwmVal_motor);
 8001cee:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7fe fc0e 	bl	8000514 <__aeabi_i2d>
 8001cf8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001cfc:	f7fe fc74 	bl	80005e8 <__aeabi_dmul>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	49a8      	ldr	r1, [pc, #672]	; (8001fa8 <motors+0x638>)
 8001d06:	680c      	ldr	r4, [r1, #0]
 8001d08:	4610      	mov	r0, r2
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	f7fe ff2e 	bl	8000b6c <__aeabi_d2uiz>
 8001d10:	4603      	mov	r3, r0
 8001d12:	6363      	str	r3, [r4, #52]	; 0x34
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, motor_offset_l*pwmVal_motor);
 8001d14:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe fbfb 	bl	8000514 <__aeabi_i2d>
 8001d1e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001d22:	f7fe fc61 	bl	80005e8 <__aeabi_dmul>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	499f      	ldr	r1, [pc, #636]	; (8001fa8 <motors+0x638>)
 8001d2c:	680c      	ldr	r4, [r1, #0]
 8001d2e:	4610      	mov	r0, r2
 8001d30:	4619      	mov	r1, r3
 8001d32:	f7fe ff1b 	bl	8000b6c <__aeabi_d2uiz>
 8001d36:	4603      	mov	r3, r0
 8001d38:	63a3      	str	r3, [r4, #56]	; 0x38

						if (accelerate == 1) {
 8001d3a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d165      	bne.n	8001e0e <motors+0x49e>
							// Accelerating
							pwmVal_motor += motor_increment;
 8001d42:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8001d46:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001d48:	4413      	add	r3, r2
 8001d4a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

							// Accelerate till hit reference speed before maintaining constant speed
							// Reference speed is determined above, based on if it is moving straight or turning
							if (pwmVal_motor >= motor_reference) {
 8001d4e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8001d52:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d56:	429a      	cmp	r2, r3
 8001d58:	f0c0 8213 	bcc.w	8002182 <motors+0x812>
								// Acc flag set to 0
								accelerate = 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
								// PID for error adjustment
								while (encoder_dist < (int) target_dist * 0.95) {
 8001d62:	e03a      	b.n	8001dda <motors+0x46a>
									// Proportional Error: Output value proportional to current error value

									// Err: Difference between current angle and target angle
									// (0 in this case since it is moving straight)
									err = curAngle - 0;
 8001d64:	4b91      	ldr	r3, [pc, #580]	; (8001fac <motors+0x63c>)
 8001d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6a:	4610      	mov	r0, r2
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f7fe fed5 	bl	8000b1c <__aeabi_d2iz>
 8001d72:	4603      	mov	r3, r0
 8001d74:	63bb      	str	r3, [r7, #56]	; 0x38
									// Integral error: Accumulation of past error, removal of residual SSE that occurs with pure proportional control
									eintegral += err;
 8001d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001d7e:	4413      	add	r3, r2
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

									// PID equation
									// Controller adjusts servo's position to correct any deviations from straight path
									// Pre-defined kp = 3; ki = 0.8;
									servo_val = (uint8_t) (pwmVal_servo + kp * err + ki * eintegral);
 8001d86:	4b8a      	ldr	r3, [pc, #552]	; (8001fb0 <motors+0x640>)
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	f897 105a 	ldrb.w	r1, [r7, #90]	; 0x5a
 8001d96:	fb11 f303 	smulbb	r3, r1, r3
 8001d9a:	b2d9      	uxtb	r1, r3
 8001d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	f897 005b 	ldrb.w	r0, [r7, #91]	; 0x5b
 8001da4:	fb10 f303 	smulbb	r3, r0, r3
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	440b      	add	r3, r1
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	4413      	add	r3, r2
 8001db0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

									// Error Correction: Set servo value to correct error
									htim1.Instance->CCR4 = servo_val;
 8001db4:	4b7f      	ldr	r3, [pc, #508]	; (8001fb4 <motors+0x644>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001dbc:	641a      	str	r2, [r3, #64]	; 0x40

									stuck++;
 8001dbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	64bb      	str	r3, [r7, #72]	; 0x48
									if (stuck > 600) {
 8001dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dc6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001dca:	dd03      	ble.n	8001dd4 <motors+0x464>
										encoder_dist = target_dist;
 8001dcc:	4a7a      	ldr	r2, [pc, #488]	; (8001fb8 <motors+0x648>)
 8001dce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dd0:	6013      	str	r3, [r2, #0]
										break;
 8001dd2:	e1d6      	b.n	8002182 <motors+0x812>
									}

									osDelay(10);
 8001dd4:	200a      	movs	r0, #10
 8001dd6:	f006 f99b 	bl	8008110 <osDelay>
								while (encoder_dist < (int) target_dist * 0.95) {
 8001dda:	4b77      	ldr	r3, [pc, #476]	; (8001fb8 <motors+0x648>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7fe fb88 	bl	80004f4 <__aeabi_ui2d>
 8001de4:	4604      	mov	r4, r0
 8001de6:	460d      	mov	r5, r1
 8001de8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fb92 	bl	8000514 <__aeabi_i2d>
 8001df0:	a365      	add	r3, pc, #404	; (adr r3, 8001f88 <motors+0x618>)
 8001df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df6:	f7fe fbf7 	bl	80005e8 <__aeabi_dmul>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	4620      	mov	r0, r4
 8001e00:	4629      	mov	r1, r5
 8001e02:	f7fe fe63 	bl	8000acc <__aeabi_dcmplt>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1ab      	bne.n	8001d64 <motors+0x3f4>
 8001e0c:	e1b9      	b.n	8002182 <motors+0x812>
						}

						// Deceleration and Distance Monitoring
						else {
							// Gradual deceleration
							if (pwmVal_motor > motor_min)
 8001e0e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8001e12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d90b      	bls.n	8001e32 <motors+0x4c2>
								pwmVal_motor -= 5 * motor_increment;
 8001e1a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	0392      	lsls	r2, r2, #14
 8001e20:	1ad2      	subs	r2, r2, r3
 8001e22:	0092      	lsls	r2, r2, #2
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

							// Break movement loop once target distance is covered
							if (encoder_dist >= target_dist)
 8001e32:	4b61      	ldr	r3, [pc, #388]	; (8001fb8 <motors+0x648>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	f200 81a2 	bhi.w	8002182 <motors+0x812>
								break;
 8001e3e:	f000 bed4 	b.w	8002bea <motors+0x127a>

					}// End of Straight movement

					// 45 deg turn
					// Distance Values: grad = 160; y_intercept = 55;
					else if (lr_speed < '6') {
 8001e42:	4b58      	ldr	r3, [pc, #352]	; (8001fa4 <motors+0x634>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b35      	cmp	r3, #53	; 0x35
 8001e48:	f200 80ba 	bhi.w	8001fc0 <motors+0x650>
						target_dist = (int) (2 * grad - y_intercept);
 8001e4c:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001e50:	005a      	lsls	r2, r3, #1
 8001e52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	65fb      	str	r3, [r7, #92]	; 0x5c

						gyroStart();
 8001e5a:	f008 fe77 	bl	800ab4c <gyroStart>
						osDelay(100);
 8001e5e:	2064      	movs	r0, #100	; 0x64
 8001e60:	f006 f956 	bl	8008110 <osDelay>

						// Target Angle Threshold: Prevent overshooting
						turn_angle = 0.4 * turn_angle;
 8001e64:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001e66:	f7fe fb55 	bl	8000514 <__aeabi_i2d>
 8001e6a:	a349      	add	r3, pc, #292	; (adr r3, 8001f90 <motors+0x620>)
 8001e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e70:	f7fe fbba 	bl	80005e8 <__aeabi_dmul>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4610      	mov	r0, r2
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	f7fe fe4e 	bl	8000b1c <__aeabi_d2iz>
 8001e80:	4603      	mov	r3, r0
 8001e82:	64fb      	str	r3, [r7, #76]	; 0x4c

						// Set speed
						pwmVal_motor = (int) ((fb_speed - 48) * 400);
 8001e84:	4b4d      	ldr	r3, [pc, #308]	; (8001fbc <motors+0x64c>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	3b30      	subs	r3, #48	; 0x30
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	0092      	lsls	r2, r2, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	461a      	mov	r2, r3
 8001e94:	0091      	lsls	r1, r2, #2
 8001e96:	461a      	mov	r2, r3
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4413      	add	r3, r2
 8001e9c:	011b      	lsls	r3, r3, #4
 8001e9e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

						/************ Stage 1 45 deg turn out *********************/
						// Move motor
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, motor_offset_r*pwmVal_motor);
 8001ea2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe fb34 	bl	8000514 <__aeabi_i2d>
 8001eac:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001eb0:	f7fe fb9a 	bl	80005e8 <__aeabi_dmul>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	493b      	ldr	r1, [pc, #236]	; (8001fa8 <motors+0x638>)
 8001eba:	680c      	ldr	r4, [r1, #0]
 8001ebc:	4610      	mov	r0, r2
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	f7fe fe54 	bl	8000b6c <__aeabi_d2uiz>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	6363      	str	r3, [r4, #52]	; 0x34
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, motor_offset_l*pwmVal_motor);
 8001ec8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fb21 	bl	8000514 <__aeabi_i2d>
 8001ed2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001ed6:	f7fe fb87 	bl	80005e8 <__aeabi_dmul>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	4932      	ldr	r1, [pc, #200]	; (8001fa8 <motors+0x638>)
 8001ee0:	680c      	ldr	r4, [r1, #0]
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f7fe fe41 	bl	8000b6c <__aeabi_d2uiz>
 8001eea:	4603      	mov	r3, r0
 8001eec:	63a3      	str	r3, [r4, #56]	; 0x38

						// Continuous check to move angle to threshold
						while (abs(curAngle) < turn_angle) {
 8001eee:	e002      	b.n	8001ef6 <motors+0x586>
							osDelay(10);
 8001ef0:	200a      	movs	r0, #10
 8001ef2:	f006 f90d 	bl	8008110 <osDelay>
						while (abs(curAngle) < turn_angle) {
 8001ef6:	4b2d      	ldr	r3, [pc, #180]	; (8001fac <motors+0x63c>)
 8001ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efc:	4610      	mov	r0, r2
 8001efe:	4619      	mov	r1, r3
 8001f00:	f7fe fe0c 	bl	8000b1c <__aeabi_d2iz>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	bfb8      	it	lt
 8001f0a:	425b      	neglt	r3, r3
 8001f0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	dcee      	bgt.n	8001ef0 <motors+0x580>
						}

						// Once Threshold (45 degrees) reached, turn servo to center
						htim1.Instance->CCR4 = pwmVal_servo;
 8001f12:	4b27      	ldr	r3, [pc, #156]	; (8001fb0 <motors+0x640>)
 8001f14:	881a      	ldrh	r2, [r3, #0]
 8001f16:	4b27      	ldr	r3, [pc, #156]	; (8001fb4 <motors+0x644>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	641a      	str	r2, [r3, #64]	; 0x40

						// Stop motor
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
 8001f1c:	4b22      	ldr	r3, [pc, #136]	; (8001fa8 <motors+0x638>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2200      	movs	r2, #0
 8001f22:	635a      	str	r2, [r3, #52]	; 0x34
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0);
 8001f24:	4b20      	ldr	r3, [pc, #128]	; (8001fa8 <motors+0x638>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	639a      	str	r2, [r3, #56]	; 0x38

						// curAngle: adjusted to account for overflow/underflow error in turn angle measurement
						// Prep for subsequent movements
						curAngle = curAngle > 0 ? curAngle - turn_angle : curAngle + turn_angle;
 8001f2c:	4b1f      	ldr	r3, [pc, #124]	; (8001fac <motors+0x63c>)
 8001f2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f32:	f04f 0200 	mov.w	r2, #0
 8001f36:	f04f 0300 	mov.w	r3, #0
 8001f3a:	f7fe fde5 	bl	8000b08 <__aeabi_dcmpgt>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00e      	beq.n	8001f62 <motors+0x5f2>
 8001f44:	4b19      	ldr	r3, [pc, #100]	; (8001fac <motors+0x63c>)
 8001f46:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001f4a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001f4c:	f7fe fae2 	bl	8000514 <__aeabi_i2d>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4620      	mov	r0, r4
 8001f56:	4629      	mov	r1, r5
 8001f58:	f7fe f98e 	bl	8000278 <__aeabi_dsub>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	e009      	b.n	8001f76 <motors+0x606>
 8001f62:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001f64:	f7fe fad6 	bl	8000514 <__aeabi_i2d>
 8001f68:	4b10      	ldr	r3, [pc, #64]	; (8001fac <motors+0x63c>)
 8001f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6e:	f7fe f985 	bl	800027c <__adddf3>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	490d      	ldr	r1, [pc, #52]	; (8001fac <motors+0x63c>)
 8001f78:	e9c1 2300 	strd	r2, r3, [r1]

						// Wait for full stability
						osDelay(500);
 8001f7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f80:	f006 f8c6 	bl	8008110 <osDelay>
						break;
 8001f84:	f000 be31 	b.w	8002bea <motors+0x127a>
 8001f88:	66666666 	.word	0x66666666
 8001f8c:	3fee6666 	.word	0x3fee6666
 8001f90:	9999999a 	.word	0x9999999a
 8001f94:	3fd99999 	.word	0x3fd99999
 8001f98:	20000008 	.word	0x20000008
 8001f9c:	20000000 	.word	0x20000000
 8001fa0:	40020000 	.word	0x40020000
 8001fa4:	20000003 	.word	0x20000003
 8001fa8:	20000208 	.word	0x20000208
 8001fac:	200002e0 	.word	0x200002e0
 8001fb0:	20000004 	.word	0x20000004
 8001fb4:	200000e8 	.word	0x200000e8
 8001fb8:	200002f0 	.word	0x200002f0
 8001fbc:	20000001 	.word	0x20000001
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0);*/
					}

					// Turning 90 degree
					else {
						gyroStart();
 8001fc0:	f008 fdc4 	bl	800ab4c <gyroStart>
						osDelay(100);
 8001fc4:	2064      	movs	r0, #100	; 0x64
 8001fc6:	f006 f8a3 	bl	8008110 <osDelay>

						// Set speed
						pwmVal_motor = (int) ((fb_speed - 48) * 400);
 8001fca:	4bb8      	ldr	r3, [pc, #736]	; (80022ac <motors+0x93c>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	3b30      	subs	r3, #48	; 0x30
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	0092      	lsls	r2, r2, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	461a      	mov	r2, r3
 8001fda:	0091      	lsls	r1, r2, #2
 8001fdc:	461a      	mov	r2, r3
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4413      	add	r3, r2
 8001fe2:	011b      	lsls	r3, r3, #4
 8001fe4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

						// Move motor
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, motor_offset_r*pwmVal_motor);
 8001fe8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe fa91 	bl	8000514 <__aeabi_i2d>
 8001ff2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001ff6:	f7fe faf7 	bl	80005e8 <__aeabi_dmul>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	49ac      	ldr	r1, [pc, #688]	; (80022b0 <motors+0x940>)
 8002000:	680c      	ldr	r4, [r1, #0]
 8002002:	4610      	mov	r0, r2
 8002004:	4619      	mov	r1, r3
 8002006:	f7fe fdb1 	bl	8000b6c <__aeabi_d2uiz>
 800200a:	4603      	mov	r3, r0
 800200c:	6363      	str	r3, [r4, #52]	; 0x34
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, motor_offset_l*pwmVal_motor);
 800200e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe fa7e 	bl	8000514 <__aeabi_i2d>
 8002018:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800201c:	f7fe fae4 	bl	80005e8 <__aeabi_dmul>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	49a2      	ldr	r1, [pc, #648]	; (80022b0 <motors+0x940>)
 8002026:	680c      	ldr	r4, [r1, #0]
 8002028:	4610      	mov	r0, r2
 800202a:	4619      	mov	r1, r3
 800202c:	f7fe fd9e 	bl	8000b6c <__aeabi_d2uiz>
 8002030:	4603      	mov	r3, r0
 8002032:	63a3      	str	r3, [r4, #56]	; 0x38

						// Move til angle threshold
						// Did not apply the same fractional adjustment for turn_angle
						while (abs(curAngle) < turn_angle) {
 8002034:	e032      	b.n	800209c <motors+0x72c>
							osDelay(10);
 8002036:	200a      	movs	r0, #10
 8002038:	f006 f86a 	bl	8008110 <osDelay>
							stuck++;
 800203c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800203e:	3301      	adds	r3, #1
 8002040:	64bb      	str	r3, [r7, #72]	; 0x48
							if (stuck > 1000) {
 8002042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002044:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002048:	dd28      	ble.n	800209c <motors+0x72c>
								curAngle = curAngle > 0 ? curAngle - turn_angle : curAngle + turn_angle;
 800204a:	4b9a      	ldr	r3, [pc, #616]	; (80022b4 <motors+0x944>)
 800204c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	f04f 0300 	mov.w	r3, #0
 8002058:	f7fe fd56 	bl	8000b08 <__aeabi_dcmpgt>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00e      	beq.n	8002080 <motors+0x710>
 8002062:	4b94      	ldr	r3, [pc, #592]	; (80022b4 <motors+0x944>)
 8002064:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002068:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800206a:	f7fe fa53 	bl	8000514 <__aeabi_i2d>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	4620      	mov	r0, r4
 8002074:	4629      	mov	r1, r5
 8002076:	f7fe f8ff 	bl	8000278 <__aeabi_dsub>
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	e009      	b.n	8002094 <motors+0x724>
 8002080:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002082:	f7fe fa47 	bl	8000514 <__aeabi_i2d>
 8002086:	4b8b      	ldr	r3, [pc, #556]	; (80022b4 <motors+0x944>)
 8002088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208c:	f7fe f8f6 	bl	800027c <__adddf3>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4987      	ldr	r1, [pc, #540]	; (80022b4 <motors+0x944>)
 8002096:	e9c1 2300 	strd	r2, r3, [r1]
								break;
 800209a:	e00d      	b.n	80020b8 <motors+0x748>
						while (abs(curAngle) < turn_angle) {
 800209c:	4b85      	ldr	r3, [pc, #532]	; (80022b4 <motors+0x944>)
 800209e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a2:	4610      	mov	r0, r2
 80020a4:	4619      	mov	r1, r3
 80020a6:	f7fe fd39 	bl	8000b1c <__aeabi_d2iz>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	bfb8      	it	lt
 80020b0:	425b      	neglt	r3, r3
 80020b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80020b4:	429a      	cmp	r2, r3
 80020b6:	dcbe      	bgt.n	8002036 <motors+0x6c6>
							}
						}

						// Once Threshold reached, turn servo centre
						htim1.Instance->CCR4 = pwmVal_servo;
 80020b8:	4b7f      	ldr	r3, [pc, #508]	; (80022b8 <motors+0x948>)
 80020ba:	881a      	ldrh	r2, [r3, #0]
 80020bc:	4b7f      	ldr	r3, [pc, #508]	; (80022bc <motors+0x94c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	641a      	str	r2, [r3, #64]	; 0x40

						// Stop motor
						pwmVal_motor = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, motor_offset_r*pwmVal_motor);
 80020c8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7fe fa21 	bl	8000514 <__aeabi_i2d>
 80020d2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80020d6:	f7fe fa87 	bl	80005e8 <__aeabi_dmul>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	4974      	ldr	r1, [pc, #464]	; (80022b0 <motors+0x940>)
 80020e0:	680c      	ldr	r4, [r1, #0]
 80020e2:	4610      	mov	r0, r2
 80020e4:	4619      	mov	r1, r3
 80020e6:	f7fe fd41 	bl	8000b6c <__aeabi_d2uiz>
 80020ea:	4603      	mov	r3, r0
 80020ec:	6363      	str	r3, [r4, #52]	; 0x34
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, motor_offset_l*pwmVal_motor);
 80020ee:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe fa0e 	bl	8000514 <__aeabi_i2d>
 80020f8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80020fc:	f7fe fa74 	bl	80005e8 <__aeabi_dmul>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	496a      	ldr	r1, [pc, #424]	; (80022b0 <motors+0x940>)
 8002106:	680c      	ldr	r4, [r1, #0]
 8002108:	4610      	mov	r0, r2
 800210a:	4619      	mov	r1, r3
 800210c:	f7fe fd2e 	bl	8000b6c <__aeabi_d2uiz>
 8002110:	4603      	mov	r3, r0
 8002112:	63a3      	str	r3, [r4, #56]	; 0x38

						// curAngle: adjusted to account for overflow/underflow error in turn angle measurement
						// Prep for subsequent movements
						curAngle =	curAngle > 0 ? curAngle - turn_angle : curAngle + turn_angle;
 8002114:	4b67      	ldr	r3, [pc, #412]	; (80022b4 <motors+0x944>)
 8002116:	e9d3 0100 	ldrd	r0, r1, [r3]
 800211a:	f04f 0200 	mov.w	r2, #0
 800211e:	f04f 0300 	mov.w	r3, #0
 8002122:	f7fe fcf1 	bl	8000b08 <__aeabi_dcmpgt>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00e      	beq.n	800214a <motors+0x7da>
 800212c:	4b61      	ldr	r3, [pc, #388]	; (80022b4 <motors+0x944>)
 800212e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002132:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002134:	f7fe f9ee 	bl	8000514 <__aeabi_i2d>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4620      	mov	r0, r4
 800213e:	4629      	mov	r1, r5
 8002140:	f7fe f89a 	bl	8000278 <__aeabi_dsub>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	e009      	b.n	800215e <motors+0x7ee>
 800214a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800214c:	f7fe f9e2 	bl	8000514 <__aeabi_i2d>
 8002150:	4b58      	ldr	r3, [pc, #352]	; (80022b4 <motors+0x944>)
 8002152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002156:	f7fe f891 	bl	800027c <__adddf3>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	4955      	ldr	r1, [pc, #340]	; (80022b4 <motors+0x944>)
 8002160:	e9c1 2300 	strd	r2, r3, [r1]

						kp = 3;
 8002164:	2303      	movs	r3, #3
 8002166:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
						ki = 0.8;
 800216a:	2300      	movs	r3, #0
 800216c:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
						eintegral = 0;	// Integral error
 8002170:	2300      	movs	r3, #0
 8002172:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

						osDelay(1000);
 8002176:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800217a:	f005 ffc9 	bl	8008110 <osDelay>

						// Break movement loop
						break;
 800217e:	f000 bd34 	b.w	8002bea <motors+0x127a>
					}	// End of Turning

					// To let gyro have the task thread or else OS will only focus on motor thread
					osDelay(10);
 8002182:	200a      	movs	r0, #10
 8002184:	f005 ffc4 	bl	8008110 <osDelay>
					HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002188:	e598      	b.n	8001cbc <motors+0x34c>

				}
			}

			// Move Motor backwards(Normal)
			else if (frontback == 's') {
 800218a:	4b4d      	ldr	r3, [pc, #308]	; (80022c0 <motors+0x950>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b73      	cmp	r3, #115	; 0x73
 8002190:	f040 81ca 	bne.w	8002528 <motors+0xbb8>
				for (;;) {
					// MOTOR A
					HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002194:	2200      	movs	r2, #0
 8002196:	2104      	movs	r1, #4
 8002198:	484a      	ldr	r0, [pc, #296]	; (80022c4 <motors+0x954>)
 800219a:	f001 fd19 	bl	8003bd0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800219e:	2201      	movs	r2, #1
 80021a0:	2108      	movs	r1, #8
 80021a2:	4848      	ldr	r0, [pc, #288]	; (80022c4 <motors+0x954>)
 80021a4:	f001 fd14 	bl	8003bd0 <HAL_GPIO_WritePin>

					// MOTOR B
					HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80021a8:	2200      	movs	r2, #0
 80021aa:	2120      	movs	r1, #32
 80021ac:	4845      	ldr	r0, [pc, #276]	; (80022c4 <motors+0x954>)
 80021ae:	f001 fd0f 	bl	8003bd0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 80021b2:	2201      	movs	r2, #1
 80021b4:	2110      	movs	r1, #16
 80021b6:	4843      	ldr	r0, [pc, #268]	; (80022c4 <motors+0x954>)
 80021b8:	f001 fd0a 	bl	8003bd0 <HAL_GPIO_WritePin>

					// Going straight only
					if (lr_speed == '0') {
 80021bc:	4b42      	ldr	r3, [pc, #264]	; (80022c8 <motors+0x958>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b30      	cmp	r3, #48	; 0x30
 80021c2:	f040 80bc 	bne.w	800233e <motors+0x9ce>
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, motor_offset_r*pwmVal_motor);
 80021c6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe f9a2 	bl	8000514 <__aeabi_i2d>
 80021d0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80021d4:	f7fe fa08 	bl	80005e8 <__aeabi_dmul>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4934      	ldr	r1, [pc, #208]	; (80022b0 <motors+0x940>)
 80021de:	680c      	ldr	r4, [r1, #0]
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	f7fe fcc2 	bl	8000b6c <__aeabi_d2uiz>
 80021e8:	4603      	mov	r3, r0
 80021ea:	6363      	str	r3, [r4, #52]	; 0x34
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, motor_offset_l*pwmVal_motor);
 80021ec:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe f98f 	bl	8000514 <__aeabi_i2d>
 80021f6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80021fa:	f7fe f9f5 	bl	80005e8 <__aeabi_dmul>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	492b      	ldr	r1, [pc, #172]	; (80022b0 <motors+0x940>)
 8002204:	680c      	ldr	r4, [r1, #0]
 8002206:	4610      	mov	r0, r2
 8002208:	4619      	mov	r1, r3
 800220a:	f7fe fcaf 	bl	8000b6c <__aeabi_d2uiz>
 800220e:	4603      	mov	r3, r0
 8002210:	63a3      	str	r3, [r4, #56]	; 0x38

						if (accelerate == 1) {
 8002212:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8002216:	2b01      	cmp	r3, #1
 8002218:	d177      	bne.n	800230a <motors+0x99a>

							pwmVal_motor += motor_increment;	// Accelerating
 800221a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800221e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002220:	4413      	add	r3, r2
 8002222:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

							if (pwmVal_motor >= motor_reference) {// Constant speed
 8002226:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800222a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800222e:	429a      	cmp	r2, r3
 8002230:	f0c0 8176 	bcc.w	8002520 <motors+0xbb0>
								accelerate = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
								while (encoder_dist < (int) target_dist * 0.95) {
 800223a:	e04c      	b.n	80022d6 <motors+0x966>
									// PID for error adjustment
									err = curAngle - 0;	// Proportional error
 800223c:	4b1d      	ldr	r3, [pc, #116]	; (80022b4 <motors+0x944>)
 800223e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002242:	4610      	mov	r0, r2
 8002244:	4619      	mov	r1, r3
 8002246:	f7fe fc69 	bl	8000b1c <__aeabi_d2iz>
 800224a:	4603      	mov	r3, r0
 800224c:	63bb      	str	r3, [r7, #56]	; 0x38
									eintegral += err;		// Integral error
 800224e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002250:	b29a      	uxth	r2, r3
 8002252:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002256:	4413      	add	r3, r2
 8002258:	b29b      	uxth	r3, r3
 800225a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

									// PID equation (opposite correction)
									servo_val = (uint8_t) (pwmVal_servo
											- kp * err - ki * eintegral);
 800225e:	4b16      	ldr	r3, [pc, #88]	; (80022b8 <motors+0x948>)
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	b2da      	uxtb	r2, r3
 8002264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002266:	b2db      	uxtb	r3, r3
 8002268:	f897 105b 	ldrb.w	r1, [r7, #91]	; 0x5b
 800226c:	fb11 f303 	smulbb	r3, r1, r3
 8002270:	b2db      	uxtb	r3, r3
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	b2da      	uxtb	r2, r3
									servo_val = (uint8_t) (pwmVal_servo
 8002276:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800227a:	b2db      	uxtb	r3, r3
 800227c:	f897 105a 	ldrb.w	r1, [r7, #90]	; 0x5a
 8002280:	fb11 f303 	smulbb	r3, r1, r3
 8002284:	b2db      	uxtb	r3, r3
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

									// Set servo value
									htim1.Instance->CCR4 = servo_val;// Turn servo to correct error
 800228c:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <motors+0x94c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002294:	641a      	str	r2, [r3, #64]	; 0x40

									stuck++;
 8002296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002298:	3301      	adds	r3, #1
 800229a:	64bb      	str	r3, [r7, #72]	; 0x48
									if (stuck > 600) {
 800229c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800229e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80022a2:	dd15      	ble.n	80022d0 <motors+0x960>
										encoder_dist = target_dist;
 80022a4:	4a09      	ldr	r2, [pc, #36]	; (80022cc <motors+0x95c>)
 80022a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022a8:	6013      	str	r3, [r2, #0]
										break;
 80022aa:	e139      	b.n	8002520 <motors+0xbb0>
 80022ac:	20000001 	.word	0x20000001
 80022b0:	20000208 	.word	0x20000208
 80022b4:	200002e0 	.word	0x200002e0
 80022b8:	20000004 	.word	0x20000004
 80022bc:	200000e8 	.word	0x200000e8
 80022c0:	20000000 	.word	0x20000000
 80022c4:	40020000 	.word	0x40020000
 80022c8:	20000003 	.word	0x20000003
 80022cc:	200002f0 	.word	0x200002f0
									}

									osDelay(10);
 80022d0:	200a      	movs	r0, #10
 80022d2:	f005 ff1d 	bl	8008110 <osDelay>
								while (encoder_dist < (int) target_dist * 0.95) {
 80022d6:	4bae      	ldr	r3, [pc, #696]	; (8002590 <motors+0xc20>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe f90a 	bl	80004f4 <__aeabi_ui2d>
 80022e0:	4604      	mov	r4, r0
 80022e2:	460d      	mov	r5, r1
 80022e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe f914 	bl	8000514 <__aeabi_i2d>
 80022ec:	a3a6      	add	r3, pc, #664	; (adr r3, 8002588 <motors+0xc18>)
 80022ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f2:	f7fe f979 	bl	80005e8 <__aeabi_dmul>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	4620      	mov	r0, r4
 80022fc:	4629      	mov	r1, r5
 80022fe:	f7fe fbe5 	bl	8000acc <__aeabi_dcmplt>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d199      	bne.n	800223c <motors+0x8cc>
 8002308:	e10a      	b.n	8002520 <motors+0xbb0>
								}
							}
						}

						else {		// Decelerate
							if (pwmVal_motor > motor_min)
 800230a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800230e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002312:	429a      	cmp	r2, r3
 8002314:	d90b      	bls.n	800232e <motors+0x9be>
								pwmVal_motor -= 5 * motor_increment;
 8002316:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002318:	461a      	mov	r2, r3
 800231a:	0392      	lsls	r2, r2, #14
 800231c:	1ad2      	subs	r2, r2, r3
 800231e:	0092      	lsls	r2, r2, #2
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	b29a      	uxth	r2, r3
 8002324:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002328:	4413      	add	r3, r2
 800232a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

							// Break movement loop
							if (encoder_dist >= target_dist)
 800232e:	4b98      	ldr	r3, [pc, #608]	; (8002590 <motors+0xc20>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002334:	429a      	cmp	r2, r3
 8002336:	f200 80f3 	bhi.w	8002520 <motors+0xbb0>
								break;
 800233a:	f000 bc56 	b.w	8002bea <motors+0x127a>

					}		// End of Straight movement

					// Turning
					else {
						gyroStart();
 800233e:	f008 fc05 	bl	800ab4c <gyroStart>
						osDelay(100);
 8002342:	2064      	movs	r0, #100	; 0x64
 8002344:	f005 fee4 	bl	8008110 <osDelay>

						back_angle_threshold = (int) (0.95 * turn_angle);
 8002348:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800234a:	f7fe f8e3 	bl	8000514 <__aeabi_i2d>
 800234e:	a38e      	add	r3, pc, #568	; (adr r3, 8002588 <motors+0xc18>)
 8002350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002354:	f7fe f948 	bl	80005e8 <__aeabi_dmul>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	4610      	mov	r0, r2
 800235e:	4619      	mov	r1, r3
 8002360:	f7fe fbdc 	bl	8000b1c <__aeabi_d2iz>
 8002364:	4603      	mov	r3, r0
 8002366:	637b      	str	r3, [r7, #52]	; 0x34

						pwmVal_motor = (int) ((fb_speed - 48) * 400);
 8002368:	4b8a      	ldr	r3, [pc, #552]	; (8002594 <motors+0xc24>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	3b30      	subs	r3, #48	; 0x30
 800236e:	b29b      	uxth	r3, r3
 8002370:	461a      	mov	r2, r3
 8002372:	0092      	lsls	r2, r2, #2
 8002374:	4413      	add	r3, r2
 8002376:	461a      	mov	r2, r3
 8002378:	0091      	lsls	r1, r2, #2
 800237a:	461a      	mov	r2, r3
 800237c:	460b      	mov	r3, r1
 800237e:	4413      	add	r3, r2
 8002380:	011b      	lsls	r3, r3, #4
 8002382:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

						// Move motor
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, motor_offset_r*pwmVal_motor);
 8002386:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe f8c2 	bl	8000514 <__aeabi_i2d>
 8002390:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002394:	f7fe f928 	bl	80005e8 <__aeabi_dmul>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	497e      	ldr	r1, [pc, #504]	; (8002598 <motors+0xc28>)
 800239e:	680c      	ldr	r4, [r1, #0]
 80023a0:	4610      	mov	r0, r2
 80023a2:	4619      	mov	r1, r3
 80023a4:	f7fe fbe2 	bl	8000b6c <__aeabi_d2uiz>
 80023a8:	4603      	mov	r3, r0
 80023aa:	6363      	str	r3, [r4, #52]	; 0x34
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, motor_offset_l*pwmVal_motor);
 80023ac:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7fe f8af 	bl	8000514 <__aeabi_i2d>
 80023b6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80023ba:	f7fe f915 	bl	80005e8 <__aeabi_dmul>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	4975      	ldr	r1, [pc, #468]	; (8002598 <motors+0xc28>)
 80023c4:	680c      	ldr	r4, [r1, #0]
 80023c6:	4610      	mov	r0, r2
 80023c8:	4619      	mov	r1, r3
 80023ca:	f7fe fbcf 	bl	8000b6c <__aeabi_d2uiz>
 80023ce:	4603      	mov	r3, r0
 80023d0:	63a3      	str	r3, [r4, #56]	; 0x38

						// Move til angle threshold
						while (abs(curAngle) < back_angle_threshold) { // Tends to over steer a lot
 80023d2:	e032      	b.n	800243a <motors+0xaca>
							osDelay(10);
 80023d4:	200a      	movs	r0, #10
 80023d6:	f005 fe9b 	bl	8008110 <osDelay>
							stuck++;
 80023da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023dc:	3301      	adds	r3, #1
 80023de:	64bb      	str	r3, [r7, #72]	; 0x48
							if (stuck > 1000) {
 80023e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023e6:	dd28      	ble.n	800243a <motors+0xaca>
								curAngle = curAngle > 0 ? curAngle - back_angle_threshold : curAngle + back_angle_threshold;
 80023e8:	4b6c      	ldr	r3, [pc, #432]	; (800259c <motors+0xc2c>)
 80023ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023ee:	f04f 0200 	mov.w	r2, #0
 80023f2:	f04f 0300 	mov.w	r3, #0
 80023f6:	f7fe fb87 	bl	8000b08 <__aeabi_dcmpgt>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00e      	beq.n	800241e <motors+0xaae>
 8002400:	4b66      	ldr	r3, [pc, #408]	; (800259c <motors+0xc2c>)
 8002402:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002406:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002408:	f7fe f884 	bl	8000514 <__aeabi_i2d>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4620      	mov	r0, r4
 8002412:	4629      	mov	r1, r5
 8002414:	f7fd ff30 	bl	8000278 <__aeabi_dsub>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	e009      	b.n	8002432 <motors+0xac2>
 800241e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002420:	f7fe f878 	bl	8000514 <__aeabi_i2d>
 8002424:	4b5d      	ldr	r3, [pc, #372]	; (800259c <motors+0xc2c>)
 8002426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242a:	f7fd ff27 	bl	800027c <__adddf3>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	495a      	ldr	r1, [pc, #360]	; (800259c <motors+0xc2c>)
 8002434:	e9c1 2300 	strd	r2, r3, [r1]
								break;
 8002438:	e00d      	b.n	8002456 <motors+0xae6>
						while (abs(curAngle) < back_angle_threshold) { // Tends to over steer a lot
 800243a:	4b58      	ldr	r3, [pc, #352]	; (800259c <motors+0xc2c>)
 800243c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002440:	4610      	mov	r0, r2
 8002442:	4619      	mov	r1, r3
 8002444:	f7fe fb6a 	bl	8000b1c <__aeabi_d2iz>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	bfb8      	it	lt
 800244e:	425b      	neglt	r3, r3
 8002450:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002452:	429a      	cmp	r2, r3
 8002454:	dcbe      	bgt.n	80023d4 <motors+0xa64>
							}
						}

						// Once Threshold reached, turn servo centre
						htim1.Instance->CCR4 = pwmVal_servo; // Turn servo to the centre
 8002456:	4b52      	ldr	r3, [pc, #328]	; (80025a0 <motors+0xc30>)
 8002458:	881a      	ldrh	r2, [r3, #0]
 800245a:	4b52      	ldr	r3, [pc, #328]	; (80025a4 <motors+0xc34>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	641a      	str	r2, [r3, #64]	; 0x40

						// Stop motor
						pwmVal_motor = 0;
 8002460:	2300      	movs	r3, #0
 8002462:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, motor_offset_r*pwmVal_motor);
 8002466:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe f852 	bl	8000514 <__aeabi_i2d>
 8002470:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002474:	f7fe f8b8 	bl	80005e8 <__aeabi_dmul>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4946      	ldr	r1, [pc, #280]	; (8002598 <motors+0xc28>)
 800247e:	680c      	ldr	r4, [r1, #0]
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	f7fe fb72 	bl	8000b6c <__aeabi_d2uiz>
 8002488:	4603      	mov	r3, r0
 800248a:	6363      	str	r3, [r4, #52]	; 0x34
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, motor_offset_l*pwmVal_motor);
 800248c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002490:	4618      	mov	r0, r3
 8002492:	f7fe f83f 	bl	8000514 <__aeabi_i2d>
 8002496:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800249a:	f7fe f8a5 	bl	80005e8 <__aeabi_dmul>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	493d      	ldr	r1, [pc, #244]	; (8002598 <motors+0xc28>)
 80024a4:	680c      	ldr	r4, [r1, #0]
 80024a6:	4610      	mov	r0, r2
 80024a8:	4619      	mov	r1, r3
 80024aa:	f7fe fb5f 	bl	8000b6c <__aeabi_d2uiz>
 80024ae:	4603      	mov	r3, r0
 80024b0:	63a3      	str	r3, [r4, #56]	; 0x38

						// Let overflow be error to account for
						curAngle = curAngle > 0 ? curAngle - back_angle_threshold : curAngle + back_angle_threshold;
 80024b2:	4b3a      	ldr	r3, [pc, #232]	; (800259c <motors+0xc2c>)
 80024b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	f7fe fb22 	bl	8000b08 <__aeabi_dcmpgt>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00e      	beq.n	80024e8 <motors+0xb78>
 80024ca:	4b34      	ldr	r3, [pc, #208]	; (800259c <motors+0xc2c>)
 80024cc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80024d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80024d2:	f7fe f81f 	bl	8000514 <__aeabi_i2d>
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	4620      	mov	r0, r4
 80024dc:	4629      	mov	r1, r5
 80024de:	f7fd fecb 	bl	8000278 <__aeabi_dsub>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	e009      	b.n	80024fc <motors+0xb8c>
 80024e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80024ea:	f7fe f813 	bl	8000514 <__aeabi_i2d>
 80024ee:	4b2b      	ldr	r3, [pc, #172]	; (800259c <motors+0xc2c>)
 80024f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f4:	f7fd fec2 	bl	800027c <__adddf3>
 80024f8:	4602      	mov	r2, r0
 80024fa:	460b      	mov	r3, r1
 80024fc:	4927      	ldr	r1, [pc, #156]	; (800259c <motors+0xc2c>)
 80024fe:	e9c1 2300 	strd	r2, r3, [r1]

						kp = kp_back;
 8002502:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8002506:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
						ki = 0.8;
 800250a:	2300      	movs	r3, #0
 800250c:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
						eintegral = 0;	// Integral error
 8002510:	2300      	movs	r3, #0
 8002512:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

						osDelay(1000);
 8002516:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800251a:	f005 fdf9 	bl	8008110 <osDelay>

						// Break movement loop
						break;
 800251e:	e364      	b.n	8002bea <motors+0x127a>
					}	// End of Turning

					// To let gyro have the task thread or else OS will only focus on motor thread
					osDelay(10);
 8002520:	200a      	movs	r0, #10
 8002522:	f005 fdf5 	bl	8008110 <osDelay>
					HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002526:	e635      	b.n	8002194 <motors+0x824>
				}
			}

			// No motor/reset values and start gyro
			else if (frontback == 'k') {
 8002528:	4b1f      	ldr	r3, [pc, #124]	; (80025a8 <motors+0xc38>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b6b      	cmp	r3, #107	; 0x6b
 800252e:	d141      	bne.n	80025b4 <motors+0xc44>
				// Reset all values
				encoder_offset = 0;
 8002530:	4b1e      	ldr	r3, [pc, #120]	; (80025ac <motors+0xc3c>)
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
				encoder_error = 0;
 8002536:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <motors+0xc40>)
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
				curAngle = 0;
 800253c:	4917      	ldr	r1, [pc, #92]	; (800259c <motors+0xc2c>)
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	e9c1 2300 	strd	r2, r3, [r1]
				pwmVal_motor = 0;
 800254a:	2300      	movs	r3, #0
 800254c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

				__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmVal_motor);
 8002550:	4b11      	ldr	r3, [pc, #68]	; (8002598 <motors+0xc28>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002558:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmVal_motor);
 800255a:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <motors+0xc28>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002562:	639a      	str	r2, [r3, #56]	; 0x38

				gyroStart();					// Start Gyro Calibration
 8002564:	f008 faf2 	bl	800ab4c <gyroStart>

				osDelay(100);				// Required Delay for calibration
 8002568:	2064      	movs	r0, #100	; 0x64
 800256a:	f005 fdd1 	bl	8008110 <osDelay>
				osDelay((fb_speed - 48) * 50);	// Additional delay if required
 800256e:	4b09      	ldr	r3, [pc, #36]	; (8002594 <motors+0xc24>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	3b30      	subs	r3, #48	; 0x30
 8002574:	2232      	movs	r2, #50	; 0x32
 8002576:	fb02 f303 	mul.w	r3, r2, r3
 800257a:	4618      	mov	r0, r3
 800257c:	f005 fdc8 	bl	8008110 <osDelay>
 8002580:	e333      	b.n	8002bea <motors+0x127a>
 8002582:	bf00      	nop
 8002584:	f3af 8000 	nop.w
 8002588:	66666666 	.word	0x66666666
 800258c:	3fee6666 	.word	0x3fee6666
 8002590:	200002f0 	.word	0x200002f0
 8002594:	20000001 	.word	0x20000001
 8002598:	20000208 	.word	0x20000208
 800259c:	200002e0 	.word	0x200002e0
 80025a0:	20000004 	.word	0x20000004
 80025a4:	200000e8 	.word	0x200000e8
 80025a8:	20000000 	.word	0x20000000
 80025ac:	200002e8 	.word	0x200002e8
 80025b0:	200002ec 	.word	0x200002ec
			}

			// Move backwards (Slow)
			else if (frontback == 'y') {
 80025b4:	4ba6      	ldr	r3, [pc, #664]	; (8002850 <motors+0xee0>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b79      	cmp	r3, #121	; 0x79
 80025ba:	f040 8091 	bne.w	80026e0 <motors+0xd70>

				// E.g. 8cm back movement, target_dist = 80
				target_dist = (int) ((fb_speed - 48) * 10);
 80025be:	4ba5      	ldr	r3, [pc, #660]	; (8002854 <motors+0xee4>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80025c6:	4613      	mov	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	65fb      	str	r3, [r7, #92]	; 0x5c
				// Slow down reference
				pwmVal_motor = motor_min;
 80025d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80025d4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

				// MOTOR A
				HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80025d8:	2200      	movs	r2, #0
 80025da:	2104      	movs	r1, #4
 80025dc:	489e      	ldr	r0, [pc, #632]	; (8002858 <motors+0xee8>)
 80025de:	f001 faf7 	bl	8003bd0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80025e2:	2201      	movs	r2, #1
 80025e4:	2108      	movs	r1, #8
 80025e6:	489c      	ldr	r0, [pc, #624]	; (8002858 <motors+0xee8>)
 80025e8:	f001 faf2 	bl	8003bd0 <HAL_GPIO_WritePin>

				// MOTOR B
				HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80025ec:	2200      	movs	r2, #0
 80025ee:	2120      	movs	r1, #32
 80025f0:	4899      	ldr	r0, [pc, #612]	; (8002858 <motors+0xee8>)
 80025f2:	f001 faed 	bl	8003bd0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 80025f6:	2201      	movs	r2, #1
 80025f8:	2110      	movs	r1, #16
 80025fa:	4897      	ldr	r0, [pc, #604]	; (8002858 <motors+0xee8>)
 80025fc:	f001 fae8 	bl	8003bd0 <HAL_GPIO_WritePin>

				// Move Motor
				__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmVal_motor);
 8002600:	4b96      	ldr	r3, [pc, #600]	; (800285c <motors+0xeec>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002608:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmVal_motor);
 800260a:	4b94      	ldr	r3, [pc, #592]	; (800285c <motors+0xeec>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002612:	639a      	str	r2, [r3, #56]	; 0x38

				while (encoder_dist < (int) target_dist * 0.95) {
 8002614:	e042      	b.n	800269c <motors+0xd2c>
					// PID for error adjustment
					err = curAngle - 0;		// Proportional error
 8002616:	4b92      	ldr	r3, [pc, #584]	; (8002860 <motors+0xef0>)
 8002618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800261c:	4610      	mov	r0, r2
 800261e:	4619      	mov	r1, r3
 8002620:	f7fe fa7c 	bl	8000b1c <__aeabi_d2iz>
 8002624:	4603      	mov	r3, r0
 8002626:	63bb      	str	r3, [r7, #56]	; 0x38
					eintegral += err;		// Integral error
 8002628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800262a:	b29a      	uxth	r2, r3
 800262c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002630:	4413      	add	r3, r2
 8002632:	b29b      	uxth	r3, r3
 8002634:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

					// PID equation (opposite correction)
					servo_val = (uint8_t) (pwmVal_servo - 0.8 * (kp * err + ki * eintegral));
 8002638:	4b8a      	ldr	r3, [pc, #552]	; (8002864 <motors+0xef4>)
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f7fd ff69 	bl	8000514 <__aeabi_i2d>
 8002642:	4604      	mov	r4, r0
 8002644:	460d      	mov	r5, r1
 8002646:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800264a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800264c:	fb03 f202 	mul.w	r2, r3, r2
 8002650:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8002654:	f9b7 1054 	ldrsh.w	r1, [r7, #84]	; 0x54
 8002658:	fb01 f303 	mul.w	r3, r1, r3
 800265c:	4413      	add	r3, r2
 800265e:	4618      	mov	r0, r3
 8002660:	f7fd ff58 	bl	8000514 <__aeabi_i2d>
 8002664:	a376      	add	r3, pc, #472	; (adr r3, 8002840 <motors+0xed0>)
 8002666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266a:	f7fd ffbd 	bl	80005e8 <__aeabi_dmul>
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	4620      	mov	r0, r4
 8002674:	4629      	mov	r1, r5
 8002676:	f7fd fdff 	bl	8000278 <__aeabi_dsub>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	4610      	mov	r0, r2
 8002680:	4619      	mov	r1, r3
 8002682:	f7fe fa73 	bl	8000b6c <__aeabi_d2uiz>
 8002686:	4603      	mov	r3, r0
 8002688:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

					// Set servo value
					htim1.Instance->CCR4 = servo_val;// Turn servo to correct error
 800268c:	4b76      	ldr	r3, [pc, #472]	; (8002868 <motors+0xef8>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002694:	641a      	str	r2, [r3, #64]	; 0x40

					osDelay(1);
 8002696:	2001      	movs	r0, #1
 8002698:	f005 fd3a 	bl	8008110 <osDelay>
				while (encoder_dist < (int) target_dist * 0.95) {
 800269c:	4b73      	ldr	r3, [pc, #460]	; (800286c <motors+0xefc>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fd ff27 	bl	80004f4 <__aeabi_ui2d>
 80026a6:	4604      	mov	r4, r0
 80026a8:	460d      	mov	r5, r1
 80026aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fd ff31 	bl	8000514 <__aeabi_i2d>
 80026b2:	a365      	add	r3, pc, #404	; (adr r3, 8002848 <motors+0xed8>)
 80026b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b8:	f7fd ff96 	bl	80005e8 <__aeabi_dmul>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	4620      	mov	r0, r4
 80026c2:	4629      	mov	r1, r5
 80026c4:	f7fe fa02 	bl	8000acc <__aeabi_dcmplt>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1a3      	bne.n	8002616 <motors+0xca6>
				}

				// Stop motor
				__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
 80026ce:	4b63      	ldr	r3, [pc, #396]	; (800285c <motors+0xeec>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2200      	movs	r2, #0
 80026d4:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0);
 80026d6:	4b61      	ldr	r3, [pc, #388]	; (800285c <motors+0xeec>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2200      	movs	r2, #0
 80026dc:	639a      	str	r2, [r3, #56]	; 0x38
 80026de:	e284      	b.n	8002bea <motors+0x127a>

			}

			// Move forwards (Slow)
			else if (frontback == 'u') {
 80026e0:	4b5b      	ldr	r3, [pc, #364]	; (8002850 <motors+0xee0>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b75      	cmp	r3, #117	; 0x75
 80026e6:	f040 8091 	bne.w	800280c <motors+0xe9c>
				target_dist = (int) ((fb_speed - 48) * 10);
 80026ea:	4b5a      	ldr	r3, [pc, #360]	; (8002854 <motors+0xee4>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	65fb      	str	r3, [r7, #92]	; 0x5c

				// Slow down reference
				pwmVal_motor = motor_min;
 80026fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002700:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

				// MOTOR A
				HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002704:	2201      	movs	r2, #1
 8002706:	2104      	movs	r1, #4
 8002708:	4853      	ldr	r0, [pc, #332]	; (8002858 <motors+0xee8>)
 800270a:	f001 fa61 	bl	8003bd0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 800270e:	2200      	movs	r2, #0
 8002710:	2108      	movs	r1, #8
 8002712:	4851      	ldr	r0, [pc, #324]	; (8002858 <motors+0xee8>)
 8002714:	f001 fa5c 	bl	8003bd0 <HAL_GPIO_WritePin>

				// MOTOR B
				HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8002718:	2201      	movs	r2, #1
 800271a:	2120      	movs	r1, #32
 800271c:	484e      	ldr	r0, [pc, #312]	; (8002858 <motors+0xee8>)
 800271e:	f001 fa57 	bl	8003bd0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8002722:	2200      	movs	r2, #0
 8002724:	2110      	movs	r1, #16
 8002726:	484c      	ldr	r0, [pc, #304]	; (8002858 <motors+0xee8>)
 8002728:	f001 fa52 	bl	8003bd0 <HAL_GPIO_WritePin>

				// Move motor
				__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmVal_motor);
 800272c:	4b4b      	ldr	r3, [pc, #300]	; (800285c <motors+0xeec>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002734:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmVal_motor);
 8002736:	4b49      	ldr	r3, [pc, #292]	; (800285c <motors+0xeec>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800273e:	639a      	str	r2, [r3, #56]	; 0x38

				while (encoder_dist < (int) target_dist * 0.95) {
 8002740:	e042      	b.n	80027c8 <motors+0xe58>
					// PID for error adjustment
					err = curAngle - 0;		// Proportional error
 8002742:	4b47      	ldr	r3, [pc, #284]	; (8002860 <motors+0xef0>)
 8002744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002748:	4610      	mov	r0, r2
 800274a:	4619      	mov	r1, r3
 800274c:	f7fe f9e6 	bl	8000b1c <__aeabi_d2iz>
 8002750:	4603      	mov	r3, r0
 8002752:	63bb      	str	r3, [r7, #56]	; 0x38
					eintegral += err;		// Integral error
 8002754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002756:	b29a      	uxth	r2, r3
 8002758:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800275c:	4413      	add	r3, r2
 800275e:	b29b      	uxth	r3, r3
 8002760:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

					// PID equation
					servo_val = (uint8_t) (pwmVal_servo + 0.8 * (kp * err + ki * eintegral));
 8002764:	4b3f      	ldr	r3, [pc, #252]	; (8002864 <motors+0xef4>)
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f7fd fed3 	bl	8000514 <__aeabi_i2d>
 800276e:	4604      	mov	r4, r0
 8002770:	460d      	mov	r5, r1
 8002772:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002776:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002778:	fb03 f202 	mul.w	r2, r3, r2
 800277c:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8002780:	f9b7 1054 	ldrsh.w	r1, [r7, #84]	; 0x54
 8002784:	fb01 f303 	mul.w	r3, r1, r3
 8002788:	4413      	add	r3, r2
 800278a:	4618      	mov	r0, r3
 800278c:	f7fd fec2 	bl	8000514 <__aeabi_i2d>
 8002790:	a32b      	add	r3, pc, #172	; (adr r3, 8002840 <motors+0xed0>)
 8002792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002796:	f7fd ff27 	bl	80005e8 <__aeabi_dmul>
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	4620      	mov	r0, r4
 80027a0:	4629      	mov	r1, r5
 80027a2:	f7fd fd6b 	bl	800027c <__adddf3>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	4610      	mov	r0, r2
 80027ac:	4619      	mov	r1, r3
 80027ae:	f7fe f9dd 	bl	8000b6c <__aeabi_d2uiz>
 80027b2:	4603      	mov	r3, r0
 80027b4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

					htim1.Instance->CCR4 = servo_val;
 80027b8:	4b2b      	ldr	r3, [pc, #172]	; (8002868 <motors+0xef8>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80027c0:	641a      	str	r2, [r3, #64]	; 0x40

					osDelay(1);
 80027c2:	2001      	movs	r0, #1
 80027c4:	f005 fca4 	bl	8008110 <osDelay>
				while (encoder_dist < (int) target_dist * 0.95) {
 80027c8:	4b28      	ldr	r3, [pc, #160]	; (800286c <motors+0xefc>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fd fe91 	bl	80004f4 <__aeabi_ui2d>
 80027d2:	4604      	mov	r4, r0
 80027d4:	460d      	mov	r5, r1
 80027d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fd fe9b 	bl	8000514 <__aeabi_i2d>
 80027de:	a31a      	add	r3, pc, #104	; (adr r3, 8002848 <motors+0xed8>)
 80027e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e4:	f7fd ff00 	bl	80005e8 <__aeabi_dmul>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4620      	mov	r0, r4
 80027ee:	4629      	mov	r1, r5
 80027f0:	f7fe f96c 	bl	8000acc <__aeabi_dcmplt>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1a3      	bne.n	8002742 <motors+0xdd2>
				}

				// Stop motor
				__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
 80027fa:	4b18      	ldr	r3, [pc, #96]	; (800285c <motors+0xeec>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2200      	movs	r2, #0
 8002800:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0);
 8002802:	4b16      	ldr	r3, [pc, #88]	; (800285c <motors+0xeec>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2200      	movs	r2, #0
 8002808:	639a      	str	r2, [r3, #56]	; 0x38
 800280a:	e1ee      	b.n	8002bea <motors+0x127a>

			}

			else if (frontback == 'l') {
 800280c:	4b10      	ldr	r3, [pc, #64]	; (8002850 <motors+0xee0>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b6c      	cmp	r3, #108	; 0x6c
 8002812:	d12d      	bne.n	8002870 <motors+0xf00>
				// Outside
				if (fb_speed == '1') {
 8002814:	4b0f      	ldr	r3, [pc, #60]	; (8002854 <motors+0xee4>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b31      	cmp	r3, #49	; 0x31
 800281a:	d106      	bne.n	800282a <motors+0xeba>
					grad = 142;
 800281c:	238e      	movs	r3, #142	; 0x8e
 800281e:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
					y_intercept = 50;
 8002822:	2332      	movs	r3, #50	; 0x32
 8002824:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002828:	e1df      	b.n	8002bea <motors+0x127a>
				}

				else {
					grad = 163;
 800282a:	23a3      	movs	r3, #163	; 0xa3
 800282c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
					y_intercept = 55;
 8002830:	2337      	movs	r3, #55	; 0x37
 8002832:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					kp_back = 5;
 8002836:	2305      	movs	r3, #5
 8002838:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 800283c:	e1d5      	b.n	8002bea <motors+0x127a>
 800283e:	bf00      	nop
 8002840:	9999999a 	.word	0x9999999a
 8002844:	3fe99999 	.word	0x3fe99999
 8002848:	66666666 	.word	0x66666666
 800284c:	3fee6666 	.word	0x3fee6666
 8002850:	20000000 	.word	0x20000000
 8002854:	20000001 	.word	0x20000001
 8002858:	40020000 	.word	0x40020000
 800285c:	20000208 	.word	0x20000208
 8002860:	200002e0 	.word	0x200002e0
 8002864:	20000004 	.word	0x20000004
 8002868:	200000e8 	.word	0x200000e8
 800286c:	200002f0 	.word	0x200002f0
				}
			}

			// No Image found (Emergency Fail Safe)
			else if (frontback == 'n') {
 8002870:	4ba1      	ldr	r3, [pc, #644]	; (8002af8 <motors+0x1188>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b6e      	cmp	r3, #110	; 0x6e
 8002876:	f040 8176 	bne.w	8002b66 <motors+0x11f6>
				encoder_dist = 0;
 800287a:	4ba0      	ldr	r3, [pc, #640]	; (8002afc <motors+0x118c>)
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]

				int8_t angle_to_turn;

				// Initialise motor
				// MOTOR A
				HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002880:	2201      	movs	r2, #1
 8002882:	2104      	movs	r1, #4
 8002884:	489e      	ldr	r0, [pc, #632]	; (8002b00 <motors+0x1190>)
 8002886:	f001 f9a3 	bl	8003bd0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 800288a:	2200      	movs	r2, #0
 800288c:	2108      	movs	r1, #8
 800288e:	489c      	ldr	r0, [pc, #624]	; (8002b00 <motors+0x1190>)
 8002890:	f001 f99e 	bl	8003bd0 <HAL_GPIO_WritePin>

				// MOTOR B
				HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8002894:	2201      	movs	r2, #1
 8002896:	2120      	movs	r1, #32
 8002898:	4899      	ldr	r0, [pc, #612]	; (8002b00 <motors+0x1190>)
 800289a:	f001 f999 	bl	8003bd0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 800289e:	2200      	movs	r2, #0
 80028a0:	2110      	movs	r1, #16
 80028a2:	4897      	ldr	r0, [pc, #604]	; (8002b00 <motors+0x1190>)
 80028a4:	f001 f994 	bl	8003bd0 <HAL_GPIO_WritePin>

				// Clockwise search
				if (search_dir == 0) {
 80028a8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f040 809d 	bne.w	80029ec <motors+0x107c>
					// Turn the wheel
					htim1.Instance->CCR4 = pwmVal_servo + 40;// similar to u5a0
 80028b2:	4b94      	ldr	r3, [pc, #592]	; (8002b04 <motors+0x1194>)
 80028b4:	881b      	ldrh	r3, [r3, #0]
 80028b6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80028ba:	4b93      	ldr	r3, [pc, #588]	; (8002b08 <motors+0x1198>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	641a      	str	r2, [r3, #64]	; 0x40

					// Move motor
					__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 800);
 80028c0:	4b92      	ldr	r3, [pc, #584]	; (8002b0c <motors+0x119c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80028c8:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 2600);
 80028ca:	4b90      	ldr	r3, [pc, #576]	; (8002b0c <motors+0x119c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f640 2228 	movw	r2, #2600	; 0xa28
 80028d2:	639a      	str	r2, [r3, #56]	; 0x38

					angle_to_turn = curAngle - (int) (turn_angle / 2);
 80028d4:	4b8e      	ldr	r3, [pc, #568]	; (8002b10 <motors+0x11a0>)
 80028d6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80028da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028dc:	0fda      	lsrs	r2, r3, #31
 80028de:	4413      	add	r3, r2
 80028e0:	105b      	asrs	r3, r3, #1
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fd fe16 	bl	8000514 <__aeabi_i2d>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	4620      	mov	r0, r4
 80028ee:	4629      	mov	r1, r5
 80028f0:	f7fd fcc2 	bl	8000278 <__aeabi_dsub>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4610      	mov	r0, r2
 80028fa:	4619      	mov	r1, r3
 80028fc:	f7fe f90e 	bl	8000b1c <__aeabi_d2iz>
 8002900:	4603      	mov	r3, r0
 8002902:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

					// Move til angle threshold
					while (curAngle > angle_to_turn) // Turn 45 degree
 8002906:	e002      	b.n	800290e <motors+0xf9e>
						osDelay(10);
 8002908:	200a      	movs	r0, #10
 800290a:	f005 fc01 	bl	8008110 <osDelay>
					while (curAngle > angle_to_turn) // Turn 45 degree
 800290e:	f997 303c 	ldrsb.w	r3, [r7, #60]	; 0x3c
 8002912:	4618      	mov	r0, r3
 8002914:	f7fd fdfe 	bl	8000514 <__aeabi_i2d>
 8002918:	4b7d      	ldr	r3, [pc, #500]	; (8002b10 <motors+0x11a0>)
 800291a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291e:	f7fe f8d5 	bl	8000acc <__aeabi_dcmplt>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1ef      	bne.n	8002908 <motors+0xf98>

					// Stop motor
					__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
 8002928:	4b78      	ldr	r3, [pc, #480]	; (8002b0c <motors+0x119c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2200      	movs	r2, #0
 800292e:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0);
 8002930:	4b76      	ldr	r3, [pc, #472]	; (8002b0c <motors+0x119c>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2200      	movs	r2, #0
 8002936:	639a      	str	r2, [r3, #56]	; 0x38

					osDelay(500);
 8002938:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800293c:	f005 fbe8 	bl	8008110 <osDelay>

					htim1.Instance->CCR4 = pwmVal_servo;
 8002940:	4b70      	ldr	r3, [pc, #448]	; (8002b04 <motors+0x1194>)
 8002942:	881a      	ldrh	r2, [r3, #0]
 8002944:	4b70      	ldr	r3, [pc, #448]	; (8002b08 <motors+0x1198>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	641a      	str	r2, [r3, #64]	; 0x40

					// Let it go back same amount
					target_dist = 0.9 * encoder_dist;
 800294a:	4b6c      	ldr	r3, [pc, #432]	; (8002afc <motors+0x118c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7fd fdd0 	bl	80004f4 <__aeabi_ui2d>
 8002954:	a366      	add	r3, pc, #408	; (adr r3, 8002af0 <motors+0x1180>)
 8002956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295a:	f7fd fe45 	bl	80005e8 <__aeabi_dmul>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	4610      	mov	r0, r2
 8002964:	4619      	mov	r1, r3
 8002966:	f7fe f901 	bl	8000b6c <__aeabi_d2uiz>
 800296a:	4603      	mov	r3, r0
 800296c:	65fb      	str	r3, [r7, #92]	; 0x5c
					encoder_dist = 0;
 800296e:	4b63      	ldr	r3, [pc, #396]	; (8002afc <motors+0x118c>)
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]

					// Reverse Motor
					// MOTOR A
					HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002974:	2200      	movs	r2, #0
 8002976:	2104      	movs	r1, #4
 8002978:	4861      	ldr	r0, [pc, #388]	; (8002b00 <motors+0x1190>)
 800297a:	f001 f929 	bl	8003bd0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800297e:	2201      	movs	r2, #1
 8002980:	2108      	movs	r1, #8
 8002982:	485f      	ldr	r0, [pc, #380]	; (8002b00 <motors+0x1190>)
 8002984:	f001 f924 	bl	8003bd0 <HAL_GPIO_WritePin>

					// MOTOR B
					HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8002988:	2200      	movs	r2, #0
 800298a:	2120      	movs	r1, #32
 800298c:	485c      	ldr	r0, [pc, #368]	; (8002b00 <motors+0x1190>)
 800298e:	f001 f91f 	bl	8003bd0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8002992:	2201      	movs	r2, #1
 8002994:	2110      	movs	r1, #16
 8002996:	485a      	ldr	r0, [pc, #360]	; (8002b00 <motors+0x1190>)
 8002998:	f001 f91a 	bl	8003bd0 <HAL_GPIO_WritePin>

					osDelay(10);
 800299c:	200a      	movs	r0, #10
 800299e:	f005 fbb7 	bl	8008110 <osDelay>

					// Move motor
					__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 2000);
 80029a2:	4b5a      	ldr	r3, [pc, #360]	; (8002b0c <motors+0x119c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80029aa:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 2000);
 80029ac:	4b57      	ldr	r3, [pc, #348]	; (8002b0c <motors+0x119c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80029b4:	639a      	str	r2, [r3, #56]	; 0x38

					while (encoder_dist < target_dist) {
 80029b6:	e002      	b.n	80029be <motors+0x104e>
						osDelay(10);
 80029b8:	200a      	movs	r0, #10
 80029ba:	f005 fba9 	bl	8008110 <osDelay>
					while (encoder_dist < target_dist) {
 80029be:	4b4f      	ldr	r3, [pc, #316]	; (8002afc <motors+0x118c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d8f7      	bhi.n	80029b8 <motors+0x1048>
					}

					// Stop motor
					__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
 80029c8:	4b50      	ldr	r3, [pc, #320]	; (8002b0c <motors+0x119c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2200      	movs	r2, #0
 80029ce:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0);
 80029d0:	4b4e      	ldr	r3, [pc, #312]	; (8002b0c <motors+0x119c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2200      	movs	r2, #0
 80029d6:	639a      	str	r2, [r3, #56]	; 0x38

					search_dir = !search_dir;
 80029d8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80029dc:	2b00      	cmp	r3, #0
 80029de:	bf0c      	ite	eq
 80029e0:	2301      	moveq	r3, #1
 80029e2:	2300      	movne	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 80029ea:	e0fe      	b.n	8002bea <motors+0x127a>
					//					if(abs(curAngle) > abs(turn_angle)){
				}

				else {
					// Turn the wheel
					htim1.Instance->CCR4 = pwmVal_servo - 30;// similar to u5a0
 80029ec:	4b45      	ldr	r3, [pc, #276]	; (8002b04 <motors+0x1194>)
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	f1a3 021e 	sub.w	r2, r3, #30
 80029f4:	4b44      	ldr	r3, [pc, #272]	; (8002b08 <motors+0x1198>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	641a      	str	r2, [r3, #64]	; 0x40

					// Move motor
					__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 2600);
 80029fa:	4b44      	ldr	r3, [pc, #272]	; (8002b0c <motors+0x119c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f640 2228 	movw	r2, #2600	; 0xa28
 8002a02:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 800);
 8002a04:	4b41      	ldr	r3, [pc, #260]	; (8002b0c <motors+0x119c>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002a0c:	639a      	str	r2, [r3, #56]	; 0x38

					angle_to_turn = curAngle + (int) (turn_angle / 2);
 8002a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a10:	0fda      	lsrs	r2, r3, #31
 8002a12:	4413      	add	r3, r2
 8002a14:	105b      	asrs	r3, r3, #1
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fd fd7c 	bl	8000514 <__aeabi_i2d>
 8002a1c:	4b3c      	ldr	r3, [pc, #240]	; (8002b10 <motors+0x11a0>)
 8002a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a22:	f7fd fc2b 	bl	800027c <__adddf3>
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	4610      	mov	r0, r2
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	f7fe f875 	bl	8000b1c <__aeabi_d2iz>
 8002a32:	4603      	mov	r3, r0
 8002a34:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

					// Move til angle threshold
					while (curAngle < angle_to_turn) // Turn 45 degree
 8002a38:	e002      	b.n	8002a40 <motors+0x10d0>
						osDelay(10);
 8002a3a:	200a      	movs	r0, #10
 8002a3c:	f005 fb68 	bl	8008110 <osDelay>
					while (curAngle < angle_to_turn) // Turn 45 degree
 8002a40:	f997 303c 	ldrsb.w	r3, [r7, #60]	; 0x3c
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fd fd65 	bl	8000514 <__aeabi_i2d>
 8002a4a:	4b31      	ldr	r3, [pc, #196]	; (8002b10 <motors+0x11a0>)
 8002a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a50:	f7fe f85a 	bl	8000b08 <__aeabi_dcmpgt>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1ef      	bne.n	8002a3a <motors+0x10ca>

					// Stop motor
					__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
 8002a5a:	4b2c      	ldr	r3, [pc, #176]	; (8002b0c <motors+0x119c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0);
 8002a62:	4b2a      	ldr	r3, [pc, #168]	; (8002b0c <motors+0x119c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2200      	movs	r2, #0
 8002a68:	639a      	str	r2, [r3, #56]	; 0x38

					osDelay(500);
 8002a6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a6e:	f005 fb4f 	bl	8008110 <osDelay>

					htim1.Instance->CCR4 = pwmVal_servo;
 8002a72:	4b24      	ldr	r3, [pc, #144]	; (8002b04 <motors+0x1194>)
 8002a74:	881a      	ldrh	r2, [r3, #0]
 8002a76:	4b24      	ldr	r3, [pc, #144]	; (8002b08 <motors+0x1198>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	641a      	str	r2, [r3, #64]	; 0x40

					// Let it go back same amount
					target_dist = 0.9 * encoder_dist;
 8002a7c:	4b1f      	ldr	r3, [pc, #124]	; (8002afc <motors+0x118c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7fd fd37 	bl	80004f4 <__aeabi_ui2d>
 8002a86:	a31a      	add	r3, pc, #104	; (adr r3, 8002af0 <motors+0x1180>)
 8002a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8c:	f7fd fdac 	bl	80005e8 <__aeabi_dmul>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4610      	mov	r0, r2
 8002a96:	4619      	mov	r1, r3
 8002a98:	f7fe f868 	bl	8000b6c <__aeabi_d2uiz>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	65fb      	str	r3, [r7, #92]	; 0x5c
					encoder_dist = 0;
 8002aa0:	4b16      	ldr	r3, [pc, #88]	; (8002afc <motors+0x118c>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]

					// Reverse Motor
					// MOTOR A
					HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2104      	movs	r1, #4
 8002aaa:	4815      	ldr	r0, [pc, #84]	; (8002b00 <motors+0x1190>)
 8002aac:	f001 f890 	bl	8003bd0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	2108      	movs	r1, #8
 8002ab4:	4812      	ldr	r0, [pc, #72]	; (8002b00 <motors+0x1190>)
 8002ab6:	f001 f88b 	bl	8003bd0 <HAL_GPIO_WritePin>

					// MOTOR B
					HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8002aba:	2200      	movs	r2, #0
 8002abc:	2120      	movs	r1, #32
 8002abe:	4810      	ldr	r0, [pc, #64]	; (8002b00 <motors+0x1190>)
 8002ac0:	f001 f886 	bl	8003bd0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	2110      	movs	r1, #16
 8002ac8:	480d      	ldr	r0, [pc, #52]	; (8002b00 <motors+0x1190>)
 8002aca:	f001 f881 	bl	8003bd0 <HAL_GPIO_WritePin>

					osDelay(10);
 8002ace:	200a      	movs	r0, #10
 8002ad0:	f005 fb1e 	bl	8008110 <osDelay>

					// Move motor
					__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 2000);
 8002ad4:	4b0d      	ldr	r3, [pc, #52]	; (8002b0c <motors+0x119c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002adc:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 2000);
 8002ade:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <motors+0x119c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002ae6:	639a      	str	r2, [r3, #56]	; 0x38

					while (encoder_dist < target_dist) {
 8002ae8:	e017      	b.n	8002b1a <motors+0x11aa>
 8002aea:	bf00      	nop
 8002aec:	f3af 8000 	nop.w
 8002af0:	cccccccd 	.word	0xcccccccd
 8002af4:	3feccccc 	.word	0x3feccccc
 8002af8:	20000000 	.word	0x20000000
 8002afc:	200002f0 	.word	0x200002f0
 8002b00:	40020000 	.word	0x40020000
 8002b04:	20000004 	.word	0x20000004
 8002b08:	200000e8 	.word	0x200000e8
 8002b0c:	20000208 	.word	0x20000208
 8002b10:	200002e0 	.word	0x200002e0
						osDelay(10);
 8002b14:	200a      	movs	r0, #10
 8002b16:	f005 fafb 	bl	8008110 <osDelay>
					while (encoder_dist < target_dist) {
 8002b1a:	4b44      	ldr	r3, [pc, #272]	; (8002c2c <motors+0x12bc>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d8f7      	bhi.n	8002b14 <motors+0x11a4>
					}

					// Stop motor
					__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
 8002b24:	4b42      	ldr	r3, [pc, #264]	; (8002c30 <motors+0x12c0>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0);
 8002b2c:	4b40      	ldr	r3, [pc, #256]	; (8002c30 <motors+0x12c0>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2200      	movs	r2, #0
 8002b32:	639a      	str	r2, [r3, #56]	; 0x38

					if (curAngle >= turn_angle / 2)
 8002b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b36:	0fda      	lsrs	r2, r3, #31
 8002b38:	4413      	add	r3, r2
 8002b3a:	105b      	asrs	r3, r3, #1
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fd fce9 	bl	8000514 <__aeabi_i2d>
 8002b42:	4b3c      	ldr	r3, [pc, #240]	; (8002c34 <motors+0x12c4>)
 8002b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b48:	f7fd ffca 	bl	8000ae0 <__aeabi_dcmple>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d04b      	beq.n	8002bea <motors+0x127a>
						search_dir = !search_dir;
 8002b52:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	bf0c      	ite	eq
 8002b5a:	2301      	moveq	r3, #1
 8002b5c:	2300      	movne	r3, #0
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8002b64:	e041      	b.n	8002bea <motors+0x127a>
				}

			}

			// Read Ultrasonic Sensor for distance
			else if (frontback == 'h') {
 8002b66:	4b34      	ldr	r3, [pc, #208]	; (8002c38 <motors+0x12c8>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b68      	cmp	r3, #104	; 0x68
 8002b6c:	d118      	bne.n	8002ba0 <motors+0x1230>
				osDelay(100);
 8002b6e:	2064      	movs	r0, #100	; 0x64
 8002b70:	f005 face 	bl	8008110 <osDelay>
				HCSR04_Read();
 8002b74:	f7fe f9b2 	bl	8000edc <HCSR04_Read>

				msg[1] = Distance;
 8002b78:	4b30      	ldr	r3, [pc, #192]	; (8002c3c <motors+0x12cc>)
 8002b7a:	781a      	ldrb	r2, [r3, #0]
 8002b7c:	4b30      	ldr	r3, [pc, #192]	; (8002c40 <motors+0x12d0>)
 8002b7e:	705a      	strb	r2, [r3, #1]
				if (HAL_UART_Transmit(&huart3, (uint8_t*) msg, 2, 0xFFFF) == HAL_OK)
 8002b80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b84:	2202      	movs	r2, #2
 8002b86:	492e      	ldr	r1, [pc, #184]	; (8002c40 <motors+0x12d0>)
 8002b88:	482e      	ldr	r0, [pc, #184]	; (8002c44 <motors+0x12d4>)
 8002b8a:	f004 f9ab 	bl	8006ee4 <HAL_UART_Transmit>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d12a      	bne.n	8002bea <motors+0x127a>
					HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8002b94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b98:	482b      	ldr	r0, [pc, #172]	; (8002c48 <motors+0x12d8>)
 8002b9a:	f001 f832 	bl	8003c02 <HAL_GPIO_TogglePin>
 8002b9e:	e024      	b.n	8002bea <motors+0x127a>
			}

			// Send Message to Rpi to signify completion
			else if (frontback == 'm') {
 8002ba0:	4b25      	ldr	r3, [pc, #148]	; (8002c38 <motors+0x12c8>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b6d      	cmp	r3, #109	; 0x6d
 8002ba6:	d120      	bne.n	8002bea <motors+0x127a>
				osDelay(100);
 8002ba8:	2064      	movs	r0, #100	; 0x64
 8002baa:	f005 fab1 	bl	8008110 <osDelay>

				msg[0] = 'e';
 8002bae:	4b24      	ldr	r3, [pc, #144]	; (8002c40 <motors+0x12d0>)
 8002bb0:	2265      	movs	r2, #101	; 0x65
 8002bb2:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 4; j++) {
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	647b      	str	r3, [r7, #68]	; 0x44
 8002bb8:	e00c      	b.n	8002bd4 <motors+0x1264>
					HAL_UART_Transmit(&huart3, (uint8_t*) msg, 2, 0xFFFF);
 8002bba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	491f      	ldr	r1, [pc, #124]	; (8002c40 <motors+0x12d0>)
 8002bc2:	4820      	ldr	r0, [pc, #128]	; (8002c44 <motors+0x12d4>)
 8002bc4:	f004 f98e 	bl	8006ee4 <HAL_UART_Transmit>
					osDelay(100);
 8002bc8:	2064      	movs	r0, #100	; 0x64
 8002bca:	f005 faa1 	bl	8008110 <osDelay>
				for (int j = 0; j < 4; j++) {
 8002bce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	647b      	str	r3, [r7, #68]	; 0x44
 8002bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	ddef      	ble.n	8002bba <motors+0x124a>
				}
				HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8002bda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bde:	481a      	ldr	r0, [pc, #104]	; (8002c48 <motors+0x12d8>)
 8002be0:	f001 f80f 	bl	8003c02 <HAL_GPIO_TogglePin>

				msg[0] = 'w';
 8002be4:	4b16      	ldr	r3, [pc, #88]	; (8002c40 <motors+0x12d0>)
 8002be6:	2277      	movs	r2, #119	; 0x77
 8002be8:	701a      	strb	r2, [r3, #0]
			}

			osDelay(10);
 8002bea:	200a      	movs	r0, #10
 8002bec:	f005 fa90 	bl	8008110 <osDelay>
			dequeue(&q);
 8002bf0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fe fe0a 	bl	800180e <dequeue>
 8002bfa:	f7fe bf25 	b.w	8001a48 <motors+0xd8>

		}	// ENDIF Queue not empty

		// Queue empty
		else {
			reset_motorVal();	//Reset the values
 8002bfe:	f7fe fdaf 	bl	8001760 <reset_motorVal>
			pwmVal_motor = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

			htim1.Instance->CCR4 = pwmVal_servo;	// Reset Servo values
 8002c08:	4b10      	ldr	r3, [pc, #64]	; (8002c4c <motors+0x12dc>)
 8002c0a:	881a      	ldrh	r2, [r3, #0]
 8002c0c:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <motors+0x12e0>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	641a      	str	r2, [r3, #64]	; 0x40

			// Stop motor
			__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmVal_motor);
 8002c12:	4b07      	ldr	r3, [pc, #28]	; (8002c30 <motors+0x12c0>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002c1a:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmVal_motor);
 8002c1c:	4b04      	ldr	r3, [pc, #16]	; (8002c30 <motors+0x12c0>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8002c24:	639a      	str	r2, [r3, #56]	; 0x38
		if (isEmptyQueue(q) != 1) {
 8002c26:	f7fe bf0f 	b.w	8001a48 <motors+0xd8>
 8002c2a:	bf00      	nop
 8002c2c:	200002f0 	.word	0x200002f0
 8002c30:	20000208 	.word	0x20000208
 8002c34:	200002e0 	.word	0x200002e0
 8002c38:	20000000 	.word	0x20000000
 8002c3c:	20000012 	.word	0x20000012
 8002c40:	20000010 	.word	0x20000010
 8002c44:	20000250 	.word	0x20000250
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	20000004 	.word	0x20000004
 8002c50:	200000e8 	.word	0x200000e8

08002c54 <encoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder */
void encoder(void *argument)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08c      	sub	sp, #48	; 0x30
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder */

  //Initializes Timer 2 to start counting pulses from encoder on input channels
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002c5c:	213c      	movs	r1, #60	; 0x3c
 8002c5e:	483a      	ldr	r0, [pc, #232]	; (8002d48 <encoder+0xf4>)
 8002c60:	f002 fff2 	bl	8005c48 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8002c64:	213c      	movs	r1, #60	; 0x3c
 8002c66:	4839      	ldr	r0, [pc, #228]	; (8002d4c <encoder+0xf8>)
 8002c68:	f002 ffee 	bl	8005c48 <HAL_TIM_Encoder_Start>

  //Store encoder counts at different times
  int cnt1, cnt3;
  //hold difference in encoder counts, used to calculate speed
  int diffa=0, diffb=0;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c70:	2300      	movs	r3, #0
 8002c72:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t tick;
  //format strings for OLED
  uint8_t msg[20];

  //obtain current system time in ms
  tick = HAL_GetTick();
 8002c74:	f000 fc3c 	bl	80034f0 <HAL_GetTick>
 8002c78:	6278      	str	r0, [r7, #36]	; 0x24
  /* Infinite loop */
  //checks encoder's position and calculating speed based on position change over time
  for(;;)
  {
		// Every 1000 ticks, get reading(How fast wheel turn)
		if(HAL_GetTick()-tick > 10){
 8002c7a:	f000 fc39 	bl	80034f0 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b0a      	cmp	r3, #10
 8002c86:	d9f8      	bls.n	8002c7a <encoder+0x26>

			// At rising edge, counter increase by 1
			cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8002c88:	4b2f      	ldr	r3, [pc, #188]	; (8002d48 <encoder+0xf4>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	623b      	str	r3, [r7, #32]
			cnt3 = __HAL_TIM_GET_COUNTER(&htim3);
 8002c90:	4b2e      	ldr	r3, [pc, #184]	; (8002d4c <encoder+0xf8>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	61fb      	str	r3, [r7, #28]

			/* Motor A */
			// Counting up; Motor moving forward
			// 32500 is the max tick
			if (cnt1 - 32500 > 0) {
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	f647 62f4 	movw	r2, #32500	; 0x7ef4
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	dd05      	ble.n	8002cae <encoder+0x5a>
				diffa = cnt1 - 65535;
 8002ca2:	6a3b      	ldr	r3, [r7, #32]
 8002ca4:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8002ca8:	3bff      	subs	r3, #255	; 0xff
 8002caa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cac:	e006      	b.n	8002cbc <encoder+0x68>
			}
			// Counting down; Motor moving backward
			else if (cnt1 - 32500 < 0) {
 8002cae:	6a3b      	ldr	r3, [r7, #32]
 8002cb0:	f647 62f3 	movw	r2, #32499	; 0x7ef3
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	dc01      	bgt.n	8002cbc <encoder+0x68>
				diffa = cnt1;
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	62fb      	str	r3, [r7, #44]	; 0x2c
			}

			/* Motor B */
			// Counting up; Motor moving backward
			if (cnt3 - 32500 > 0) {
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f647 62f4 	movw	r2, #32500	; 0x7ef4
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	dd05      	ble.n	8002cd2 <encoder+0x7e>
				diffb = (cnt3 - 65535);
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8002ccc:	3bff      	subs	r3, #255	; 0xff
 8002cce:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cd0:	e006      	b.n	8002ce0 <encoder+0x8c>
			}
			// Counting down; Motor moving forward
			else if (cnt3 - 32500 < 0) {
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	f647 62f3 	movw	r2, #32499	; 0x7ef3
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	dc01      	bgt.n	8002ce0 <encoder+0x8c>
				diffb = cnt3;
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			encoder_error = diffa + diffb;
 8002ce0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce4:	4413      	add	r3, r2
 8002ce6:	4a1a      	ldr	r2, [pc, #104]	; (8002d50 <encoder+0xfc>)
 8002ce8:	6013      	str	r3, [r2, #0]
			// Updating of total distance
			encoder_dist += (abs(diffa) + abs(diffb));
 8002cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cec:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002cf0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	bfb8      	it	lt
 8002cfa:	425b      	neglt	r3, r3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	461a      	mov	r2, r3
 8002d00:	4b14      	ldr	r3, [pc, #80]	; (8002d54 <encoder+0x100>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4413      	add	r3, r2
 8002d06:	4a13      	ldr	r2, [pc, #76]	; (8002d54 <encoder+0x100>)
 8002d08:	6013      	str	r3, [r2, #0]

			//sprintf(msg, "Diff:%3d\0", encoder_error);
			//OLED_ShowString(10, 30, msg);

			//Distance (meters)= (PPR×Gear Ratio/Encoder Counts)*Wheel Circumference (meters)
			sprintf(msg, "Dist:%3d\0", encoder_dist);
 8002d0a:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <encoder+0x100>)
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	f107 0308 	add.w	r3, r7, #8
 8002d12:	4911      	ldr	r1, [pc, #68]	; (8002d58 <encoder+0x104>)
 8002d14:	4618      	mov	r0, r3
 8002d16:	f008 faad 	bl	800b274 <siprintf>
			OLED_ShowString(10, 40, msg);
 8002d1a:	f107 0308 	add.w	r3, r7, #8
 8002d1e:	461a      	mov	r2, r3
 8002d20:	2128      	movs	r1, #40	; 0x28
 8002d22:	200a      	movs	r0, #10
 8002d24:	f008 f92c 	bl	800af80 <OLED_ShowString>

			// Reset base tick
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002d28:	4b07      	ldr	r3, [pc, #28]	; (8002d48 <encoder+0xf4>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002d30:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <encoder+0xf8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2200      	movs	r2, #0
 8002d36:	625a      	str	r2, [r3, #36]	; 0x24

			tick = HAL_GetTick();
 8002d38:	f000 fbda 	bl	80034f0 <HAL_GetTick>
 8002d3c:	6278      	str	r0, [r7, #36]	; 0x24

			osDelay(10);
 8002d3e:	200a      	movs	r0, #10
 8002d40:	f005 f9e6 	bl	8008110 <osDelay>
		if(HAL_GetTick()-tick > 10){
 8002d44:	e799      	b.n	8002c7a <encoder+0x26>
 8002d46:	bf00      	nop
 8002d48:	20000130 	.word	0x20000130
 8002d4c:	20000178 	.word	0x20000178
 8002d50:	200002ec 	.word	0x200002ec
 8002d54:	200002f0 	.word	0x200002f0
 8002d58:	0800badc 	.word	0x0800badc
 8002d5c:	00000000 	.word	0x00000000

08002d60 <gryo_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_gryo_task */
void gryo_task(void *argument)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN gyro_task */
	/* Infinite loop */
	uint8_t val[2] = { 0, 0 }; // To store ICM gyro values
 8002d68:	2300      	movs	r3, #0
 8002d6a:	82bb      	strh	r3, [r7, #20]
	gyroInit();
 8002d6c:	f007 ff00 	bl	800ab70 <gyroInit>
	int16_t angular_speed = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	83fb      	strh	r3, [r7, #30]
	int16_t angle = 0;
 8002d74:	2300      	movs	r3, #0
 8002d76:	83bb      	strh	r3, [r7, #28]

	curAngle = 0;
 8002d78:	492d      	ldr	r1, [pc, #180]	; (8002e30 <gryo_task+0xd0>)
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	e9c1 2300 	strd	r2, r3, [r1]
	uint32_t tick = HAL_GetTick();
 8002d86:	f000 fbb3 	bl	80034f0 <HAL_GetTick>
 8002d8a:	61b8      	str	r0, [r7, #24]
	osDelay(100);
 8002d8c:	2064      	movs	r0, #100	; 0x64
 8002d8e:	f005 f9bf 	bl	8008110 <osDelay>
	for (;;) {
		uint8_t msg[8];
		readByte(0x37, val);
 8002d92:	f107 0314 	add.w	r3, r7, #20
 8002d96:	4619      	mov	r1, r3
 8002d98:	2037      	movs	r0, #55	; 0x37
 8002d9a:	f007 ff2d 	bl	800abf8 <readByte>
		angular_speed = (val[0] << 8) | val[1];	// appending the 2 bytes together
 8002d9e:	7d3b      	ldrb	r3, [r7, #20]
 8002da0:	021b      	lsls	r3, r3, #8
 8002da2:	b21a      	sxth	r2, r3
 8002da4:	7d7b      	ldrb	r3, [r7, #21]
 8002da6:	b21b      	sxth	r3, r3
 8002da8:	4313      	orrs	r3, r2
 8002daa:	83fb      	strh	r3, [r7, #30]
		angle = ((double) (angular_speed * (100)) / 10000.0); //1.69
 8002dac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002db0:	2264      	movs	r2, #100	; 0x64
 8002db2:	fb02 f303 	mul.w	r3, r2, r3
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fd fbac 	bl	8000514 <__aeabi_i2d>
 8002dbc:	a31a      	add	r3, pc, #104	; (adr r3, 8002e28 <gryo_task+0xc8>)
 8002dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc2:	f7fd fd3b 	bl	800083c <__aeabi_ddiv>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4610      	mov	r0, r2
 8002dcc:	4619      	mov	r1, r3
 8002dce:	f7fd fea5 	bl	8000b1c <__aeabi_d2iz>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	83bb      	strh	r3, [r7, #28]

		curAngle += angle;
 8002dd6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fd fb9a 	bl	8000514 <__aeabi_i2d>
 8002de0:	4b13      	ldr	r3, [pc, #76]	; (8002e30 <gryo_task+0xd0>)
 8002de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de6:	f7fd fa49 	bl	800027c <__adddf3>
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4910      	ldr	r1, [pc, #64]	; (8002e30 <gryo_task+0xd0>)
 8002df0:	e9c1 2300 	strd	r2, r3, [r1]

		sprintf(msg, "gyro : %3d\0", (int) curAngle);
 8002df4:	4b0e      	ldr	r3, [pc, #56]	; (8002e30 <gryo_task+0xd0>)
 8002df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfa:	4610      	mov	r0, r2
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	f7fd fe8d 	bl	8000b1c <__aeabi_d2iz>
 8002e02:	4602      	mov	r2, r0
 8002e04:	f107 030c 	add.w	r3, r7, #12
 8002e08:	490a      	ldr	r1, [pc, #40]	; (8002e34 <gryo_task+0xd4>)
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f008 fa32 	bl	800b274 <siprintf>
		OLED_ShowString(10, 20, msg);
 8002e10:	f107 030c 	add.w	r3, r7, #12
 8002e14:	461a      	mov	r2, r3
 8002e16:	2114      	movs	r1, #20
 8002e18:	200a      	movs	r0, #10
 8002e1a:	f008 f8b1 	bl	800af80 <OLED_ShowString>

		osDelay(100);
 8002e1e:	2064      	movs	r0, #100	; 0x64
 8002e20:	f005 f976 	bl	8008110 <osDelay>
	for (;;) {
 8002e24:	e7b5      	b.n	8002d92 <gryo_task+0x32>
 8002e26:	bf00      	nop
 8002e28:	00000000 	.word	0x00000000
 8002e2c:	40c38800 	.word	0x40c38800
 8002e30:	200002e0 	.word	0x200002e0
 8002e34:	0800bae8 	.word	0x0800bae8

08002e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e3c:	b672      	cpsid	i
}
 8002e3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e40:	e7fe      	b.n	8002e40 <Error_Handler+0x8>
	...

08002e44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	607b      	str	r3, [r7, #4]
 8002e4e:	4b12      	ldr	r3, [pc, #72]	; (8002e98 <HAL_MspInit+0x54>)
 8002e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e52:	4a11      	ldr	r2, [pc, #68]	; (8002e98 <HAL_MspInit+0x54>)
 8002e54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e58:	6453      	str	r3, [r2, #68]	; 0x44
 8002e5a:	4b0f      	ldr	r3, [pc, #60]	; (8002e98 <HAL_MspInit+0x54>)
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e62:	607b      	str	r3, [r7, #4]
 8002e64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	603b      	str	r3, [r7, #0]
 8002e6a:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <HAL_MspInit+0x54>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	4a0a      	ldr	r2, [pc, #40]	; (8002e98 <HAL_MspInit+0x54>)
 8002e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e74:	6413      	str	r3, [r2, #64]	; 0x40
 8002e76:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <HAL_MspInit+0x54>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7e:	603b      	str	r3, [r7, #0]
 8002e80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e82:	2200      	movs	r2, #0
 8002e84:	210f      	movs	r1, #15
 8002e86:	f06f 0001 	mvn.w	r0, #1
 8002e8a:	f000 fc3c 	bl	8003706 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40023800 	.word	0x40023800

08002e9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b08a      	sub	sp, #40	; 0x28
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea4:	f107 0314 	add.w	r3, r7, #20
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	605a      	str	r2, [r3, #4]
 8002eae:	609a      	str	r2, [r3, #8]
 8002eb0:	60da      	str	r2, [r3, #12]
 8002eb2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a19      	ldr	r2, [pc, #100]	; (8002f20 <HAL_I2C_MspInit+0x84>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d12c      	bne.n	8002f18 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	4b18      	ldr	r3, [pc, #96]	; (8002f24 <HAL_I2C_MspInit+0x88>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	4a17      	ldr	r2, [pc, #92]	; (8002f24 <HAL_I2C_MspInit+0x88>)
 8002ec8:	f043 0302 	orr.w	r3, r3, #2
 8002ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ece:	4b15      	ldr	r3, [pc, #84]	; (8002f24 <HAL_I2C_MspInit+0x88>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002eda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ee0:	2312      	movs	r3, #18
 8002ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002eec:	2304      	movs	r3, #4
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef0:	f107 0314 	add.w	r3, r7, #20
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	480c      	ldr	r0, [pc, #48]	; (8002f28 <HAL_I2C_MspInit+0x8c>)
 8002ef8:	f000 fcce 	bl	8003898 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002efc:	2300      	movs	r3, #0
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	4b08      	ldr	r3, [pc, #32]	; (8002f24 <HAL_I2C_MspInit+0x88>)
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	4a07      	ldr	r2, [pc, #28]	; (8002f24 <HAL_I2C_MspInit+0x88>)
 8002f06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f0a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f0c:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <HAL_I2C_MspInit+0x88>)
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f18:	bf00      	nop
 8002f1a:	3728      	adds	r7, #40	; 0x28
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40005400 	.word	0x40005400
 8002f24:	40023800 	.word	0x40023800
 8002f28:	40020400 	.word	0x40020400

08002f2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08a      	sub	sp, #40	; 0x28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f34:	f107 0314 	add.w	r3, r7, #20
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	60da      	str	r2, [r3, #12]
 8002f42:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a23      	ldr	r2, [pc, #140]	; (8002fd8 <HAL_TIM_Base_MspInit+0xac>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d10e      	bne.n	8002f6c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	613b      	str	r3, [r7, #16]
 8002f52:	4b22      	ldr	r3, [pc, #136]	; (8002fdc <HAL_TIM_Base_MspInit+0xb0>)
 8002f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f56:	4a21      	ldr	r2, [pc, #132]	; (8002fdc <HAL_TIM_Base_MspInit+0xb0>)
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f5e:	4b1f      	ldr	r3, [pc, #124]	; (8002fdc <HAL_TIM_Base_MspInit+0xb0>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	613b      	str	r3, [r7, #16]
 8002f68:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002f6a:	e030      	b.n	8002fce <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM8)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a1b      	ldr	r2, [pc, #108]	; (8002fe0 <HAL_TIM_Base_MspInit+0xb4>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d12b      	bne.n	8002fce <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002f76:	2300      	movs	r3, #0
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	4b18      	ldr	r3, [pc, #96]	; (8002fdc <HAL_TIM_Base_MspInit+0xb0>)
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7e:	4a17      	ldr	r2, [pc, #92]	; (8002fdc <HAL_TIM_Base_MspInit+0xb0>)
 8002f80:	f043 0302 	orr.w	r3, r3, #2
 8002f84:	6453      	str	r3, [r2, #68]	; 0x44
 8002f86:	4b15      	ldr	r3, [pc, #84]	; (8002fdc <HAL_TIM_Base_MspInit+0xb0>)
 8002f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f92:	2300      	movs	r3, #0
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	4b11      	ldr	r3, [pc, #68]	; (8002fdc <HAL_TIM_Base_MspInit+0xb0>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	4a10      	ldr	r2, [pc, #64]	; (8002fdc <HAL_TIM_Base_MspInit+0xb0>)
 8002f9c:	f043 0304 	orr.w	r3, r3, #4
 8002fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa2:	4b0e      	ldr	r3, [pc, #56]	; (8002fdc <HAL_TIM_Base_MspInit+0xb0>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	f003 0304 	and.w	r3, r3, #4
 8002faa:	60bb      	str	r3, [r7, #8]
 8002fac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8002fae:	23c0      	movs	r3, #192	; 0xc0
 8002fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fc2:	f107 0314 	add.w	r3, r7, #20
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4806      	ldr	r0, [pc, #24]	; (8002fe4 <HAL_TIM_Base_MspInit+0xb8>)
 8002fca:	f000 fc65 	bl	8003898 <HAL_GPIO_Init>
}
 8002fce:	bf00      	nop
 8002fd0:	3728      	adds	r7, #40	; 0x28
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40010000 	.word	0x40010000
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	40010400 	.word	0x40010400
 8002fe4:	40020800 	.word	0x40020800

08002fe8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08c      	sub	sp, #48	; 0x30
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff0:	f107 031c 	add.w	r3, r7, #28
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	605a      	str	r2, [r3, #4]
 8002ffa:	609a      	str	r2, [r3, #8]
 8002ffc:	60da      	str	r2, [r3, #12]
 8002ffe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003008:	d14b      	bne.n	80030a2 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	61bb      	str	r3, [r7, #24]
 800300e:	4b3f      	ldr	r3, [pc, #252]	; (800310c <HAL_TIM_Encoder_MspInit+0x124>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	4a3e      	ldr	r2, [pc, #248]	; (800310c <HAL_TIM_Encoder_MspInit+0x124>)
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	6413      	str	r3, [r2, #64]	; 0x40
 800301a:	4b3c      	ldr	r3, [pc, #240]	; (800310c <HAL_TIM_Encoder_MspInit+0x124>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	61bb      	str	r3, [r7, #24]
 8003024:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]
 800302a:	4b38      	ldr	r3, [pc, #224]	; (800310c <HAL_TIM_Encoder_MspInit+0x124>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	4a37      	ldr	r2, [pc, #220]	; (800310c <HAL_TIM_Encoder_MspInit+0x124>)
 8003030:	f043 0301 	orr.w	r3, r3, #1
 8003034:	6313      	str	r3, [r2, #48]	; 0x30
 8003036:	4b35      	ldr	r3, [pc, #212]	; (800310c <HAL_TIM_Encoder_MspInit+0x124>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003042:	2300      	movs	r3, #0
 8003044:	613b      	str	r3, [r7, #16]
 8003046:	4b31      	ldr	r3, [pc, #196]	; (800310c <HAL_TIM_Encoder_MspInit+0x124>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	4a30      	ldr	r2, [pc, #192]	; (800310c <HAL_TIM_Encoder_MspInit+0x124>)
 800304c:	f043 0302 	orr.w	r3, r3, #2
 8003050:	6313      	str	r3, [r2, #48]	; 0x30
 8003052:	4b2e      	ldr	r3, [pc, #184]	; (800310c <HAL_TIM_Encoder_MspInit+0x124>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	613b      	str	r3, [r7, #16]
 800305c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800305e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003064:	2302      	movs	r3, #2
 8003066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003068:	2300      	movs	r3, #0
 800306a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306c:	2300      	movs	r3, #0
 800306e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003070:	2301      	movs	r3, #1
 8003072:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003074:	f107 031c 	add.w	r3, r7, #28
 8003078:	4619      	mov	r1, r3
 800307a:	4825      	ldr	r0, [pc, #148]	; (8003110 <HAL_TIM_Encoder_MspInit+0x128>)
 800307c:	f000 fc0c 	bl	8003898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003080:	2308      	movs	r3, #8
 8003082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003084:	2302      	movs	r3, #2
 8003086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003088:	2300      	movs	r3, #0
 800308a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800308c:	2300      	movs	r3, #0
 800308e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003090:	2301      	movs	r3, #1
 8003092:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003094:	f107 031c 	add.w	r3, r7, #28
 8003098:	4619      	mov	r1, r3
 800309a:	481e      	ldr	r0, [pc, #120]	; (8003114 <HAL_TIM_Encoder_MspInit+0x12c>)
 800309c:	f000 fbfc 	bl	8003898 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80030a0:	e030      	b.n	8003104 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a1c      	ldr	r2, [pc, #112]	; (8003118 <HAL_TIM_Encoder_MspInit+0x130>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d12b      	bne.n	8003104 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030ac:	2300      	movs	r3, #0
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	4b16      	ldr	r3, [pc, #88]	; (800310c <HAL_TIM_Encoder_MspInit+0x124>)
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	4a15      	ldr	r2, [pc, #84]	; (800310c <HAL_TIM_Encoder_MspInit+0x124>)
 80030b6:	f043 0302 	orr.w	r3, r3, #2
 80030ba:	6413      	str	r3, [r2, #64]	; 0x40
 80030bc:	4b13      	ldr	r3, [pc, #76]	; (800310c <HAL_TIM_Encoder_MspInit+0x124>)
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030c8:	2300      	movs	r3, #0
 80030ca:	60bb      	str	r3, [r7, #8]
 80030cc:	4b0f      	ldr	r3, [pc, #60]	; (800310c <HAL_TIM_Encoder_MspInit+0x124>)
 80030ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d0:	4a0e      	ldr	r2, [pc, #56]	; (800310c <HAL_TIM_Encoder_MspInit+0x124>)
 80030d2:	f043 0301 	orr.w	r3, r3, #1
 80030d6:	6313      	str	r3, [r2, #48]	; 0x30
 80030d8:	4b0c      	ldr	r3, [pc, #48]	; (800310c <HAL_TIM_Encoder_MspInit+0x124>)
 80030da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	60bb      	str	r3, [r7, #8]
 80030e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030e4:	23c0      	movs	r3, #192	; 0xc0
 80030e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e8:	2302      	movs	r3, #2
 80030ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ec:	2300      	movs	r3, #0
 80030ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f0:	2300      	movs	r3, #0
 80030f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030f4:	2302      	movs	r3, #2
 80030f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030f8:	f107 031c 	add.w	r3, r7, #28
 80030fc:	4619      	mov	r1, r3
 80030fe:	4804      	ldr	r0, [pc, #16]	; (8003110 <HAL_TIM_Encoder_MspInit+0x128>)
 8003100:	f000 fbca 	bl	8003898 <HAL_GPIO_Init>
}
 8003104:	bf00      	nop
 8003106:	3730      	adds	r7, #48	; 0x30
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40023800 	.word	0x40023800
 8003110:	40020000 	.word	0x40020000
 8003114:	40020400 	.word	0x40020400
 8003118:	40000400 	.word	0x40000400

0800311c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b08a      	sub	sp, #40	; 0x28
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003124:	f107 0314 	add.w	r3, r7, #20
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	605a      	str	r2, [r3, #4]
 800312e:	609a      	str	r2, [r3, #8]
 8003130:	60da      	str	r2, [r3, #12]
 8003132:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM5)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a1d      	ldr	r2, [pc, #116]	; (80031b0 <HAL_TIM_IC_MspInit+0x94>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d133      	bne.n	80031a6 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	613b      	str	r3, [r7, #16]
 8003142:	4b1c      	ldr	r3, [pc, #112]	; (80031b4 <HAL_TIM_IC_MspInit+0x98>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	4a1b      	ldr	r2, [pc, #108]	; (80031b4 <HAL_TIM_IC_MspInit+0x98>)
 8003148:	f043 0308 	orr.w	r3, r3, #8
 800314c:	6413      	str	r3, [r2, #64]	; 0x40
 800314e:	4b19      	ldr	r3, [pc, #100]	; (80031b4 <HAL_TIM_IC_MspInit+0x98>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	613b      	str	r3, [r7, #16]
 8003158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	4b15      	ldr	r3, [pc, #84]	; (80031b4 <HAL_TIM_IC_MspInit+0x98>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	4a14      	ldr	r2, [pc, #80]	; (80031b4 <HAL_TIM_IC_MspInit+0x98>)
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	6313      	str	r3, [r2, #48]	; 0x30
 800316a:	4b12      	ldr	r3, [pc, #72]	; (80031b4 <HAL_TIM_IC_MspInit+0x98>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003176:	2302      	movs	r3, #2
 8003178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317a:	2302      	movs	r3, #2
 800317c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317e:	2300      	movs	r3, #0
 8003180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003182:	2300      	movs	r3, #0
 8003184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003186:	2302      	movs	r3, #2
 8003188:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800318a:	f107 0314 	add.w	r3, r7, #20
 800318e:	4619      	mov	r1, r3
 8003190:	4809      	ldr	r0, [pc, #36]	; (80031b8 <HAL_TIM_IC_MspInit+0x9c>)
 8003192:	f000 fb81 	bl	8003898 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8003196:	2200      	movs	r2, #0
 8003198:	2105      	movs	r1, #5
 800319a:	2032      	movs	r0, #50	; 0x32
 800319c:	f000 fab3 	bl	8003706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80031a0:	2032      	movs	r0, #50	; 0x32
 80031a2:	f000 facc 	bl	800373e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80031a6:	bf00      	nop
 80031a8:	3728      	adds	r7, #40	; 0x28
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40000c00 	.word	0x40000c00
 80031b4:	40023800 	.word	0x40023800
 80031b8:	40020000 	.word	0x40020000

080031bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b088      	sub	sp, #32
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c4:	f107 030c 	add.w	r3, r7, #12
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	609a      	str	r2, [r3, #8]
 80031d0:	60da      	str	r2, [r3, #12]
 80031d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a12      	ldr	r2, [pc, #72]	; (8003224 <HAL_TIM_MspPostInit+0x68>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d11e      	bne.n	800321c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80031de:	2300      	movs	r3, #0
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	4b11      	ldr	r3, [pc, #68]	; (8003228 <HAL_TIM_MspPostInit+0x6c>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	4a10      	ldr	r2, [pc, #64]	; (8003228 <HAL_TIM_MspPostInit+0x6c>)
 80031e8:	f043 0310 	orr.w	r3, r3, #16
 80031ec:	6313      	str	r3, [r2, #48]	; 0x30
 80031ee:	4b0e      	ldr	r3, [pc, #56]	; (8003228 <HAL_TIM_MspPostInit+0x6c>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	f003 0310 	and.w	r3, r3, #16
 80031f6:	60bb      	str	r3, [r7, #8]
 80031f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80031fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003200:	2302      	movs	r3, #2
 8003202:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003204:	2300      	movs	r3, #0
 8003206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003208:	2300      	movs	r3, #0
 800320a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800320c:	2301      	movs	r3, #1
 800320e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003210:	f107 030c 	add.w	r3, r7, #12
 8003214:	4619      	mov	r1, r3
 8003216:	4805      	ldr	r0, [pc, #20]	; (800322c <HAL_TIM_MspPostInit+0x70>)
 8003218:	f000 fb3e 	bl	8003898 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800321c:	bf00      	nop
 800321e:	3720      	adds	r7, #32
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40010000 	.word	0x40010000
 8003228:	40023800 	.word	0x40023800
 800322c:	40021000 	.word	0x40021000

08003230 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b08a      	sub	sp, #40	; 0x28
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003238:	f107 0314 	add.w	r3, r7, #20
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	605a      	str	r2, [r3, #4]
 8003242:	609a      	str	r2, [r3, #8]
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a1d      	ldr	r2, [pc, #116]	; (80032c4 <HAL_UART_MspInit+0x94>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d134      	bne.n	80032bc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003252:	2300      	movs	r3, #0
 8003254:	613b      	str	r3, [r7, #16]
 8003256:	4b1c      	ldr	r3, [pc, #112]	; (80032c8 <HAL_UART_MspInit+0x98>)
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	4a1b      	ldr	r2, [pc, #108]	; (80032c8 <HAL_UART_MspInit+0x98>)
 800325c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003260:	6413      	str	r3, [r2, #64]	; 0x40
 8003262:	4b19      	ldr	r3, [pc, #100]	; (80032c8 <HAL_UART_MspInit+0x98>)
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	4b15      	ldr	r3, [pc, #84]	; (80032c8 <HAL_UART_MspInit+0x98>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	4a14      	ldr	r2, [pc, #80]	; (80032c8 <HAL_UART_MspInit+0x98>)
 8003278:	f043 0304 	orr.w	r3, r3, #4
 800327c:	6313      	str	r3, [r2, #48]	; 0x30
 800327e:	4b12      	ldr	r3, [pc, #72]	; (80032c8 <HAL_UART_MspInit+0x98>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	f003 0304 	and.w	r3, r3, #4
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800328a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800328e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003290:	2302      	movs	r3, #2
 8003292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003294:	2300      	movs	r3, #0
 8003296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003298:	2303      	movs	r3, #3
 800329a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800329c:	2307      	movs	r3, #7
 800329e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032a0:	f107 0314 	add.w	r3, r7, #20
 80032a4:	4619      	mov	r1, r3
 80032a6:	4809      	ldr	r0, [pc, #36]	; (80032cc <HAL_UART_MspInit+0x9c>)
 80032a8:	f000 faf6 	bl	8003898 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80032ac:	2200      	movs	r2, #0
 80032ae:	2105      	movs	r1, #5
 80032b0:	2027      	movs	r0, #39	; 0x27
 80032b2:	f000 fa28 	bl	8003706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80032b6:	2027      	movs	r0, #39	; 0x27
 80032b8:	f000 fa41 	bl	800373e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80032bc:	bf00      	nop
 80032be:	3728      	adds	r7, #40	; 0x28
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40004800 	.word	0x40004800
 80032c8:	40023800 	.word	0x40023800
 80032cc:	40020800 	.word	0x40020800

080032d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032d4:	e7fe      	b.n	80032d4 <NMI_Handler+0x4>

080032d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032d6:	b480      	push	{r7}
 80032d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032da:	e7fe      	b.n	80032da <HardFault_Handler+0x4>

080032dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032e0:	e7fe      	b.n	80032e0 <MemManage_Handler+0x4>

080032e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032e2:	b480      	push	{r7}
 80032e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032e6:	e7fe      	b.n	80032e6 <BusFault_Handler+0x4>

080032e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032ec:	e7fe      	b.n	80032ec <UsageFault_Handler+0x4>

080032ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032ee:	b480      	push	{r7}
 80032f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032f2:	bf00      	nop
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003300:	f000 f8e2 	bl	80034c8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003304:	f006 fbbc 	bl	8009a80 <xTaskGetSchedulerState>
 8003308:	4603      	mov	r3, r0
 800330a:	2b01      	cmp	r3, #1
 800330c:	d001      	beq.n	8003312 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800330e:	f007 f9a3 	bl	800a658 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003312:	bf00      	nop
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800331c:	4802      	ldr	r0, [pc, #8]	; (8003328 <USART3_IRQHandler+0x10>)
 800331e:	f003 fe91 	bl	8007044 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003322:	bf00      	nop
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	20000250 	.word	0x20000250

0800332c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003330:	4802      	ldr	r0, [pc, #8]	; (800333c <TIM5_IRQHandler+0x10>)
 8003332:	f002 fd17 	bl	8005d64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003336:	bf00      	nop
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	200001c0 	.word	0x200001c0

08003340 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003348:	4a14      	ldr	r2, [pc, #80]	; (800339c <_sbrk+0x5c>)
 800334a:	4b15      	ldr	r3, [pc, #84]	; (80033a0 <_sbrk+0x60>)
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003354:	4b13      	ldr	r3, [pc, #76]	; (80033a4 <_sbrk+0x64>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d102      	bne.n	8003362 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800335c:	4b11      	ldr	r3, [pc, #68]	; (80033a4 <_sbrk+0x64>)
 800335e:	4a12      	ldr	r2, [pc, #72]	; (80033a8 <_sbrk+0x68>)
 8003360:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003362:	4b10      	ldr	r3, [pc, #64]	; (80033a4 <_sbrk+0x64>)
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4413      	add	r3, r2
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	429a      	cmp	r2, r3
 800336e:	d207      	bcs.n	8003380 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003370:	f007 ffb8 	bl	800b2e4 <__errno>
 8003374:	4603      	mov	r3, r0
 8003376:	220c      	movs	r2, #12
 8003378:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800337a:	f04f 33ff 	mov.w	r3, #4294967295
 800337e:	e009      	b.n	8003394 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003380:	4b08      	ldr	r3, [pc, #32]	; (80033a4 <_sbrk+0x64>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003386:	4b07      	ldr	r3, [pc, #28]	; (80033a4 <_sbrk+0x64>)
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4413      	add	r3, r2
 800338e:	4a05      	ldr	r2, [pc, #20]	; (80033a4 <_sbrk+0x64>)
 8003390:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003392:	68fb      	ldr	r3, [r7, #12]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	20020000 	.word	0x20020000
 80033a0:	00000400 	.word	0x00000400
 80033a4:	200002f4 	.word	0x200002f4
 80033a8:	200051a8 	.word	0x200051a8

080033ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033b0:	4b06      	ldr	r3, [pc, #24]	; (80033cc <SystemInit+0x20>)
 80033b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b6:	4a05      	ldr	r2, [pc, #20]	; (80033cc <SystemInit+0x20>)
 80033b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033c0:	bf00      	nop
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	e000ed00 	.word	0xe000ed00

080033d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80033d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003408 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80033d4:	f7ff ffea 	bl	80033ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033d8:	480c      	ldr	r0, [pc, #48]	; (800340c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80033da:	490d      	ldr	r1, [pc, #52]	; (8003410 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80033dc:	4a0d      	ldr	r2, [pc, #52]	; (8003414 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80033de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033e0:	e002      	b.n	80033e8 <LoopCopyDataInit>

080033e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033e6:	3304      	adds	r3, #4

080033e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033ec:	d3f9      	bcc.n	80033e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033ee:	4a0a      	ldr	r2, [pc, #40]	; (8003418 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80033f0:	4c0a      	ldr	r4, [pc, #40]	; (800341c <LoopFillZerobss+0x22>)
  movs r3, #0
 80033f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033f4:	e001      	b.n	80033fa <LoopFillZerobss>

080033f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033f8:	3204      	adds	r2, #4

080033fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033fc:	d3fb      	bcc.n	80033f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80033fe:	f007 ff77 	bl	800b2f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003402:	f7fd fd8b 	bl	8000f1c <main>
  bx  lr    
 8003406:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003408:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800340c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003410:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003414:	0800c680 	.word	0x0800c680
  ldr r2, =_sbss
 8003418:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800341c:	200051a8 	.word	0x200051a8

08003420 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003420:	e7fe      	b.n	8003420 <ADC_IRQHandler>
	...

08003424 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003428:	4b0e      	ldr	r3, [pc, #56]	; (8003464 <HAL_Init+0x40>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a0d      	ldr	r2, [pc, #52]	; (8003464 <HAL_Init+0x40>)
 800342e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003432:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003434:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <HAL_Init+0x40>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a0a      	ldr	r2, [pc, #40]	; (8003464 <HAL_Init+0x40>)
 800343a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800343e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003440:	4b08      	ldr	r3, [pc, #32]	; (8003464 <HAL_Init+0x40>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a07      	ldr	r2, [pc, #28]	; (8003464 <HAL_Init+0x40>)
 8003446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800344a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800344c:	2003      	movs	r0, #3
 800344e:	f000 f94f 	bl	80036f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003452:	200f      	movs	r0, #15
 8003454:	f000 f808 	bl	8003468 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003458:	f7ff fcf4 	bl	8002e44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40023c00 	.word	0x40023c00

08003468 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003470:	4b12      	ldr	r3, [pc, #72]	; (80034bc <HAL_InitTick+0x54>)
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	4b12      	ldr	r3, [pc, #72]	; (80034c0 <HAL_InitTick+0x58>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	4619      	mov	r1, r3
 800347a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800347e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003482:	fbb2 f3f3 	udiv	r3, r2, r3
 8003486:	4618      	mov	r0, r3
 8003488:	f000 f967 	bl	800375a <HAL_SYSTICK_Config>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e00e      	b.n	80034b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b0f      	cmp	r3, #15
 800349a:	d80a      	bhi.n	80034b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800349c:	2200      	movs	r2, #0
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	f04f 30ff 	mov.w	r0, #4294967295
 80034a4:	f000 f92f 	bl	8003706 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034a8:	4a06      	ldr	r2, [pc, #24]	; (80034c4 <HAL_InitTick+0x5c>)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
 80034b0:	e000      	b.n	80034b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	20000014 	.word	0x20000014
 80034c0:	2000001c 	.word	0x2000001c
 80034c4:	20000018 	.word	0x20000018

080034c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034cc:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <HAL_IncTick+0x20>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	461a      	mov	r2, r3
 80034d2:	4b06      	ldr	r3, [pc, #24]	; (80034ec <HAL_IncTick+0x24>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4413      	add	r3, r2
 80034d8:	4a04      	ldr	r2, [pc, #16]	; (80034ec <HAL_IncTick+0x24>)
 80034da:	6013      	str	r3, [r2, #0]
}
 80034dc:	bf00      	nop
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	2000001c 	.word	0x2000001c
 80034ec:	200002f8 	.word	0x200002f8

080034f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  return uwTick;
 80034f4:	4b03      	ldr	r3, [pc, #12]	; (8003504 <HAL_GetTick+0x14>)
 80034f6:	681b      	ldr	r3, [r3, #0]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	200002f8 	.word	0x200002f8

08003508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003510:	f7ff ffee 	bl	80034f0 <HAL_GetTick>
 8003514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003520:	d005      	beq.n	800352e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003522:	4b0a      	ldr	r3, [pc, #40]	; (800354c <HAL_Delay+0x44>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	4413      	add	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800352e:	bf00      	nop
 8003530:	f7ff ffde 	bl	80034f0 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	429a      	cmp	r2, r3
 800353e:	d8f7      	bhi.n	8003530 <HAL_Delay+0x28>
  {
  }
}
 8003540:	bf00      	nop
 8003542:	bf00      	nop
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	2000001c 	.word	0x2000001c

08003550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003560:	4b0c      	ldr	r3, [pc, #48]	; (8003594 <__NVIC_SetPriorityGrouping+0x44>)
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800356c:	4013      	ands	r3, r2
 800356e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003578:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800357c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003582:	4a04      	ldr	r2, [pc, #16]	; (8003594 <__NVIC_SetPriorityGrouping+0x44>)
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	60d3      	str	r3, [r2, #12]
}
 8003588:	bf00      	nop
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	e000ed00 	.word	0xe000ed00

08003598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800359c:	4b04      	ldr	r3, [pc, #16]	; (80035b0 <__NVIC_GetPriorityGrouping+0x18>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	0a1b      	lsrs	r3, r3, #8
 80035a2:	f003 0307 	and.w	r3, r3, #7
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	e000ed00 	.word	0xe000ed00

080035b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	db0b      	blt.n	80035de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035c6:	79fb      	ldrb	r3, [r7, #7]
 80035c8:	f003 021f 	and.w	r2, r3, #31
 80035cc:	4907      	ldr	r1, [pc, #28]	; (80035ec <__NVIC_EnableIRQ+0x38>)
 80035ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	2001      	movs	r0, #1
 80035d6:	fa00 f202 	lsl.w	r2, r0, r2
 80035da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	e000e100 	.word	0xe000e100

080035f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	6039      	str	r1, [r7, #0]
 80035fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003600:	2b00      	cmp	r3, #0
 8003602:	db0a      	blt.n	800361a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	b2da      	uxtb	r2, r3
 8003608:	490c      	ldr	r1, [pc, #48]	; (800363c <__NVIC_SetPriority+0x4c>)
 800360a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360e:	0112      	lsls	r2, r2, #4
 8003610:	b2d2      	uxtb	r2, r2
 8003612:	440b      	add	r3, r1
 8003614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003618:	e00a      	b.n	8003630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	b2da      	uxtb	r2, r3
 800361e:	4908      	ldr	r1, [pc, #32]	; (8003640 <__NVIC_SetPriority+0x50>)
 8003620:	79fb      	ldrb	r3, [r7, #7]
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	3b04      	subs	r3, #4
 8003628:	0112      	lsls	r2, r2, #4
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	440b      	add	r3, r1
 800362e:	761a      	strb	r2, [r3, #24]
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	e000e100 	.word	0xe000e100
 8003640:	e000ed00 	.word	0xe000ed00

08003644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003644:	b480      	push	{r7}
 8003646:	b089      	sub	sp, #36	; 0x24
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	f1c3 0307 	rsb	r3, r3, #7
 800365e:	2b04      	cmp	r3, #4
 8003660:	bf28      	it	cs
 8003662:	2304      	movcs	r3, #4
 8003664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	3304      	adds	r3, #4
 800366a:	2b06      	cmp	r3, #6
 800366c:	d902      	bls.n	8003674 <NVIC_EncodePriority+0x30>
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	3b03      	subs	r3, #3
 8003672:	e000      	b.n	8003676 <NVIC_EncodePriority+0x32>
 8003674:	2300      	movs	r3, #0
 8003676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003678:	f04f 32ff 	mov.w	r2, #4294967295
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	43da      	mvns	r2, r3
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	401a      	ands	r2, r3
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800368c:	f04f 31ff 	mov.w	r1, #4294967295
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	fa01 f303 	lsl.w	r3, r1, r3
 8003696:	43d9      	mvns	r1, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800369c:	4313      	orrs	r3, r2
         );
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3724      	adds	r7, #36	; 0x24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
	...

080036ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3b01      	subs	r3, #1
 80036b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036bc:	d301      	bcc.n	80036c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036be:	2301      	movs	r3, #1
 80036c0:	e00f      	b.n	80036e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036c2:	4a0a      	ldr	r2, [pc, #40]	; (80036ec <SysTick_Config+0x40>)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036ca:	210f      	movs	r1, #15
 80036cc:	f04f 30ff 	mov.w	r0, #4294967295
 80036d0:	f7ff ff8e 	bl	80035f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036d4:	4b05      	ldr	r3, [pc, #20]	; (80036ec <SysTick_Config+0x40>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036da:	4b04      	ldr	r3, [pc, #16]	; (80036ec <SysTick_Config+0x40>)
 80036dc:	2207      	movs	r2, #7
 80036de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	e000e010 	.word	0xe000e010

080036f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f7ff ff29 	bl	8003550 <__NVIC_SetPriorityGrouping>
}
 80036fe:	bf00      	nop
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003706:	b580      	push	{r7, lr}
 8003708:	b086      	sub	sp, #24
 800370a:	af00      	add	r7, sp, #0
 800370c:	4603      	mov	r3, r0
 800370e:	60b9      	str	r1, [r7, #8]
 8003710:	607a      	str	r2, [r7, #4]
 8003712:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003714:	2300      	movs	r3, #0
 8003716:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003718:	f7ff ff3e 	bl	8003598 <__NVIC_GetPriorityGrouping>
 800371c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	68b9      	ldr	r1, [r7, #8]
 8003722:	6978      	ldr	r0, [r7, #20]
 8003724:	f7ff ff8e 	bl	8003644 <NVIC_EncodePriority>
 8003728:	4602      	mov	r2, r0
 800372a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800372e:	4611      	mov	r1, r2
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff ff5d 	bl	80035f0 <__NVIC_SetPriority>
}
 8003736:	bf00      	nop
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b082      	sub	sp, #8
 8003742:	af00      	add	r7, sp, #0
 8003744:	4603      	mov	r3, r0
 8003746:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff ff31 	bl	80035b4 <__NVIC_EnableIRQ>
}
 8003752:	bf00      	nop
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b082      	sub	sp, #8
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7ff ffa2 	bl	80036ac <SysTick_Config>
 8003768:	4603      	mov	r3, r0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b084      	sub	sp, #16
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003780:	f7ff feb6 	bl	80034f0 <HAL_GetTick>
 8003784:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d008      	beq.n	80037a4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2280      	movs	r2, #128	; 0x80
 8003796:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e052      	b.n	800384a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0216 	bic.w	r2, r2, #22
 80037b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695a      	ldr	r2, [r3, #20]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037c2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d103      	bne.n	80037d4 <HAL_DMA_Abort+0x62>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d007      	beq.n	80037e4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0208 	bic.w	r2, r2, #8
 80037e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0201 	bic.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037f4:	e013      	b.n	800381e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037f6:	f7ff fe7b 	bl	80034f0 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b05      	cmp	r3, #5
 8003802:	d90c      	bls.n	800381e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2220      	movs	r2, #32
 8003808:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2203      	movs	r2, #3
 800380e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e015      	b.n	800384a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1e4      	bne.n	80037f6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003830:	223f      	movs	r2, #63	; 0x3f
 8003832:	409a      	lsls	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d004      	beq.n	8003870 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2280      	movs	r2, #128	; 0x80
 800386a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e00c      	b.n	800388a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2205      	movs	r2, #5
 8003874:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 0201 	bic.w	r2, r2, #1
 8003886:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
	...

08003898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003898:	b480      	push	{r7}
 800389a:	b089      	sub	sp, #36	; 0x24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038ae:	2300      	movs	r3, #0
 80038b0:	61fb      	str	r3, [r7, #28]
 80038b2:	e16b      	b.n	8003b8c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038b4:	2201      	movs	r2, #1
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	4013      	ands	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	f040 815a 	bne.w	8003b86 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d005      	beq.n	80038ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d130      	bne.n	800394c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	2203      	movs	r2, #3
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	43db      	mvns	r3, r3
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	4013      	ands	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	68da      	ldr	r2, [r3, #12]
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4313      	orrs	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003920:	2201      	movs	r2, #1
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	43db      	mvns	r3, r3
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4013      	ands	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	091b      	lsrs	r3, r3, #4
 8003936:	f003 0201 	and.w	r2, r3, #1
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	4313      	orrs	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f003 0303 	and.w	r3, r3, #3
 8003954:	2b03      	cmp	r3, #3
 8003956:	d017      	beq.n	8003988 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	2203      	movs	r2, #3
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	43db      	mvns	r3, r3
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	4013      	ands	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4313      	orrs	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f003 0303 	and.w	r3, r3, #3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d123      	bne.n	80039dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	08da      	lsrs	r2, r3, #3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3208      	adds	r2, #8
 800399c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	220f      	movs	r2, #15
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	43db      	mvns	r3, r3
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	4013      	ands	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	08da      	lsrs	r2, r3, #3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3208      	adds	r2, #8
 80039d6:	69b9      	ldr	r1, [r7, #24]
 80039d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	2203      	movs	r2, #3
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	43db      	mvns	r3, r3
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4013      	ands	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f003 0203 	and.w	r2, r3, #3
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 80b4 	beq.w	8003b86 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	4b60      	ldr	r3, [pc, #384]	; (8003ba4 <HAL_GPIO_Init+0x30c>)
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a26:	4a5f      	ldr	r2, [pc, #380]	; (8003ba4 <HAL_GPIO_Init+0x30c>)
 8003a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a2e:	4b5d      	ldr	r3, [pc, #372]	; (8003ba4 <HAL_GPIO_Init+0x30c>)
 8003a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a3a:	4a5b      	ldr	r2, [pc, #364]	; (8003ba8 <HAL_GPIO_Init+0x310>)
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	089b      	lsrs	r3, r3, #2
 8003a40:	3302      	adds	r3, #2
 8003a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	220f      	movs	r2, #15
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	43db      	mvns	r3, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a52      	ldr	r2, [pc, #328]	; (8003bac <HAL_GPIO_Init+0x314>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d02b      	beq.n	8003abe <HAL_GPIO_Init+0x226>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a51      	ldr	r2, [pc, #324]	; (8003bb0 <HAL_GPIO_Init+0x318>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d025      	beq.n	8003aba <HAL_GPIO_Init+0x222>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a50      	ldr	r2, [pc, #320]	; (8003bb4 <HAL_GPIO_Init+0x31c>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d01f      	beq.n	8003ab6 <HAL_GPIO_Init+0x21e>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a4f      	ldr	r2, [pc, #316]	; (8003bb8 <HAL_GPIO_Init+0x320>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d019      	beq.n	8003ab2 <HAL_GPIO_Init+0x21a>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a4e      	ldr	r2, [pc, #312]	; (8003bbc <HAL_GPIO_Init+0x324>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d013      	beq.n	8003aae <HAL_GPIO_Init+0x216>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a4d      	ldr	r2, [pc, #308]	; (8003bc0 <HAL_GPIO_Init+0x328>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d00d      	beq.n	8003aaa <HAL_GPIO_Init+0x212>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a4c      	ldr	r2, [pc, #304]	; (8003bc4 <HAL_GPIO_Init+0x32c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d007      	beq.n	8003aa6 <HAL_GPIO_Init+0x20e>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a4b      	ldr	r2, [pc, #300]	; (8003bc8 <HAL_GPIO_Init+0x330>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d101      	bne.n	8003aa2 <HAL_GPIO_Init+0x20a>
 8003a9e:	2307      	movs	r3, #7
 8003aa0:	e00e      	b.n	8003ac0 <HAL_GPIO_Init+0x228>
 8003aa2:	2308      	movs	r3, #8
 8003aa4:	e00c      	b.n	8003ac0 <HAL_GPIO_Init+0x228>
 8003aa6:	2306      	movs	r3, #6
 8003aa8:	e00a      	b.n	8003ac0 <HAL_GPIO_Init+0x228>
 8003aaa:	2305      	movs	r3, #5
 8003aac:	e008      	b.n	8003ac0 <HAL_GPIO_Init+0x228>
 8003aae:	2304      	movs	r3, #4
 8003ab0:	e006      	b.n	8003ac0 <HAL_GPIO_Init+0x228>
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e004      	b.n	8003ac0 <HAL_GPIO_Init+0x228>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	e002      	b.n	8003ac0 <HAL_GPIO_Init+0x228>
 8003aba:	2301      	movs	r3, #1
 8003abc:	e000      	b.n	8003ac0 <HAL_GPIO_Init+0x228>
 8003abe:	2300      	movs	r3, #0
 8003ac0:	69fa      	ldr	r2, [r7, #28]
 8003ac2:	f002 0203 	and.w	r2, r2, #3
 8003ac6:	0092      	lsls	r2, r2, #2
 8003ac8:	4093      	lsls	r3, r2
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ad0:	4935      	ldr	r1, [pc, #212]	; (8003ba8 <HAL_GPIO_Init+0x310>)
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	089b      	lsrs	r3, r3, #2
 8003ad6:	3302      	adds	r3, #2
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ade:	4b3b      	ldr	r3, [pc, #236]	; (8003bcc <HAL_GPIO_Init+0x334>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	43db      	mvns	r3, r3
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	4013      	ands	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b02:	4a32      	ldr	r2, [pc, #200]	; (8003bcc <HAL_GPIO_Init+0x334>)
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b08:	4b30      	ldr	r3, [pc, #192]	; (8003bcc <HAL_GPIO_Init+0x334>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	43db      	mvns	r3, r3
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	4013      	ands	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d003      	beq.n	8003b2c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b2c:	4a27      	ldr	r2, [pc, #156]	; (8003bcc <HAL_GPIO_Init+0x334>)
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b32:	4b26      	ldr	r3, [pc, #152]	; (8003bcc <HAL_GPIO_Init+0x334>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b56:	4a1d      	ldr	r2, [pc, #116]	; (8003bcc <HAL_GPIO_Init+0x334>)
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b5c:	4b1b      	ldr	r3, [pc, #108]	; (8003bcc <HAL_GPIO_Init+0x334>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	43db      	mvns	r3, r3
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d003      	beq.n	8003b80 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b80:	4a12      	ldr	r2, [pc, #72]	; (8003bcc <HAL_GPIO_Init+0x334>)
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	61fb      	str	r3, [r7, #28]
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	2b0f      	cmp	r3, #15
 8003b90:	f67f ae90 	bls.w	80038b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b94:	bf00      	nop
 8003b96:	bf00      	nop
 8003b98:	3724      	adds	r7, #36	; 0x24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	40013800 	.word	0x40013800
 8003bac:	40020000 	.word	0x40020000
 8003bb0:	40020400 	.word	0x40020400
 8003bb4:	40020800 	.word	0x40020800
 8003bb8:	40020c00 	.word	0x40020c00
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	40021400 	.word	0x40021400
 8003bc4:	40021800 	.word	0x40021800
 8003bc8:	40021c00 	.word	0x40021c00
 8003bcc:	40013c00 	.word	0x40013c00

08003bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	807b      	strh	r3, [r7, #2]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003be0:	787b      	ldrb	r3, [r7, #1]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d003      	beq.n	8003bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003be6:	887a      	ldrh	r2, [r7, #2]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bec:	e003      	b.n	8003bf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bee:	887b      	ldrh	r3, [r7, #2]
 8003bf0:	041a      	lsls	r2, r3, #16
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	619a      	str	r2, [r3, #24]
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b085      	sub	sp, #20
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c14:	887a      	ldrh	r2, [r7, #2]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	041a      	lsls	r2, r3, #16
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	43d9      	mvns	r1, r3
 8003c20:	887b      	ldrh	r3, [r7, #2]
 8003c22:	400b      	ands	r3, r1
 8003c24:	431a      	orrs	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	619a      	str	r2, [r3, #24]
}
 8003c2a:	bf00      	nop
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
	...

08003c38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e12b      	b.n	8003ea2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d106      	bne.n	8003c64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7ff f91c 	bl	8002e9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2224      	movs	r2, #36	; 0x24
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 0201 	bic.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c9c:	f001 fc1e 	bl	80054dc <HAL_RCC_GetPCLK1Freq>
 8003ca0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	4a81      	ldr	r2, [pc, #516]	; (8003eac <HAL_I2C_Init+0x274>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d807      	bhi.n	8003cbc <HAL_I2C_Init+0x84>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4a80      	ldr	r2, [pc, #512]	; (8003eb0 <HAL_I2C_Init+0x278>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	bf94      	ite	ls
 8003cb4:	2301      	movls	r3, #1
 8003cb6:	2300      	movhi	r3, #0
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	e006      	b.n	8003cca <HAL_I2C_Init+0x92>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4a7d      	ldr	r2, [pc, #500]	; (8003eb4 <HAL_I2C_Init+0x27c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	bf94      	ite	ls
 8003cc4:	2301      	movls	r3, #1
 8003cc6:	2300      	movhi	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e0e7      	b.n	8003ea2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	4a78      	ldr	r2, [pc, #480]	; (8003eb8 <HAL_I2C_Init+0x280>)
 8003cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cda:	0c9b      	lsrs	r3, r3, #18
 8003cdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	4a6a      	ldr	r2, [pc, #424]	; (8003eac <HAL_I2C_Init+0x274>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d802      	bhi.n	8003d0c <HAL_I2C_Init+0xd4>
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	e009      	b.n	8003d20 <HAL_I2C_Init+0xe8>
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d12:	fb02 f303 	mul.w	r3, r2, r3
 8003d16:	4a69      	ldr	r2, [pc, #420]	; (8003ebc <HAL_I2C_Init+0x284>)
 8003d18:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1c:	099b      	lsrs	r3, r3, #6
 8003d1e:	3301      	adds	r3, #1
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6812      	ldr	r2, [r2, #0]
 8003d24:	430b      	orrs	r3, r1
 8003d26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	495c      	ldr	r1, [pc, #368]	; (8003eac <HAL_I2C_Init+0x274>)
 8003d3c:	428b      	cmp	r3, r1
 8003d3e:	d819      	bhi.n	8003d74 <HAL_I2C_Init+0x13c>
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	1e59      	subs	r1, r3, #1
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d4e:	1c59      	adds	r1, r3, #1
 8003d50:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d54:	400b      	ands	r3, r1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00a      	beq.n	8003d70 <HAL_I2C_Init+0x138>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	1e59      	subs	r1, r3, #1
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d68:	3301      	adds	r3, #1
 8003d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d6e:	e051      	b.n	8003e14 <HAL_I2C_Init+0x1dc>
 8003d70:	2304      	movs	r3, #4
 8003d72:	e04f      	b.n	8003e14 <HAL_I2C_Init+0x1dc>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d111      	bne.n	8003da0 <HAL_I2C_Init+0x168>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	1e58      	subs	r0, r3, #1
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6859      	ldr	r1, [r3, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	440b      	add	r3, r1
 8003d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d8e:	3301      	adds	r3, #1
 8003d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	bf0c      	ite	eq
 8003d98:	2301      	moveq	r3, #1
 8003d9a:	2300      	movne	r3, #0
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	e012      	b.n	8003dc6 <HAL_I2C_Init+0x18e>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	1e58      	subs	r0, r3, #1
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6859      	ldr	r1, [r3, #4]
 8003da8:	460b      	mov	r3, r1
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	0099      	lsls	r1, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003db6:	3301      	adds	r3, #1
 8003db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	bf0c      	ite	eq
 8003dc0:	2301      	moveq	r3, #1
 8003dc2:	2300      	movne	r3, #0
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <HAL_I2C_Init+0x196>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e022      	b.n	8003e14 <HAL_I2C_Init+0x1dc>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10e      	bne.n	8003df4 <HAL_I2C_Init+0x1bc>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	1e58      	subs	r0, r3, #1
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6859      	ldr	r1, [r3, #4]
 8003dde:	460b      	mov	r3, r1
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	440b      	add	r3, r1
 8003de4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003de8:	3301      	adds	r3, #1
 8003dea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003df2:	e00f      	b.n	8003e14 <HAL_I2C_Init+0x1dc>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	1e58      	subs	r0, r3, #1
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6859      	ldr	r1, [r3, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	0099      	lsls	r1, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e14:	6879      	ldr	r1, [r7, #4]
 8003e16:	6809      	ldr	r1, [r1, #0]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69da      	ldr	r2, [r3, #28]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6911      	ldr	r1, [r2, #16]
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	68d2      	ldr	r2, [r2, #12]
 8003e4e:	4311      	orrs	r1, r2
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6812      	ldr	r2, [r2, #0]
 8003e54:	430b      	orrs	r3, r1
 8003e56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	695a      	ldr	r2, [r3, #20]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	430a      	orrs	r2, r1
 8003e72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0201 	orr.w	r2, r2, #1
 8003e82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	000186a0 	.word	0x000186a0
 8003eb0:	001e847f 	.word	0x001e847f
 8003eb4:	003d08ff 	.word	0x003d08ff
 8003eb8:	431bde83 	.word	0x431bde83
 8003ebc:	10624dd3 	.word	0x10624dd3

08003ec0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b088      	sub	sp, #32
 8003ec4:	af02      	add	r7, sp, #8
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	607a      	str	r2, [r7, #4]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	460b      	mov	r3, r1
 8003ece:	817b      	strh	r3, [r7, #10]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ed4:	f7ff fb0c 	bl	80034f0 <HAL_GetTick>
 8003ed8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b20      	cmp	r3, #32
 8003ee4:	f040 80e0 	bne.w	80040a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	2319      	movs	r3, #25
 8003eee:	2201      	movs	r2, #1
 8003ef0:	4970      	ldr	r1, [pc, #448]	; (80040b4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 fc64 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003efe:	2302      	movs	r3, #2
 8003f00:	e0d3      	b.n	80040aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <HAL_I2C_Master_Transmit+0x50>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e0cc      	b.n	80040aa <HAL_I2C_Master_Transmit+0x1ea>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d007      	beq.n	8003f36 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f042 0201 	orr.w	r2, r2, #1
 8003f34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2221      	movs	r2, #33	; 0x21
 8003f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2210      	movs	r2, #16
 8003f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	893a      	ldrh	r2, [r7, #8]
 8003f66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4a50      	ldr	r2, [pc, #320]	; (80040b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003f76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f78:	8979      	ldrh	r1, [r7, #10]
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	6a3a      	ldr	r2, [r7, #32]
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 face 	bl	8004520 <I2C_MasterRequestWrite>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e08d      	b.n	80040aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f8e:	2300      	movs	r3, #0
 8003f90:	613b      	str	r3, [r7, #16]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	613b      	str	r3, [r7, #16]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003fa4:	e066      	b.n	8004074 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	6a39      	ldr	r1, [r7, #32]
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f000 fd22 	bl	80049f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00d      	beq.n	8003fd2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d107      	bne.n	8003fce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fcc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e06b      	b.n	80040aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd6:	781a      	ldrb	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	1c5a      	adds	r2, r3, #1
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b04      	cmp	r3, #4
 800400e:	d11b      	bne.n	8004048 <HAL_I2C_Master_Transmit+0x188>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004014:	2b00      	cmp	r3, #0
 8004016:	d017      	beq.n	8004048 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401c:	781a      	ldrb	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004032:	b29b      	uxth	r3, r3
 8004034:	3b01      	subs	r3, #1
 8004036:	b29a      	uxth	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004040:	3b01      	subs	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	6a39      	ldr	r1, [r7, #32]
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 fd19 	bl	8004a84 <I2C_WaitOnBTFFlagUntilTimeout>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00d      	beq.n	8004074 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405c:	2b04      	cmp	r3, #4
 800405e:	d107      	bne.n	8004070 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800406e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e01a      	b.n	80040aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004078:	2b00      	cmp	r3, #0
 800407a:	d194      	bne.n	8003fa6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800408a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2220      	movs	r2, #32
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040a4:	2300      	movs	r3, #0
 80040a6:	e000      	b.n	80040aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80040a8:	2302      	movs	r3, #2
  }
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3718      	adds	r7, #24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	00100002 	.word	0x00100002
 80040b8:	ffff0000 	.word	0xffff0000

080040bc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b08c      	sub	sp, #48	; 0x30
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	607a      	str	r2, [r7, #4]
 80040c6:	461a      	mov	r2, r3
 80040c8:	460b      	mov	r3, r1
 80040ca:	817b      	strh	r3, [r7, #10]
 80040cc:	4613      	mov	r3, r2
 80040ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040d0:	f7ff fa0e 	bl	80034f0 <HAL_GetTick>
 80040d4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b20      	cmp	r3, #32
 80040e0:	f040 8217 	bne.w	8004512 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	2319      	movs	r3, #25
 80040ea:	2201      	movs	r2, #1
 80040ec:	497c      	ldr	r1, [pc, #496]	; (80042e0 <HAL_I2C_Master_Receive+0x224>)
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f000 fb66 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80040fa:	2302      	movs	r3, #2
 80040fc:	e20a      	b.n	8004514 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_I2C_Master_Receive+0x50>
 8004108:	2302      	movs	r3, #2
 800410a:	e203      	b.n	8004514 <HAL_I2C_Master_Receive+0x458>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b01      	cmp	r3, #1
 8004120:	d007      	beq.n	8004132 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f042 0201 	orr.w	r2, r2, #1
 8004130:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004140:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2222      	movs	r2, #34	; 0x22
 8004146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2210      	movs	r2, #16
 800414e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	893a      	ldrh	r2, [r7, #8]
 8004162:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004168:	b29a      	uxth	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4a5c      	ldr	r2, [pc, #368]	; (80042e4 <HAL_I2C_Master_Receive+0x228>)
 8004172:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004174:	8979      	ldrh	r1, [r7, #10]
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 fa52 	bl	8004624 <I2C_MasterRequestRead>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e1c4      	b.n	8004514 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800418e:	2b00      	cmp	r3, #0
 8004190:	d113      	bne.n	80041ba <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004192:	2300      	movs	r3, #0
 8004194:	623b      	str	r3, [r7, #32]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	623b      	str	r3, [r7, #32]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	623b      	str	r3, [r7, #32]
 80041a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	e198      	b.n	80044ec <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d11b      	bne.n	80041fa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041d2:	2300      	movs	r3, #0
 80041d4:	61fb      	str	r3, [r7, #28]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	61fb      	str	r3, [r7, #28]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	61fb      	str	r3, [r7, #28]
 80041e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	e178      	b.n	80044ec <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d11b      	bne.n	800423a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004210:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004220:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004222:	2300      	movs	r3, #0
 8004224:	61bb      	str	r3, [r7, #24]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	61bb      	str	r3, [r7, #24]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	61bb      	str	r3, [r7, #24]
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	e158      	b.n	80044ec <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004248:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800424a:	2300      	movs	r3, #0
 800424c:	617b      	str	r3, [r7, #20]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	617b      	str	r3, [r7, #20]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	617b      	str	r3, [r7, #20]
 800425e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004260:	e144      	b.n	80044ec <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004266:	2b03      	cmp	r3, #3
 8004268:	f200 80f1 	bhi.w	800444e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004270:	2b01      	cmp	r3, #1
 8004272:	d123      	bne.n	80042bc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004276:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 fc4b 	bl	8004b14 <I2C_WaitOnRXNEFlagUntilTimeout>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e145      	b.n	8004514 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691a      	ldr	r2, [r3, #16]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	1c5a      	adds	r2, r3, #1
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042ba:	e117      	b.n	80044ec <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d14e      	bne.n	8004362 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ca:	2200      	movs	r2, #0
 80042cc:	4906      	ldr	r1, [pc, #24]	; (80042e8 <HAL_I2C_Master_Receive+0x22c>)
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f000 fa76 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d008      	beq.n	80042ec <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e11a      	b.n	8004514 <HAL_I2C_Master_Receive+0x458>
 80042de:	bf00      	nop
 80042e0:	00100002 	.word	0x00100002
 80042e4:	ffff0000 	.word	0xffff0000
 80042e8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	691a      	ldr	r2, [r3, #16]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	1c5a      	adds	r2, r3, #1
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004318:	3b01      	subs	r3, #1
 800431a:	b29a      	uxth	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004324:	b29b      	uxth	r3, r3
 8004326:	3b01      	subs	r3, #1
 8004328:	b29a      	uxth	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	1c5a      	adds	r2, r3, #1
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800434a:	3b01      	subs	r3, #1
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004356:	b29b      	uxth	r3, r3
 8004358:	3b01      	subs	r3, #1
 800435a:	b29a      	uxth	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004360:	e0c4      	b.n	80044ec <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004368:	2200      	movs	r2, #0
 800436a:	496c      	ldr	r1, [pc, #432]	; (800451c <HAL_I2C_Master_Receive+0x460>)
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 fa27 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e0cb      	b.n	8004514 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800438a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	691a      	ldr	r2, [r3, #16]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	1c5a      	adds	r2, r3, #1
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a8:	3b01      	subs	r3, #1
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c4:	2200      	movs	r2, #0
 80043c6:	4955      	ldr	r1, [pc, #340]	; (800451c <HAL_I2C_Master_Receive+0x460>)
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 f9f9 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e09d      	b.n	8004514 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	691a      	ldr	r2, [r3, #16]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fa:	1c5a      	adds	r2, r3, #1
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004404:	3b01      	subs	r3, #1
 8004406:	b29a      	uxth	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004410:	b29b      	uxth	r3, r3
 8004412:	3b01      	subs	r3, #1
 8004414:	b29a      	uxth	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	691a      	ldr	r2, [r3, #16]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	b2d2      	uxtb	r2, r2
 8004426:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	1c5a      	adds	r2, r3, #1
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004436:	3b01      	subs	r3, #1
 8004438:	b29a      	uxth	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004442:	b29b      	uxth	r3, r3
 8004444:	3b01      	subs	r3, #1
 8004446:	b29a      	uxth	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800444c:	e04e      	b.n	80044ec <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800444e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004450:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f000 fb5e 	bl	8004b14 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e058      	b.n	8004514 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	691a      	ldr	r2, [r3, #16]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	b2d2      	uxtb	r2, r2
 800446e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	1c5a      	adds	r2, r3, #1
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447e:	3b01      	subs	r3, #1
 8004480:	b29a      	uxth	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448a:	b29b      	uxth	r3, r3
 800448c:	3b01      	subs	r3, #1
 800448e:	b29a      	uxth	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b04      	cmp	r3, #4
 80044a0:	d124      	bne.n	80044ec <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	d107      	bne.n	80044ba <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044b8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	691a      	ldr	r2, [r3, #16]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	b2d2      	uxtb	r2, r2
 80044c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d6:	3b01      	subs	r3, #1
 80044d8:	b29a      	uxth	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	3b01      	subs	r3, #1
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f47f aeb6 	bne.w	8004262 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2220      	movs	r2, #32
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800450e:	2300      	movs	r3, #0
 8004510:	e000      	b.n	8004514 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004512:	2302      	movs	r3, #2
  }
}
 8004514:	4618      	mov	r0, r3
 8004516:	3728      	adds	r7, #40	; 0x28
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	00010004 	.word	0x00010004

08004520 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b088      	sub	sp, #32
 8004524:	af02      	add	r7, sp, #8
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	607a      	str	r2, [r7, #4]
 800452a:	603b      	str	r3, [r7, #0]
 800452c:	460b      	mov	r3, r1
 800452e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004534:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2b08      	cmp	r3, #8
 800453a:	d006      	beq.n	800454a <I2C_MasterRequestWrite+0x2a>
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d003      	beq.n	800454a <I2C_MasterRequestWrite+0x2a>
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004548:	d108      	bne.n	800455c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	e00b      	b.n	8004574 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004560:	2b12      	cmp	r3, #18
 8004562:	d107      	bne.n	8004574 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004572:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f000 f91d 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00d      	beq.n	80045a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800459a:	d103      	bne.n	80045a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e035      	b.n	8004614 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045b0:	d108      	bne.n	80045c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045b2:	897b      	ldrh	r3, [r7, #10]
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	461a      	mov	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045c0:	611a      	str	r2, [r3, #16]
 80045c2:	e01b      	b.n	80045fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045c4:	897b      	ldrh	r3, [r7, #10]
 80045c6:	11db      	asrs	r3, r3, #7
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	f003 0306 	and.w	r3, r3, #6
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	f063 030f 	orn	r3, r3, #15
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	490e      	ldr	r1, [pc, #56]	; (800461c <I2C_MasterRequestWrite+0xfc>)
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 f966 	bl	80048b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e010      	b.n	8004614 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80045f2:	897b      	ldrh	r3, [r7, #10]
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	4907      	ldr	r1, [pc, #28]	; (8004620 <I2C_MasterRequestWrite+0x100>)
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 f956 	bl	80048b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e000      	b.n	8004614 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	00010008 	.word	0x00010008
 8004620:	00010002 	.word	0x00010002

08004624 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b088      	sub	sp, #32
 8004628:	af02      	add	r7, sp, #8
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	607a      	str	r2, [r7, #4]
 800462e:	603b      	str	r3, [r7, #0]
 8004630:	460b      	mov	r3, r1
 8004632:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004638:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004648:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	2b08      	cmp	r3, #8
 800464e:	d006      	beq.n	800465e <I2C_MasterRequestRead+0x3a>
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d003      	beq.n	800465e <I2C_MasterRequestRead+0x3a>
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800465c:	d108      	bne.n	8004670 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	e00b      	b.n	8004688 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004674:	2b11      	cmp	r3, #17
 8004676:	d107      	bne.n	8004688 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004686:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 f893 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00d      	beq.n	80046bc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ae:	d103      	bne.n	80046b8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e079      	b.n	80047b0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046c4:	d108      	bne.n	80046d8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046c6:	897b      	ldrh	r3, [r7, #10]
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	f043 0301 	orr.w	r3, r3, #1
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	611a      	str	r2, [r3, #16]
 80046d6:	e05f      	b.n	8004798 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80046d8:	897b      	ldrh	r3, [r7, #10]
 80046da:	11db      	asrs	r3, r3, #7
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	f003 0306 	and.w	r3, r3, #6
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	f063 030f 	orn	r3, r3, #15
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	4930      	ldr	r1, [pc, #192]	; (80047b8 <I2C_MasterRequestRead+0x194>)
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f000 f8dc 	bl	80048b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e054      	b.n	80047b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004706:	897b      	ldrh	r3, [r7, #10]
 8004708:	b2da      	uxtb	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	4929      	ldr	r1, [pc, #164]	; (80047bc <I2C_MasterRequestRead+0x198>)
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 f8cc 	bl	80048b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e044      	b.n	80047b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004726:	2300      	movs	r3, #0
 8004728:	613b      	str	r3, [r7, #16]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	613b      	str	r3, [r7, #16]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	613b      	str	r3, [r7, #16]
 800473a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800474a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f000 f831 	bl	80047c0 <I2C_WaitOnFlagUntilTimeout>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00d      	beq.n	8004780 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004772:	d103      	bne.n	800477c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f44f 7200 	mov.w	r2, #512	; 0x200
 800477a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e017      	b.n	80047b0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004780:	897b      	ldrh	r3, [r7, #10]
 8004782:	11db      	asrs	r3, r3, #7
 8004784:	b2db      	uxtb	r3, r3
 8004786:	f003 0306 	and.w	r3, r3, #6
 800478a:	b2db      	uxtb	r3, r3
 800478c:	f063 030e 	orn	r3, r3, #14
 8004790:	b2da      	uxtb	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	4907      	ldr	r1, [pc, #28]	; (80047bc <I2C_MasterRequestRead+0x198>)
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f000 f888 	bl	80048b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e000      	b.n	80047b0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3718      	adds	r7, #24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	00010008 	.word	0x00010008
 80047bc:	00010002 	.word	0x00010002

080047c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	603b      	str	r3, [r7, #0]
 80047cc:	4613      	mov	r3, r2
 80047ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047d0:	e048      	b.n	8004864 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d8:	d044      	beq.n	8004864 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047da:	f7fe fe89 	bl	80034f0 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d302      	bcc.n	80047f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d139      	bne.n	8004864 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	0c1b      	lsrs	r3, r3, #16
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d10d      	bne.n	8004816 <I2C_WaitOnFlagUntilTimeout+0x56>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	43da      	mvns	r2, r3
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	4013      	ands	r3, r2
 8004806:	b29b      	uxth	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	bf0c      	ite	eq
 800480c:	2301      	moveq	r3, #1
 800480e:	2300      	movne	r3, #0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	461a      	mov	r2, r3
 8004814:	e00c      	b.n	8004830 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	43da      	mvns	r2, r3
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	4013      	ands	r3, r2
 8004822:	b29b      	uxth	r3, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	bf0c      	ite	eq
 8004828:	2301      	moveq	r3, #1
 800482a:	2300      	movne	r3, #0
 800482c:	b2db      	uxtb	r3, r3
 800482e:	461a      	mov	r2, r3
 8004830:	79fb      	ldrb	r3, [r7, #7]
 8004832:	429a      	cmp	r2, r3
 8004834:	d116      	bne.n	8004864 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2220      	movs	r2, #32
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004850:	f043 0220 	orr.w	r2, r3, #32
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e023      	b.n	80048ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	0c1b      	lsrs	r3, r3, #16
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b01      	cmp	r3, #1
 800486c:	d10d      	bne.n	800488a <I2C_WaitOnFlagUntilTimeout+0xca>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	43da      	mvns	r2, r3
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	4013      	ands	r3, r2
 800487a:	b29b      	uxth	r3, r3
 800487c:	2b00      	cmp	r3, #0
 800487e:	bf0c      	ite	eq
 8004880:	2301      	moveq	r3, #1
 8004882:	2300      	movne	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	461a      	mov	r2, r3
 8004888:	e00c      	b.n	80048a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	43da      	mvns	r2, r3
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	4013      	ands	r3, r2
 8004896:	b29b      	uxth	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	bf0c      	ite	eq
 800489c:	2301      	moveq	r3, #1
 800489e:	2300      	movne	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	461a      	mov	r2, r3
 80048a4:	79fb      	ldrb	r3, [r7, #7]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d093      	beq.n	80047d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
 80048c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048c2:	e071      	b.n	80049a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048d2:	d123      	bne.n	800491c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2220      	movs	r2, #32
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004908:	f043 0204 	orr.w	r2, r3, #4
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e067      	b.n	80049ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004922:	d041      	beq.n	80049a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004924:	f7fe fde4 	bl	80034f0 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	429a      	cmp	r2, r3
 8004932:	d302      	bcc.n	800493a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d136      	bne.n	80049a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	0c1b      	lsrs	r3, r3, #16
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b01      	cmp	r3, #1
 8004942:	d10c      	bne.n	800495e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	43da      	mvns	r2, r3
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	4013      	ands	r3, r2
 8004950:	b29b      	uxth	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	bf14      	ite	ne
 8004956:	2301      	movne	r3, #1
 8004958:	2300      	moveq	r3, #0
 800495a:	b2db      	uxtb	r3, r3
 800495c:	e00b      	b.n	8004976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	43da      	mvns	r2, r3
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	4013      	ands	r3, r2
 800496a:	b29b      	uxth	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	bf14      	ite	ne
 8004970:	2301      	movne	r3, #1
 8004972:	2300      	moveq	r3, #0
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d016      	beq.n	80049a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004994:	f043 0220 	orr.w	r2, r3, #32
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e021      	b.n	80049ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	0c1b      	lsrs	r3, r3, #16
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d10c      	bne.n	80049cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	43da      	mvns	r2, r3
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	4013      	ands	r3, r2
 80049be:	b29b      	uxth	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	bf14      	ite	ne
 80049c4:	2301      	movne	r3, #1
 80049c6:	2300      	moveq	r3, #0
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	e00b      	b.n	80049e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	43da      	mvns	r2, r3
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	4013      	ands	r3, r2
 80049d8:	b29b      	uxth	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	bf14      	ite	ne
 80049de:	2301      	movne	r3, #1
 80049e0:	2300      	moveq	r3, #0
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f47f af6d 	bne.w	80048c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a00:	e034      	b.n	8004a6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 f8e3 	bl	8004bce <I2C_IsAcknowledgeFailed>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e034      	b.n	8004a7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a18:	d028      	beq.n	8004a6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a1a:	f7fe fd69 	bl	80034f0 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d302      	bcc.n	8004a30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d11d      	bne.n	8004a6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a3a:	2b80      	cmp	r3, #128	; 0x80
 8004a3c:	d016      	beq.n	8004a6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2220      	movs	r2, #32
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a58:	f043 0220 	orr.w	r2, r3, #32
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e007      	b.n	8004a7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a76:	2b80      	cmp	r3, #128	; 0x80
 8004a78:	d1c3      	bne.n	8004a02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a90:	e034      	b.n	8004afc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 f89b 	bl	8004bce <I2C_IsAcknowledgeFailed>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e034      	b.n	8004b0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa8:	d028      	beq.n	8004afc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aaa:	f7fe fd21 	bl	80034f0 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d302      	bcc.n	8004ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d11d      	bne.n	8004afc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	f003 0304 	and.w	r3, r3, #4
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d016      	beq.n	8004afc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae8:	f043 0220 	orr.w	r2, r3, #32
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e007      	b.n	8004b0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	f003 0304 	and.w	r3, r3, #4
 8004b06:	2b04      	cmp	r3, #4
 8004b08:	d1c3      	bne.n	8004a92 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b20:	e049      	b.n	8004bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	f003 0310 	and.w	r3, r3, #16
 8004b2c:	2b10      	cmp	r3, #16
 8004b2e:	d119      	bne.n	8004b64 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f06f 0210 	mvn.w	r2, #16
 8004b38:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2220      	movs	r2, #32
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e030      	b.n	8004bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b64:	f7fe fcc4 	bl	80034f0 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d302      	bcc.n	8004b7a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d11d      	bne.n	8004bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b84:	2b40      	cmp	r3, #64	; 0x40
 8004b86:	d016      	beq.n	8004bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2220      	movs	r2, #32
 8004b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	f043 0220 	orr.w	r2, r3, #32
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e007      	b.n	8004bc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc0:	2b40      	cmp	r3, #64	; 0x40
 8004bc2:	d1ae      	bne.n	8004b22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004be4:	d11b      	bne.n	8004c1e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bee:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	f043 0204 	orr.w	r2, r3, #4
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e000      	b.n	8004c20 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004c32:	4b06      	ldr	r3, [pc, #24]	; (8004c4c <HAL_PWR_EnableBkUpAccess+0x20>)
 8004c34:	2201      	movs	r2, #1
 8004c36:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8004c38:	4b05      	ldr	r3, [pc, #20]	; (8004c50 <HAL_PWR_EnableBkUpAccess+0x24>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8004c3e:	687b      	ldr	r3, [r7, #4]
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	420e0020 	.word	0x420e0020
 8004c50:	40007000 	.word	0x40007000

08004c54 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8004c5a:	4b06      	ldr	r3, [pc, #24]	; (8004c74 <HAL_PWR_DisableBkUpAccess+0x20>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8004c60:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <HAL_PWR_DisableBkUpAccess+0x24>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8004c66:	687b      	ldr	r3, [r7, #4]
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr
 8004c74:	420e0020 	.word	0x420e0020
 8004c78:	40007000 	.word	0x40007000

08004c7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e267      	b.n	800515e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d075      	beq.n	8004d86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c9a:	4b88      	ldr	r3, [pc, #544]	; (8004ebc <HAL_RCC_OscConfig+0x240>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f003 030c 	and.w	r3, r3, #12
 8004ca2:	2b04      	cmp	r3, #4
 8004ca4:	d00c      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ca6:	4b85      	ldr	r3, [pc, #532]	; (8004ebc <HAL_RCC_OscConfig+0x240>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cae:	2b08      	cmp	r3, #8
 8004cb0:	d112      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cb2:	4b82      	ldr	r3, [pc, #520]	; (8004ebc <HAL_RCC_OscConfig+0x240>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cbe:	d10b      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cc0:	4b7e      	ldr	r3, [pc, #504]	; (8004ebc <HAL_RCC_OscConfig+0x240>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d05b      	beq.n	8004d84 <HAL_RCC_OscConfig+0x108>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d157      	bne.n	8004d84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e242      	b.n	800515e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce0:	d106      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x74>
 8004ce2:	4b76      	ldr	r3, [pc, #472]	; (8004ebc <HAL_RCC_OscConfig+0x240>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a75      	ldr	r2, [pc, #468]	; (8004ebc <HAL_RCC_OscConfig+0x240>)
 8004ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	e01d      	b.n	8004d2c <HAL_RCC_OscConfig+0xb0>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cf8:	d10c      	bne.n	8004d14 <HAL_RCC_OscConfig+0x98>
 8004cfa:	4b70      	ldr	r3, [pc, #448]	; (8004ebc <HAL_RCC_OscConfig+0x240>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a6f      	ldr	r2, [pc, #444]	; (8004ebc <HAL_RCC_OscConfig+0x240>)
 8004d00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d04:	6013      	str	r3, [r2, #0]
 8004d06:	4b6d      	ldr	r3, [pc, #436]	; (8004ebc <HAL_RCC_OscConfig+0x240>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a6c      	ldr	r2, [pc, #432]	; (8004ebc <HAL_RCC_OscConfig+0x240>)
 8004d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d10:	6013      	str	r3, [r2, #0]
 8004d12:	e00b      	b.n	8004d2c <HAL_RCC_OscConfig+0xb0>
 8004d14:	4b69      	ldr	r3, [pc, #420]	; (8004ebc <HAL_RCC_OscConfig+0x240>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a68      	ldr	r2, [pc, #416]	; (8004ebc <HAL_RCC_OscConfig+0x240>)
 8004d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d1e:	6013      	str	r3, [r2, #0]
 8004d20:	4b66      	ldr	r3, [pc, #408]	; (8004ebc <HAL_RCC_OscConfig+0x240>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a65      	ldr	r2, [pc, #404]	; (8004ebc <HAL_RCC_OscConfig+0x240>)
 8004d26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d013      	beq.n	8004d5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d34:	f7fe fbdc 	bl	80034f0 <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d3c:	f7fe fbd8 	bl	80034f0 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b64      	cmp	r3, #100	; 0x64
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e207      	b.n	800515e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d4e:	4b5b      	ldr	r3, [pc, #364]	; (8004ebc <HAL_RCC_OscConfig+0x240>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d0f0      	beq.n	8004d3c <HAL_RCC_OscConfig+0xc0>
 8004d5a:	e014      	b.n	8004d86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d5c:	f7fe fbc8 	bl	80034f0 <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d64:	f7fe fbc4 	bl	80034f0 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b64      	cmp	r3, #100	; 0x64
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e1f3      	b.n	800515e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d76:	4b51      	ldr	r3, [pc, #324]	; (8004ebc <HAL_RCC_OscConfig+0x240>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1f0      	bne.n	8004d64 <HAL_RCC_OscConfig+0xe8>
 8004d82:	e000      	b.n	8004d86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d063      	beq.n	8004e5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d92:	4b4a      	ldr	r3, [pc, #296]	; (8004ebc <HAL_RCC_OscConfig+0x240>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f003 030c 	and.w	r3, r3, #12
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00b      	beq.n	8004db6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d9e:	4b47      	ldr	r3, [pc, #284]	; (8004ebc <HAL_RCC_OscConfig+0x240>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004da6:	2b08      	cmp	r3, #8
 8004da8:	d11c      	bne.n	8004de4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004daa:	4b44      	ldr	r3, [pc, #272]	; (8004ebc <HAL_RCC_OscConfig+0x240>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d116      	bne.n	8004de4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004db6:	4b41      	ldr	r3, [pc, #260]	; (8004ebc <HAL_RCC_OscConfig+0x240>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d005      	beq.n	8004dce <HAL_RCC_OscConfig+0x152>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d001      	beq.n	8004dce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e1c7      	b.n	800515e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dce:	4b3b      	ldr	r3, [pc, #236]	; (8004ebc <HAL_RCC_OscConfig+0x240>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	4937      	ldr	r1, [pc, #220]	; (8004ebc <HAL_RCC_OscConfig+0x240>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004de2:	e03a      	b.n	8004e5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d020      	beq.n	8004e2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dec:	4b34      	ldr	r3, [pc, #208]	; (8004ec0 <HAL_RCC_OscConfig+0x244>)
 8004dee:	2201      	movs	r2, #1
 8004df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df2:	f7fe fb7d 	bl	80034f0 <HAL_GetTick>
 8004df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004df8:	e008      	b.n	8004e0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dfa:	f7fe fb79 	bl	80034f0 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e1a8      	b.n	800515e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e0c:	4b2b      	ldr	r3, [pc, #172]	; (8004ebc <HAL_RCC_OscConfig+0x240>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0f0      	beq.n	8004dfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e18:	4b28      	ldr	r3, [pc, #160]	; (8004ebc <HAL_RCC_OscConfig+0x240>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	00db      	lsls	r3, r3, #3
 8004e26:	4925      	ldr	r1, [pc, #148]	; (8004ebc <HAL_RCC_OscConfig+0x240>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	600b      	str	r3, [r1, #0]
 8004e2c:	e015      	b.n	8004e5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e2e:	4b24      	ldr	r3, [pc, #144]	; (8004ec0 <HAL_RCC_OscConfig+0x244>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e34:	f7fe fb5c 	bl	80034f0 <HAL_GetTick>
 8004e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e3a:	e008      	b.n	8004e4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e3c:	f7fe fb58 	bl	80034f0 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e187      	b.n	800515e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e4e:	4b1b      	ldr	r3, [pc, #108]	; (8004ebc <HAL_RCC_OscConfig+0x240>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1f0      	bne.n	8004e3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0308 	and.w	r3, r3, #8
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d036      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d016      	beq.n	8004e9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e6e:	4b15      	ldr	r3, [pc, #84]	; (8004ec4 <HAL_RCC_OscConfig+0x248>)
 8004e70:	2201      	movs	r2, #1
 8004e72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e74:	f7fe fb3c 	bl	80034f0 <HAL_GetTick>
 8004e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e7a:	e008      	b.n	8004e8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e7c:	f7fe fb38 	bl	80034f0 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e167      	b.n	800515e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e8e:	4b0b      	ldr	r3, [pc, #44]	; (8004ebc <HAL_RCC_OscConfig+0x240>)
 8004e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d0f0      	beq.n	8004e7c <HAL_RCC_OscConfig+0x200>
 8004e9a:	e01b      	b.n	8004ed4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e9c:	4b09      	ldr	r3, [pc, #36]	; (8004ec4 <HAL_RCC_OscConfig+0x248>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ea2:	f7fe fb25 	bl	80034f0 <HAL_GetTick>
 8004ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ea8:	e00e      	b.n	8004ec8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004eaa:	f7fe fb21 	bl	80034f0 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d907      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e150      	b.n	800515e <HAL_RCC_OscConfig+0x4e2>
 8004ebc:	40023800 	.word	0x40023800
 8004ec0:	42470000 	.word	0x42470000
 8004ec4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ec8:	4b88      	ldr	r3, [pc, #544]	; (80050ec <HAL_RCC_OscConfig+0x470>)
 8004eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1ea      	bne.n	8004eaa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 8097 	beq.w	8005010 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ee6:	4b81      	ldr	r3, [pc, #516]	; (80050ec <HAL_RCC_OscConfig+0x470>)
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10f      	bne.n	8004f12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60bb      	str	r3, [r7, #8]
 8004ef6:	4b7d      	ldr	r3, [pc, #500]	; (80050ec <HAL_RCC_OscConfig+0x470>)
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	4a7c      	ldr	r2, [pc, #496]	; (80050ec <HAL_RCC_OscConfig+0x470>)
 8004efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f00:	6413      	str	r3, [r2, #64]	; 0x40
 8004f02:	4b7a      	ldr	r3, [pc, #488]	; (80050ec <HAL_RCC_OscConfig+0x470>)
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f0a:	60bb      	str	r3, [r7, #8]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f12:	4b77      	ldr	r3, [pc, #476]	; (80050f0 <HAL_RCC_OscConfig+0x474>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d118      	bne.n	8004f50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f1e:	4b74      	ldr	r3, [pc, #464]	; (80050f0 <HAL_RCC_OscConfig+0x474>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a73      	ldr	r2, [pc, #460]	; (80050f0 <HAL_RCC_OscConfig+0x474>)
 8004f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f2a:	f7fe fae1 	bl	80034f0 <HAL_GetTick>
 8004f2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f30:	e008      	b.n	8004f44 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f32:	f7fe fadd 	bl	80034f0 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e10c      	b.n	800515e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f44:	4b6a      	ldr	r3, [pc, #424]	; (80050f0 <HAL_RCC_OscConfig+0x474>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d0f0      	beq.n	8004f32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d106      	bne.n	8004f66 <HAL_RCC_OscConfig+0x2ea>
 8004f58:	4b64      	ldr	r3, [pc, #400]	; (80050ec <HAL_RCC_OscConfig+0x470>)
 8004f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5c:	4a63      	ldr	r2, [pc, #396]	; (80050ec <HAL_RCC_OscConfig+0x470>)
 8004f5e:	f043 0301 	orr.w	r3, r3, #1
 8004f62:	6713      	str	r3, [r2, #112]	; 0x70
 8004f64:	e01c      	b.n	8004fa0 <HAL_RCC_OscConfig+0x324>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	2b05      	cmp	r3, #5
 8004f6c:	d10c      	bne.n	8004f88 <HAL_RCC_OscConfig+0x30c>
 8004f6e:	4b5f      	ldr	r3, [pc, #380]	; (80050ec <HAL_RCC_OscConfig+0x470>)
 8004f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f72:	4a5e      	ldr	r2, [pc, #376]	; (80050ec <HAL_RCC_OscConfig+0x470>)
 8004f74:	f043 0304 	orr.w	r3, r3, #4
 8004f78:	6713      	str	r3, [r2, #112]	; 0x70
 8004f7a:	4b5c      	ldr	r3, [pc, #368]	; (80050ec <HAL_RCC_OscConfig+0x470>)
 8004f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7e:	4a5b      	ldr	r2, [pc, #364]	; (80050ec <HAL_RCC_OscConfig+0x470>)
 8004f80:	f043 0301 	orr.w	r3, r3, #1
 8004f84:	6713      	str	r3, [r2, #112]	; 0x70
 8004f86:	e00b      	b.n	8004fa0 <HAL_RCC_OscConfig+0x324>
 8004f88:	4b58      	ldr	r3, [pc, #352]	; (80050ec <HAL_RCC_OscConfig+0x470>)
 8004f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8c:	4a57      	ldr	r2, [pc, #348]	; (80050ec <HAL_RCC_OscConfig+0x470>)
 8004f8e:	f023 0301 	bic.w	r3, r3, #1
 8004f92:	6713      	str	r3, [r2, #112]	; 0x70
 8004f94:	4b55      	ldr	r3, [pc, #340]	; (80050ec <HAL_RCC_OscConfig+0x470>)
 8004f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f98:	4a54      	ldr	r2, [pc, #336]	; (80050ec <HAL_RCC_OscConfig+0x470>)
 8004f9a:	f023 0304 	bic.w	r3, r3, #4
 8004f9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d015      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa8:	f7fe faa2 	bl	80034f0 <HAL_GetTick>
 8004fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fae:	e00a      	b.n	8004fc6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fb0:	f7fe fa9e 	bl	80034f0 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e0cb      	b.n	800515e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fc6:	4b49      	ldr	r3, [pc, #292]	; (80050ec <HAL_RCC_OscConfig+0x470>)
 8004fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0ee      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x334>
 8004fd2:	e014      	b.n	8004ffe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fd4:	f7fe fa8c 	bl	80034f0 <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fda:	e00a      	b.n	8004ff2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fdc:	f7fe fa88 	bl	80034f0 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e0b5      	b.n	800515e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ff2:	4b3e      	ldr	r3, [pc, #248]	; (80050ec <HAL_RCC_OscConfig+0x470>)
 8004ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1ee      	bne.n	8004fdc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ffe:	7dfb      	ldrb	r3, [r7, #23]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d105      	bne.n	8005010 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005004:	4b39      	ldr	r3, [pc, #228]	; (80050ec <HAL_RCC_OscConfig+0x470>)
 8005006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005008:	4a38      	ldr	r2, [pc, #224]	; (80050ec <HAL_RCC_OscConfig+0x470>)
 800500a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800500e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 80a1 	beq.w	800515c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800501a:	4b34      	ldr	r3, [pc, #208]	; (80050ec <HAL_RCC_OscConfig+0x470>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f003 030c 	and.w	r3, r3, #12
 8005022:	2b08      	cmp	r3, #8
 8005024:	d05c      	beq.n	80050e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	2b02      	cmp	r3, #2
 800502c:	d141      	bne.n	80050b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800502e:	4b31      	ldr	r3, [pc, #196]	; (80050f4 <HAL_RCC_OscConfig+0x478>)
 8005030:	2200      	movs	r2, #0
 8005032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005034:	f7fe fa5c 	bl	80034f0 <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800503c:	f7fe fa58 	bl	80034f0 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e087      	b.n	800515e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800504e:	4b27      	ldr	r3, [pc, #156]	; (80050ec <HAL_RCC_OscConfig+0x470>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1f0      	bne.n	800503c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	69da      	ldr	r2, [r3, #28]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	019b      	lsls	r3, r3, #6
 800506a:	431a      	orrs	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005070:	085b      	lsrs	r3, r3, #1
 8005072:	3b01      	subs	r3, #1
 8005074:	041b      	lsls	r3, r3, #16
 8005076:	431a      	orrs	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507c:	061b      	lsls	r3, r3, #24
 800507e:	491b      	ldr	r1, [pc, #108]	; (80050ec <HAL_RCC_OscConfig+0x470>)
 8005080:	4313      	orrs	r3, r2
 8005082:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005084:	4b1b      	ldr	r3, [pc, #108]	; (80050f4 <HAL_RCC_OscConfig+0x478>)
 8005086:	2201      	movs	r2, #1
 8005088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800508a:	f7fe fa31 	bl	80034f0 <HAL_GetTick>
 800508e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005090:	e008      	b.n	80050a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005092:	f7fe fa2d 	bl	80034f0 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d901      	bls.n	80050a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e05c      	b.n	800515e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050a4:	4b11      	ldr	r3, [pc, #68]	; (80050ec <HAL_RCC_OscConfig+0x470>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d0f0      	beq.n	8005092 <HAL_RCC_OscConfig+0x416>
 80050b0:	e054      	b.n	800515c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050b2:	4b10      	ldr	r3, [pc, #64]	; (80050f4 <HAL_RCC_OscConfig+0x478>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b8:	f7fe fa1a 	bl	80034f0 <HAL_GetTick>
 80050bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050be:	e008      	b.n	80050d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050c0:	f7fe fa16 	bl	80034f0 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e045      	b.n	800515e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050d2:	4b06      	ldr	r3, [pc, #24]	; (80050ec <HAL_RCC_OscConfig+0x470>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1f0      	bne.n	80050c0 <HAL_RCC_OscConfig+0x444>
 80050de:	e03d      	b.n	800515c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d107      	bne.n	80050f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e038      	b.n	800515e <HAL_RCC_OscConfig+0x4e2>
 80050ec:	40023800 	.word	0x40023800
 80050f0:	40007000 	.word	0x40007000
 80050f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050f8:	4b1b      	ldr	r3, [pc, #108]	; (8005168 <HAL_RCC_OscConfig+0x4ec>)
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d028      	beq.n	8005158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005110:	429a      	cmp	r2, r3
 8005112:	d121      	bne.n	8005158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800511e:	429a      	cmp	r2, r3
 8005120:	d11a      	bne.n	8005158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005128:	4013      	ands	r3, r2
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800512e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005130:	4293      	cmp	r3, r2
 8005132:	d111      	bne.n	8005158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513e:	085b      	lsrs	r3, r3, #1
 8005140:	3b01      	subs	r3, #1
 8005142:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005144:	429a      	cmp	r2, r3
 8005146:	d107      	bne.n	8005158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005152:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005154:	429a      	cmp	r2, r3
 8005156:	d001      	beq.n	800515c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e000      	b.n	800515e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3718      	adds	r7, #24
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	40023800 	.word	0x40023800

0800516c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d101      	bne.n	8005180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e0cc      	b.n	800531a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005180:	4b68      	ldr	r3, [pc, #416]	; (8005324 <HAL_RCC_ClockConfig+0x1b8>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0307 	and.w	r3, r3, #7
 8005188:	683a      	ldr	r2, [r7, #0]
 800518a:	429a      	cmp	r2, r3
 800518c:	d90c      	bls.n	80051a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800518e:	4b65      	ldr	r3, [pc, #404]	; (8005324 <HAL_RCC_ClockConfig+0x1b8>)
 8005190:	683a      	ldr	r2, [r7, #0]
 8005192:	b2d2      	uxtb	r2, r2
 8005194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005196:	4b63      	ldr	r3, [pc, #396]	; (8005324 <HAL_RCC_ClockConfig+0x1b8>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0307 	and.w	r3, r3, #7
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d001      	beq.n	80051a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e0b8      	b.n	800531a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d020      	beq.n	80051f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0304 	and.w	r3, r3, #4
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d005      	beq.n	80051cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051c0:	4b59      	ldr	r3, [pc, #356]	; (8005328 <HAL_RCC_ClockConfig+0x1bc>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	4a58      	ldr	r2, [pc, #352]	; (8005328 <HAL_RCC_ClockConfig+0x1bc>)
 80051c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0308 	and.w	r3, r3, #8
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d005      	beq.n	80051e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051d8:	4b53      	ldr	r3, [pc, #332]	; (8005328 <HAL_RCC_ClockConfig+0x1bc>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	4a52      	ldr	r2, [pc, #328]	; (8005328 <HAL_RCC_ClockConfig+0x1bc>)
 80051de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051e4:	4b50      	ldr	r3, [pc, #320]	; (8005328 <HAL_RCC_ClockConfig+0x1bc>)
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	494d      	ldr	r1, [pc, #308]	; (8005328 <HAL_RCC_ClockConfig+0x1bc>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d044      	beq.n	800528c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d107      	bne.n	800521a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800520a:	4b47      	ldr	r3, [pc, #284]	; (8005328 <HAL_RCC_ClockConfig+0x1bc>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d119      	bne.n	800524a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e07f      	b.n	800531a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	2b02      	cmp	r3, #2
 8005220:	d003      	beq.n	800522a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005226:	2b03      	cmp	r3, #3
 8005228:	d107      	bne.n	800523a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800522a:	4b3f      	ldr	r3, [pc, #252]	; (8005328 <HAL_RCC_ClockConfig+0x1bc>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d109      	bne.n	800524a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e06f      	b.n	800531a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800523a:	4b3b      	ldr	r3, [pc, #236]	; (8005328 <HAL_RCC_ClockConfig+0x1bc>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e067      	b.n	800531a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800524a:	4b37      	ldr	r3, [pc, #220]	; (8005328 <HAL_RCC_ClockConfig+0x1bc>)
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f023 0203 	bic.w	r2, r3, #3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	4934      	ldr	r1, [pc, #208]	; (8005328 <HAL_RCC_ClockConfig+0x1bc>)
 8005258:	4313      	orrs	r3, r2
 800525a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800525c:	f7fe f948 	bl	80034f0 <HAL_GetTick>
 8005260:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005262:	e00a      	b.n	800527a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005264:	f7fe f944 	bl	80034f0 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005272:	4293      	cmp	r3, r2
 8005274:	d901      	bls.n	800527a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e04f      	b.n	800531a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800527a:	4b2b      	ldr	r3, [pc, #172]	; (8005328 <HAL_RCC_ClockConfig+0x1bc>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f003 020c 	and.w	r2, r3, #12
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	429a      	cmp	r2, r3
 800528a:	d1eb      	bne.n	8005264 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800528c:	4b25      	ldr	r3, [pc, #148]	; (8005324 <HAL_RCC_ClockConfig+0x1b8>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0307 	and.w	r3, r3, #7
 8005294:	683a      	ldr	r2, [r7, #0]
 8005296:	429a      	cmp	r2, r3
 8005298:	d20c      	bcs.n	80052b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800529a:	4b22      	ldr	r3, [pc, #136]	; (8005324 <HAL_RCC_ClockConfig+0x1b8>)
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	b2d2      	uxtb	r2, r2
 80052a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052a2:	4b20      	ldr	r3, [pc, #128]	; (8005324 <HAL_RCC_ClockConfig+0x1b8>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0307 	and.w	r3, r3, #7
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d001      	beq.n	80052b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e032      	b.n	800531a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0304 	and.w	r3, r3, #4
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d008      	beq.n	80052d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052c0:	4b19      	ldr	r3, [pc, #100]	; (8005328 <HAL_RCC_ClockConfig+0x1bc>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	4916      	ldr	r1, [pc, #88]	; (8005328 <HAL_RCC_ClockConfig+0x1bc>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0308 	and.w	r3, r3, #8
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d009      	beq.n	80052f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052de:	4b12      	ldr	r3, [pc, #72]	; (8005328 <HAL_RCC_ClockConfig+0x1bc>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	490e      	ldr	r1, [pc, #56]	; (8005328 <HAL_RCC_ClockConfig+0x1bc>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052f2:	f000 f821 	bl	8005338 <HAL_RCC_GetSysClockFreq>
 80052f6:	4602      	mov	r2, r0
 80052f8:	4b0b      	ldr	r3, [pc, #44]	; (8005328 <HAL_RCC_ClockConfig+0x1bc>)
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	091b      	lsrs	r3, r3, #4
 80052fe:	f003 030f 	and.w	r3, r3, #15
 8005302:	490a      	ldr	r1, [pc, #40]	; (800532c <HAL_RCC_ClockConfig+0x1c0>)
 8005304:	5ccb      	ldrb	r3, [r1, r3]
 8005306:	fa22 f303 	lsr.w	r3, r2, r3
 800530a:	4a09      	ldr	r2, [pc, #36]	; (8005330 <HAL_RCC_ClockConfig+0x1c4>)
 800530c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800530e:	4b09      	ldr	r3, [pc, #36]	; (8005334 <HAL_RCC_ClockConfig+0x1c8>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4618      	mov	r0, r3
 8005314:	f7fe f8a8 	bl	8003468 <HAL_InitTick>

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	40023c00 	.word	0x40023c00
 8005328:	40023800 	.word	0x40023800
 800532c:	0800bbc0 	.word	0x0800bbc0
 8005330:	20000014 	.word	0x20000014
 8005334:	20000018 	.word	0x20000018

08005338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800533c:	b090      	sub	sp, #64	; 0x40
 800533e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005340:	2300      	movs	r3, #0
 8005342:	637b      	str	r3, [r7, #52]	; 0x34
 8005344:	2300      	movs	r3, #0
 8005346:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005348:	2300      	movs	r3, #0
 800534a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800534c:	2300      	movs	r3, #0
 800534e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005350:	4b59      	ldr	r3, [pc, #356]	; (80054b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f003 030c 	and.w	r3, r3, #12
 8005358:	2b08      	cmp	r3, #8
 800535a:	d00d      	beq.n	8005378 <HAL_RCC_GetSysClockFreq+0x40>
 800535c:	2b08      	cmp	r3, #8
 800535e:	f200 80a1 	bhi.w	80054a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005362:	2b00      	cmp	r3, #0
 8005364:	d002      	beq.n	800536c <HAL_RCC_GetSysClockFreq+0x34>
 8005366:	2b04      	cmp	r3, #4
 8005368:	d003      	beq.n	8005372 <HAL_RCC_GetSysClockFreq+0x3a>
 800536a:	e09b      	b.n	80054a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800536c:	4b53      	ldr	r3, [pc, #332]	; (80054bc <HAL_RCC_GetSysClockFreq+0x184>)
 800536e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005370:	e09b      	b.n	80054aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005372:	4b53      	ldr	r3, [pc, #332]	; (80054c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005374:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005376:	e098      	b.n	80054aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005378:	4b4f      	ldr	r3, [pc, #316]	; (80054b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005380:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005382:	4b4d      	ldr	r3, [pc, #308]	; (80054b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d028      	beq.n	80053e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800538e:	4b4a      	ldr	r3, [pc, #296]	; (80054b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	099b      	lsrs	r3, r3, #6
 8005394:	2200      	movs	r2, #0
 8005396:	623b      	str	r3, [r7, #32]
 8005398:	627a      	str	r2, [r7, #36]	; 0x24
 800539a:	6a3b      	ldr	r3, [r7, #32]
 800539c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80053a0:	2100      	movs	r1, #0
 80053a2:	4b47      	ldr	r3, [pc, #284]	; (80054c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80053a4:	fb03 f201 	mul.w	r2, r3, r1
 80053a8:	2300      	movs	r3, #0
 80053aa:	fb00 f303 	mul.w	r3, r0, r3
 80053ae:	4413      	add	r3, r2
 80053b0:	4a43      	ldr	r2, [pc, #268]	; (80054c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80053b2:	fba0 1202 	umull	r1, r2, r0, r2
 80053b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053b8:	460a      	mov	r2, r1
 80053ba:	62ba      	str	r2, [r7, #40]	; 0x28
 80053bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053be:	4413      	add	r3, r2
 80053c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c4:	2200      	movs	r2, #0
 80053c6:	61bb      	str	r3, [r7, #24]
 80053c8:	61fa      	str	r2, [r7, #28]
 80053ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80053d2:	f7fb fbeb 	bl	8000bac <__aeabi_uldivmod>
 80053d6:	4602      	mov	r2, r0
 80053d8:	460b      	mov	r3, r1
 80053da:	4613      	mov	r3, r2
 80053dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053de:	e053      	b.n	8005488 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053e0:	4b35      	ldr	r3, [pc, #212]	; (80054b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	099b      	lsrs	r3, r3, #6
 80053e6:	2200      	movs	r2, #0
 80053e8:	613b      	str	r3, [r7, #16]
 80053ea:	617a      	str	r2, [r7, #20]
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80053f2:	f04f 0b00 	mov.w	fp, #0
 80053f6:	4652      	mov	r2, sl
 80053f8:	465b      	mov	r3, fp
 80053fa:	f04f 0000 	mov.w	r0, #0
 80053fe:	f04f 0100 	mov.w	r1, #0
 8005402:	0159      	lsls	r1, r3, #5
 8005404:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005408:	0150      	lsls	r0, r2, #5
 800540a:	4602      	mov	r2, r0
 800540c:	460b      	mov	r3, r1
 800540e:	ebb2 080a 	subs.w	r8, r2, sl
 8005412:	eb63 090b 	sbc.w	r9, r3, fp
 8005416:	f04f 0200 	mov.w	r2, #0
 800541a:	f04f 0300 	mov.w	r3, #0
 800541e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005422:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005426:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800542a:	ebb2 0408 	subs.w	r4, r2, r8
 800542e:	eb63 0509 	sbc.w	r5, r3, r9
 8005432:	f04f 0200 	mov.w	r2, #0
 8005436:	f04f 0300 	mov.w	r3, #0
 800543a:	00eb      	lsls	r3, r5, #3
 800543c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005440:	00e2      	lsls	r2, r4, #3
 8005442:	4614      	mov	r4, r2
 8005444:	461d      	mov	r5, r3
 8005446:	eb14 030a 	adds.w	r3, r4, sl
 800544a:	603b      	str	r3, [r7, #0]
 800544c:	eb45 030b 	adc.w	r3, r5, fp
 8005450:	607b      	str	r3, [r7, #4]
 8005452:	f04f 0200 	mov.w	r2, #0
 8005456:	f04f 0300 	mov.w	r3, #0
 800545a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800545e:	4629      	mov	r1, r5
 8005460:	028b      	lsls	r3, r1, #10
 8005462:	4621      	mov	r1, r4
 8005464:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005468:	4621      	mov	r1, r4
 800546a:	028a      	lsls	r2, r1, #10
 800546c:	4610      	mov	r0, r2
 800546e:	4619      	mov	r1, r3
 8005470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005472:	2200      	movs	r2, #0
 8005474:	60bb      	str	r3, [r7, #8]
 8005476:	60fa      	str	r2, [r7, #12]
 8005478:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800547c:	f7fb fb96 	bl	8000bac <__aeabi_uldivmod>
 8005480:	4602      	mov	r2, r0
 8005482:	460b      	mov	r3, r1
 8005484:	4613      	mov	r3, r2
 8005486:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005488:	4b0b      	ldr	r3, [pc, #44]	; (80054b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	0c1b      	lsrs	r3, r3, #16
 800548e:	f003 0303 	and.w	r3, r3, #3
 8005492:	3301      	adds	r3, #1
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005498:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800549a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549c:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80054a2:	e002      	b.n	80054aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054a4:	4b05      	ldr	r3, [pc, #20]	; (80054bc <HAL_RCC_GetSysClockFreq+0x184>)
 80054a6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80054a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3740      	adds	r7, #64	; 0x40
 80054b0:	46bd      	mov	sp, r7
 80054b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054b6:	bf00      	nop
 80054b8:	40023800 	.word	0x40023800
 80054bc:	00f42400 	.word	0x00f42400
 80054c0:	017d7840 	.word	0x017d7840

080054c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054c4:	b480      	push	{r7}
 80054c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054c8:	4b03      	ldr	r3, [pc, #12]	; (80054d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80054ca:	681b      	ldr	r3, [r3, #0]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	20000014 	.word	0x20000014

080054dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80054e0:	f7ff fff0 	bl	80054c4 <HAL_RCC_GetHCLKFreq>
 80054e4:	4602      	mov	r2, r0
 80054e6:	4b05      	ldr	r3, [pc, #20]	; (80054fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	0a9b      	lsrs	r3, r3, #10
 80054ec:	f003 0307 	and.w	r3, r3, #7
 80054f0:	4903      	ldr	r1, [pc, #12]	; (8005500 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054f2:	5ccb      	ldrb	r3, [r1, r3]
 80054f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	40023800 	.word	0x40023800
 8005500:	0800bbd0 	.word	0x0800bbd0

08005504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005508:	f7ff ffdc 	bl	80054c4 <HAL_RCC_GetHCLKFreq>
 800550c:	4602      	mov	r2, r0
 800550e:	4b05      	ldr	r3, [pc, #20]	; (8005524 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	0b5b      	lsrs	r3, r3, #13
 8005514:	f003 0307 	and.w	r3, r3, #7
 8005518:	4903      	ldr	r1, [pc, #12]	; (8005528 <HAL_RCC_GetPCLK2Freq+0x24>)
 800551a:	5ccb      	ldrb	r3, [r1, r3]
 800551c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005520:	4618      	mov	r0, r3
 8005522:	bd80      	pop	{r7, pc}
 8005524:	40023800 	.word	0x40023800
 8005528:	0800bbd0 	.word	0x0800bbd0

0800552c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e041      	b.n	80055c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d106      	bne.n	8005558 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7fd fcea 	bl	8002f2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2202      	movs	r2, #2
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	3304      	adds	r3, #4
 8005568:	4619      	mov	r1, r3
 800556a:	4610      	mov	r0, r2
 800556c:	f000 ff42 	bl	80063f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b082      	sub	sp, #8
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d101      	bne.n	80055dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e041      	b.n	8005660 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d106      	bne.n	80055f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 f839 	bl	8005668 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2202      	movs	r2, #2
 80055fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	3304      	adds	r3, #4
 8005606:	4619      	mov	r1, r3
 8005608:	4610      	mov	r0, r2
 800560a:	f000 fef3 	bl	80063f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d109      	bne.n	80056a0 <HAL_TIM_PWM_Start+0x24>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005692:	b2db      	uxtb	r3, r3
 8005694:	2b01      	cmp	r3, #1
 8005696:	bf14      	ite	ne
 8005698:	2301      	movne	r3, #1
 800569a:	2300      	moveq	r3, #0
 800569c:	b2db      	uxtb	r3, r3
 800569e:	e022      	b.n	80056e6 <HAL_TIM_PWM_Start+0x6a>
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	2b04      	cmp	r3, #4
 80056a4:	d109      	bne.n	80056ba <HAL_TIM_PWM_Start+0x3e>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	bf14      	ite	ne
 80056b2:	2301      	movne	r3, #1
 80056b4:	2300      	moveq	r3, #0
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	e015      	b.n	80056e6 <HAL_TIM_PWM_Start+0x6a>
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	2b08      	cmp	r3, #8
 80056be:	d109      	bne.n	80056d4 <HAL_TIM_PWM_Start+0x58>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	bf14      	ite	ne
 80056cc:	2301      	movne	r3, #1
 80056ce:	2300      	moveq	r3, #0
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	e008      	b.n	80056e6 <HAL_TIM_PWM_Start+0x6a>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b01      	cmp	r3, #1
 80056de:	bf14      	ite	ne
 80056e0:	2301      	movne	r3, #1
 80056e2:	2300      	moveq	r3, #0
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e07c      	b.n	80057e8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d104      	bne.n	80056fe <HAL_TIM_PWM_Start+0x82>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2202      	movs	r2, #2
 80056f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056fc:	e013      	b.n	8005726 <HAL_TIM_PWM_Start+0xaa>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	2b04      	cmp	r3, #4
 8005702:	d104      	bne.n	800570e <HAL_TIM_PWM_Start+0x92>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2202      	movs	r2, #2
 8005708:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800570c:	e00b      	b.n	8005726 <HAL_TIM_PWM_Start+0xaa>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b08      	cmp	r3, #8
 8005712:	d104      	bne.n	800571e <HAL_TIM_PWM_Start+0xa2>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2202      	movs	r2, #2
 8005718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800571c:	e003      	b.n	8005726 <HAL_TIM_PWM_Start+0xaa>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2202      	movs	r2, #2
 8005722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2201      	movs	r2, #1
 800572c:	6839      	ldr	r1, [r7, #0]
 800572e:	4618      	mov	r0, r3
 8005730:	f001 fa80 	bl	8006c34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a2d      	ldr	r2, [pc, #180]	; (80057f0 <HAL_TIM_PWM_Start+0x174>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d004      	beq.n	8005748 <HAL_TIM_PWM_Start+0xcc>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a2c      	ldr	r2, [pc, #176]	; (80057f4 <HAL_TIM_PWM_Start+0x178>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d101      	bne.n	800574c <HAL_TIM_PWM_Start+0xd0>
 8005748:	2301      	movs	r3, #1
 800574a:	e000      	b.n	800574e <HAL_TIM_PWM_Start+0xd2>
 800574c:	2300      	movs	r3, #0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d007      	beq.n	8005762 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005760:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a22      	ldr	r2, [pc, #136]	; (80057f0 <HAL_TIM_PWM_Start+0x174>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d022      	beq.n	80057b2 <HAL_TIM_PWM_Start+0x136>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005774:	d01d      	beq.n	80057b2 <HAL_TIM_PWM_Start+0x136>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a1f      	ldr	r2, [pc, #124]	; (80057f8 <HAL_TIM_PWM_Start+0x17c>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d018      	beq.n	80057b2 <HAL_TIM_PWM_Start+0x136>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a1d      	ldr	r2, [pc, #116]	; (80057fc <HAL_TIM_PWM_Start+0x180>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d013      	beq.n	80057b2 <HAL_TIM_PWM_Start+0x136>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a1c      	ldr	r2, [pc, #112]	; (8005800 <HAL_TIM_PWM_Start+0x184>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d00e      	beq.n	80057b2 <HAL_TIM_PWM_Start+0x136>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a16      	ldr	r2, [pc, #88]	; (80057f4 <HAL_TIM_PWM_Start+0x178>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d009      	beq.n	80057b2 <HAL_TIM_PWM_Start+0x136>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a18      	ldr	r2, [pc, #96]	; (8005804 <HAL_TIM_PWM_Start+0x188>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d004      	beq.n	80057b2 <HAL_TIM_PWM_Start+0x136>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a16      	ldr	r2, [pc, #88]	; (8005808 <HAL_TIM_PWM_Start+0x18c>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d111      	bne.n	80057d6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f003 0307 	and.w	r3, r3, #7
 80057bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2b06      	cmp	r3, #6
 80057c2:	d010      	beq.n	80057e6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f042 0201 	orr.w	r2, r2, #1
 80057d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057d4:	e007      	b.n	80057e6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f042 0201 	orr.w	r2, r2, #1
 80057e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	40010000 	.word	0x40010000
 80057f4:	40010400 	.word	0x40010400
 80057f8:	40000400 	.word	0x40000400
 80057fc:	40000800 	.word	0x40000800
 8005800:	40000c00 	.word	0x40000c00
 8005804:	40014000 	.word	0x40014000
 8005808:	40001800 	.word	0x40001800

0800580c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e041      	b.n	80058a2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d106      	bne.n	8005838 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7fd fc72 	bl	800311c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2202      	movs	r2, #2
 800583c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	3304      	adds	r3, #4
 8005848:	4619      	mov	r1, r3
 800584a:	4610      	mov	r0, r2
 800584c:	f000 fdd2 	bl	80063f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
	...

080058ac <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d104      	bne.n	80058ca <HAL_TIM_IC_Start_IT+0x1e>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	e013      	b.n	80058f2 <HAL_TIM_IC_Start_IT+0x46>
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b04      	cmp	r3, #4
 80058ce:	d104      	bne.n	80058da <HAL_TIM_IC_Start_IT+0x2e>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	e00b      	b.n	80058f2 <HAL_TIM_IC_Start_IT+0x46>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b08      	cmp	r3, #8
 80058de:	d104      	bne.n	80058ea <HAL_TIM_IC_Start_IT+0x3e>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	e003      	b.n	80058f2 <HAL_TIM_IC_Start_IT+0x46>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d104      	bne.n	8005904 <HAL_TIM_IC_Start_IT+0x58>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005900:	b2db      	uxtb	r3, r3
 8005902:	e013      	b.n	800592c <HAL_TIM_IC_Start_IT+0x80>
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	2b04      	cmp	r3, #4
 8005908:	d104      	bne.n	8005914 <HAL_TIM_IC_Start_IT+0x68>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005910:	b2db      	uxtb	r3, r3
 8005912:	e00b      	b.n	800592c <HAL_TIM_IC_Start_IT+0x80>
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	2b08      	cmp	r3, #8
 8005918:	d104      	bne.n	8005924 <HAL_TIM_IC_Start_IT+0x78>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005920:	b2db      	uxtb	r3, r3
 8005922:	e003      	b.n	800592c <HAL_TIM_IC_Start_IT+0x80>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800592a:	b2db      	uxtb	r3, r3
 800592c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800592e:	7bbb      	ldrb	r3, [r7, #14]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d102      	bne.n	800593a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005934:	7b7b      	ldrb	r3, [r7, #13]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d001      	beq.n	800593e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e0cc      	b.n	8005ad8 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d104      	bne.n	800594e <HAL_TIM_IC_Start_IT+0xa2>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800594c:	e013      	b.n	8005976 <HAL_TIM_IC_Start_IT+0xca>
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	2b04      	cmp	r3, #4
 8005952:	d104      	bne.n	800595e <HAL_TIM_IC_Start_IT+0xb2>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2202      	movs	r2, #2
 8005958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800595c:	e00b      	b.n	8005976 <HAL_TIM_IC_Start_IT+0xca>
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	2b08      	cmp	r3, #8
 8005962:	d104      	bne.n	800596e <HAL_TIM_IC_Start_IT+0xc2>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2202      	movs	r2, #2
 8005968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800596c:	e003      	b.n	8005976 <HAL_TIM_IC_Start_IT+0xca>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2202      	movs	r2, #2
 8005972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d104      	bne.n	8005986 <HAL_TIM_IC_Start_IT+0xda>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2202      	movs	r2, #2
 8005980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005984:	e013      	b.n	80059ae <HAL_TIM_IC_Start_IT+0x102>
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2b04      	cmp	r3, #4
 800598a:	d104      	bne.n	8005996 <HAL_TIM_IC_Start_IT+0xea>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005994:	e00b      	b.n	80059ae <HAL_TIM_IC_Start_IT+0x102>
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	2b08      	cmp	r3, #8
 800599a:	d104      	bne.n	80059a6 <HAL_TIM_IC_Start_IT+0xfa>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2202      	movs	r2, #2
 80059a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059a4:	e003      	b.n	80059ae <HAL_TIM_IC_Start_IT+0x102>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2202      	movs	r2, #2
 80059aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b0c      	cmp	r3, #12
 80059b2:	d841      	bhi.n	8005a38 <HAL_TIM_IC_Start_IT+0x18c>
 80059b4:	a201      	add	r2, pc, #4	; (adr r2, 80059bc <HAL_TIM_IC_Start_IT+0x110>)
 80059b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ba:	bf00      	nop
 80059bc:	080059f1 	.word	0x080059f1
 80059c0:	08005a39 	.word	0x08005a39
 80059c4:	08005a39 	.word	0x08005a39
 80059c8:	08005a39 	.word	0x08005a39
 80059cc:	08005a03 	.word	0x08005a03
 80059d0:	08005a39 	.word	0x08005a39
 80059d4:	08005a39 	.word	0x08005a39
 80059d8:	08005a39 	.word	0x08005a39
 80059dc:	08005a15 	.word	0x08005a15
 80059e0:	08005a39 	.word	0x08005a39
 80059e4:	08005a39 	.word	0x08005a39
 80059e8:	08005a39 	.word	0x08005a39
 80059ec:	08005a27 	.word	0x08005a27
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68da      	ldr	r2, [r3, #12]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f042 0202 	orr.w	r2, r2, #2
 80059fe:	60da      	str	r2, [r3, #12]
      break;
 8005a00:	e01d      	b.n	8005a3e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68da      	ldr	r2, [r3, #12]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f042 0204 	orr.w	r2, r2, #4
 8005a10:	60da      	str	r2, [r3, #12]
      break;
 8005a12:	e014      	b.n	8005a3e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68da      	ldr	r2, [r3, #12]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f042 0208 	orr.w	r2, r2, #8
 8005a22:	60da      	str	r2, [r3, #12]
      break;
 8005a24:	e00b      	b.n	8005a3e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f042 0210 	orr.w	r2, r2, #16
 8005a34:	60da      	str	r2, [r3, #12]
      break;
 8005a36:	e002      	b.n	8005a3e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a3c:	bf00      	nop
  }

  if (status == HAL_OK)
 8005a3e:	7bfb      	ldrb	r3, [r7, #15]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d148      	bne.n	8005ad6 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	6839      	ldr	r1, [r7, #0]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f001 f8f1 	bl	8006c34 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a22      	ldr	r2, [pc, #136]	; (8005ae0 <HAL_TIM_IC_Start_IT+0x234>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d022      	beq.n	8005aa2 <HAL_TIM_IC_Start_IT+0x1f6>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a64:	d01d      	beq.n	8005aa2 <HAL_TIM_IC_Start_IT+0x1f6>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a1e      	ldr	r2, [pc, #120]	; (8005ae4 <HAL_TIM_IC_Start_IT+0x238>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d018      	beq.n	8005aa2 <HAL_TIM_IC_Start_IT+0x1f6>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a1c      	ldr	r2, [pc, #112]	; (8005ae8 <HAL_TIM_IC_Start_IT+0x23c>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d013      	beq.n	8005aa2 <HAL_TIM_IC_Start_IT+0x1f6>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a1b      	ldr	r2, [pc, #108]	; (8005aec <HAL_TIM_IC_Start_IT+0x240>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d00e      	beq.n	8005aa2 <HAL_TIM_IC_Start_IT+0x1f6>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a19      	ldr	r2, [pc, #100]	; (8005af0 <HAL_TIM_IC_Start_IT+0x244>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d009      	beq.n	8005aa2 <HAL_TIM_IC_Start_IT+0x1f6>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a18      	ldr	r2, [pc, #96]	; (8005af4 <HAL_TIM_IC_Start_IT+0x248>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d004      	beq.n	8005aa2 <HAL_TIM_IC_Start_IT+0x1f6>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a16      	ldr	r2, [pc, #88]	; (8005af8 <HAL_TIM_IC_Start_IT+0x24c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d111      	bne.n	8005ac6 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f003 0307 	and.w	r3, r3, #7
 8005aac:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	2b06      	cmp	r3, #6
 8005ab2:	d010      	beq.n	8005ad6 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f042 0201 	orr.w	r2, r2, #1
 8005ac2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ac4:	e007      	b.n	8005ad6 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f042 0201 	orr.w	r2, r2, #1
 8005ad4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	40010000 	.word	0x40010000
 8005ae4:	40000400 	.word	0x40000400
 8005ae8:	40000800 	.word	0x40000800
 8005aec:	40000c00 	.word	0x40000c00
 8005af0:	40010400 	.word	0x40010400
 8005af4:	40014000 	.word	0x40014000
 8005af8:	40001800 	.word	0x40001800

08005afc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d101      	bne.n	8005b10 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e097      	b.n	8005c40 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d106      	bne.n	8005b2a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f7fd fa5f 	bl	8002fe8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2202      	movs	r2, #2
 8005b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6812      	ldr	r2, [r2, #0]
 8005b3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b40:	f023 0307 	bic.w	r3, r3, #7
 8005b44:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	4619      	mov	r1, r3
 8005b50:	4610      	mov	r0, r2
 8005b52:	f000 fc4f 	bl	80063f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	6a1b      	ldr	r3, [r3, #32]
 8005b6c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b7e:	f023 0303 	bic.w	r3, r3, #3
 8005b82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	689a      	ldr	r2, [r3, #8]
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	021b      	lsls	r3, r3, #8
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005b9c:	f023 030c 	bic.w	r3, r3, #12
 8005ba0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ba8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	68da      	ldr	r2, [r3, #12]
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	021b      	lsls	r3, r3, #8
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	011a      	lsls	r2, r3, #4
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	031b      	lsls	r3, r3, #12
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005bda:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005be2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	011b      	lsls	r3, r3, #4
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3718      	adds	r7, #24
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c58:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c60:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c68:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c70:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d110      	bne.n	8005c9a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c78:	7bfb      	ldrb	r3, [r7, #15]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d102      	bne.n	8005c84 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c7e:	7b7b      	ldrb	r3, [r7, #13]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d001      	beq.n	8005c88 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e069      	b.n	8005d5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c98:	e031      	b.n	8005cfe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	2b04      	cmp	r3, #4
 8005c9e:	d110      	bne.n	8005cc2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ca0:	7bbb      	ldrb	r3, [r7, #14]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d102      	bne.n	8005cac <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ca6:	7b3b      	ldrb	r3, [r7, #12]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d001      	beq.n	8005cb0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e055      	b.n	8005d5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2202      	movs	r2, #2
 8005cb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2202      	movs	r2, #2
 8005cbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cc0:	e01d      	b.n	8005cfe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cc2:	7bfb      	ldrb	r3, [r7, #15]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d108      	bne.n	8005cda <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cc8:	7bbb      	ldrb	r3, [r7, #14]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d105      	bne.n	8005cda <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005cce:	7b7b      	ldrb	r3, [r7, #13]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d102      	bne.n	8005cda <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005cd4:	7b3b      	ldrb	r3, [r7, #12]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d001      	beq.n	8005cde <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e03e      	b.n	8005d5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2202      	movs	r2, #2
 8005ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2202      	movs	r2, #2
 8005cea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2202      	movs	r2, #2
 8005cf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d003      	beq.n	8005d0c <HAL_TIM_Encoder_Start+0xc4>
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	d008      	beq.n	8005d1c <HAL_TIM_Encoder_Start+0xd4>
 8005d0a:	e00f      	b.n	8005d2c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2201      	movs	r2, #1
 8005d12:	2100      	movs	r1, #0
 8005d14:	4618      	mov	r0, r3
 8005d16:	f000 ff8d 	bl	8006c34 <TIM_CCxChannelCmd>
      break;
 8005d1a:	e016      	b.n	8005d4a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2201      	movs	r2, #1
 8005d22:	2104      	movs	r1, #4
 8005d24:	4618      	mov	r0, r3
 8005d26:	f000 ff85 	bl	8006c34 <TIM_CCxChannelCmd>
      break;
 8005d2a:	e00e      	b.n	8005d4a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2201      	movs	r2, #1
 8005d32:	2100      	movs	r1, #0
 8005d34:	4618      	mov	r0, r3
 8005d36:	f000 ff7d 	bl	8006c34 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	2104      	movs	r1, #4
 8005d42:	4618      	mov	r0, r3
 8005d44:	f000 ff76 	bl	8006c34 <TIM_CCxChannelCmd>
      break;
 8005d48:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f042 0201 	orr.w	r2, r2, #1
 8005d58:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	f003 0302 	and.w	r3, r3, #2
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d020      	beq.n	8005dc8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d01b      	beq.n	8005dc8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f06f 0202 	mvn.w	r2, #2
 8005d98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	f003 0303 	and.w	r3, r3, #3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 fb01 	bl	80063b6 <HAL_TIM_IC_CaptureCallback>
 8005db4:	e005      	b.n	8005dc2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 faf3 	bl	80063a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 fb04 	bl	80063ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	f003 0304 	and.w	r3, r3, #4
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d020      	beq.n	8005e14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f003 0304 	and.w	r3, r3, #4
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d01b      	beq.n	8005e14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f06f 0204 	mvn.w	r2, #4
 8005de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2202      	movs	r2, #2
 8005dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d003      	beq.n	8005e02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 fadb 	bl	80063b6 <HAL_TIM_IC_CaptureCallback>
 8005e00:	e005      	b.n	8005e0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 facd 	bl	80063a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 fade 	bl	80063ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	f003 0308 	and.w	r3, r3, #8
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d020      	beq.n	8005e60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f003 0308 	and.w	r3, r3, #8
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d01b      	beq.n	8005e60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f06f 0208 	mvn.w	r2, #8
 8005e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2204      	movs	r2, #4
 8005e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	69db      	ldr	r3, [r3, #28]
 8005e3e:	f003 0303 	and.w	r3, r3, #3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d003      	beq.n	8005e4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fab5 	bl	80063b6 <HAL_TIM_IC_CaptureCallback>
 8005e4c:	e005      	b.n	8005e5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 faa7 	bl	80063a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 fab8 	bl	80063ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	f003 0310 	and.w	r3, r3, #16
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d020      	beq.n	8005eac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f003 0310 	and.w	r3, r3, #16
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d01b      	beq.n	8005eac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f06f 0210 	mvn.w	r2, #16
 8005e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2208      	movs	r2, #8
 8005e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	69db      	ldr	r3, [r3, #28]
 8005e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fa8f 	bl	80063b6 <HAL_TIM_IC_CaptureCallback>
 8005e98:	e005      	b.n	8005ea6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 fa81 	bl	80063a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 fa92 	bl	80063ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00c      	beq.n	8005ed0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d007      	beq.n	8005ed0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f06f 0201 	mvn.w	r2, #1
 8005ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 fa5f 	bl	800638e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d00c      	beq.n	8005ef4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d007      	beq.n	8005ef4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 ff9e 	bl	8006e30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00c      	beq.n	8005f18 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d007      	beq.n	8005f18 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 fa63 	bl	80063de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	f003 0320 	and.w	r3, r3, #32
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00c      	beq.n	8005f3c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f003 0320 	and.w	r3, r3, #32
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d007      	beq.n	8005f3c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f06f 0220 	mvn.w	r2, #32
 8005f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 ff70 	bl	8006e1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f3c:	bf00      	nop
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f50:	2300      	movs	r3, #0
 8005f52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d101      	bne.n	8005f62 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005f5e:	2302      	movs	r3, #2
 8005f60:	e088      	b.n	8006074 <HAL_TIM_IC_ConfigChannel+0x130>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d11b      	bne.n	8005fa8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005f80:	f000 fc94 	bl	80068ac <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	699a      	ldr	r2, [r3, #24]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f022 020c 	bic.w	r2, r2, #12
 8005f92:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	6999      	ldr	r1, [r3, #24]
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	689a      	ldr	r2, [r3, #8]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	619a      	str	r2, [r3, #24]
 8005fa6:	e060      	b.n	800606a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2b04      	cmp	r3, #4
 8005fac:	d11c      	bne.n	8005fe8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005fbe:	f000 fd18 	bl	80069f2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	699a      	ldr	r2, [r3, #24]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005fd0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	6999      	ldr	r1, [r3, #24]
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	021a      	lsls	r2, r3, #8
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	430a      	orrs	r2, r1
 8005fe4:	619a      	str	r2, [r3, #24]
 8005fe6:	e040      	b.n	800606a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b08      	cmp	r3, #8
 8005fec:	d11b      	bne.n	8006026 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005ffe:	f000 fd65 	bl	8006acc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	69da      	ldr	r2, [r3, #28]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 020c 	bic.w	r2, r2, #12
 8006010:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	69d9      	ldr	r1, [r3, #28]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	430a      	orrs	r2, r1
 8006022:	61da      	str	r2, [r3, #28]
 8006024:	e021      	b.n	800606a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2b0c      	cmp	r3, #12
 800602a:	d11c      	bne.n	8006066 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800603c:	f000 fd82 	bl	8006b44 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	69da      	ldr	r2, [r3, #28]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800604e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	69d9      	ldr	r1, [r3, #28]
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	021a      	lsls	r2, r3, #8
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	430a      	orrs	r2, r1
 8006062:	61da      	str	r2, [r3, #28]
 8006064:	e001      	b.n	800606a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006072:	7dfb      	ldrb	r3, [r7, #23]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3718      	adds	r7, #24
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b086      	sub	sp, #24
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006088:	2300      	movs	r3, #0
 800608a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006092:	2b01      	cmp	r3, #1
 8006094:	d101      	bne.n	800609a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006096:	2302      	movs	r3, #2
 8006098:	e0ae      	b.n	80061f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b0c      	cmp	r3, #12
 80060a6:	f200 809f 	bhi.w	80061e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80060aa:	a201      	add	r2, pc, #4	; (adr r2, 80060b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b0:	080060e5 	.word	0x080060e5
 80060b4:	080061e9 	.word	0x080061e9
 80060b8:	080061e9 	.word	0x080061e9
 80060bc:	080061e9 	.word	0x080061e9
 80060c0:	08006125 	.word	0x08006125
 80060c4:	080061e9 	.word	0x080061e9
 80060c8:	080061e9 	.word	0x080061e9
 80060cc:	080061e9 	.word	0x080061e9
 80060d0:	08006167 	.word	0x08006167
 80060d4:	080061e9 	.word	0x080061e9
 80060d8:	080061e9 	.word	0x080061e9
 80060dc:	080061e9 	.word	0x080061e9
 80060e0:	080061a7 	.word	0x080061a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68b9      	ldr	r1, [r7, #8]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 fa2e 	bl	800654c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	699a      	ldr	r2, [r3, #24]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f042 0208 	orr.w	r2, r2, #8
 80060fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	699a      	ldr	r2, [r3, #24]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f022 0204 	bic.w	r2, r2, #4
 800610e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6999      	ldr	r1, [r3, #24]
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	691a      	ldr	r2, [r3, #16]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	619a      	str	r2, [r3, #24]
      break;
 8006122:	e064      	b.n	80061ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68b9      	ldr	r1, [r7, #8]
 800612a:	4618      	mov	r0, r3
 800612c:	f000 fa7e 	bl	800662c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	699a      	ldr	r2, [r3, #24]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800613e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	699a      	ldr	r2, [r3, #24]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800614e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6999      	ldr	r1, [r3, #24]
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	021a      	lsls	r2, r3, #8
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	430a      	orrs	r2, r1
 8006162:	619a      	str	r2, [r3, #24]
      break;
 8006164:	e043      	b.n	80061ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68b9      	ldr	r1, [r7, #8]
 800616c:	4618      	mov	r0, r3
 800616e:	f000 fad3 	bl	8006718 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	69da      	ldr	r2, [r3, #28]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f042 0208 	orr.w	r2, r2, #8
 8006180:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	69da      	ldr	r2, [r3, #28]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f022 0204 	bic.w	r2, r2, #4
 8006190:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	69d9      	ldr	r1, [r3, #28]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	691a      	ldr	r2, [r3, #16]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	430a      	orrs	r2, r1
 80061a2:	61da      	str	r2, [r3, #28]
      break;
 80061a4:	e023      	b.n	80061ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68b9      	ldr	r1, [r7, #8]
 80061ac:	4618      	mov	r0, r3
 80061ae:	f000 fb27 	bl	8006800 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	69da      	ldr	r2, [r3, #28]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	69da      	ldr	r2, [r3, #28]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69d9      	ldr	r1, [r3, #28]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	021a      	lsls	r2, r3, #8
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	61da      	str	r2, [r3, #28]
      break;
 80061e6:	e002      	b.n	80061ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	75fb      	strb	r3, [r7, #23]
      break;
 80061ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3718      	adds	r7, #24
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800620a:	2300      	movs	r3, #0
 800620c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006214:	2b01      	cmp	r3, #1
 8006216:	d101      	bne.n	800621c <HAL_TIM_ConfigClockSource+0x1c>
 8006218:	2302      	movs	r3, #2
 800621a:	e0b4      	b.n	8006386 <HAL_TIM_ConfigClockSource+0x186>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2202      	movs	r2, #2
 8006228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800623a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006242:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006254:	d03e      	beq.n	80062d4 <HAL_TIM_ConfigClockSource+0xd4>
 8006256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800625a:	f200 8087 	bhi.w	800636c <HAL_TIM_ConfigClockSource+0x16c>
 800625e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006262:	f000 8086 	beq.w	8006372 <HAL_TIM_ConfigClockSource+0x172>
 8006266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800626a:	d87f      	bhi.n	800636c <HAL_TIM_ConfigClockSource+0x16c>
 800626c:	2b70      	cmp	r3, #112	; 0x70
 800626e:	d01a      	beq.n	80062a6 <HAL_TIM_ConfigClockSource+0xa6>
 8006270:	2b70      	cmp	r3, #112	; 0x70
 8006272:	d87b      	bhi.n	800636c <HAL_TIM_ConfigClockSource+0x16c>
 8006274:	2b60      	cmp	r3, #96	; 0x60
 8006276:	d050      	beq.n	800631a <HAL_TIM_ConfigClockSource+0x11a>
 8006278:	2b60      	cmp	r3, #96	; 0x60
 800627a:	d877      	bhi.n	800636c <HAL_TIM_ConfigClockSource+0x16c>
 800627c:	2b50      	cmp	r3, #80	; 0x50
 800627e:	d03c      	beq.n	80062fa <HAL_TIM_ConfigClockSource+0xfa>
 8006280:	2b50      	cmp	r3, #80	; 0x50
 8006282:	d873      	bhi.n	800636c <HAL_TIM_ConfigClockSource+0x16c>
 8006284:	2b40      	cmp	r3, #64	; 0x40
 8006286:	d058      	beq.n	800633a <HAL_TIM_ConfigClockSource+0x13a>
 8006288:	2b40      	cmp	r3, #64	; 0x40
 800628a:	d86f      	bhi.n	800636c <HAL_TIM_ConfigClockSource+0x16c>
 800628c:	2b30      	cmp	r3, #48	; 0x30
 800628e:	d064      	beq.n	800635a <HAL_TIM_ConfigClockSource+0x15a>
 8006290:	2b30      	cmp	r3, #48	; 0x30
 8006292:	d86b      	bhi.n	800636c <HAL_TIM_ConfigClockSource+0x16c>
 8006294:	2b20      	cmp	r3, #32
 8006296:	d060      	beq.n	800635a <HAL_TIM_ConfigClockSource+0x15a>
 8006298:	2b20      	cmp	r3, #32
 800629a:	d867      	bhi.n	800636c <HAL_TIM_ConfigClockSource+0x16c>
 800629c:	2b00      	cmp	r3, #0
 800629e:	d05c      	beq.n	800635a <HAL_TIM_ConfigClockSource+0x15a>
 80062a0:	2b10      	cmp	r3, #16
 80062a2:	d05a      	beq.n	800635a <HAL_TIM_ConfigClockSource+0x15a>
 80062a4:	e062      	b.n	800636c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062b6:	f000 fc9d 	bl	8006bf4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80062c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	609a      	str	r2, [r3, #8]
      break;
 80062d2:	e04f      	b.n	8006374 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062e4:	f000 fc86 	bl	8006bf4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	689a      	ldr	r2, [r3, #8]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062f6:	609a      	str	r2, [r3, #8]
      break;
 80062f8:	e03c      	b.n	8006374 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006306:	461a      	mov	r2, r3
 8006308:	f000 fb44 	bl	8006994 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2150      	movs	r1, #80	; 0x50
 8006312:	4618      	mov	r0, r3
 8006314:	f000 fc53 	bl	8006bbe <TIM_ITRx_SetConfig>
      break;
 8006318:	e02c      	b.n	8006374 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006326:	461a      	mov	r2, r3
 8006328:	f000 fba0 	bl	8006a6c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2160      	movs	r1, #96	; 0x60
 8006332:	4618      	mov	r0, r3
 8006334:	f000 fc43 	bl	8006bbe <TIM_ITRx_SetConfig>
      break;
 8006338:	e01c      	b.n	8006374 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006346:	461a      	mov	r2, r3
 8006348:	f000 fb24 	bl	8006994 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2140      	movs	r1, #64	; 0x40
 8006352:	4618      	mov	r0, r3
 8006354:	f000 fc33 	bl	8006bbe <TIM_ITRx_SetConfig>
      break;
 8006358:	e00c      	b.n	8006374 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4619      	mov	r1, r3
 8006364:	4610      	mov	r0, r2
 8006366:	f000 fc2a 	bl	8006bbe <TIM_ITRx_SetConfig>
      break;
 800636a:	e003      	b.n	8006374 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	73fb      	strb	r3, [r7, #15]
      break;
 8006370:	e000      	b.n	8006374 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006372:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006384:	7bfb      	ldrb	r3, [r7, #15]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800638e:	b480      	push	{r7}
 8006390:	b083      	sub	sp, #12
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006396:	bf00      	nop
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b083      	sub	sp, #12
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063aa:	bf00      	nop
 80063ac:	370c      	adds	r7, #12
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b083      	sub	sp, #12
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063be:	bf00      	nop
 80063c0:	370c      	adds	r7, #12
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr

080063ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063ca:	b480      	push	{r7}
 80063cc:	b083      	sub	sp, #12
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063d2:	bf00      	nop
 80063d4:	370c      	adds	r7, #12
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063de:	b480      	push	{r7}
 80063e0:	b083      	sub	sp, #12
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063e6:	bf00      	nop
 80063e8:	370c      	adds	r7, #12
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
	...

080063f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a46      	ldr	r2, [pc, #280]	; (8006520 <TIM_Base_SetConfig+0x12c>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d013      	beq.n	8006434 <TIM_Base_SetConfig+0x40>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006412:	d00f      	beq.n	8006434 <TIM_Base_SetConfig+0x40>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a43      	ldr	r2, [pc, #268]	; (8006524 <TIM_Base_SetConfig+0x130>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d00b      	beq.n	8006434 <TIM_Base_SetConfig+0x40>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a42      	ldr	r2, [pc, #264]	; (8006528 <TIM_Base_SetConfig+0x134>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d007      	beq.n	8006434 <TIM_Base_SetConfig+0x40>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a41      	ldr	r2, [pc, #260]	; (800652c <TIM_Base_SetConfig+0x138>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d003      	beq.n	8006434 <TIM_Base_SetConfig+0x40>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a40      	ldr	r2, [pc, #256]	; (8006530 <TIM_Base_SetConfig+0x13c>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d108      	bne.n	8006446 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800643a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	4313      	orrs	r3, r2
 8006444:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a35      	ldr	r2, [pc, #212]	; (8006520 <TIM_Base_SetConfig+0x12c>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d02b      	beq.n	80064a6 <TIM_Base_SetConfig+0xb2>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006454:	d027      	beq.n	80064a6 <TIM_Base_SetConfig+0xb2>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a32      	ldr	r2, [pc, #200]	; (8006524 <TIM_Base_SetConfig+0x130>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d023      	beq.n	80064a6 <TIM_Base_SetConfig+0xb2>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a31      	ldr	r2, [pc, #196]	; (8006528 <TIM_Base_SetConfig+0x134>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d01f      	beq.n	80064a6 <TIM_Base_SetConfig+0xb2>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a30      	ldr	r2, [pc, #192]	; (800652c <TIM_Base_SetConfig+0x138>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d01b      	beq.n	80064a6 <TIM_Base_SetConfig+0xb2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a2f      	ldr	r2, [pc, #188]	; (8006530 <TIM_Base_SetConfig+0x13c>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d017      	beq.n	80064a6 <TIM_Base_SetConfig+0xb2>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a2e      	ldr	r2, [pc, #184]	; (8006534 <TIM_Base_SetConfig+0x140>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d013      	beq.n	80064a6 <TIM_Base_SetConfig+0xb2>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a2d      	ldr	r2, [pc, #180]	; (8006538 <TIM_Base_SetConfig+0x144>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d00f      	beq.n	80064a6 <TIM_Base_SetConfig+0xb2>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a2c      	ldr	r2, [pc, #176]	; (800653c <TIM_Base_SetConfig+0x148>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d00b      	beq.n	80064a6 <TIM_Base_SetConfig+0xb2>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a2b      	ldr	r2, [pc, #172]	; (8006540 <TIM_Base_SetConfig+0x14c>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d007      	beq.n	80064a6 <TIM_Base_SetConfig+0xb2>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a2a      	ldr	r2, [pc, #168]	; (8006544 <TIM_Base_SetConfig+0x150>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d003      	beq.n	80064a6 <TIM_Base_SetConfig+0xb2>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a29      	ldr	r2, [pc, #164]	; (8006548 <TIM_Base_SetConfig+0x154>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d108      	bne.n	80064b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	695b      	ldr	r3, [r3, #20]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	689a      	ldr	r2, [r3, #8]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a10      	ldr	r2, [pc, #64]	; (8006520 <TIM_Base_SetConfig+0x12c>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d003      	beq.n	80064ec <TIM_Base_SetConfig+0xf8>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a12      	ldr	r2, [pc, #72]	; (8006530 <TIM_Base_SetConfig+0x13c>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d103      	bne.n	80064f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	691a      	ldr	r2, [r3, #16]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b01      	cmp	r3, #1
 8006504:	d105      	bne.n	8006512 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	f023 0201 	bic.w	r2, r3, #1
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	611a      	str	r2, [r3, #16]
  }
}
 8006512:	bf00      	nop
 8006514:	3714      	adds	r7, #20
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	40010000 	.word	0x40010000
 8006524:	40000400 	.word	0x40000400
 8006528:	40000800 	.word	0x40000800
 800652c:	40000c00 	.word	0x40000c00
 8006530:	40010400 	.word	0x40010400
 8006534:	40014000 	.word	0x40014000
 8006538:	40014400 	.word	0x40014400
 800653c:	40014800 	.word	0x40014800
 8006540:	40001800 	.word	0x40001800
 8006544:	40001c00 	.word	0x40001c00
 8006548:	40002000 	.word	0x40002000

0800654c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800654c:	b480      	push	{r7}
 800654e:	b087      	sub	sp, #28
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a1b      	ldr	r3, [r3, #32]
 8006560:	f023 0201 	bic.w	r2, r3, #1
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800657a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f023 0303 	bic.w	r3, r3, #3
 8006582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	4313      	orrs	r3, r2
 800658c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	f023 0302 	bic.w	r3, r3, #2
 8006594:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	4313      	orrs	r3, r2
 800659e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a20      	ldr	r2, [pc, #128]	; (8006624 <TIM_OC1_SetConfig+0xd8>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d003      	beq.n	80065b0 <TIM_OC1_SetConfig+0x64>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a1f      	ldr	r2, [pc, #124]	; (8006628 <TIM_OC1_SetConfig+0xdc>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d10c      	bne.n	80065ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	f023 0308 	bic.w	r3, r3, #8
 80065b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	4313      	orrs	r3, r2
 80065c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	f023 0304 	bic.w	r3, r3, #4
 80065c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a15      	ldr	r2, [pc, #84]	; (8006624 <TIM_OC1_SetConfig+0xd8>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d003      	beq.n	80065da <TIM_OC1_SetConfig+0x8e>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a14      	ldr	r2, [pc, #80]	; (8006628 <TIM_OC1_SetConfig+0xdc>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d111      	bne.n	80065fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	621a      	str	r2, [r3, #32]
}
 8006618:	bf00      	nop
 800661a:	371c      	adds	r7, #28
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr
 8006624:	40010000 	.word	0x40010000
 8006628:	40010400 	.word	0x40010400

0800662c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800662c:	b480      	push	{r7}
 800662e:	b087      	sub	sp, #28
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a1b      	ldr	r3, [r3, #32]
 8006640:	f023 0210 	bic.w	r2, r3, #16
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800665a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006662:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	021b      	lsls	r3, r3, #8
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	4313      	orrs	r3, r2
 800666e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	f023 0320 	bic.w	r3, r3, #32
 8006676:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	011b      	lsls	r3, r3, #4
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	4313      	orrs	r3, r2
 8006682:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a22      	ldr	r2, [pc, #136]	; (8006710 <TIM_OC2_SetConfig+0xe4>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d003      	beq.n	8006694 <TIM_OC2_SetConfig+0x68>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a21      	ldr	r2, [pc, #132]	; (8006714 <TIM_OC2_SetConfig+0xe8>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d10d      	bne.n	80066b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800669a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	011b      	lsls	r3, r3, #4
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a17      	ldr	r2, [pc, #92]	; (8006710 <TIM_OC2_SetConfig+0xe4>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d003      	beq.n	80066c0 <TIM_OC2_SetConfig+0x94>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a16      	ldr	r2, [pc, #88]	; (8006714 <TIM_OC2_SetConfig+0xe8>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d113      	bne.n	80066e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	4313      	orrs	r3, r2
 80066da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	621a      	str	r2, [r3, #32]
}
 8006702:	bf00      	nop
 8006704:	371c      	adds	r7, #28
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	40010000 	.word	0x40010000
 8006714:	40010400 	.word	0x40010400

08006718 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006718:	b480      	push	{r7}
 800671a:	b087      	sub	sp, #28
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a1b      	ldr	r3, [r3, #32]
 800672c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f023 0303 	bic.w	r3, r3, #3
 800674e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	4313      	orrs	r3, r2
 8006758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006760:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	021b      	lsls	r3, r3, #8
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	4313      	orrs	r3, r2
 800676c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a21      	ldr	r2, [pc, #132]	; (80067f8 <TIM_OC3_SetConfig+0xe0>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d003      	beq.n	800677e <TIM_OC3_SetConfig+0x66>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a20      	ldr	r2, [pc, #128]	; (80067fc <TIM_OC3_SetConfig+0xe4>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d10d      	bne.n	800679a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006784:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	021b      	lsls	r3, r3, #8
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	4313      	orrs	r3, r2
 8006790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a16      	ldr	r2, [pc, #88]	; (80067f8 <TIM_OC3_SetConfig+0xe0>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d003      	beq.n	80067aa <TIM_OC3_SetConfig+0x92>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a15      	ldr	r2, [pc, #84]	; (80067fc <TIM_OC3_SetConfig+0xe4>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d113      	bne.n	80067d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	011b      	lsls	r3, r3, #4
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	011b      	lsls	r3, r3, #4
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	685a      	ldr	r2, [r3, #4]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	697a      	ldr	r2, [r7, #20]
 80067ea:	621a      	str	r2, [r3, #32]
}
 80067ec:	bf00      	nop
 80067ee:	371c      	adds	r7, #28
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr
 80067f8:	40010000 	.word	0x40010000
 80067fc:	40010400 	.word	0x40010400

08006800 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006800:	b480      	push	{r7}
 8006802:	b087      	sub	sp, #28
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a1b      	ldr	r3, [r3, #32]
 8006814:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	69db      	ldr	r3, [r3, #28]
 8006826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800682e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006836:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	021b      	lsls	r3, r3, #8
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	4313      	orrs	r3, r2
 8006842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800684a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	031b      	lsls	r3, r3, #12
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	4313      	orrs	r3, r2
 8006856:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a12      	ldr	r2, [pc, #72]	; (80068a4 <TIM_OC4_SetConfig+0xa4>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d003      	beq.n	8006868 <TIM_OC4_SetConfig+0x68>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a11      	ldr	r2, [pc, #68]	; (80068a8 <TIM_OC4_SetConfig+0xa8>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d109      	bne.n	800687c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800686e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	695b      	ldr	r3, [r3, #20]
 8006874:	019b      	lsls	r3, r3, #6
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	4313      	orrs	r3, r2
 800687a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	697a      	ldr	r2, [r7, #20]
 8006880:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	685a      	ldr	r2, [r3, #4]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	621a      	str	r2, [r3, #32]
}
 8006896:	bf00      	nop
 8006898:	371c      	adds	r7, #28
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	40010000 	.word	0x40010000
 80068a8:	40010400 	.word	0x40010400

080068ac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b087      	sub	sp, #28
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
 80068b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6a1b      	ldr	r3, [r3, #32]
 80068c4:	f023 0201 	bic.w	r2, r3, #1
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	4a28      	ldr	r2, [pc, #160]	; (8006978 <TIM_TI1_SetConfig+0xcc>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d01b      	beq.n	8006912 <TIM_TI1_SetConfig+0x66>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068e0:	d017      	beq.n	8006912 <TIM_TI1_SetConfig+0x66>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	4a25      	ldr	r2, [pc, #148]	; (800697c <TIM_TI1_SetConfig+0xd0>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d013      	beq.n	8006912 <TIM_TI1_SetConfig+0x66>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	4a24      	ldr	r2, [pc, #144]	; (8006980 <TIM_TI1_SetConfig+0xd4>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d00f      	beq.n	8006912 <TIM_TI1_SetConfig+0x66>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	4a23      	ldr	r2, [pc, #140]	; (8006984 <TIM_TI1_SetConfig+0xd8>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d00b      	beq.n	8006912 <TIM_TI1_SetConfig+0x66>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	4a22      	ldr	r2, [pc, #136]	; (8006988 <TIM_TI1_SetConfig+0xdc>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d007      	beq.n	8006912 <TIM_TI1_SetConfig+0x66>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	4a21      	ldr	r2, [pc, #132]	; (800698c <TIM_TI1_SetConfig+0xe0>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d003      	beq.n	8006912 <TIM_TI1_SetConfig+0x66>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	4a20      	ldr	r2, [pc, #128]	; (8006990 <TIM_TI1_SetConfig+0xe4>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d101      	bne.n	8006916 <TIM_TI1_SetConfig+0x6a>
 8006912:	2301      	movs	r3, #1
 8006914:	e000      	b.n	8006918 <TIM_TI1_SetConfig+0x6c>
 8006916:	2300      	movs	r3, #0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d008      	beq.n	800692e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	f023 0303 	bic.w	r3, r3, #3
 8006922:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006924:	697a      	ldr	r2, [r7, #20]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4313      	orrs	r3, r2
 800692a:	617b      	str	r3, [r7, #20]
 800692c:	e003      	b.n	8006936 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f043 0301 	orr.w	r3, r3, #1
 8006934:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800693c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	011b      	lsls	r3, r3, #4
 8006942:	b2db      	uxtb	r3, r3
 8006944:	697a      	ldr	r2, [r7, #20]
 8006946:	4313      	orrs	r3, r2
 8006948:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f023 030a 	bic.w	r3, r3, #10
 8006950:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	f003 030a 	and.w	r3, r3, #10
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	4313      	orrs	r3, r2
 800695c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	693a      	ldr	r2, [r7, #16]
 8006968:	621a      	str	r2, [r3, #32]
}
 800696a:	bf00      	nop
 800696c:	371c      	adds	r7, #28
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	40010000 	.word	0x40010000
 800697c:	40000400 	.word	0x40000400
 8006980:	40000800 	.word	0x40000800
 8006984:	40000c00 	.word	0x40000c00
 8006988:	40010400 	.word	0x40010400
 800698c:	40014000 	.word	0x40014000
 8006990:	40001800 	.word	0x40001800

08006994 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006994:	b480      	push	{r7}
 8006996:	b087      	sub	sp, #28
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6a1b      	ldr	r3, [r3, #32]
 80069a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	f023 0201 	bic.w	r2, r3, #1
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	011b      	lsls	r3, r3, #4
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	f023 030a 	bic.w	r3, r3, #10
 80069d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	621a      	str	r2, [r3, #32]
}
 80069e6:	bf00      	nop
 80069e8:	371c      	adds	r7, #28
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b087      	sub	sp, #28
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	60f8      	str	r0, [r7, #12]
 80069fa:	60b9      	str	r1, [r7, #8]
 80069fc:	607a      	str	r2, [r7, #4]
 80069fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6a1b      	ldr	r3, [r3, #32]
 8006a04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	f023 0210 	bic.w	r2, r3, #16
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	021b      	lsls	r3, r3, #8
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	031b      	lsls	r3, r3, #12
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a44:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	011b      	lsls	r3, r3, #4
 8006a4a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	621a      	str	r2, [r3, #32]
}
 8006a60:	bf00      	nop
 8006a62:	371c      	adds	r7, #28
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b087      	sub	sp, #28
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
 8006a7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	f023 0210 	bic.w	r2, r3, #16
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	031b      	lsls	r3, r3, #12
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006aa8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	011b      	lsls	r3, r3, #4
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	621a      	str	r2, [r3, #32]
}
 8006ac0:	bf00      	nop
 8006ac2:	371c      	adds	r7, #28
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b087      	sub	sp, #28
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	607a      	str	r2, [r7, #4]
 8006ad8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6a1b      	ldr	r3, [r3, #32]
 8006ae4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	69db      	ldr	r3, [r3, #28]
 8006af0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f023 0303 	bic.w	r3, r3, #3
 8006af8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b08:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	011b      	lsls	r3, r3, #4
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006b1c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	021b      	lsls	r3, r3, #8
 8006b22:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006b26:	697a      	ldr	r2, [r7, #20]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	621a      	str	r2, [r3, #32]
}
 8006b38:	bf00      	nop
 8006b3a:	371c      	adds	r7, #28
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b087      	sub	sp, #28
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]
 8006b50:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6a1b      	ldr	r3, [r3, #32]
 8006b5c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	69db      	ldr	r3, [r3, #28]
 8006b68:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b70:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	021b      	lsls	r3, r3, #8
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b82:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	031b      	lsls	r3, r3, #12
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	693a      	ldr	r2, [r7, #16]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006b96:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	031b      	lsls	r3, r3, #12
 8006b9c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006ba0:	697a      	ldr	r2, [r7, #20]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	621a      	str	r2, [r3, #32]
}
 8006bb2:	bf00      	nop
 8006bb4:	371c      	adds	r7, #28
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr

08006bbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	b085      	sub	sp, #20
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
 8006bc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	f043 0307 	orr.w	r3, r3, #7
 8006be0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	609a      	str	r2, [r3, #8]
}
 8006be8:	bf00      	nop
 8006bea:	3714      	adds	r7, #20
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b087      	sub	sp, #28
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
 8006c00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	021a      	lsls	r2, r3, #8
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	431a      	orrs	r2, r3
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	697a      	ldr	r2, [r7, #20]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	697a      	ldr	r2, [r7, #20]
 8006c26:	609a      	str	r2, [r3, #8]
}
 8006c28:	bf00      	nop
 8006c2a:	371c      	adds	r7, #28
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b087      	sub	sp, #28
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	f003 031f 	and.w	r3, r3, #31
 8006c46:	2201      	movs	r2, #1
 8006c48:	fa02 f303 	lsl.w	r3, r2, r3
 8006c4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6a1a      	ldr	r2, [r3, #32]
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	43db      	mvns	r3, r3
 8006c56:	401a      	ands	r2, r3
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6a1a      	ldr	r2, [r3, #32]
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	f003 031f 	and.w	r3, r3, #31
 8006c66:	6879      	ldr	r1, [r7, #4]
 8006c68:	fa01 f303 	lsl.w	r3, r1, r3
 8006c6c:	431a      	orrs	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	621a      	str	r2, [r3, #32]
}
 8006c72:	bf00      	nop
 8006c74:	371c      	adds	r7, #28
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
	...

08006c80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d101      	bne.n	8006c98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c94:	2302      	movs	r3, #2
 8006c96:	e05a      	b.n	8006d4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a21      	ldr	r2, [pc, #132]	; (8006d5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d022      	beq.n	8006d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ce4:	d01d      	beq.n	8006d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a1d      	ldr	r2, [pc, #116]	; (8006d60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d018      	beq.n	8006d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a1b      	ldr	r2, [pc, #108]	; (8006d64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d013      	beq.n	8006d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a1a      	ldr	r2, [pc, #104]	; (8006d68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d00e      	beq.n	8006d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a18      	ldr	r2, [pc, #96]	; (8006d6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d009      	beq.n	8006d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a17      	ldr	r2, [pc, #92]	; (8006d70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d004      	beq.n	8006d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a15      	ldr	r2, [pc, #84]	; (8006d74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d10c      	bne.n	8006d3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3714      	adds	r7, #20
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	40010000 	.word	0x40010000
 8006d60:	40000400 	.word	0x40000400
 8006d64:	40000800 	.word	0x40000800
 8006d68:	40000c00 	.word	0x40000c00
 8006d6c:	40010400 	.word	0x40010400
 8006d70:	40014000 	.word	0x40014000
 8006d74:	40001800 	.word	0x40001800

08006d78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006d82:	2300      	movs	r3, #0
 8006d84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d101      	bne.n	8006d94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006d90:	2302      	movs	r3, #2
 8006d92:	e03d      	b.n	8006e10 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	691b      	ldr	r3, [r3, #16]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	695b      	ldr	r3, [r3, #20]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	69db      	ldr	r3, [r3, #28]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3714      	adds	r7, #20
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e24:	bf00      	nop
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d101      	bne.n	8006e56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e042      	b.n	8006edc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d106      	bne.n	8006e70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7fc f9e0 	bl	8003230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2224      	movs	r2, #36	; 0x24
 8006e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68da      	ldr	r2, [r3, #12]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fdbd 	bl	8007a08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	691a      	ldr	r2, [r3, #16]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	695a      	ldr	r2, [r3, #20]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006eac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68da      	ldr	r2, [r3, #12]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ebc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2220      	movs	r2, #32
 8006ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2220      	movs	r2, #32
 8006ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b08a      	sub	sp, #40	; 0x28
 8006ee8:	af02      	add	r7, sp, #8
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	603b      	str	r3, [r7, #0]
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	2b20      	cmp	r3, #32
 8006f02:	d175      	bne.n	8006ff0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d002      	beq.n	8006f10 <HAL_UART_Transmit+0x2c>
 8006f0a:	88fb      	ldrh	r3, [r7, #6]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d101      	bne.n	8006f14 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e06e      	b.n	8006ff2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2221      	movs	r2, #33	; 0x21
 8006f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f22:	f7fc fae5 	bl	80034f0 <HAL_GetTick>
 8006f26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	88fa      	ldrh	r2, [r7, #6]
 8006f2c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	88fa      	ldrh	r2, [r7, #6]
 8006f32:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f3c:	d108      	bne.n	8006f50 <HAL_UART_Transmit+0x6c>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d104      	bne.n	8006f50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006f46:	2300      	movs	r3, #0
 8006f48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	61bb      	str	r3, [r7, #24]
 8006f4e:	e003      	b.n	8006f58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f54:	2300      	movs	r3, #0
 8006f56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f58:	e02e      	b.n	8006fb8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	2200      	movs	r2, #0
 8006f62:	2180      	movs	r1, #128	; 0x80
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f000 fb1f 	bl	80075a8 <UART_WaitOnFlagUntilTimeout>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d005      	beq.n	8006f7c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2220      	movs	r2, #32
 8006f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e03a      	b.n	8006ff2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10b      	bne.n	8006f9a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	881b      	ldrh	r3, [r3, #0]
 8006f86:	461a      	mov	r2, r3
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	3302      	adds	r3, #2
 8006f96:	61bb      	str	r3, [r7, #24]
 8006f98:	e007      	b.n	8006faa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	781a      	ldrb	r2, [r3, #0]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1cb      	bne.n	8006f5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	9300      	str	r3, [sp, #0]
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	2140      	movs	r1, #64	; 0x40
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f000 faeb 	bl	80075a8 <UART_WaitOnFlagUntilTimeout>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d005      	beq.n	8006fe4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2220      	movs	r2, #32
 8006fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	e006      	b.n	8006ff2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2220      	movs	r2, #32
 8006fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006fec:	2300      	movs	r3, #0
 8006fee:	e000      	b.n	8006ff2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006ff0:	2302      	movs	r3, #2
  }
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3720      	adds	r7, #32
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b084      	sub	sp, #16
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	60f8      	str	r0, [r7, #12]
 8007002:	60b9      	str	r1, [r7, #8]
 8007004:	4613      	mov	r3, r2
 8007006:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800700e:	b2db      	uxtb	r3, r3
 8007010:	2b20      	cmp	r3, #32
 8007012:	d112      	bne.n	800703a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d002      	beq.n	8007020 <HAL_UART_Receive_IT+0x26>
 800701a:	88fb      	ldrh	r3, [r7, #6]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d101      	bne.n	8007024 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e00b      	b.n	800703c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800702a:	88fb      	ldrh	r3, [r7, #6]
 800702c:	461a      	mov	r2, r3
 800702e:	68b9      	ldr	r1, [r7, #8]
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f000 fb12 	bl	800765a <UART_Start_Receive_IT>
 8007036:	4603      	mov	r3, r0
 8007038:	e000      	b.n	800703c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800703a:	2302      	movs	r3, #2
  }
}
 800703c:	4618      	mov	r0, r3
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b0ba      	sub	sp, #232	; 0xe8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800706a:	2300      	movs	r3, #0
 800706c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007070:	2300      	movs	r3, #0
 8007072:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800707a:	f003 030f 	and.w	r3, r3, #15
 800707e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007082:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10f      	bne.n	80070aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800708a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800708e:	f003 0320 	and.w	r3, r3, #32
 8007092:	2b00      	cmp	r3, #0
 8007094:	d009      	beq.n	80070aa <HAL_UART_IRQHandler+0x66>
 8007096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800709a:	f003 0320 	and.w	r3, r3, #32
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d003      	beq.n	80070aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fbf2 	bl	800788c <UART_Receive_IT>
      return;
 80070a8:	e25b      	b.n	8007562 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80070aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f000 80de 	beq.w	8007270 <HAL_UART_IRQHandler+0x22c>
 80070b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070b8:	f003 0301 	and.w	r3, r3, #1
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d106      	bne.n	80070ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80070c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f000 80d1 	beq.w	8007270 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80070ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00b      	beq.n	80070f2 <HAL_UART_IRQHandler+0xae>
 80070da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d005      	beq.n	80070f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ea:	f043 0201 	orr.w	r2, r3, #1
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070f6:	f003 0304 	and.w	r3, r3, #4
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00b      	beq.n	8007116 <HAL_UART_IRQHandler+0xd2>
 80070fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	2b00      	cmp	r3, #0
 8007108:	d005      	beq.n	8007116 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800710e:	f043 0202 	orr.w	r2, r3, #2
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800711a:	f003 0302 	and.w	r3, r3, #2
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00b      	beq.n	800713a <HAL_UART_IRQHandler+0xf6>
 8007122:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007126:	f003 0301 	and.w	r3, r3, #1
 800712a:	2b00      	cmp	r3, #0
 800712c:	d005      	beq.n	800713a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007132:	f043 0204 	orr.w	r2, r3, #4
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800713a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800713e:	f003 0308 	and.w	r3, r3, #8
 8007142:	2b00      	cmp	r3, #0
 8007144:	d011      	beq.n	800716a <HAL_UART_IRQHandler+0x126>
 8007146:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800714a:	f003 0320 	and.w	r3, r3, #32
 800714e:	2b00      	cmp	r3, #0
 8007150:	d105      	bne.n	800715e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007152:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	2b00      	cmp	r3, #0
 800715c:	d005      	beq.n	800716a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007162:	f043 0208 	orr.w	r2, r3, #8
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800716e:	2b00      	cmp	r3, #0
 8007170:	f000 81f2 	beq.w	8007558 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007178:	f003 0320 	and.w	r3, r3, #32
 800717c:	2b00      	cmp	r3, #0
 800717e:	d008      	beq.n	8007192 <HAL_UART_IRQHandler+0x14e>
 8007180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007184:	f003 0320 	and.w	r3, r3, #32
 8007188:	2b00      	cmp	r3, #0
 800718a:	d002      	beq.n	8007192 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 fb7d 	bl	800788c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	695b      	ldr	r3, [r3, #20]
 8007198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800719c:	2b40      	cmp	r3, #64	; 0x40
 800719e:	bf0c      	ite	eq
 80071a0:	2301      	moveq	r3, #1
 80071a2:	2300      	movne	r3, #0
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ae:	f003 0308 	and.w	r3, r3, #8
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d103      	bne.n	80071be <HAL_UART_IRQHandler+0x17a>
 80071b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d04f      	beq.n	800725e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fa85 	bl	80076ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ce:	2b40      	cmp	r3, #64	; 0x40
 80071d0:	d141      	bne.n	8007256 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	3314      	adds	r3, #20
 80071d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071e0:	e853 3f00 	ldrex	r3, [r3]
 80071e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80071e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	3314      	adds	r3, #20
 80071fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80071fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007202:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007206:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800720a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800720e:	e841 2300 	strex	r3, r2, [r1]
 8007212:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007216:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1d9      	bne.n	80071d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007222:	2b00      	cmp	r3, #0
 8007224:	d013      	beq.n	800724e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800722a:	4a7e      	ldr	r2, [pc, #504]	; (8007424 <HAL_UART_IRQHandler+0x3e0>)
 800722c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007232:	4618      	mov	r0, r3
 8007234:	f7fc fb0d 	bl	8003852 <HAL_DMA_Abort_IT>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d016      	beq.n	800726c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007248:	4610      	mov	r0, r2
 800724a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800724c:	e00e      	b.n	800726c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f994 	bl	800757c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007254:	e00a      	b.n	800726c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f990 	bl	800757c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800725c:	e006      	b.n	800726c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 f98c 	bl	800757c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800726a:	e175      	b.n	8007558 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800726c:	bf00      	nop
    return;
 800726e:	e173      	b.n	8007558 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007274:	2b01      	cmp	r3, #1
 8007276:	f040 814f 	bne.w	8007518 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800727a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800727e:	f003 0310 	and.w	r3, r3, #16
 8007282:	2b00      	cmp	r3, #0
 8007284:	f000 8148 	beq.w	8007518 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800728c:	f003 0310 	and.w	r3, r3, #16
 8007290:	2b00      	cmp	r3, #0
 8007292:	f000 8141 	beq.w	8007518 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007296:	2300      	movs	r3, #0
 8007298:	60bb      	str	r3, [r7, #8]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	60bb      	str	r3, [r7, #8]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	60bb      	str	r3, [r7, #8]
 80072aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	695b      	ldr	r3, [r3, #20]
 80072b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b6:	2b40      	cmp	r3, #64	; 0x40
 80072b8:	f040 80b6 	bne.w	8007428 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80072c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 8145 	beq.w	800755c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80072da:	429a      	cmp	r2, r3
 80072dc:	f080 813e 	bcs.w	800755c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80072e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ec:	69db      	ldr	r3, [r3, #28]
 80072ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072f2:	f000 8088 	beq.w	8007406 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	330c      	adds	r3, #12
 80072fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007300:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007304:	e853 3f00 	ldrex	r3, [r3]
 8007308:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800730c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007314:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	330c      	adds	r3, #12
 800731e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007322:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007326:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800732e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007332:	e841 2300 	strex	r3, r2, [r1]
 8007336:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800733a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1d9      	bne.n	80072f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	3314      	adds	r3, #20
 8007348:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800734c:	e853 3f00 	ldrex	r3, [r3]
 8007350:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007352:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007354:	f023 0301 	bic.w	r3, r3, #1
 8007358:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	3314      	adds	r3, #20
 8007362:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007366:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800736a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800736e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007372:	e841 2300 	strex	r3, r2, [r1]
 8007376:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007378:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1e1      	bne.n	8007342 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	3314      	adds	r3, #20
 8007384:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007386:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007388:	e853 3f00 	ldrex	r3, [r3]
 800738c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800738e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007390:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007394:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	3314      	adds	r3, #20
 800739e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80073a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80073a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80073a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80073aa:	e841 2300 	strex	r3, r2, [r1]
 80073ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80073b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1e3      	bne.n	800737e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2220      	movs	r2, #32
 80073ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	330c      	adds	r3, #12
 80073ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073ce:	e853 3f00 	ldrex	r3, [r3]
 80073d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80073d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073d6:	f023 0310 	bic.w	r3, r3, #16
 80073da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	330c      	adds	r3, #12
 80073e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80073e8:	65ba      	str	r2, [r7, #88]	; 0x58
 80073ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80073ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80073f0:	e841 2300 	strex	r3, r2, [r1]
 80073f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80073f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d1e3      	bne.n	80073c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007400:	4618      	mov	r0, r3
 8007402:	f7fc f9b6 	bl	8003772 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2202      	movs	r2, #2
 800740a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007414:	b29b      	uxth	r3, r3
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	b29b      	uxth	r3, r3
 800741a:	4619      	mov	r1, r3
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 f8b7 	bl	8007590 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007422:	e09b      	b.n	800755c <HAL_UART_IRQHandler+0x518>
 8007424:	08007795 	.word	0x08007795
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007430:	b29b      	uxth	r3, r3
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800743c:	b29b      	uxth	r3, r3
 800743e:	2b00      	cmp	r3, #0
 8007440:	f000 808e 	beq.w	8007560 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007444:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 8089 	beq.w	8007560 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	330c      	adds	r3, #12
 8007454:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007458:	e853 3f00 	ldrex	r3, [r3]
 800745c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800745e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007460:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007464:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	330c      	adds	r3, #12
 800746e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007472:	647a      	str	r2, [r7, #68]	; 0x44
 8007474:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007476:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007478:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800747a:	e841 2300 	strex	r3, r2, [r1]
 800747e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1e3      	bne.n	800744e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	3314      	adds	r3, #20
 800748c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007490:	e853 3f00 	ldrex	r3, [r3]
 8007494:	623b      	str	r3, [r7, #32]
   return(result);
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	f023 0301 	bic.w	r3, r3, #1
 800749c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	3314      	adds	r3, #20
 80074a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80074aa:	633a      	str	r2, [r7, #48]	; 0x30
 80074ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074b2:	e841 2300 	strex	r3, r2, [r1]
 80074b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1e3      	bne.n	8007486 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2220      	movs	r2, #32
 80074c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	330c      	adds	r3, #12
 80074d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	e853 3f00 	ldrex	r3, [r3]
 80074da:	60fb      	str	r3, [r7, #12]
   return(result);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f023 0310 	bic.w	r3, r3, #16
 80074e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	330c      	adds	r3, #12
 80074ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80074f0:	61fa      	str	r2, [r7, #28]
 80074f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f4:	69b9      	ldr	r1, [r7, #24]
 80074f6:	69fa      	ldr	r2, [r7, #28]
 80074f8:	e841 2300 	strex	r3, r2, [r1]
 80074fc:	617b      	str	r3, [r7, #20]
   return(result);
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1e3      	bne.n	80074cc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2202      	movs	r2, #2
 8007508:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800750a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800750e:	4619      	mov	r1, r3
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 f83d 	bl	8007590 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007516:	e023      	b.n	8007560 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800751c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007520:	2b00      	cmp	r3, #0
 8007522:	d009      	beq.n	8007538 <HAL_UART_IRQHandler+0x4f4>
 8007524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800752c:	2b00      	cmp	r3, #0
 800752e:	d003      	beq.n	8007538 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 f943 	bl	80077bc <UART_Transmit_IT>
    return;
 8007536:	e014      	b.n	8007562 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800753c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007540:	2b00      	cmp	r3, #0
 8007542:	d00e      	beq.n	8007562 <HAL_UART_IRQHandler+0x51e>
 8007544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800754c:	2b00      	cmp	r3, #0
 800754e:	d008      	beq.n	8007562 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 f983 	bl	800785c <UART_EndTransmit_IT>
    return;
 8007556:	e004      	b.n	8007562 <HAL_UART_IRQHandler+0x51e>
    return;
 8007558:	bf00      	nop
 800755a:	e002      	b.n	8007562 <HAL_UART_IRQHandler+0x51e>
      return;
 800755c:	bf00      	nop
 800755e:	e000      	b.n	8007562 <HAL_UART_IRQHandler+0x51e>
      return;
 8007560:	bf00      	nop
  }
}
 8007562:	37e8      	adds	r7, #232	; 0xe8
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007570:	bf00      	nop
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	460b      	mov	r3, r1
 800759a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b086      	sub	sp, #24
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	603b      	str	r3, [r7, #0]
 80075b4:	4613      	mov	r3, r2
 80075b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075b8:	e03b      	b.n	8007632 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075ba:	6a3b      	ldr	r3, [r7, #32]
 80075bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c0:	d037      	beq.n	8007632 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075c2:	f7fb ff95 	bl	80034f0 <HAL_GetTick>
 80075c6:	4602      	mov	r2, r0
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	1ad3      	subs	r3, r2, r3
 80075cc:	6a3a      	ldr	r2, [r7, #32]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d302      	bcc.n	80075d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80075d2:	6a3b      	ldr	r3, [r7, #32]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d101      	bne.n	80075dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80075d8:	2303      	movs	r3, #3
 80075da:	e03a      	b.n	8007652 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	f003 0304 	and.w	r3, r3, #4
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d023      	beq.n	8007632 <UART_WaitOnFlagUntilTimeout+0x8a>
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	2b80      	cmp	r3, #128	; 0x80
 80075ee:	d020      	beq.n	8007632 <UART_WaitOnFlagUntilTimeout+0x8a>
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	2b40      	cmp	r3, #64	; 0x40
 80075f4:	d01d      	beq.n	8007632 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0308 	and.w	r3, r3, #8
 8007600:	2b08      	cmp	r3, #8
 8007602:	d116      	bne.n	8007632 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007604:	2300      	movs	r3, #0
 8007606:	617b      	str	r3, [r7, #20]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	617b      	str	r3, [r7, #20]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	617b      	str	r3, [r7, #20]
 8007618:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f000 f857 	bl	80076ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2208      	movs	r2, #8
 8007624:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e00f      	b.n	8007652 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	4013      	ands	r3, r2
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	429a      	cmp	r2, r3
 8007640:	bf0c      	ite	eq
 8007642:	2301      	moveq	r3, #1
 8007644:	2300      	movne	r3, #0
 8007646:	b2db      	uxtb	r3, r3
 8007648:	461a      	mov	r2, r3
 800764a:	79fb      	ldrb	r3, [r7, #7]
 800764c:	429a      	cmp	r2, r3
 800764e:	d0b4      	beq.n	80075ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3718      	adds	r7, #24
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800765a:	b480      	push	{r7}
 800765c:	b085      	sub	sp, #20
 800765e:	af00      	add	r7, sp, #0
 8007660:	60f8      	str	r0, [r7, #12]
 8007662:	60b9      	str	r1, [r7, #8]
 8007664:	4613      	mov	r3, r2
 8007666:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	88fa      	ldrh	r2, [r7, #6]
 8007672:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	88fa      	ldrh	r2, [r7, #6]
 8007678:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2222      	movs	r2, #34	; 0x22
 8007684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d007      	beq.n	80076a0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	68da      	ldr	r2, [r3, #12]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800769e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	695a      	ldr	r2, [r3, #20]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f042 0201 	orr.w	r2, r2, #1
 80076ae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68da      	ldr	r2, [r3, #12]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f042 0220 	orr.w	r2, r2, #32
 80076be:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3714      	adds	r7, #20
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr

080076ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076ce:	b480      	push	{r7}
 80076d0:	b095      	sub	sp, #84	; 0x54
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	330c      	adds	r3, #12
 80076dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076e0:	e853 3f00 	ldrex	r3, [r3]
 80076e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80076e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	330c      	adds	r3, #12
 80076f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80076f6:	643a      	str	r2, [r7, #64]	; 0x40
 80076f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80076fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076fe:	e841 2300 	strex	r3, r2, [r1]
 8007702:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1e5      	bne.n	80076d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	3314      	adds	r3, #20
 8007710:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007712:	6a3b      	ldr	r3, [r7, #32]
 8007714:	e853 3f00 	ldrex	r3, [r3]
 8007718:	61fb      	str	r3, [r7, #28]
   return(result);
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	f023 0301 	bic.w	r3, r3, #1
 8007720:	64bb      	str	r3, [r7, #72]	; 0x48
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	3314      	adds	r3, #20
 8007728:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800772a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800772c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007730:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007732:	e841 2300 	strex	r3, r2, [r1]
 8007736:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773a:	2b00      	cmp	r3, #0
 800773c:	d1e5      	bne.n	800770a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007742:	2b01      	cmp	r3, #1
 8007744:	d119      	bne.n	800777a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	330c      	adds	r3, #12
 800774c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	e853 3f00 	ldrex	r3, [r3]
 8007754:	60bb      	str	r3, [r7, #8]
   return(result);
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	f023 0310 	bic.w	r3, r3, #16
 800775c:	647b      	str	r3, [r7, #68]	; 0x44
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	330c      	adds	r3, #12
 8007764:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007766:	61ba      	str	r2, [r7, #24]
 8007768:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800776a:	6979      	ldr	r1, [r7, #20]
 800776c:	69ba      	ldr	r2, [r7, #24]
 800776e:	e841 2300 	strex	r3, r2, [r1]
 8007772:	613b      	str	r3, [r7, #16]
   return(result);
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d1e5      	bne.n	8007746 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2220      	movs	r2, #32
 800777e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007788:	bf00      	nop
 800778a:	3754      	adds	r7, #84	; 0x54
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f7ff fee4 	bl	800757c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077b4:	bf00      	nop
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	2b21      	cmp	r3, #33	; 0x21
 80077ce:	d13e      	bne.n	800784e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077d8:	d114      	bne.n	8007804 <UART_Transmit_IT+0x48>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d110      	bne.n	8007804 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a1b      	ldr	r3, [r3, #32]
 80077e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	881b      	ldrh	r3, [r3, #0]
 80077ec:	461a      	mov	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077f6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6a1b      	ldr	r3, [r3, #32]
 80077fc:	1c9a      	adds	r2, r3, #2
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	621a      	str	r2, [r3, #32]
 8007802:	e008      	b.n	8007816 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a1b      	ldr	r3, [r3, #32]
 8007808:	1c59      	adds	r1, r3, #1
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	6211      	str	r1, [r2, #32]
 800780e:	781a      	ldrb	r2, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800781a:	b29b      	uxth	r3, r3
 800781c:	3b01      	subs	r3, #1
 800781e:	b29b      	uxth	r3, r3
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	4619      	mov	r1, r3
 8007824:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007826:	2b00      	cmp	r3, #0
 8007828:	d10f      	bne.n	800784a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68da      	ldr	r2, [r3, #12]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007838:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	68da      	ldr	r2, [r3, #12]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007848:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800784a:	2300      	movs	r3, #0
 800784c:	e000      	b.n	8007850 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800784e:	2302      	movs	r3, #2
  }
}
 8007850:	4618      	mov	r0, r3
 8007852:	3714      	adds	r7, #20
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68da      	ldr	r2, [r3, #12]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007872:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2220      	movs	r2, #32
 8007878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f7ff fe73 	bl	8007568 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3708      	adds	r7, #8
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b08c      	sub	sp, #48	; 0x30
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800789a:	b2db      	uxtb	r3, r3
 800789c:	2b22      	cmp	r3, #34	; 0x22
 800789e:	f040 80ae 	bne.w	80079fe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078aa:	d117      	bne.n	80078dc <UART_Receive_IT+0x50>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d113      	bne.n	80078dc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80078b4:	2300      	movs	r3, #0
 80078b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078bc:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d4:	1c9a      	adds	r2, r3, #2
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	629a      	str	r2, [r3, #40]	; 0x28
 80078da:	e026      	b.n	800792a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80078e2:	2300      	movs	r3, #0
 80078e4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078ee:	d007      	beq.n	8007900 <UART_Receive_IT+0x74>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10a      	bne.n	800790e <UART_Receive_IT+0x82>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d106      	bne.n	800790e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	b2da      	uxtb	r2, r3
 8007908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790a:	701a      	strb	r2, [r3, #0]
 800790c:	e008      	b.n	8007920 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	b2db      	uxtb	r3, r3
 8007916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800791a:	b2da      	uxtb	r2, r3
 800791c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007924:	1c5a      	adds	r2, r3, #1
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800792e:	b29b      	uxth	r3, r3
 8007930:	3b01      	subs	r3, #1
 8007932:	b29b      	uxth	r3, r3
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	4619      	mov	r1, r3
 8007938:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800793a:	2b00      	cmp	r3, #0
 800793c:	d15d      	bne.n	80079fa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68da      	ldr	r2, [r3, #12]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f022 0220 	bic.w	r2, r2, #32
 800794c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	68da      	ldr	r2, [r3, #12]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800795c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	695a      	ldr	r2, [r3, #20]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f022 0201 	bic.w	r2, r2, #1
 800796c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2220      	movs	r2, #32
 8007972:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007980:	2b01      	cmp	r3, #1
 8007982:	d135      	bne.n	80079f0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	330c      	adds	r3, #12
 8007990:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	e853 3f00 	ldrex	r3, [r3]
 8007998:	613b      	str	r3, [r7, #16]
   return(result);
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	f023 0310 	bic.w	r3, r3, #16
 80079a0:	627b      	str	r3, [r7, #36]	; 0x24
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	330c      	adds	r3, #12
 80079a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079aa:	623a      	str	r2, [r7, #32]
 80079ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ae:	69f9      	ldr	r1, [r7, #28]
 80079b0:	6a3a      	ldr	r2, [r7, #32]
 80079b2:	e841 2300 	strex	r3, r2, [r1]
 80079b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d1e5      	bne.n	800798a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 0310 	and.w	r3, r3, #16
 80079c8:	2b10      	cmp	r3, #16
 80079ca:	d10a      	bne.n	80079e2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80079cc:	2300      	movs	r3, #0
 80079ce:	60fb      	str	r3, [r7, #12]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	60fb      	str	r3, [r7, #12]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	60fb      	str	r3, [r7, #12]
 80079e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80079e6:	4619      	mov	r1, r3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7ff fdd1 	bl	8007590 <HAL_UARTEx_RxEventCallback>
 80079ee:	e002      	b.n	80079f6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f7f9 fe9b 	bl	800172c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80079f6:	2300      	movs	r3, #0
 80079f8:	e002      	b.n	8007a00 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80079fa:	2300      	movs	r3, #0
 80079fc:	e000      	b.n	8007a00 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80079fe:	2302      	movs	r3, #2
  }
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3730      	adds	r7, #48	; 0x30
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a0c:	b0c0      	sub	sp, #256	; 0x100
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a24:	68d9      	ldr	r1, [r3, #12]
 8007a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	ea40 0301 	orr.w	r3, r0, r1
 8007a30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a36:	689a      	ldr	r2, [r3, #8]
 8007a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	431a      	orrs	r2, r3
 8007a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a44:	695b      	ldr	r3, [r3, #20]
 8007a46:	431a      	orrs	r2, r3
 8007a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a4c:	69db      	ldr	r3, [r3, #28]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007a60:	f021 010c 	bic.w	r1, r1, #12
 8007a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a6e:	430b      	orrs	r3, r1
 8007a70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	695b      	ldr	r3, [r3, #20]
 8007a7a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a82:	6999      	ldr	r1, [r3, #24]
 8007a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	ea40 0301 	orr.w	r3, r0, r1
 8007a8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	4b8f      	ldr	r3, [pc, #572]	; (8007cd4 <UART_SetConfig+0x2cc>)
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d005      	beq.n	8007aa8 <UART_SetConfig+0xa0>
 8007a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	4b8d      	ldr	r3, [pc, #564]	; (8007cd8 <UART_SetConfig+0x2d0>)
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d104      	bne.n	8007ab2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007aa8:	f7fd fd2c 	bl	8005504 <HAL_RCC_GetPCLK2Freq>
 8007aac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007ab0:	e003      	b.n	8007aba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ab2:	f7fd fd13 	bl	80054dc <HAL_RCC_GetPCLK1Freq>
 8007ab6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007abe:	69db      	ldr	r3, [r3, #28]
 8007ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ac4:	f040 810c 	bne.w	8007ce0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ac8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007acc:	2200      	movs	r2, #0
 8007ace:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007ad2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007ad6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007ada:	4622      	mov	r2, r4
 8007adc:	462b      	mov	r3, r5
 8007ade:	1891      	adds	r1, r2, r2
 8007ae0:	65b9      	str	r1, [r7, #88]	; 0x58
 8007ae2:	415b      	adcs	r3, r3
 8007ae4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ae6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007aea:	4621      	mov	r1, r4
 8007aec:	eb12 0801 	adds.w	r8, r2, r1
 8007af0:	4629      	mov	r1, r5
 8007af2:	eb43 0901 	adc.w	r9, r3, r1
 8007af6:	f04f 0200 	mov.w	r2, #0
 8007afa:	f04f 0300 	mov.w	r3, #0
 8007afe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b0a:	4690      	mov	r8, r2
 8007b0c:	4699      	mov	r9, r3
 8007b0e:	4623      	mov	r3, r4
 8007b10:	eb18 0303 	adds.w	r3, r8, r3
 8007b14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b18:	462b      	mov	r3, r5
 8007b1a:	eb49 0303 	adc.w	r3, r9, r3
 8007b1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b2e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007b32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007b36:	460b      	mov	r3, r1
 8007b38:	18db      	adds	r3, r3, r3
 8007b3a:	653b      	str	r3, [r7, #80]	; 0x50
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	eb42 0303 	adc.w	r3, r2, r3
 8007b42:	657b      	str	r3, [r7, #84]	; 0x54
 8007b44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007b48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007b4c:	f7f9 f82e 	bl	8000bac <__aeabi_uldivmod>
 8007b50:	4602      	mov	r2, r0
 8007b52:	460b      	mov	r3, r1
 8007b54:	4b61      	ldr	r3, [pc, #388]	; (8007cdc <UART_SetConfig+0x2d4>)
 8007b56:	fba3 2302 	umull	r2, r3, r3, r2
 8007b5a:	095b      	lsrs	r3, r3, #5
 8007b5c:	011c      	lsls	r4, r3, #4
 8007b5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b62:	2200      	movs	r2, #0
 8007b64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b68:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007b6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007b70:	4642      	mov	r2, r8
 8007b72:	464b      	mov	r3, r9
 8007b74:	1891      	adds	r1, r2, r2
 8007b76:	64b9      	str	r1, [r7, #72]	; 0x48
 8007b78:	415b      	adcs	r3, r3
 8007b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007b80:	4641      	mov	r1, r8
 8007b82:	eb12 0a01 	adds.w	sl, r2, r1
 8007b86:	4649      	mov	r1, r9
 8007b88:	eb43 0b01 	adc.w	fp, r3, r1
 8007b8c:	f04f 0200 	mov.w	r2, #0
 8007b90:	f04f 0300 	mov.w	r3, #0
 8007b94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007b98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007b9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ba0:	4692      	mov	sl, r2
 8007ba2:	469b      	mov	fp, r3
 8007ba4:	4643      	mov	r3, r8
 8007ba6:	eb1a 0303 	adds.w	r3, sl, r3
 8007baa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007bae:	464b      	mov	r3, r9
 8007bb0:	eb4b 0303 	adc.w	r3, fp, r3
 8007bb4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007bc4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007bc8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007bcc:	460b      	mov	r3, r1
 8007bce:	18db      	adds	r3, r3, r3
 8007bd0:	643b      	str	r3, [r7, #64]	; 0x40
 8007bd2:	4613      	mov	r3, r2
 8007bd4:	eb42 0303 	adc.w	r3, r2, r3
 8007bd8:	647b      	str	r3, [r7, #68]	; 0x44
 8007bda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007bde:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007be2:	f7f8 ffe3 	bl	8000bac <__aeabi_uldivmod>
 8007be6:	4602      	mov	r2, r0
 8007be8:	460b      	mov	r3, r1
 8007bea:	4611      	mov	r1, r2
 8007bec:	4b3b      	ldr	r3, [pc, #236]	; (8007cdc <UART_SetConfig+0x2d4>)
 8007bee:	fba3 2301 	umull	r2, r3, r3, r1
 8007bf2:	095b      	lsrs	r3, r3, #5
 8007bf4:	2264      	movs	r2, #100	; 0x64
 8007bf6:	fb02 f303 	mul.w	r3, r2, r3
 8007bfa:	1acb      	subs	r3, r1, r3
 8007bfc:	00db      	lsls	r3, r3, #3
 8007bfe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007c02:	4b36      	ldr	r3, [pc, #216]	; (8007cdc <UART_SetConfig+0x2d4>)
 8007c04:	fba3 2302 	umull	r2, r3, r3, r2
 8007c08:	095b      	lsrs	r3, r3, #5
 8007c0a:	005b      	lsls	r3, r3, #1
 8007c0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c10:	441c      	add	r4, r3
 8007c12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c16:	2200      	movs	r2, #0
 8007c18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c1c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007c20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007c24:	4642      	mov	r2, r8
 8007c26:	464b      	mov	r3, r9
 8007c28:	1891      	adds	r1, r2, r2
 8007c2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007c2c:	415b      	adcs	r3, r3
 8007c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007c34:	4641      	mov	r1, r8
 8007c36:	1851      	adds	r1, r2, r1
 8007c38:	6339      	str	r1, [r7, #48]	; 0x30
 8007c3a:	4649      	mov	r1, r9
 8007c3c:	414b      	adcs	r3, r1
 8007c3e:	637b      	str	r3, [r7, #52]	; 0x34
 8007c40:	f04f 0200 	mov.w	r2, #0
 8007c44:	f04f 0300 	mov.w	r3, #0
 8007c48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007c4c:	4659      	mov	r1, fp
 8007c4e:	00cb      	lsls	r3, r1, #3
 8007c50:	4651      	mov	r1, sl
 8007c52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c56:	4651      	mov	r1, sl
 8007c58:	00ca      	lsls	r2, r1, #3
 8007c5a:	4610      	mov	r0, r2
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	4603      	mov	r3, r0
 8007c60:	4642      	mov	r2, r8
 8007c62:	189b      	adds	r3, r3, r2
 8007c64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c68:	464b      	mov	r3, r9
 8007c6a:	460a      	mov	r2, r1
 8007c6c:	eb42 0303 	adc.w	r3, r2, r3
 8007c70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007c80:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007c84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007c88:	460b      	mov	r3, r1
 8007c8a:	18db      	adds	r3, r3, r3
 8007c8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c8e:	4613      	mov	r3, r2
 8007c90:	eb42 0303 	adc.w	r3, r2, r3
 8007c94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007c9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007c9e:	f7f8 ff85 	bl	8000bac <__aeabi_uldivmod>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	4b0d      	ldr	r3, [pc, #52]	; (8007cdc <UART_SetConfig+0x2d4>)
 8007ca8:	fba3 1302 	umull	r1, r3, r3, r2
 8007cac:	095b      	lsrs	r3, r3, #5
 8007cae:	2164      	movs	r1, #100	; 0x64
 8007cb0:	fb01 f303 	mul.w	r3, r1, r3
 8007cb4:	1ad3      	subs	r3, r2, r3
 8007cb6:	00db      	lsls	r3, r3, #3
 8007cb8:	3332      	adds	r3, #50	; 0x32
 8007cba:	4a08      	ldr	r2, [pc, #32]	; (8007cdc <UART_SetConfig+0x2d4>)
 8007cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8007cc0:	095b      	lsrs	r3, r3, #5
 8007cc2:	f003 0207 	and.w	r2, r3, #7
 8007cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4422      	add	r2, r4
 8007cce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007cd0:	e106      	b.n	8007ee0 <UART_SetConfig+0x4d8>
 8007cd2:	bf00      	nop
 8007cd4:	40011000 	.word	0x40011000
 8007cd8:	40011400 	.word	0x40011400
 8007cdc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ce0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007cea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007cee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007cf2:	4642      	mov	r2, r8
 8007cf4:	464b      	mov	r3, r9
 8007cf6:	1891      	adds	r1, r2, r2
 8007cf8:	6239      	str	r1, [r7, #32]
 8007cfa:	415b      	adcs	r3, r3
 8007cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8007cfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d02:	4641      	mov	r1, r8
 8007d04:	1854      	adds	r4, r2, r1
 8007d06:	4649      	mov	r1, r9
 8007d08:	eb43 0501 	adc.w	r5, r3, r1
 8007d0c:	f04f 0200 	mov.w	r2, #0
 8007d10:	f04f 0300 	mov.w	r3, #0
 8007d14:	00eb      	lsls	r3, r5, #3
 8007d16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d1a:	00e2      	lsls	r2, r4, #3
 8007d1c:	4614      	mov	r4, r2
 8007d1e:	461d      	mov	r5, r3
 8007d20:	4643      	mov	r3, r8
 8007d22:	18e3      	adds	r3, r4, r3
 8007d24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d28:	464b      	mov	r3, r9
 8007d2a:	eb45 0303 	adc.w	r3, r5, r3
 8007d2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007d42:	f04f 0200 	mov.w	r2, #0
 8007d46:	f04f 0300 	mov.w	r3, #0
 8007d4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007d4e:	4629      	mov	r1, r5
 8007d50:	008b      	lsls	r3, r1, #2
 8007d52:	4621      	mov	r1, r4
 8007d54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d58:	4621      	mov	r1, r4
 8007d5a:	008a      	lsls	r2, r1, #2
 8007d5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007d60:	f7f8 ff24 	bl	8000bac <__aeabi_uldivmod>
 8007d64:	4602      	mov	r2, r0
 8007d66:	460b      	mov	r3, r1
 8007d68:	4b60      	ldr	r3, [pc, #384]	; (8007eec <UART_SetConfig+0x4e4>)
 8007d6a:	fba3 2302 	umull	r2, r3, r3, r2
 8007d6e:	095b      	lsrs	r3, r3, #5
 8007d70:	011c      	lsls	r4, r3, #4
 8007d72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d76:	2200      	movs	r2, #0
 8007d78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007d7c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007d80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007d84:	4642      	mov	r2, r8
 8007d86:	464b      	mov	r3, r9
 8007d88:	1891      	adds	r1, r2, r2
 8007d8a:	61b9      	str	r1, [r7, #24]
 8007d8c:	415b      	adcs	r3, r3
 8007d8e:	61fb      	str	r3, [r7, #28]
 8007d90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d94:	4641      	mov	r1, r8
 8007d96:	1851      	adds	r1, r2, r1
 8007d98:	6139      	str	r1, [r7, #16]
 8007d9a:	4649      	mov	r1, r9
 8007d9c:	414b      	adcs	r3, r1
 8007d9e:	617b      	str	r3, [r7, #20]
 8007da0:	f04f 0200 	mov.w	r2, #0
 8007da4:	f04f 0300 	mov.w	r3, #0
 8007da8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007dac:	4659      	mov	r1, fp
 8007dae:	00cb      	lsls	r3, r1, #3
 8007db0:	4651      	mov	r1, sl
 8007db2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007db6:	4651      	mov	r1, sl
 8007db8:	00ca      	lsls	r2, r1, #3
 8007dba:	4610      	mov	r0, r2
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	4642      	mov	r2, r8
 8007dc2:	189b      	adds	r3, r3, r2
 8007dc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007dc8:	464b      	mov	r3, r9
 8007dca:	460a      	mov	r2, r1
 8007dcc:	eb42 0303 	adc.w	r3, r2, r3
 8007dd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	67bb      	str	r3, [r7, #120]	; 0x78
 8007dde:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007de0:	f04f 0200 	mov.w	r2, #0
 8007de4:	f04f 0300 	mov.w	r3, #0
 8007de8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007dec:	4649      	mov	r1, r9
 8007dee:	008b      	lsls	r3, r1, #2
 8007df0:	4641      	mov	r1, r8
 8007df2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007df6:	4641      	mov	r1, r8
 8007df8:	008a      	lsls	r2, r1, #2
 8007dfa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007dfe:	f7f8 fed5 	bl	8000bac <__aeabi_uldivmod>
 8007e02:	4602      	mov	r2, r0
 8007e04:	460b      	mov	r3, r1
 8007e06:	4611      	mov	r1, r2
 8007e08:	4b38      	ldr	r3, [pc, #224]	; (8007eec <UART_SetConfig+0x4e4>)
 8007e0a:	fba3 2301 	umull	r2, r3, r3, r1
 8007e0e:	095b      	lsrs	r3, r3, #5
 8007e10:	2264      	movs	r2, #100	; 0x64
 8007e12:	fb02 f303 	mul.w	r3, r2, r3
 8007e16:	1acb      	subs	r3, r1, r3
 8007e18:	011b      	lsls	r3, r3, #4
 8007e1a:	3332      	adds	r3, #50	; 0x32
 8007e1c:	4a33      	ldr	r2, [pc, #204]	; (8007eec <UART_SetConfig+0x4e4>)
 8007e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e22:	095b      	lsrs	r3, r3, #5
 8007e24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e28:	441c      	add	r4, r3
 8007e2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e2e:	2200      	movs	r2, #0
 8007e30:	673b      	str	r3, [r7, #112]	; 0x70
 8007e32:	677a      	str	r2, [r7, #116]	; 0x74
 8007e34:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007e38:	4642      	mov	r2, r8
 8007e3a:	464b      	mov	r3, r9
 8007e3c:	1891      	adds	r1, r2, r2
 8007e3e:	60b9      	str	r1, [r7, #8]
 8007e40:	415b      	adcs	r3, r3
 8007e42:	60fb      	str	r3, [r7, #12]
 8007e44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e48:	4641      	mov	r1, r8
 8007e4a:	1851      	adds	r1, r2, r1
 8007e4c:	6039      	str	r1, [r7, #0]
 8007e4e:	4649      	mov	r1, r9
 8007e50:	414b      	adcs	r3, r1
 8007e52:	607b      	str	r3, [r7, #4]
 8007e54:	f04f 0200 	mov.w	r2, #0
 8007e58:	f04f 0300 	mov.w	r3, #0
 8007e5c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007e60:	4659      	mov	r1, fp
 8007e62:	00cb      	lsls	r3, r1, #3
 8007e64:	4651      	mov	r1, sl
 8007e66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e6a:	4651      	mov	r1, sl
 8007e6c:	00ca      	lsls	r2, r1, #3
 8007e6e:	4610      	mov	r0, r2
 8007e70:	4619      	mov	r1, r3
 8007e72:	4603      	mov	r3, r0
 8007e74:	4642      	mov	r2, r8
 8007e76:	189b      	adds	r3, r3, r2
 8007e78:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e7a:	464b      	mov	r3, r9
 8007e7c:	460a      	mov	r2, r1
 8007e7e:	eb42 0303 	adc.w	r3, r2, r3
 8007e82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	663b      	str	r3, [r7, #96]	; 0x60
 8007e8e:	667a      	str	r2, [r7, #100]	; 0x64
 8007e90:	f04f 0200 	mov.w	r2, #0
 8007e94:	f04f 0300 	mov.w	r3, #0
 8007e98:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007e9c:	4649      	mov	r1, r9
 8007e9e:	008b      	lsls	r3, r1, #2
 8007ea0:	4641      	mov	r1, r8
 8007ea2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ea6:	4641      	mov	r1, r8
 8007ea8:	008a      	lsls	r2, r1, #2
 8007eaa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007eae:	f7f8 fe7d 	bl	8000bac <__aeabi_uldivmod>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	4b0d      	ldr	r3, [pc, #52]	; (8007eec <UART_SetConfig+0x4e4>)
 8007eb8:	fba3 1302 	umull	r1, r3, r3, r2
 8007ebc:	095b      	lsrs	r3, r3, #5
 8007ebe:	2164      	movs	r1, #100	; 0x64
 8007ec0:	fb01 f303 	mul.w	r3, r1, r3
 8007ec4:	1ad3      	subs	r3, r2, r3
 8007ec6:	011b      	lsls	r3, r3, #4
 8007ec8:	3332      	adds	r3, #50	; 0x32
 8007eca:	4a08      	ldr	r2, [pc, #32]	; (8007eec <UART_SetConfig+0x4e4>)
 8007ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ed0:	095b      	lsrs	r3, r3, #5
 8007ed2:	f003 020f 	and.w	r2, r3, #15
 8007ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4422      	add	r2, r4
 8007ede:	609a      	str	r2, [r3, #8]
}
 8007ee0:	bf00      	nop
 8007ee2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007eec:	51eb851f 	.word	0x51eb851f

08007ef0 <__NVIC_SetPriority>:
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	6039      	str	r1, [r7, #0]
 8007efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	db0a      	blt.n	8007f1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	b2da      	uxtb	r2, r3
 8007f08:	490c      	ldr	r1, [pc, #48]	; (8007f3c <__NVIC_SetPriority+0x4c>)
 8007f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f0e:	0112      	lsls	r2, r2, #4
 8007f10:	b2d2      	uxtb	r2, r2
 8007f12:	440b      	add	r3, r1
 8007f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007f18:	e00a      	b.n	8007f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	b2da      	uxtb	r2, r3
 8007f1e:	4908      	ldr	r1, [pc, #32]	; (8007f40 <__NVIC_SetPriority+0x50>)
 8007f20:	79fb      	ldrb	r3, [r7, #7]
 8007f22:	f003 030f 	and.w	r3, r3, #15
 8007f26:	3b04      	subs	r3, #4
 8007f28:	0112      	lsls	r2, r2, #4
 8007f2a:	b2d2      	uxtb	r2, r2
 8007f2c:	440b      	add	r3, r1
 8007f2e:	761a      	strb	r2, [r3, #24]
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr
 8007f3c:	e000e100 	.word	0xe000e100
 8007f40:	e000ed00 	.word	0xe000ed00

08007f44 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007f44:	b580      	push	{r7, lr}
 8007f46:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007f48:	2100      	movs	r1, #0
 8007f4a:	f06f 0004 	mvn.w	r0, #4
 8007f4e:	f7ff ffcf 	bl	8007ef0 <__NVIC_SetPriority>
#endif
}
 8007f52:	bf00      	nop
 8007f54:	bd80      	pop	{r7, pc}
	...

08007f58 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f5e:	f3ef 8305 	mrs	r3, IPSR
 8007f62:	603b      	str	r3, [r7, #0]
  return(result);
 8007f64:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d003      	beq.n	8007f72 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007f6a:	f06f 0305 	mvn.w	r3, #5
 8007f6e:	607b      	str	r3, [r7, #4]
 8007f70:	e00c      	b.n	8007f8c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007f72:	4b0a      	ldr	r3, [pc, #40]	; (8007f9c <osKernelInitialize+0x44>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d105      	bne.n	8007f86 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007f7a:	4b08      	ldr	r3, [pc, #32]	; (8007f9c <osKernelInitialize+0x44>)
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007f80:	2300      	movs	r3, #0
 8007f82:	607b      	str	r3, [r7, #4]
 8007f84:	e002      	b.n	8007f8c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007f86:	f04f 33ff 	mov.w	r3, #4294967295
 8007f8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007f8c:	687b      	ldr	r3, [r7, #4]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	370c      	adds	r7, #12
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	200002fc 	.word	0x200002fc

08007fa0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fa6:	f3ef 8305 	mrs	r3, IPSR
 8007faa:	603b      	str	r3, [r7, #0]
  return(result);
 8007fac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d003      	beq.n	8007fba <osKernelStart+0x1a>
    stat = osErrorISR;
 8007fb2:	f06f 0305 	mvn.w	r3, #5
 8007fb6:	607b      	str	r3, [r7, #4]
 8007fb8:	e010      	b.n	8007fdc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007fba:	4b0b      	ldr	r3, [pc, #44]	; (8007fe8 <osKernelStart+0x48>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d109      	bne.n	8007fd6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007fc2:	f7ff ffbf 	bl	8007f44 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007fc6:	4b08      	ldr	r3, [pc, #32]	; (8007fe8 <osKernelStart+0x48>)
 8007fc8:	2202      	movs	r2, #2
 8007fca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007fcc:	f001 f910 	bl	80091f0 <vTaskStartScheduler>
      stat = osOK;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	607b      	str	r3, [r7, #4]
 8007fd4:	e002      	b.n	8007fdc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8007fda:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007fdc:	687b      	ldr	r3, [r7, #4]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3708      	adds	r7, #8
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	200002fc 	.word	0x200002fc

08007fec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b08e      	sub	sp, #56	; 0x38
 8007ff0:	af04      	add	r7, sp, #16
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ffc:	f3ef 8305 	mrs	r3, IPSR
 8008000:	617b      	str	r3, [r7, #20]
  return(result);
 8008002:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008004:	2b00      	cmp	r3, #0
 8008006:	d17e      	bne.n	8008106 <osThreadNew+0x11a>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d07b      	beq.n	8008106 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800800e:	2380      	movs	r3, #128	; 0x80
 8008010:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008012:	2318      	movs	r3, #24
 8008014:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008016:	2300      	movs	r3, #0
 8008018:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800801a:	f04f 33ff 	mov.w	r3, #4294967295
 800801e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d045      	beq.n	80080b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d002      	beq.n	8008034 <osThreadNew+0x48>
        name = attr->name;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	699b      	ldr	r3, [r3, #24]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d002      	beq.n	8008042 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	699b      	ldr	r3, [r3, #24]
 8008040:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d008      	beq.n	800805a <osThreadNew+0x6e>
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	2b38      	cmp	r3, #56	; 0x38
 800804c:	d805      	bhi.n	800805a <osThreadNew+0x6e>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	f003 0301 	and.w	r3, r3, #1
 8008056:	2b00      	cmp	r3, #0
 8008058:	d001      	beq.n	800805e <osThreadNew+0x72>
        return (NULL);
 800805a:	2300      	movs	r3, #0
 800805c:	e054      	b.n	8008108 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	695b      	ldr	r3, [r3, #20]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d003      	beq.n	800806e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	089b      	lsrs	r3, r3, #2
 800806c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d00e      	beq.n	8008094 <osThreadNew+0xa8>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	2b5b      	cmp	r3, #91	; 0x5b
 800807c:	d90a      	bls.n	8008094 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008082:	2b00      	cmp	r3, #0
 8008084:	d006      	beq.n	8008094 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	695b      	ldr	r3, [r3, #20]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d002      	beq.n	8008094 <osThreadNew+0xa8>
        mem = 1;
 800808e:	2301      	movs	r3, #1
 8008090:	61bb      	str	r3, [r7, #24]
 8008092:	e010      	b.n	80080b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d10c      	bne.n	80080b6 <osThreadNew+0xca>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d108      	bne.n	80080b6 <osThreadNew+0xca>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	691b      	ldr	r3, [r3, #16]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d104      	bne.n	80080b6 <osThreadNew+0xca>
          mem = 0;
 80080ac:	2300      	movs	r3, #0
 80080ae:	61bb      	str	r3, [r7, #24]
 80080b0:	e001      	b.n	80080b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80080b2:	2300      	movs	r3, #0
 80080b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d110      	bne.n	80080de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80080c4:	9202      	str	r2, [sp, #8]
 80080c6:	9301      	str	r3, [sp, #4]
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	9300      	str	r3, [sp, #0]
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	6a3a      	ldr	r2, [r7, #32]
 80080d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80080d2:	68f8      	ldr	r0, [r7, #12]
 80080d4:	f000 fe38 	bl	8008d48 <xTaskCreateStatic>
 80080d8:	4603      	mov	r3, r0
 80080da:	613b      	str	r3, [r7, #16]
 80080dc:	e013      	b.n	8008106 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d110      	bne.n	8008106 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80080e4:	6a3b      	ldr	r3, [r7, #32]
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	f107 0310 	add.w	r3, r7, #16
 80080ec:	9301      	str	r3, [sp, #4]
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f000 fe83 	bl	8008e02 <xTaskCreate>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d001      	beq.n	8008106 <osThreadNew+0x11a>
            hTask = NULL;
 8008102:	2300      	movs	r3, #0
 8008104:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008106:	693b      	ldr	r3, [r7, #16]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3728      	adds	r7, #40	; 0x28
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008118:	f3ef 8305 	mrs	r3, IPSR
 800811c:	60bb      	str	r3, [r7, #8]
  return(result);
 800811e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008120:	2b00      	cmp	r3, #0
 8008122:	d003      	beq.n	800812c <osDelay+0x1c>
    stat = osErrorISR;
 8008124:	f06f 0305 	mvn.w	r3, #5
 8008128:	60fb      	str	r3, [r7, #12]
 800812a:	e007      	b.n	800813c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800812c:	2300      	movs	r3, #0
 800812e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d002      	beq.n	800813c <osDelay+0x2c>
      vTaskDelay(ticks);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f001 f826 	bl	8009188 <vTaskDelay>
    }
  }

  return (stat);
 800813c:	68fb      	ldr	r3, [r7, #12]
}
 800813e:	4618      	mov	r0, r3
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8008146:	b580      	push	{r7, lr}
 8008148:	b086      	sub	sp, #24
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800814e:	f3ef 8305 	mrs	r3, IPSR
 8008152:	60fb      	str	r3, [r7, #12]
  return(result);
 8008154:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8008156:	2b00      	cmp	r3, #0
 8008158:	d003      	beq.n	8008162 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800815a:	f06f 0305 	mvn.w	r3, #5
 800815e:	617b      	str	r3, [r7, #20]
 8008160:	e019      	b.n	8008196 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8008162:	2300      	movs	r3, #0
 8008164:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8008166:	f001 f955 	bl	8009414 <xTaskGetTickCount>
 800816a:	4603      	mov	r3, r0
 800816c:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	1ad3      	subs	r3, r2, r3
 8008174:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d009      	beq.n	8008190 <osDelayUntil+0x4a>
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	2b00      	cmp	r3, #0
 8008180:	db06      	blt.n	8008190 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8008182:	f107 0308 	add.w	r3, r7, #8
 8008186:	6939      	ldr	r1, [r7, #16]
 8008188:	4618      	mov	r0, r3
 800818a:	f000 ff7f 	bl	800908c <vTaskDelayUntil>
 800818e:	e002      	b.n	8008196 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8008190:	f06f 0303 	mvn.w	r3, #3
 8008194:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008196:	697b      	ldr	r3, [r7, #20]
}
 8008198:	4618      	mov	r0, r3
 800819a:	3718      	adds	r7, #24
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	4a07      	ldr	r2, [pc, #28]	; (80081cc <vApplicationGetIdleTaskMemory+0x2c>)
 80081b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	4a06      	ldr	r2, [pc, #24]	; (80081d0 <vApplicationGetIdleTaskMemory+0x30>)
 80081b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2280      	movs	r2, #128	; 0x80
 80081bc:	601a      	str	r2, [r3, #0]
}
 80081be:	bf00      	nop
 80081c0:	3714      	adds	r7, #20
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr
 80081ca:	bf00      	nop
 80081cc:	20000300 	.word	0x20000300
 80081d0:	2000035c 	.word	0x2000035c

080081d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	4a07      	ldr	r2, [pc, #28]	; (8008200 <vApplicationGetTimerTaskMemory+0x2c>)
 80081e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	4a06      	ldr	r2, [pc, #24]	; (8008204 <vApplicationGetTimerTaskMemory+0x30>)
 80081ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081f2:	601a      	str	r2, [r3, #0]
}
 80081f4:	bf00      	nop
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr
 8008200:	2000055c 	.word	0x2000055c
 8008204:	200005b8 	.word	0x200005b8

08008208 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f103 0208 	add.w	r2, r3, #8
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f04f 32ff 	mov.w	r2, #4294967295
 8008220:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f103 0208 	add.w	r2, r3, #8
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f103 0208 	add.w	r2, r3, #8
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800823c:	bf00      	nop
 800823e:	370c      	adds	r7, #12
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008256:	bf00      	nop
 8008258:	370c      	adds	r7, #12
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr

08008262 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008262:	b480      	push	{r7}
 8008264:	b085      	sub	sp, #20
 8008266:	af00      	add	r7, sp, #0
 8008268:	6078      	str	r0, [r7, #4]
 800826a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	68fa      	ldr	r2, [r7, #12]
 8008276:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	689a      	ldr	r2, [r3, #8]
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	683a      	ldr	r2, [r7, #0]
 8008286:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	683a      	ldr	r2, [r7, #0]
 800828c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	1c5a      	adds	r2, r3, #1
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	601a      	str	r2, [r3, #0]
}
 800829e:	bf00      	nop
 80082a0:	3714      	adds	r7, #20
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr

080082aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80082aa:	b480      	push	{r7}
 80082ac:	b085      	sub	sp, #20
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
 80082b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c0:	d103      	bne.n	80082ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	60fb      	str	r3, [r7, #12]
 80082c8:	e00c      	b.n	80082e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	3308      	adds	r3, #8
 80082ce:	60fb      	str	r3, [r7, #12]
 80082d0:	e002      	b.n	80082d8 <vListInsert+0x2e>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	60fb      	str	r3, [r7, #12]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68ba      	ldr	r2, [r7, #8]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d2f6      	bcs.n	80082d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	685a      	ldr	r2, [r3, #4]
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	683a      	ldr	r2, [r7, #0]
 80082f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	683a      	ldr	r2, [r7, #0]
 80082fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	1c5a      	adds	r2, r3, #1
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	601a      	str	r2, [r3, #0]
}
 8008310:	bf00      	nop
 8008312:	3714      	adds	r7, #20
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	6892      	ldr	r2, [r2, #8]
 8008332:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	6852      	ldr	r2, [r2, #4]
 800833c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	429a      	cmp	r2, r3
 8008346:	d103      	bne.n	8008350 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	689a      	ldr	r2, [r3, #8]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	1e5a      	subs	r2, r3, #1
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
}
 8008364:	4618      	mov	r0, r3
 8008366:	3714      	adds	r7, #20
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d10a      	bne.n	800839a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008388:	f383 8811 	msr	BASEPRI, r3
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	f3bf 8f4f 	dsb	sy
 8008394:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008396:	bf00      	nop
 8008398:	e7fe      	b.n	8008398 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800839a:	f002 f8cb 	bl	800a534 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083a6:	68f9      	ldr	r1, [r7, #12]
 80083a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80083aa:	fb01 f303 	mul.w	r3, r1, r3
 80083ae:	441a      	add	r2, r3
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2200      	movs	r2, #0
 80083b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ca:	3b01      	subs	r3, #1
 80083cc:	68f9      	ldr	r1, [r7, #12]
 80083ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80083d0:	fb01 f303 	mul.w	r3, r1, r3
 80083d4:	441a      	add	r2, r3
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	22ff      	movs	r2, #255	; 0xff
 80083de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	22ff      	movs	r2, #255	; 0xff
 80083e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d114      	bne.n	800841a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d01a      	beq.n	800842e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	3310      	adds	r3, #16
 80083fc:	4618      	mov	r0, r3
 80083fe:	f001 f981 	bl	8009704 <xTaskRemoveFromEventList>
 8008402:	4603      	mov	r3, r0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d012      	beq.n	800842e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008408:	4b0c      	ldr	r3, [pc, #48]	; (800843c <xQueueGenericReset+0xcc>)
 800840a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800840e:	601a      	str	r2, [r3, #0]
 8008410:	f3bf 8f4f 	dsb	sy
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	e009      	b.n	800842e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	3310      	adds	r3, #16
 800841e:	4618      	mov	r0, r3
 8008420:	f7ff fef2 	bl	8008208 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	3324      	adds	r3, #36	; 0x24
 8008428:	4618      	mov	r0, r3
 800842a:	f7ff feed 	bl	8008208 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800842e:	f002 f8b1 	bl	800a594 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008432:	2301      	movs	r3, #1
}
 8008434:	4618      	mov	r0, r3
 8008436:	3710      	adds	r7, #16
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}
 800843c:	e000ed04 	.word	0xe000ed04

08008440 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008440:	b580      	push	{r7, lr}
 8008442:	b08e      	sub	sp, #56	; 0x38
 8008444:	af02      	add	r7, sp, #8
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]
 800844c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d10a      	bne.n	800846a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008458:	f383 8811 	msr	BASEPRI, r3
 800845c:	f3bf 8f6f 	isb	sy
 8008460:	f3bf 8f4f 	dsb	sy
 8008464:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008466:	bf00      	nop
 8008468:	e7fe      	b.n	8008468 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d10a      	bne.n	8008486 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008474:	f383 8811 	msr	BASEPRI, r3
 8008478:	f3bf 8f6f 	isb	sy
 800847c:	f3bf 8f4f 	dsb	sy
 8008480:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008482:	bf00      	nop
 8008484:	e7fe      	b.n	8008484 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d002      	beq.n	8008492 <xQueueGenericCreateStatic+0x52>
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d001      	beq.n	8008496 <xQueueGenericCreateStatic+0x56>
 8008492:	2301      	movs	r3, #1
 8008494:	e000      	b.n	8008498 <xQueueGenericCreateStatic+0x58>
 8008496:	2300      	movs	r3, #0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d10a      	bne.n	80084b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800849c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a0:	f383 8811 	msr	BASEPRI, r3
 80084a4:	f3bf 8f6f 	isb	sy
 80084a8:	f3bf 8f4f 	dsb	sy
 80084ac:	623b      	str	r3, [r7, #32]
}
 80084ae:	bf00      	nop
 80084b0:	e7fe      	b.n	80084b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d102      	bne.n	80084be <xQueueGenericCreateStatic+0x7e>
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d101      	bne.n	80084c2 <xQueueGenericCreateStatic+0x82>
 80084be:	2301      	movs	r3, #1
 80084c0:	e000      	b.n	80084c4 <xQueueGenericCreateStatic+0x84>
 80084c2:	2300      	movs	r3, #0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d10a      	bne.n	80084de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80084c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084cc:	f383 8811 	msr	BASEPRI, r3
 80084d0:	f3bf 8f6f 	isb	sy
 80084d4:	f3bf 8f4f 	dsb	sy
 80084d8:	61fb      	str	r3, [r7, #28]
}
 80084da:	bf00      	nop
 80084dc:	e7fe      	b.n	80084dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80084de:	2350      	movs	r3, #80	; 0x50
 80084e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	2b50      	cmp	r3, #80	; 0x50
 80084e6:	d00a      	beq.n	80084fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80084e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ec:	f383 8811 	msr	BASEPRI, r3
 80084f0:	f3bf 8f6f 	isb	sy
 80084f4:	f3bf 8f4f 	dsb	sy
 80084f8:	61bb      	str	r3, [r7, #24]
}
 80084fa:	bf00      	nop
 80084fc:	e7fe      	b.n	80084fc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80084fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00d      	beq.n	8008526 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800850a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850c:	2201      	movs	r2, #1
 800850e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008512:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008518:	9300      	str	r3, [sp, #0]
 800851a:	4613      	mov	r3, r2
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	68b9      	ldr	r1, [r7, #8]
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f000 f805 	bl	8008530 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008528:	4618      	mov	r0, r3
 800852a:	3730      	adds	r7, #48	; 0x30
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
 800853c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d103      	bne.n	800854c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	69ba      	ldr	r2, [r7, #24]
 8008548:	601a      	str	r2, [r3, #0]
 800854a:	e002      	b.n	8008552 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800854c:	69bb      	ldr	r3, [r7, #24]
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	68ba      	ldr	r2, [r7, #8]
 800855c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800855e:	2101      	movs	r1, #1
 8008560:	69b8      	ldr	r0, [r7, #24]
 8008562:	f7ff ff05 	bl	8008370 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	78fa      	ldrb	r2, [r7, #3]
 800856a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800856e:	bf00      	nop
 8008570:	3710      	adds	r7, #16
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
	...

08008578 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b08e      	sub	sp, #56	; 0x38
 800857c:	af00      	add	r7, sp, #0
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	607a      	str	r2, [r7, #4]
 8008584:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008586:	2300      	movs	r3, #0
 8008588:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800858e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10a      	bne.n	80085aa <xQueueGenericSend+0x32>
	__asm volatile
 8008594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008598:	f383 8811 	msr	BASEPRI, r3
 800859c:	f3bf 8f6f 	isb	sy
 80085a0:	f3bf 8f4f 	dsb	sy
 80085a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80085a6:	bf00      	nop
 80085a8:	e7fe      	b.n	80085a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d103      	bne.n	80085b8 <xQueueGenericSend+0x40>
 80085b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d101      	bne.n	80085bc <xQueueGenericSend+0x44>
 80085b8:	2301      	movs	r3, #1
 80085ba:	e000      	b.n	80085be <xQueueGenericSend+0x46>
 80085bc:	2300      	movs	r3, #0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d10a      	bne.n	80085d8 <xQueueGenericSend+0x60>
	__asm volatile
 80085c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c6:	f383 8811 	msr	BASEPRI, r3
 80085ca:	f3bf 8f6f 	isb	sy
 80085ce:	f3bf 8f4f 	dsb	sy
 80085d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80085d4:	bf00      	nop
 80085d6:	e7fe      	b.n	80085d6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	2b02      	cmp	r3, #2
 80085dc:	d103      	bne.n	80085e6 <xQueueGenericSend+0x6e>
 80085de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d101      	bne.n	80085ea <xQueueGenericSend+0x72>
 80085e6:	2301      	movs	r3, #1
 80085e8:	e000      	b.n	80085ec <xQueueGenericSend+0x74>
 80085ea:	2300      	movs	r3, #0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d10a      	bne.n	8008606 <xQueueGenericSend+0x8e>
	__asm volatile
 80085f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f4:	f383 8811 	msr	BASEPRI, r3
 80085f8:	f3bf 8f6f 	isb	sy
 80085fc:	f3bf 8f4f 	dsb	sy
 8008600:	623b      	str	r3, [r7, #32]
}
 8008602:	bf00      	nop
 8008604:	e7fe      	b.n	8008604 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008606:	f001 fa3b 	bl	8009a80 <xTaskGetSchedulerState>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d102      	bne.n	8008616 <xQueueGenericSend+0x9e>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d101      	bne.n	800861a <xQueueGenericSend+0xa2>
 8008616:	2301      	movs	r3, #1
 8008618:	e000      	b.n	800861c <xQueueGenericSend+0xa4>
 800861a:	2300      	movs	r3, #0
 800861c:	2b00      	cmp	r3, #0
 800861e:	d10a      	bne.n	8008636 <xQueueGenericSend+0xbe>
	__asm volatile
 8008620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008624:	f383 8811 	msr	BASEPRI, r3
 8008628:	f3bf 8f6f 	isb	sy
 800862c:	f3bf 8f4f 	dsb	sy
 8008630:	61fb      	str	r3, [r7, #28]
}
 8008632:	bf00      	nop
 8008634:	e7fe      	b.n	8008634 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008636:	f001 ff7d 	bl	800a534 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800863a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800863e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008642:	429a      	cmp	r2, r3
 8008644:	d302      	bcc.n	800864c <xQueueGenericSend+0xd4>
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	2b02      	cmp	r3, #2
 800864a:	d129      	bne.n	80086a0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800864c:	683a      	ldr	r2, [r7, #0]
 800864e:	68b9      	ldr	r1, [r7, #8]
 8008650:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008652:	f000 fa0b 	bl	8008a6c <prvCopyDataToQueue>
 8008656:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865c:	2b00      	cmp	r3, #0
 800865e:	d010      	beq.n	8008682 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008662:	3324      	adds	r3, #36	; 0x24
 8008664:	4618      	mov	r0, r3
 8008666:	f001 f84d 	bl	8009704 <xTaskRemoveFromEventList>
 800866a:	4603      	mov	r3, r0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d013      	beq.n	8008698 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008670:	4b3f      	ldr	r3, [pc, #252]	; (8008770 <xQueueGenericSend+0x1f8>)
 8008672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008676:	601a      	str	r2, [r3, #0]
 8008678:	f3bf 8f4f 	dsb	sy
 800867c:	f3bf 8f6f 	isb	sy
 8008680:	e00a      	b.n	8008698 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008684:	2b00      	cmp	r3, #0
 8008686:	d007      	beq.n	8008698 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008688:	4b39      	ldr	r3, [pc, #228]	; (8008770 <xQueueGenericSend+0x1f8>)
 800868a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800868e:	601a      	str	r2, [r3, #0]
 8008690:	f3bf 8f4f 	dsb	sy
 8008694:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008698:	f001 ff7c 	bl	800a594 <vPortExitCritical>
				return pdPASS;
 800869c:	2301      	movs	r3, #1
 800869e:	e063      	b.n	8008768 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d103      	bne.n	80086ae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80086a6:	f001 ff75 	bl	800a594 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80086aa:	2300      	movs	r3, #0
 80086ac:	e05c      	b.n	8008768 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80086ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d106      	bne.n	80086c2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80086b4:	f107 0314 	add.w	r3, r7, #20
 80086b8:	4618      	mov	r0, r3
 80086ba:	f001 f887 	bl	80097cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80086be:	2301      	movs	r3, #1
 80086c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80086c2:	f001 ff67 	bl	800a594 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80086c6:	f000 fdf9 	bl	80092bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086ca:	f001 ff33 	bl	800a534 <vPortEnterCritical>
 80086ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086d4:	b25b      	sxtb	r3, r3
 80086d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086da:	d103      	bne.n	80086e4 <xQueueGenericSend+0x16c>
 80086dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086de:	2200      	movs	r2, #0
 80086e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086ea:	b25b      	sxtb	r3, r3
 80086ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086f0:	d103      	bne.n	80086fa <xQueueGenericSend+0x182>
 80086f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086fa:	f001 ff4b 	bl	800a594 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086fe:	1d3a      	adds	r2, r7, #4
 8008700:	f107 0314 	add.w	r3, r7, #20
 8008704:	4611      	mov	r1, r2
 8008706:	4618      	mov	r0, r3
 8008708:	f001 f876 	bl	80097f8 <xTaskCheckForTimeOut>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d124      	bne.n	800875c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008712:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008714:	f000 faa2 	bl	8008c5c <prvIsQueueFull>
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d018      	beq.n	8008750 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800871e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008720:	3310      	adds	r3, #16
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	4611      	mov	r1, r2
 8008726:	4618      	mov	r0, r3
 8008728:	f000 ff9c 	bl	8009664 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800872c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800872e:	f000 fa2d 	bl	8008b8c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008732:	f000 fdd1 	bl	80092d8 <xTaskResumeAll>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	f47f af7c 	bne.w	8008636 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800873e:	4b0c      	ldr	r3, [pc, #48]	; (8008770 <xQueueGenericSend+0x1f8>)
 8008740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008744:	601a      	str	r2, [r3, #0]
 8008746:	f3bf 8f4f 	dsb	sy
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	e772      	b.n	8008636 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008750:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008752:	f000 fa1b 	bl	8008b8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008756:	f000 fdbf 	bl	80092d8 <xTaskResumeAll>
 800875a:	e76c      	b.n	8008636 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800875c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800875e:	f000 fa15 	bl	8008b8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008762:	f000 fdb9 	bl	80092d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008766:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008768:	4618      	mov	r0, r3
 800876a:	3738      	adds	r7, #56	; 0x38
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}
 8008770:	e000ed04 	.word	0xe000ed04

08008774 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b090      	sub	sp, #64	; 0x40
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	607a      	str	r2, [r7, #4]
 8008780:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008788:	2b00      	cmp	r3, #0
 800878a:	d10a      	bne.n	80087a2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800878c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008790:	f383 8811 	msr	BASEPRI, r3
 8008794:	f3bf 8f6f 	isb	sy
 8008798:	f3bf 8f4f 	dsb	sy
 800879c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800879e:	bf00      	nop
 80087a0:	e7fe      	b.n	80087a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d103      	bne.n	80087b0 <xQueueGenericSendFromISR+0x3c>
 80087a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d101      	bne.n	80087b4 <xQueueGenericSendFromISR+0x40>
 80087b0:	2301      	movs	r3, #1
 80087b2:	e000      	b.n	80087b6 <xQueueGenericSendFromISR+0x42>
 80087b4:	2300      	movs	r3, #0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d10a      	bne.n	80087d0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80087ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087be:	f383 8811 	msr	BASEPRI, r3
 80087c2:	f3bf 8f6f 	isb	sy
 80087c6:	f3bf 8f4f 	dsb	sy
 80087ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80087cc:	bf00      	nop
 80087ce:	e7fe      	b.n	80087ce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	2b02      	cmp	r3, #2
 80087d4:	d103      	bne.n	80087de <xQueueGenericSendFromISR+0x6a>
 80087d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d101      	bne.n	80087e2 <xQueueGenericSendFromISR+0x6e>
 80087de:	2301      	movs	r3, #1
 80087e0:	e000      	b.n	80087e4 <xQueueGenericSendFromISR+0x70>
 80087e2:	2300      	movs	r3, #0
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d10a      	bne.n	80087fe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80087e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ec:	f383 8811 	msr	BASEPRI, r3
 80087f0:	f3bf 8f6f 	isb	sy
 80087f4:	f3bf 8f4f 	dsb	sy
 80087f8:	623b      	str	r3, [r7, #32]
}
 80087fa:	bf00      	nop
 80087fc:	e7fe      	b.n	80087fc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80087fe:	f001 ff7b 	bl	800a6f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008802:	f3ef 8211 	mrs	r2, BASEPRI
 8008806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800880a:	f383 8811 	msr	BASEPRI, r3
 800880e:	f3bf 8f6f 	isb	sy
 8008812:	f3bf 8f4f 	dsb	sy
 8008816:	61fa      	str	r2, [r7, #28]
 8008818:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800881a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800881c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800881e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008826:	429a      	cmp	r2, r3
 8008828:	d302      	bcc.n	8008830 <xQueueGenericSendFromISR+0xbc>
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	2b02      	cmp	r3, #2
 800882e:	d12f      	bne.n	8008890 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008832:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800883a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800883c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800883e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008840:	683a      	ldr	r2, [r7, #0]
 8008842:	68b9      	ldr	r1, [r7, #8]
 8008844:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008846:	f000 f911 	bl	8008a6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800884a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800884e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008852:	d112      	bne.n	800887a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008858:	2b00      	cmp	r3, #0
 800885a:	d016      	beq.n	800888a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800885c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800885e:	3324      	adds	r3, #36	; 0x24
 8008860:	4618      	mov	r0, r3
 8008862:	f000 ff4f 	bl	8009704 <xTaskRemoveFromEventList>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d00e      	beq.n	800888a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d00b      	beq.n	800888a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2201      	movs	r2, #1
 8008876:	601a      	str	r2, [r3, #0]
 8008878:	e007      	b.n	800888a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800887a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800887e:	3301      	adds	r3, #1
 8008880:	b2db      	uxtb	r3, r3
 8008882:	b25a      	sxtb	r2, r3
 8008884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008886:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800888a:	2301      	movs	r3, #1
 800888c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800888e:	e001      	b.n	8008894 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008890:	2300      	movs	r3, #0
 8008892:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008896:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800889e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80088a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3740      	adds	r7, #64	; 0x40
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
	...

080088ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b08c      	sub	sp, #48	; 0x30
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80088b8:	2300      	movs	r3, #0
 80088ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80088c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d10a      	bne.n	80088dc <xQueueReceive+0x30>
	__asm volatile
 80088c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ca:	f383 8811 	msr	BASEPRI, r3
 80088ce:	f3bf 8f6f 	isb	sy
 80088d2:	f3bf 8f4f 	dsb	sy
 80088d6:	623b      	str	r3, [r7, #32]
}
 80088d8:	bf00      	nop
 80088da:	e7fe      	b.n	80088da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d103      	bne.n	80088ea <xQueueReceive+0x3e>
 80088e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d101      	bne.n	80088ee <xQueueReceive+0x42>
 80088ea:	2301      	movs	r3, #1
 80088ec:	e000      	b.n	80088f0 <xQueueReceive+0x44>
 80088ee:	2300      	movs	r3, #0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d10a      	bne.n	800890a <xQueueReceive+0x5e>
	__asm volatile
 80088f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f8:	f383 8811 	msr	BASEPRI, r3
 80088fc:	f3bf 8f6f 	isb	sy
 8008900:	f3bf 8f4f 	dsb	sy
 8008904:	61fb      	str	r3, [r7, #28]
}
 8008906:	bf00      	nop
 8008908:	e7fe      	b.n	8008908 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800890a:	f001 f8b9 	bl	8009a80 <xTaskGetSchedulerState>
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d102      	bne.n	800891a <xQueueReceive+0x6e>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d101      	bne.n	800891e <xQueueReceive+0x72>
 800891a:	2301      	movs	r3, #1
 800891c:	e000      	b.n	8008920 <xQueueReceive+0x74>
 800891e:	2300      	movs	r3, #0
 8008920:	2b00      	cmp	r3, #0
 8008922:	d10a      	bne.n	800893a <xQueueReceive+0x8e>
	__asm volatile
 8008924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008928:	f383 8811 	msr	BASEPRI, r3
 800892c:	f3bf 8f6f 	isb	sy
 8008930:	f3bf 8f4f 	dsb	sy
 8008934:	61bb      	str	r3, [r7, #24]
}
 8008936:	bf00      	nop
 8008938:	e7fe      	b.n	8008938 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800893a:	f001 fdfb 	bl	800a534 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800893e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008942:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008946:	2b00      	cmp	r3, #0
 8008948:	d01f      	beq.n	800898a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800894a:	68b9      	ldr	r1, [r7, #8]
 800894c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800894e:	f000 f8f7 	bl	8008b40 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008954:	1e5a      	subs	r2, r3, #1
 8008956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008958:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800895a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d00f      	beq.n	8008982 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008964:	3310      	adds	r3, #16
 8008966:	4618      	mov	r0, r3
 8008968:	f000 fecc 	bl	8009704 <xTaskRemoveFromEventList>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d007      	beq.n	8008982 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008972:	4b3d      	ldr	r3, [pc, #244]	; (8008a68 <xQueueReceive+0x1bc>)
 8008974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008978:	601a      	str	r2, [r3, #0]
 800897a:	f3bf 8f4f 	dsb	sy
 800897e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008982:	f001 fe07 	bl	800a594 <vPortExitCritical>
				return pdPASS;
 8008986:	2301      	movs	r3, #1
 8008988:	e069      	b.n	8008a5e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d103      	bne.n	8008998 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008990:	f001 fe00 	bl	800a594 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008994:	2300      	movs	r3, #0
 8008996:	e062      	b.n	8008a5e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800899a:	2b00      	cmp	r3, #0
 800899c:	d106      	bne.n	80089ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800899e:	f107 0310 	add.w	r3, r7, #16
 80089a2:	4618      	mov	r0, r3
 80089a4:	f000 ff12 	bl	80097cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80089a8:	2301      	movs	r3, #1
 80089aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80089ac:	f001 fdf2 	bl	800a594 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80089b0:	f000 fc84 	bl	80092bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80089b4:	f001 fdbe 	bl	800a534 <vPortEnterCritical>
 80089b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089be:	b25b      	sxtb	r3, r3
 80089c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c4:	d103      	bne.n	80089ce <xQueueReceive+0x122>
 80089c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c8:	2200      	movs	r2, #0
 80089ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089d4:	b25b      	sxtb	r3, r3
 80089d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089da:	d103      	bne.n	80089e4 <xQueueReceive+0x138>
 80089dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089de:	2200      	movs	r2, #0
 80089e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089e4:	f001 fdd6 	bl	800a594 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80089e8:	1d3a      	adds	r2, r7, #4
 80089ea:	f107 0310 	add.w	r3, r7, #16
 80089ee:	4611      	mov	r1, r2
 80089f0:	4618      	mov	r0, r3
 80089f2:	f000 ff01 	bl	80097f8 <xTaskCheckForTimeOut>
 80089f6:	4603      	mov	r3, r0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d123      	bne.n	8008a44 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089fe:	f000 f917 	bl	8008c30 <prvIsQueueEmpty>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d017      	beq.n	8008a38 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0a:	3324      	adds	r3, #36	; 0x24
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	4611      	mov	r1, r2
 8008a10:	4618      	mov	r0, r3
 8008a12:	f000 fe27 	bl	8009664 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008a16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a18:	f000 f8b8 	bl	8008b8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008a1c:	f000 fc5c 	bl	80092d8 <xTaskResumeAll>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d189      	bne.n	800893a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008a26:	4b10      	ldr	r3, [pc, #64]	; (8008a68 <xQueueReceive+0x1bc>)
 8008a28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a2c:	601a      	str	r2, [r3, #0]
 8008a2e:	f3bf 8f4f 	dsb	sy
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	e780      	b.n	800893a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008a38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a3a:	f000 f8a7 	bl	8008b8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a3e:	f000 fc4b 	bl	80092d8 <xTaskResumeAll>
 8008a42:	e77a      	b.n	800893a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008a44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a46:	f000 f8a1 	bl	8008b8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a4a:	f000 fc45 	bl	80092d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a50:	f000 f8ee 	bl	8008c30 <prvIsQueueEmpty>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f43f af6f 	beq.w	800893a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008a5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3730      	adds	r7, #48	; 0x30
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	e000ed04 	.word	0xe000ed04

08008a6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b086      	sub	sp, #24
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d10d      	bne.n	8008aa6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d14d      	bne.n	8008b2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	4618      	mov	r0, r3
 8008a98:	f001 f810 	bl	8009abc <xTaskPriorityDisinherit>
 8008a9c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	609a      	str	r2, [r3, #8]
 8008aa4:	e043      	b.n	8008b2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d119      	bne.n	8008ae0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6858      	ldr	r0, [r3, #4]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	68b9      	ldr	r1, [r7, #8]
 8008ab8:	f002 fc40 	bl	800b33c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	685a      	ldr	r2, [r3, #4]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac4:	441a      	add	r2, r3
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	685a      	ldr	r2, [r3, #4]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d32b      	bcc.n	8008b2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	605a      	str	r2, [r3, #4]
 8008ade:	e026      	b.n	8008b2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	68d8      	ldr	r0, [r3, #12]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae8:	461a      	mov	r2, r3
 8008aea:	68b9      	ldr	r1, [r7, #8]
 8008aec:	f002 fc26 	bl	800b33c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	68da      	ldr	r2, [r3, #12]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af8:	425b      	negs	r3, r3
 8008afa:	441a      	add	r2, r3
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	68da      	ldr	r2, [r3, #12]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d207      	bcs.n	8008b1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	689a      	ldr	r2, [r3, #8]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b14:	425b      	negs	r3, r3
 8008b16:	441a      	add	r2, r3
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2b02      	cmp	r3, #2
 8008b20:	d105      	bne.n	8008b2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d002      	beq.n	8008b2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	3b01      	subs	r3, #1
 8008b2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	1c5a      	adds	r2, r3, #1
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008b36:	697b      	ldr	r3, [r7, #20]
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3718      	adds	r7, #24
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d018      	beq.n	8008b84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	68da      	ldr	r2, [r3, #12]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b5a:	441a      	add	r2, r3
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	68da      	ldr	r2, [r3, #12]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	429a      	cmp	r2, r3
 8008b6a:	d303      	bcc.n	8008b74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	68d9      	ldr	r1, [r3, #12]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	6838      	ldr	r0, [r7, #0]
 8008b80:	f002 fbdc 	bl	800b33c <memcpy>
	}
}
 8008b84:	bf00      	nop
 8008b86:	3708      	adds	r7, #8
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008b94:	f001 fcce 	bl	800a534 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b9e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ba0:	e011      	b.n	8008bc6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d012      	beq.n	8008bd0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	3324      	adds	r3, #36	; 0x24
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f000 fda8 	bl	8009704 <xTaskRemoveFromEventList>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d001      	beq.n	8008bbe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008bba:	f000 fe7f 	bl	80098bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008bbe:	7bfb      	ldrb	r3, [r7, #15]
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	dce9      	bgt.n	8008ba2 <prvUnlockQueue+0x16>
 8008bce:	e000      	b.n	8008bd2 <prvUnlockQueue+0x46>
					break;
 8008bd0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	22ff      	movs	r2, #255	; 0xff
 8008bd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008bda:	f001 fcdb 	bl	800a594 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008bde:	f001 fca9 	bl	800a534 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008be8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008bea:	e011      	b.n	8008c10 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	691b      	ldr	r3, [r3, #16]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d012      	beq.n	8008c1a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	3310      	adds	r3, #16
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f000 fd83 	bl	8009704 <xTaskRemoveFromEventList>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d001      	beq.n	8008c08 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008c04:	f000 fe5a 	bl	80098bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008c08:	7bbb      	ldrb	r3, [r7, #14]
 8008c0a:	3b01      	subs	r3, #1
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	dce9      	bgt.n	8008bec <prvUnlockQueue+0x60>
 8008c18:	e000      	b.n	8008c1c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008c1a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	22ff      	movs	r2, #255	; 0xff
 8008c20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008c24:	f001 fcb6 	bl	800a594 <vPortExitCritical>
}
 8008c28:	bf00      	nop
 8008c2a:	3710      	adds	r7, #16
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c38:	f001 fc7c 	bl	800a534 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d102      	bne.n	8008c4a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008c44:	2301      	movs	r3, #1
 8008c46:	60fb      	str	r3, [r7, #12]
 8008c48:	e001      	b.n	8008c4e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c4e:	f001 fca1 	bl	800a594 <vPortExitCritical>

	return xReturn;
 8008c52:	68fb      	ldr	r3, [r7, #12]
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3710      	adds	r7, #16
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c64:	f001 fc66 	bl	800a534 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d102      	bne.n	8008c7a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008c74:	2301      	movs	r3, #1
 8008c76:	60fb      	str	r3, [r7, #12]
 8008c78:	e001      	b.n	8008c7e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c7e:	f001 fc89 	bl	800a594 <vPortExitCritical>

	return xReturn;
 8008c82:	68fb      	ldr	r3, [r7, #12]
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3710      	adds	r7, #16
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b085      	sub	sp, #20
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c96:	2300      	movs	r3, #0
 8008c98:	60fb      	str	r3, [r7, #12]
 8008c9a:	e014      	b.n	8008cc6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008c9c:	4a0f      	ldr	r2, [pc, #60]	; (8008cdc <vQueueAddToRegistry+0x50>)
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d10b      	bne.n	8008cc0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008ca8:	490c      	ldr	r1, [pc, #48]	; (8008cdc <vQueueAddToRegistry+0x50>)
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	683a      	ldr	r2, [r7, #0]
 8008cae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008cb2:	4a0a      	ldr	r2, [pc, #40]	; (8008cdc <vQueueAddToRegistry+0x50>)
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	00db      	lsls	r3, r3, #3
 8008cb8:	4413      	add	r3, r2
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008cbe:	e006      	b.n	8008cce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	60fb      	str	r3, [r7, #12]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2b07      	cmp	r3, #7
 8008cca:	d9e7      	bls.n	8008c9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008ccc:	bf00      	nop
 8008cce:	bf00      	nop
 8008cd0:	3714      	adds	r7, #20
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop
 8008cdc:	200009b8 	.word	0x200009b8

08008ce0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b086      	sub	sp, #24
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008cf0:	f001 fc20 	bl	800a534 <vPortEnterCritical>
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cfa:	b25b      	sxtb	r3, r3
 8008cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d00:	d103      	bne.n	8008d0a <vQueueWaitForMessageRestricted+0x2a>
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	2200      	movs	r2, #0
 8008d06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d10:	b25b      	sxtb	r3, r3
 8008d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d16:	d103      	bne.n	8008d20 <vQueueWaitForMessageRestricted+0x40>
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d20:	f001 fc38 	bl	800a594 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d106      	bne.n	8008d3a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	3324      	adds	r3, #36	; 0x24
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	68b9      	ldr	r1, [r7, #8]
 8008d34:	4618      	mov	r0, r3
 8008d36:	f000 fcb9 	bl	80096ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008d3a:	6978      	ldr	r0, [r7, #20]
 8008d3c:	f7ff ff26 	bl	8008b8c <prvUnlockQueue>
	}
 8008d40:	bf00      	nop
 8008d42:	3718      	adds	r7, #24
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b08e      	sub	sp, #56	; 0x38
 8008d4c:	af04      	add	r7, sp, #16
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	607a      	str	r2, [r7, #4]
 8008d54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d10a      	bne.n	8008d72 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d60:	f383 8811 	msr	BASEPRI, r3
 8008d64:	f3bf 8f6f 	isb	sy
 8008d68:	f3bf 8f4f 	dsb	sy
 8008d6c:	623b      	str	r3, [r7, #32]
}
 8008d6e:	bf00      	nop
 8008d70:	e7fe      	b.n	8008d70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d10a      	bne.n	8008d8e <xTaskCreateStatic+0x46>
	__asm volatile
 8008d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7c:	f383 8811 	msr	BASEPRI, r3
 8008d80:	f3bf 8f6f 	isb	sy
 8008d84:	f3bf 8f4f 	dsb	sy
 8008d88:	61fb      	str	r3, [r7, #28]
}
 8008d8a:	bf00      	nop
 8008d8c:	e7fe      	b.n	8008d8c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008d8e:	235c      	movs	r3, #92	; 0x5c
 8008d90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	2b5c      	cmp	r3, #92	; 0x5c
 8008d96:	d00a      	beq.n	8008dae <xTaskCreateStatic+0x66>
	__asm volatile
 8008d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9c:	f383 8811 	msr	BASEPRI, r3
 8008da0:	f3bf 8f6f 	isb	sy
 8008da4:	f3bf 8f4f 	dsb	sy
 8008da8:	61bb      	str	r3, [r7, #24]
}
 8008daa:	bf00      	nop
 8008dac:	e7fe      	b.n	8008dac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008dae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d01e      	beq.n	8008df4 <xTaskCreateStatic+0xac>
 8008db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d01b      	beq.n	8008df4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dbe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008dc4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc8:	2202      	movs	r2, #2
 8008dca:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008dce:	2300      	movs	r3, #0
 8008dd0:	9303      	str	r3, [sp, #12]
 8008dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd4:	9302      	str	r3, [sp, #8]
 8008dd6:	f107 0314 	add.w	r3, r7, #20
 8008dda:	9301      	str	r3, [sp, #4]
 8008ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dde:	9300      	str	r3, [sp, #0]
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	68b9      	ldr	r1, [r7, #8]
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	f000 f850 	bl	8008e8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008dec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008dee:	f000 f8dd 	bl	8008fac <prvAddNewTaskToReadyList>
 8008df2:	e001      	b.n	8008df8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008df4:	2300      	movs	r3, #0
 8008df6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008df8:	697b      	ldr	r3, [r7, #20]
	}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3728      	adds	r7, #40	; 0x28
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b08c      	sub	sp, #48	; 0x30
 8008e06:	af04      	add	r7, sp, #16
 8008e08:	60f8      	str	r0, [r7, #12]
 8008e0a:	60b9      	str	r1, [r7, #8]
 8008e0c:	603b      	str	r3, [r7, #0]
 8008e0e:	4613      	mov	r3, r2
 8008e10:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008e12:	88fb      	ldrh	r3, [r7, #6]
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	4618      	mov	r0, r3
 8008e18:	f001 fcae 	bl	800a778 <pvPortMalloc>
 8008e1c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d00e      	beq.n	8008e42 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008e24:	205c      	movs	r0, #92	; 0x5c
 8008e26:	f001 fca7 	bl	800a778 <pvPortMalloc>
 8008e2a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d003      	beq.n	8008e3a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008e32:	69fb      	ldr	r3, [r7, #28]
 8008e34:	697a      	ldr	r2, [r7, #20]
 8008e36:	631a      	str	r2, [r3, #48]	; 0x30
 8008e38:	e005      	b.n	8008e46 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008e3a:	6978      	ldr	r0, [r7, #20]
 8008e3c:	f001 fd68 	bl	800a910 <vPortFree>
 8008e40:	e001      	b.n	8008e46 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008e42:	2300      	movs	r3, #0
 8008e44:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008e46:	69fb      	ldr	r3, [r7, #28]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d017      	beq.n	8008e7c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008e54:	88fa      	ldrh	r2, [r7, #6]
 8008e56:	2300      	movs	r3, #0
 8008e58:	9303      	str	r3, [sp, #12]
 8008e5a:	69fb      	ldr	r3, [r7, #28]
 8008e5c:	9302      	str	r3, [sp, #8]
 8008e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e60:	9301      	str	r3, [sp, #4]
 8008e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e64:	9300      	str	r3, [sp, #0]
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	68b9      	ldr	r1, [r7, #8]
 8008e6a:	68f8      	ldr	r0, [r7, #12]
 8008e6c:	f000 f80e 	bl	8008e8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e70:	69f8      	ldr	r0, [r7, #28]
 8008e72:	f000 f89b 	bl	8008fac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008e76:	2301      	movs	r3, #1
 8008e78:	61bb      	str	r3, [r7, #24]
 8008e7a:	e002      	b.n	8008e82 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e80:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008e82:	69bb      	ldr	r3, [r7, #24]
	}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3720      	adds	r7, #32
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b088      	sub	sp, #32
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]
 8008e98:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	21a5      	movs	r1, #165	; 0xa5
 8008ea6:	f002 fa05 	bl	800b2b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008eb4:	3b01      	subs	r3, #1
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	4413      	add	r3, r2
 8008eba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	f023 0307 	bic.w	r3, r3, #7
 8008ec2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	f003 0307 	and.w	r3, r3, #7
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00a      	beq.n	8008ee4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed2:	f383 8811 	msr	BASEPRI, r3
 8008ed6:	f3bf 8f6f 	isb	sy
 8008eda:	f3bf 8f4f 	dsb	sy
 8008ede:	617b      	str	r3, [r7, #20]
}
 8008ee0:	bf00      	nop
 8008ee2:	e7fe      	b.n	8008ee2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d01f      	beq.n	8008f2a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008eea:	2300      	movs	r3, #0
 8008eec:	61fb      	str	r3, [r7, #28]
 8008eee:	e012      	b.n	8008f16 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008ef0:	68ba      	ldr	r2, [r7, #8]
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	7819      	ldrb	r1, [r3, #0]
 8008ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008efa:	69fb      	ldr	r3, [r7, #28]
 8008efc:	4413      	add	r3, r2
 8008efe:	3334      	adds	r3, #52	; 0x34
 8008f00:	460a      	mov	r2, r1
 8008f02:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008f04:	68ba      	ldr	r2, [r7, #8]
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	4413      	add	r3, r2
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d006      	beq.n	8008f1e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	3301      	adds	r3, #1
 8008f14:	61fb      	str	r3, [r7, #28]
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	2b0f      	cmp	r3, #15
 8008f1a:	d9e9      	bls.n	8008ef0 <prvInitialiseNewTask+0x64>
 8008f1c:	e000      	b.n	8008f20 <prvInitialiseNewTask+0x94>
			{
				break;
 8008f1e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f22:	2200      	movs	r2, #0
 8008f24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f28:	e003      	b.n	8008f32 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f34:	2b37      	cmp	r3, #55	; 0x37
 8008f36:	d901      	bls.n	8008f3c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008f38:	2337      	movs	r3, #55	; 0x37
 8008f3a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f40:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f46:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f50:	3304      	adds	r3, #4
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7ff f978 	bl	8008248 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5a:	3318      	adds	r3, #24
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7ff f973 	bl	8008248 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f66:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f70:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f76:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f80:	2200      	movs	r2, #0
 8008f82:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f86:	683a      	ldr	r2, [r7, #0]
 8008f88:	68f9      	ldr	r1, [r7, #12]
 8008f8a:	69b8      	ldr	r0, [r7, #24]
 8008f8c:	f001 f9a6 	bl	800a2dc <pxPortInitialiseStack>
 8008f90:	4602      	mov	r2, r0
 8008f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f94:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d002      	beq.n	8008fa2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fa0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fa2:	bf00      	nop
 8008fa4:	3720      	adds	r7, #32
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
	...

08008fac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008fb4:	f001 fabe 	bl	800a534 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008fb8:	4b2d      	ldr	r3, [pc, #180]	; (8009070 <prvAddNewTaskToReadyList+0xc4>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	4a2c      	ldr	r2, [pc, #176]	; (8009070 <prvAddNewTaskToReadyList+0xc4>)
 8008fc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008fc2:	4b2c      	ldr	r3, [pc, #176]	; (8009074 <prvAddNewTaskToReadyList+0xc8>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d109      	bne.n	8008fde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008fca:	4a2a      	ldr	r2, [pc, #168]	; (8009074 <prvAddNewTaskToReadyList+0xc8>)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008fd0:	4b27      	ldr	r3, [pc, #156]	; (8009070 <prvAddNewTaskToReadyList+0xc4>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d110      	bne.n	8008ffa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008fd8:	f000 fc94 	bl	8009904 <prvInitialiseTaskLists>
 8008fdc:	e00d      	b.n	8008ffa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008fde:	4b26      	ldr	r3, [pc, #152]	; (8009078 <prvAddNewTaskToReadyList+0xcc>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d109      	bne.n	8008ffa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008fe6:	4b23      	ldr	r3, [pc, #140]	; (8009074 <prvAddNewTaskToReadyList+0xc8>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d802      	bhi.n	8008ffa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008ff4:	4a1f      	ldr	r2, [pc, #124]	; (8009074 <prvAddNewTaskToReadyList+0xc8>)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008ffa:	4b20      	ldr	r3, [pc, #128]	; (800907c <prvAddNewTaskToReadyList+0xd0>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	3301      	adds	r3, #1
 8009000:	4a1e      	ldr	r2, [pc, #120]	; (800907c <prvAddNewTaskToReadyList+0xd0>)
 8009002:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009004:	4b1d      	ldr	r3, [pc, #116]	; (800907c <prvAddNewTaskToReadyList+0xd0>)
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009010:	4b1b      	ldr	r3, [pc, #108]	; (8009080 <prvAddNewTaskToReadyList+0xd4>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	429a      	cmp	r2, r3
 8009016:	d903      	bls.n	8009020 <prvAddNewTaskToReadyList+0x74>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800901c:	4a18      	ldr	r2, [pc, #96]	; (8009080 <prvAddNewTaskToReadyList+0xd4>)
 800901e:	6013      	str	r3, [r2, #0]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009024:	4613      	mov	r3, r2
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	4413      	add	r3, r2
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	4a15      	ldr	r2, [pc, #84]	; (8009084 <prvAddNewTaskToReadyList+0xd8>)
 800902e:	441a      	add	r2, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	3304      	adds	r3, #4
 8009034:	4619      	mov	r1, r3
 8009036:	4610      	mov	r0, r2
 8009038:	f7ff f913 	bl	8008262 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800903c:	f001 faaa 	bl	800a594 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009040:	4b0d      	ldr	r3, [pc, #52]	; (8009078 <prvAddNewTaskToReadyList+0xcc>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00e      	beq.n	8009066 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009048:	4b0a      	ldr	r3, [pc, #40]	; (8009074 <prvAddNewTaskToReadyList+0xc8>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009052:	429a      	cmp	r2, r3
 8009054:	d207      	bcs.n	8009066 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009056:	4b0c      	ldr	r3, [pc, #48]	; (8009088 <prvAddNewTaskToReadyList+0xdc>)
 8009058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800905c:	601a      	str	r2, [r3, #0]
 800905e:	f3bf 8f4f 	dsb	sy
 8009062:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009066:	bf00      	nop
 8009068:	3708      	adds	r7, #8
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	20000ecc 	.word	0x20000ecc
 8009074:	200009f8 	.word	0x200009f8
 8009078:	20000ed8 	.word	0x20000ed8
 800907c:	20000ee8 	.word	0x20000ee8
 8009080:	20000ed4 	.word	0x20000ed4
 8009084:	200009fc 	.word	0x200009fc
 8009088:	e000ed04 	.word	0xe000ed04

0800908c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800908c:	b580      	push	{r7, lr}
 800908e:	b08a      	sub	sp, #40	; 0x28
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8009096:	2300      	movs	r3, #0
 8009098:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d10a      	bne.n	80090b6 <vTaskDelayUntil+0x2a>
	__asm volatile
 80090a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a4:	f383 8811 	msr	BASEPRI, r3
 80090a8:	f3bf 8f6f 	isb	sy
 80090ac:	f3bf 8f4f 	dsb	sy
 80090b0:	617b      	str	r3, [r7, #20]
}
 80090b2:	bf00      	nop
 80090b4:	e7fe      	b.n	80090b4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d10a      	bne.n	80090d2 <vTaskDelayUntil+0x46>
	__asm volatile
 80090bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c0:	f383 8811 	msr	BASEPRI, r3
 80090c4:	f3bf 8f6f 	isb	sy
 80090c8:	f3bf 8f4f 	dsb	sy
 80090cc:	613b      	str	r3, [r7, #16]
}
 80090ce:	bf00      	nop
 80090d0:	e7fe      	b.n	80090d0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80090d2:	4b2a      	ldr	r3, [pc, #168]	; (800917c <vTaskDelayUntil+0xf0>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d00a      	beq.n	80090f0 <vTaskDelayUntil+0x64>
	__asm volatile
 80090da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090de:	f383 8811 	msr	BASEPRI, r3
 80090e2:	f3bf 8f6f 	isb	sy
 80090e6:	f3bf 8f4f 	dsb	sy
 80090ea:	60fb      	str	r3, [r7, #12]
}
 80090ec:	bf00      	nop
 80090ee:	e7fe      	b.n	80090ee <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80090f0:	f000 f8e4 	bl	80092bc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80090f4:	4b22      	ldr	r3, [pc, #136]	; (8009180 <vTaskDelayUntil+0xf4>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	683a      	ldr	r2, [r7, #0]
 8009100:	4413      	add	r3, r2
 8009102:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	6a3a      	ldr	r2, [r7, #32]
 800910a:	429a      	cmp	r2, r3
 800910c:	d20b      	bcs.n	8009126 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	69fa      	ldr	r2, [r7, #28]
 8009114:	429a      	cmp	r2, r3
 8009116:	d211      	bcs.n	800913c <vTaskDelayUntil+0xb0>
 8009118:	69fa      	ldr	r2, [r7, #28]
 800911a:	6a3b      	ldr	r3, [r7, #32]
 800911c:	429a      	cmp	r2, r3
 800911e:	d90d      	bls.n	800913c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009120:	2301      	movs	r3, #1
 8009122:	627b      	str	r3, [r7, #36]	; 0x24
 8009124:	e00a      	b.n	800913c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	69fa      	ldr	r2, [r7, #28]
 800912c:	429a      	cmp	r2, r3
 800912e:	d303      	bcc.n	8009138 <vTaskDelayUntil+0xac>
 8009130:	69fa      	ldr	r2, [r7, #28]
 8009132:	6a3b      	ldr	r3, [r7, #32]
 8009134:	429a      	cmp	r2, r3
 8009136:	d901      	bls.n	800913c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009138:	2301      	movs	r3, #1
 800913a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	69fa      	ldr	r2, [r7, #28]
 8009140:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8009142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009144:	2b00      	cmp	r3, #0
 8009146:	d006      	beq.n	8009156 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8009148:	69fa      	ldr	r2, [r7, #28]
 800914a:	6a3b      	ldr	r3, [r7, #32]
 800914c:	1ad3      	subs	r3, r2, r3
 800914e:	2100      	movs	r1, #0
 8009150:	4618      	mov	r0, r3
 8009152:	f000 fd21 	bl	8009b98 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8009156:	f000 f8bf 	bl	80092d8 <xTaskResumeAll>
 800915a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800915c:	69bb      	ldr	r3, [r7, #24]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d107      	bne.n	8009172 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8009162:	4b08      	ldr	r3, [pc, #32]	; (8009184 <vTaskDelayUntil+0xf8>)
 8009164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009168:	601a      	str	r2, [r3, #0]
 800916a:	f3bf 8f4f 	dsb	sy
 800916e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009172:	bf00      	nop
 8009174:	3728      	adds	r7, #40	; 0x28
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	20000ef4 	.word	0x20000ef4
 8009180:	20000ed0 	.word	0x20000ed0
 8009184:	e000ed04 	.word	0xe000ed04

08009188 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009190:	2300      	movs	r3, #0
 8009192:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d017      	beq.n	80091ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800919a:	4b13      	ldr	r3, [pc, #76]	; (80091e8 <vTaskDelay+0x60>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d00a      	beq.n	80091b8 <vTaskDelay+0x30>
	__asm volatile
 80091a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a6:	f383 8811 	msr	BASEPRI, r3
 80091aa:	f3bf 8f6f 	isb	sy
 80091ae:	f3bf 8f4f 	dsb	sy
 80091b2:	60bb      	str	r3, [r7, #8]
}
 80091b4:	bf00      	nop
 80091b6:	e7fe      	b.n	80091b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80091b8:	f000 f880 	bl	80092bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80091bc:	2100      	movs	r1, #0
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 fcea 	bl	8009b98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80091c4:	f000 f888 	bl	80092d8 <xTaskResumeAll>
 80091c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d107      	bne.n	80091e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80091d0:	4b06      	ldr	r3, [pc, #24]	; (80091ec <vTaskDelay+0x64>)
 80091d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091d6:	601a      	str	r2, [r3, #0]
 80091d8:	f3bf 8f4f 	dsb	sy
 80091dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80091e0:	bf00      	nop
 80091e2:	3710      	adds	r7, #16
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}
 80091e8:	20000ef4 	.word	0x20000ef4
 80091ec:	e000ed04 	.word	0xe000ed04

080091f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b08a      	sub	sp, #40	; 0x28
 80091f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80091f6:	2300      	movs	r3, #0
 80091f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80091fa:	2300      	movs	r3, #0
 80091fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80091fe:	463a      	mov	r2, r7
 8009200:	1d39      	adds	r1, r7, #4
 8009202:	f107 0308 	add.w	r3, r7, #8
 8009206:	4618      	mov	r0, r3
 8009208:	f7fe ffca 	bl	80081a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800920c:	6839      	ldr	r1, [r7, #0]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	68ba      	ldr	r2, [r7, #8]
 8009212:	9202      	str	r2, [sp, #8]
 8009214:	9301      	str	r3, [sp, #4]
 8009216:	2300      	movs	r3, #0
 8009218:	9300      	str	r3, [sp, #0]
 800921a:	2300      	movs	r3, #0
 800921c:	460a      	mov	r2, r1
 800921e:	4921      	ldr	r1, [pc, #132]	; (80092a4 <vTaskStartScheduler+0xb4>)
 8009220:	4821      	ldr	r0, [pc, #132]	; (80092a8 <vTaskStartScheduler+0xb8>)
 8009222:	f7ff fd91 	bl	8008d48 <xTaskCreateStatic>
 8009226:	4603      	mov	r3, r0
 8009228:	4a20      	ldr	r2, [pc, #128]	; (80092ac <vTaskStartScheduler+0xbc>)
 800922a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800922c:	4b1f      	ldr	r3, [pc, #124]	; (80092ac <vTaskStartScheduler+0xbc>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d002      	beq.n	800923a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009234:	2301      	movs	r3, #1
 8009236:	617b      	str	r3, [r7, #20]
 8009238:	e001      	b.n	800923e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800923a:	2300      	movs	r3, #0
 800923c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	2b01      	cmp	r3, #1
 8009242:	d102      	bne.n	800924a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009244:	f000 fcfc 	bl	8009c40 <xTimerCreateTimerTask>
 8009248:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	2b01      	cmp	r3, #1
 800924e:	d116      	bne.n	800927e <vTaskStartScheduler+0x8e>
	__asm volatile
 8009250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009254:	f383 8811 	msr	BASEPRI, r3
 8009258:	f3bf 8f6f 	isb	sy
 800925c:	f3bf 8f4f 	dsb	sy
 8009260:	613b      	str	r3, [r7, #16]
}
 8009262:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009264:	4b12      	ldr	r3, [pc, #72]	; (80092b0 <vTaskStartScheduler+0xc0>)
 8009266:	f04f 32ff 	mov.w	r2, #4294967295
 800926a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800926c:	4b11      	ldr	r3, [pc, #68]	; (80092b4 <vTaskStartScheduler+0xc4>)
 800926e:	2201      	movs	r2, #1
 8009270:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009272:	4b11      	ldr	r3, [pc, #68]	; (80092b8 <vTaskStartScheduler+0xc8>)
 8009274:	2200      	movs	r2, #0
 8009276:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009278:	f001 f8ba 	bl	800a3f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800927c:	e00e      	b.n	800929c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009284:	d10a      	bne.n	800929c <vTaskStartScheduler+0xac>
	__asm volatile
 8009286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800928a:	f383 8811 	msr	BASEPRI, r3
 800928e:	f3bf 8f6f 	isb	sy
 8009292:	f3bf 8f4f 	dsb	sy
 8009296:	60fb      	str	r3, [r7, #12]
}
 8009298:	bf00      	nop
 800929a:	e7fe      	b.n	800929a <vTaskStartScheduler+0xaa>
}
 800929c:	bf00      	nop
 800929e:	3718      	adds	r7, #24
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	0800baf4 	.word	0x0800baf4
 80092a8:	080098d5 	.word	0x080098d5
 80092ac:	20000ef0 	.word	0x20000ef0
 80092b0:	20000eec 	.word	0x20000eec
 80092b4:	20000ed8 	.word	0x20000ed8
 80092b8:	20000ed0 	.word	0x20000ed0

080092bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80092bc:	b480      	push	{r7}
 80092be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80092c0:	4b04      	ldr	r3, [pc, #16]	; (80092d4 <vTaskSuspendAll+0x18>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	3301      	adds	r3, #1
 80092c6:	4a03      	ldr	r2, [pc, #12]	; (80092d4 <vTaskSuspendAll+0x18>)
 80092c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80092ca:	bf00      	nop
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr
 80092d4:	20000ef4 	.word	0x20000ef4

080092d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80092de:	2300      	movs	r3, #0
 80092e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80092e2:	2300      	movs	r3, #0
 80092e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80092e6:	4b42      	ldr	r3, [pc, #264]	; (80093f0 <xTaskResumeAll+0x118>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d10a      	bne.n	8009304 <xTaskResumeAll+0x2c>
	__asm volatile
 80092ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f2:	f383 8811 	msr	BASEPRI, r3
 80092f6:	f3bf 8f6f 	isb	sy
 80092fa:	f3bf 8f4f 	dsb	sy
 80092fe:	603b      	str	r3, [r7, #0]
}
 8009300:	bf00      	nop
 8009302:	e7fe      	b.n	8009302 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009304:	f001 f916 	bl	800a534 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009308:	4b39      	ldr	r3, [pc, #228]	; (80093f0 <xTaskResumeAll+0x118>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	3b01      	subs	r3, #1
 800930e:	4a38      	ldr	r2, [pc, #224]	; (80093f0 <xTaskResumeAll+0x118>)
 8009310:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009312:	4b37      	ldr	r3, [pc, #220]	; (80093f0 <xTaskResumeAll+0x118>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d162      	bne.n	80093e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800931a:	4b36      	ldr	r3, [pc, #216]	; (80093f4 <xTaskResumeAll+0x11c>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d05e      	beq.n	80093e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009322:	e02f      	b.n	8009384 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009324:	4b34      	ldr	r3, [pc, #208]	; (80093f8 <xTaskResumeAll+0x120>)
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	3318      	adds	r3, #24
 8009330:	4618      	mov	r0, r3
 8009332:	f7fe fff3 	bl	800831c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	3304      	adds	r3, #4
 800933a:	4618      	mov	r0, r3
 800933c:	f7fe ffee 	bl	800831c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009344:	4b2d      	ldr	r3, [pc, #180]	; (80093fc <xTaskResumeAll+0x124>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	429a      	cmp	r2, r3
 800934a:	d903      	bls.n	8009354 <xTaskResumeAll+0x7c>
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009350:	4a2a      	ldr	r2, [pc, #168]	; (80093fc <xTaskResumeAll+0x124>)
 8009352:	6013      	str	r3, [r2, #0]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009358:	4613      	mov	r3, r2
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	4413      	add	r3, r2
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	4a27      	ldr	r2, [pc, #156]	; (8009400 <xTaskResumeAll+0x128>)
 8009362:	441a      	add	r2, r3
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	3304      	adds	r3, #4
 8009368:	4619      	mov	r1, r3
 800936a:	4610      	mov	r0, r2
 800936c:	f7fe ff79 	bl	8008262 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009374:	4b23      	ldr	r3, [pc, #140]	; (8009404 <xTaskResumeAll+0x12c>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800937a:	429a      	cmp	r2, r3
 800937c:	d302      	bcc.n	8009384 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800937e:	4b22      	ldr	r3, [pc, #136]	; (8009408 <xTaskResumeAll+0x130>)
 8009380:	2201      	movs	r2, #1
 8009382:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009384:	4b1c      	ldr	r3, [pc, #112]	; (80093f8 <xTaskResumeAll+0x120>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d1cb      	bne.n	8009324 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d001      	beq.n	8009396 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009392:	f000 fb55 	bl	8009a40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009396:	4b1d      	ldr	r3, [pc, #116]	; (800940c <xTaskResumeAll+0x134>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d010      	beq.n	80093c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80093a2:	f000 f847 	bl	8009434 <xTaskIncrementTick>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d002      	beq.n	80093b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80093ac:	4b16      	ldr	r3, [pc, #88]	; (8009408 <xTaskResumeAll+0x130>)
 80093ae:	2201      	movs	r2, #1
 80093b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	3b01      	subs	r3, #1
 80093b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d1f1      	bne.n	80093a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80093be:	4b13      	ldr	r3, [pc, #76]	; (800940c <xTaskResumeAll+0x134>)
 80093c0:	2200      	movs	r2, #0
 80093c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80093c4:	4b10      	ldr	r3, [pc, #64]	; (8009408 <xTaskResumeAll+0x130>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d009      	beq.n	80093e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80093cc:	2301      	movs	r3, #1
 80093ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80093d0:	4b0f      	ldr	r3, [pc, #60]	; (8009410 <xTaskResumeAll+0x138>)
 80093d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093d6:	601a      	str	r2, [r3, #0]
 80093d8:	f3bf 8f4f 	dsb	sy
 80093dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093e0:	f001 f8d8 	bl	800a594 <vPortExitCritical>

	return xAlreadyYielded;
 80093e4:	68bb      	ldr	r3, [r7, #8]
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3710      	adds	r7, #16
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	bf00      	nop
 80093f0:	20000ef4 	.word	0x20000ef4
 80093f4:	20000ecc 	.word	0x20000ecc
 80093f8:	20000e8c 	.word	0x20000e8c
 80093fc:	20000ed4 	.word	0x20000ed4
 8009400:	200009fc 	.word	0x200009fc
 8009404:	200009f8 	.word	0x200009f8
 8009408:	20000ee0 	.word	0x20000ee0
 800940c:	20000edc 	.word	0x20000edc
 8009410:	e000ed04 	.word	0xe000ed04

08009414 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800941a:	4b05      	ldr	r3, [pc, #20]	; (8009430 <xTaskGetTickCount+0x1c>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009420:	687b      	ldr	r3, [r7, #4]
}
 8009422:	4618      	mov	r0, r3
 8009424:	370c      	adds	r7, #12
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr
 800942e:	bf00      	nop
 8009430:	20000ed0 	.word	0x20000ed0

08009434 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b086      	sub	sp, #24
 8009438:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800943a:	2300      	movs	r3, #0
 800943c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800943e:	4b4f      	ldr	r3, [pc, #316]	; (800957c <xTaskIncrementTick+0x148>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	f040 808f 	bne.w	8009566 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009448:	4b4d      	ldr	r3, [pc, #308]	; (8009580 <xTaskIncrementTick+0x14c>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	3301      	adds	r3, #1
 800944e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009450:	4a4b      	ldr	r2, [pc, #300]	; (8009580 <xTaskIncrementTick+0x14c>)
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d120      	bne.n	800949e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800945c:	4b49      	ldr	r3, [pc, #292]	; (8009584 <xTaskIncrementTick+0x150>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d00a      	beq.n	800947c <xTaskIncrementTick+0x48>
	__asm volatile
 8009466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946a:	f383 8811 	msr	BASEPRI, r3
 800946e:	f3bf 8f6f 	isb	sy
 8009472:	f3bf 8f4f 	dsb	sy
 8009476:	603b      	str	r3, [r7, #0]
}
 8009478:	bf00      	nop
 800947a:	e7fe      	b.n	800947a <xTaskIncrementTick+0x46>
 800947c:	4b41      	ldr	r3, [pc, #260]	; (8009584 <xTaskIncrementTick+0x150>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	60fb      	str	r3, [r7, #12]
 8009482:	4b41      	ldr	r3, [pc, #260]	; (8009588 <xTaskIncrementTick+0x154>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a3f      	ldr	r2, [pc, #252]	; (8009584 <xTaskIncrementTick+0x150>)
 8009488:	6013      	str	r3, [r2, #0]
 800948a:	4a3f      	ldr	r2, [pc, #252]	; (8009588 <xTaskIncrementTick+0x154>)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6013      	str	r3, [r2, #0]
 8009490:	4b3e      	ldr	r3, [pc, #248]	; (800958c <xTaskIncrementTick+0x158>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	3301      	adds	r3, #1
 8009496:	4a3d      	ldr	r2, [pc, #244]	; (800958c <xTaskIncrementTick+0x158>)
 8009498:	6013      	str	r3, [r2, #0]
 800949a:	f000 fad1 	bl	8009a40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800949e:	4b3c      	ldr	r3, [pc, #240]	; (8009590 <xTaskIncrementTick+0x15c>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	693a      	ldr	r2, [r7, #16]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d349      	bcc.n	800953c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094a8:	4b36      	ldr	r3, [pc, #216]	; (8009584 <xTaskIncrementTick+0x150>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d104      	bne.n	80094bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094b2:	4b37      	ldr	r3, [pc, #220]	; (8009590 <xTaskIncrementTick+0x15c>)
 80094b4:	f04f 32ff 	mov.w	r2, #4294967295
 80094b8:	601a      	str	r2, [r3, #0]
					break;
 80094ba:	e03f      	b.n	800953c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094bc:	4b31      	ldr	r3, [pc, #196]	; (8009584 <xTaskIncrementTick+0x150>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80094cc:	693a      	ldr	r2, [r7, #16]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d203      	bcs.n	80094dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80094d4:	4a2e      	ldr	r2, [pc, #184]	; (8009590 <xTaskIncrementTick+0x15c>)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80094da:	e02f      	b.n	800953c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	3304      	adds	r3, #4
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7fe ff1b 	bl	800831c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d004      	beq.n	80094f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	3318      	adds	r3, #24
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7fe ff12 	bl	800831c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094fc:	4b25      	ldr	r3, [pc, #148]	; (8009594 <xTaskIncrementTick+0x160>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	429a      	cmp	r2, r3
 8009502:	d903      	bls.n	800950c <xTaskIncrementTick+0xd8>
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009508:	4a22      	ldr	r2, [pc, #136]	; (8009594 <xTaskIncrementTick+0x160>)
 800950a:	6013      	str	r3, [r2, #0]
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009510:	4613      	mov	r3, r2
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	4413      	add	r3, r2
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	4a1f      	ldr	r2, [pc, #124]	; (8009598 <xTaskIncrementTick+0x164>)
 800951a:	441a      	add	r2, r3
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	3304      	adds	r3, #4
 8009520:	4619      	mov	r1, r3
 8009522:	4610      	mov	r0, r2
 8009524:	f7fe fe9d 	bl	8008262 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800952c:	4b1b      	ldr	r3, [pc, #108]	; (800959c <xTaskIncrementTick+0x168>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009532:	429a      	cmp	r2, r3
 8009534:	d3b8      	bcc.n	80094a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009536:	2301      	movs	r3, #1
 8009538:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800953a:	e7b5      	b.n	80094a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800953c:	4b17      	ldr	r3, [pc, #92]	; (800959c <xTaskIncrementTick+0x168>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009542:	4915      	ldr	r1, [pc, #84]	; (8009598 <xTaskIncrementTick+0x164>)
 8009544:	4613      	mov	r3, r2
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	4413      	add	r3, r2
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	440b      	add	r3, r1
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2b01      	cmp	r3, #1
 8009552:	d901      	bls.n	8009558 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009554:	2301      	movs	r3, #1
 8009556:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009558:	4b11      	ldr	r3, [pc, #68]	; (80095a0 <xTaskIncrementTick+0x16c>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d007      	beq.n	8009570 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009560:	2301      	movs	r3, #1
 8009562:	617b      	str	r3, [r7, #20]
 8009564:	e004      	b.n	8009570 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009566:	4b0f      	ldr	r3, [pc, #60]	; (80095a4 <xTaskIncrementTick+0x170>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	3301      	adds	r3, #1
 800956c:	4a0d      	ldr	r2, [pc, #52]	; (80095a4 <xTaskIncrementTick+0x170>)
 800956e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009570:	697b      	ldr	r3, [r7, #20]
}
 8009572:	4618      	mov	r0, r3
 8009574:	3718      	adds	r7, #24
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
 800957a:	bf00      	nop
 800957c:	20000ef4 	.word	0x20000ef4
 8009580:	20000ed0 	.word	0x20000ed0
 8009584:	20000e84 	.word	0x20000e84
 8009588:	20000e88 	.word	0x20000e88
 800958c:	20000ee4 	.word	0x20000ee4
 8009590:	20000eec 	.word	0x20000eec
 8009594:	20000ed4 	.word	0x20000ed4
 8009598:	200009fc 	.word	0x200009fc
 800959c:	200009f8 	.word	0x200009f8
 80095a0:	20000ee0 	.word	0x20000ee0
 80095a4:	20000edc 	.word	0x20000edc

080095a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80095ae:	4b28      	ldr	r3, [pc, #160]	; (8009650 <vTaskSwitchContext+0xa8>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d003      	beq.n	80095be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80095b6:	4b27      	ldr	r3, [pc, #156]	; (8009654 <vTaskSwitchContext+0xac>)
 80095b8:	2201      	movs	r2, #1
 80095ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80095bc:	e041      	b.n	8009642 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80095be:	4b25      	ldr	r3, [pc, #148]	; (8009654 <vTaskSwitchContext+0xac>)
 80095c0:	2200      	movs	r2, #0
 80095c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095c4:	4b24      	ldr	r3, [pc, #144]	; (8009658 <vTaskSwitchContext+0xb0>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	60fb      	str	r3, [r7, #12]
 80095ca:	e010      	b.n	80095ee <vTaskSwitchContext+0x46>
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d10a      	bne.n	80095e8 <vTaskSwitchContext+0x40>
	__asm volatile
 80095d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d6:	f383 8811 	msr	BASEPRI, r3
 80095da:	f3bf 8f6f 	isb	sy
 80095de:	f3bf 8f4f 	dsb	sy
 80095e2:	607b      	str	r3, [r7, #4]
}
 80095e4:	bf00      	nop
 80095e6:	e7fe      	b.n	80095e6 <vTaskSwitchContext+0x3e>
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	3b01      	subs	r3, #1
 80095ec:	60fb      	str	r3, [r7, #12]
 80095ee:	491b      	ldr	r1, [pc, #108]	; (800965c <vTaskSwitchContext+0xb4>)
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	4613      	mov	r3, r2
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	4413      	add	r3, r2
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	440b      	add	r3, r1
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d0e4      	beq.n	80095cc <vTaskSwitchContext+0x24>
 8009602:	68fa      	ldr	r2, [r7, #12]
 8009604:	4613      	mov	r3, r2
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	4413      	add	r3, r2
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	4a13      	ldr	r2, [pc, #76]	; (800965c <vTaskSwitchContext+0xb4>)
 800960e:	4413      	add	r3, r2
 8009610:	60bb      	str	r3, [r7, #8]
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	685a      	ldr	r2, [r3, #4]
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	605a      	str	r2, [r3, #4]
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	685a      	ldr	r2, [r3, #4]
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	3308      	adds	r3, #8
 8009624:	429a      	cmp	r2, r3
 8009626:	d104      	bne.n	8009632 <vTaskSwitchContext+0x8a>
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	685a      	ldr	r2, [r3, #4]
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	605a      	str	r2, [r3, #4]
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	4a09      	ldr	r2, [pc, #36]	; (8009660 <vTaskSwitchContext+0xb8>)
 800963a:	6013      	str	r3, [r2, #0]
 800963c:	4a06      	ldr	r2, [pc, #24]	; (8009658 <vTaskSwitchContext+0xb0>)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	6013      	str	r3, [r2, #0]
}
 8009642:	bf00      	nop
 8009644:	3714      	adds	r7, #20
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr
 800964e:	bf00      	nop
 8009650:	20000ef4 	.word	0x20000ef4
 8009654:	20000ee0 	.word	0x20000ee0
 8009658:	20000ed4 	.word	0x20000ed4
 800965c:	200009fc 	.word	0x200009fc
 8009660:	200009f8 	.word	0x200009f8

08009664 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d10a      	bne.n	800968a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009678:	f383 8811 	msr	BASEPRI, r3
 800967c:	f3bf 8f6f 	isb	sy
 8009680:	f3bf 8f4f 	dsb	sy
 8009684:	60fb      	str	r3, [r7, #12]
}
 8009686:	bf00      	nop
 8009688:	e7fe      	b.n	8009688 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800968a:	4b07      	ldr	r3, [pc, #28]	; (80096a8 <vTaskPlaceOnEventList+0x44>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	3318      	adds	r3, #24
 8009690:	4619      	mov	r1, r3
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f7fe fe09 	bl	80082aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009698:	2101      	movs	r1, #1
 800969a:	6838      	ldr	r0, [r7, #0]
 800969c:	f000 fa7c 	bl	8009b98 <prvAddCurrentTaskToDelayedList>
}
 80096a0:	bf00      	nop
 80096a2:	3710      	adds	r7, #16
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	200009f8 	.word	0x200009f8

080096ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b086      	sub	sp, #24
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	60b9      	str	r1, [r7, #8]
 80096b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d10a      	bne.n	80096d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80096be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c2:	f383 8811 	msr	BASEPRI, r3
 80096c6:	f3bf 8f6f 	isb	sy
 80096ca:	f3bf 8f4f 	dsb	sy
 80096ce:	617b      	str	r3, [r7, #20]
}
 80096d0:	bf00      	nop
 80096d2:	e7fe      	b.n	80096d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096d4:	4b0a      	ldr	r3, [pc, #40]	; (8009700 <vTaskPlaceOnEventListRestricted+0x54>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	3318      	adds	r3, #24
 80096da:	4619      	mov	r1, r3
 80096dc:	68f8      	ldr	r0, [r7, #12]
 80096de:	f7fe fdc0 	bl	8008262 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d002      	beq.n	80096ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80096e8:	f04f 33ff 	mov.w	r3, #4294967295
 80096ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80096ee:	6879      	ldr	r1, [r7, #4]
 80096f0:	68b8      	ldr	r0, [r7, #8]
 80096f2:	f000 fa51 	bl	8009b98 <prvAddCurrentTaskToDelayedList>
	}
 80096f6:	bf00      	nop
 80096f8:	3718      	adds	r7, #24
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	200009f8 	.word	0x200009f8

08009704 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b086      	sub	sp, #24
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d10a      	bne.n	8009730 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800971a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971e:	f383 8811 	msr	BASEPRI, r3
 8009722:	f3bf 8f6f 	isb	sy
 8009726:	f3bf 8f4f 	dsb	sy
 800972a:	60fb      	str	r3, [r7, #12]
}
 800972c:	bf00      	nop
 800972e:	e7fe      	b.n	800972e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	3318      	adds	r3, #24
 8009734:	4618      	mov	r0, r3
 8009736:	f7fe fdf1 	bl	800831c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800973a:	4b1e      	ldr	r3, [pc, #120]	; (80097b4 <xTaskRemoveFromEventList+0xb0>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d11d      	bne.n	800977e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	3304      	adds	r3, #4
 8009746:	4618      	mov	r0, r3
 8009748:	f7fe fde8 	bl	800831c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009750:	4b19      	ldr	r3, [pc, #100]	; (80097b8 <xTaskRemoveFromEventList+0xb4>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	429a      	cmp	r2, r3
 8009756:	d903      	bls.n	8009760 <xTaskRemoveFromEventList+0x5c>
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800975c:	4a16      	ldr	r2, [pc, #88]	; (80097b8 <xTaskRemoveFromEventList+0xb4>)
 800975e:	6013      	str	r3, [r2, #0]
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009764:	4613      	mov	r3, r2
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	4413      	add	r3, r2
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	4a13      	ldr	r2, [pc, #76]	; (80097bc <xTaskRemoveFromEventList+0xb8>)
 800976e:	441a      	add	r2, r3
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	3304      	adds	r3, #4
 8009774:	4619      	mov	r1, r3
 8009776:	4610      	mov	r0, r2
 8009778:	f7fe fd73 	bl	8008262 <vListInsertEnd>
 800977c:	e005      	b.n	800978a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	3318      	adds	r3, #24
 8009782:	4619      	mov	r1, r3
 8009784:	480e      	ldr	r0, [pc, #56]	; (80097c0 <xTaskRemoveFromEventList+0xbc>)
 8009786:	f7fe fd6c 	bl	8008262 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800978e:	4b0d      	ldr	r3, [pc, #52]	; (80097c4 <xTaskRemoveFromEventList+0xc0>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009794:	429a      	cmp	r2, r3
 8009796:	d905      	bls.n	80097a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009798:	2301      	movs	r3, #1
 800979a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800979c:	4b0a      	ldr	r3, [pc, #40]	; (80097c8 <xTaskRemoveFromEventList+0xc4>)
 800979e:	2201      	movs	r2, #1
 80097a0:	601a      	str	r2, [r3, #0]
 80097a2:	e001      	b.n	80097a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80097a4:	2300      	movs	r3, #0
 80097a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80097a8:	697b      	ldr	r3, [r7, #20]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3718      	adds	r7, #24
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	20000ef4 	.word	0x20000ef4
 80097b8:	20000ed4 	.word	0x20000ed4
 80097bc:	200009fc 	.word	0x200009fc
 80097c0:	20000e8c 	.word	0x20000e8c
 80097c4:	200009f8 	.word	0x200009f8
 80097c8:	20000ee0 	.word	0x20000ee0

080097cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80097d4:	4b06      	ldr	r3, [pc, #24]	; (80097f0 <vTaskInternalSetTimeOutState+0x24>)
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80097dc:	4b05      	ldr	r3, [pc, #20]	; (80097f4 <vTaskInternalSetTimeOutState+0x28>)
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	605a      	str	r2, [r3, #4]
}
 80097e4:	bf00      	nop
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr
 80097f0:	20000ee4 	.word	0x20000ee4
 80097f4:	20000ed0 	.word	0x20000ed0

080097f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b088      	sub	sp, #32
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d10a      	bne.n	800981e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980c:	f383 8811 	msr	BASEPRI, r3
 8009810:	f3bf 8f6f 	isb	sy
 8009814:	f3bf 8f4f 	dsb	sy
 8009818:	613b      	str	r3, [r7, #16]
}
 800981a:	bf00      	nop
 800981c:	e7fe      	b.n	800981c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d10a      	bne.n	800983a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009828:	f383 8811 	msr	BASEPRI, r3
 800982c:	f3bf 8f6f 	isb	sy
 8009830:	f3bf 8f4f 	dsb	sy
 8009834:	60fb      	str	r3, [r7, #12]
}
 8009836:	bf00      	nop
 8009838:	e7fe      	b.n	8009838 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800983a:	f000 fe7b 	bl	800a534 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800983e:	4b1d      	ldr	r3, [pc, #116]	; (80098b4 <xTaskCheckForTimeOut+0xbc>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	69ba      	ldr	r2, [r7, #24]
 800984a:	1ad3      	subs	r3, r2, r3
 800984c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009856:	d102      	bne.n	800985e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009858:	2300      	movs	r3, #0
 800985a:	61fb      	str	r3, [r7, #28]
 800985c:	e023      	b.n	80098a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	4b15      	ldr	r3, [pc, #84]	; (80098b8 <xTaskCheckForTimeOut+0xc0>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	429a      	cmp	r2, r3
 8009868:	d007      	beq.n	800987a <xTaskCheckForTimeOut+0x82>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	69ba      	ldr	r2, [r7, #24]
 8009870:	429a      	cmp	r2, r3
 8009872:	d302      	bcc.n	800987a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009874:	2301      	movs	r3, #1
 8009876:	61fb      	str	r3, [r7, #28]
 8009878:	e015      	b.n	80098a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	697a      	ldr	r2, [r7, #20]
 8009880:	429a      	cmp	r2, r3
 8009882:	d20b      	bcs.n	800989c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	681a      	ldr	r2, [r3, #0]
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	1ad2      	subs	r2, r2, r3
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f7ff ff9b 	bl	80097cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009896:	2300      	movs	r3, #0
 8009898:	61fb      	str	r3, [r7, #28]
 800989a:	e004      	b.n	80098a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	2200      	movs	r2, #0
 80098a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80098a2:	2301      	movs	r3, #1
 80098a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80098a6:	f000 fe75 	bl	800a594 <vPortExitCritical>

	return xReturn;
 80098aa:	69fb      	ldr	r3, [r7, #28]
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3720      	adds	r7, #32
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}
 80098b4:	20000ed0 	.word	0x20000ed0
 80098b8:	20000ee4 	.word	0x20000ee4

080098bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80098bc:	b480      	push	{r7}
 80098be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80098c0:	4b03      	ldr	r3, [pc, #12]	; (80098d0 <vTaskMissedYield+0x14>)
 80098c2:	2201      	movs	r2, #1
 80098c4:	601a      	str	r2, [r3, #0]
}
 80098c6:	bf00      	nop
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr
 80098d0:	20000ee0 	.word	0x20000ee0

080098d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80098dc:	f000 f852 	bl	8009984 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80098e0:	4b06      	ldr	r3, [pc, #24]	; (80098fc <prvIdleTask+0x28>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d9f9      	bls.n	80098dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80098e8:	4b05      	ldr	r3, [pc, #20]	; (8009900 <prvIdleTask+0x2c>)
 80098ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098ee:	601a      	str	r2, [r3, #0]
 80098f0:	f3bf 8f4f 	dsb	sy
 80098f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80098f8:	e7f0      	b.n	80098dc <prvIdleTask+0x8>
 80098fa:	bf00      	nop
 80098fc:	200009fc 	.word	0x200009fc
 8009900:	e000ed04 	.word	0xe000ed04

08009904 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b082      	sub	sp, #8
 8009908:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800990a:	2300      	movs	r3, #0
 800990c:	607b      	str	r3, [r7, #4]
 800990e:	e00c      	b.n	800992a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	4613      	mov	r3, r2
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	4413      	add	r3, r2
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	4a12      	ldr	r2, [pc, #72]	; (8009964 <prvInitialiseTaskLists+0x60>)
 800991c:	4413      	add	r3, r2
 800991e:	4618      	mov	r0, r3
 8009920:	f7fe fc72 	bl	8008208 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	3301      	adds	r3, #1
 8009928:	607b      	str	r3, [r7, #4]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2b37      	cmp	r3, #55	; 0x37
 800992e:	d9ef      	bls.n	8009910 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009930:	480d      	ldr	r0, [pc, #52]	; (8009968 <prvInitialiseTaskLists+0x64>)
 8009932:	f7fe fc69 	bl	8008208 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009936:	480d      	ldr	r0, [pc, #52]	; (800996c <prvInitialiseTaskLists+0x68>)
 8009938:	f7fe fc66 	bl	8008208 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800993c:	480c      	ldr	r0, [pc, #48]	; (8009970 <prvInitialiseTaskLists+0x6c>)
 800993e:	f7fe fc63 	bl	8008208 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009942:	480c      	ldr	r0, [pc, #48]	; (8009974 <prvInitialiseTaskLists+0x70>)
 8009944:	f7fe fc60 	bl	8008208 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009948:	480b      	ldr	r0, [pc, #44]	; (8009978 <prvInitialiseTaskLists+0x74>)
 800994a:	f7fe fc5d 	bl	8008208 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800994e:	4b0b      	ldr	r3, [pc, #44]	; (800997c <prvInitialiseTaskLists+0x78>)
 8009950:	4a05      	ldr	r2, [pc, #20]	; (8009968 <prvInitialiseTaskLists+0x64>)
 8009952:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009954:	4b0a      	ldr	r3, [pc, #40]	; (8009980 <prvInitialiseTaskLists+0x7c>)
 8009956:	4a05      	ldr	r2, [pc, #20]	; (800996c <prvInitialiseTaskLists+0x68>)
 8009958:	601a      	str	r2, [r3, #0]
}
 800995a:	bf00      	nop
 800995c:	3708      	adds	r7, #8
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
 8009962:	bf00      	nop
 8009964:	200009fc 	.word	0x200009fc
 8009968:	20000e5c 	.word	0x20000e5c
 800996c:	20000e70 	.word	0x20000e70
 8009970:	20000e8c 	.word	0x20000e8c
 8009974:	20000ea0 	.word	0x20000ea0
 8009978:	20000eb8 	.word	0x20000eb8
 800997c:	20000e84 	.word	0x20000e84
 8009980:	20000e88 	.word	0x20000e88

08009984 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b082      	sub	sp, #8
 8009988:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800998a:	e019      	b.n	80099c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800998c:	f000 fdd2 	bl	800a534 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009990:	4b10      	ldr	r3, [pc, #64]	; (80099d4 <prvCheckTasksWaitingTermination+0x50>)
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	68db      	ldr	r3, [r3, #12]
 8009996:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	3304      	adds	r3, #4
 800999c:	4618      	mov	r0, r3
 800999e:	f7fe fcbd 	bl	800831c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80099a2:	4b0d      	ldr	r3, [pc, #52]	; (80099d8 <prvCheckTasksWaitingTermination+0x54>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	3b01      	subs	r3, #1
 80099a8:	4a0b      	ldr	r2, [pc, #44]	; (80099d8 <prvCheckTasksWaitingTermination+0x54>)
 80099aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80099ac:	4b0b      	ldr	r3, [pc, #44]	; (80099dc <prvCheckTasksWaitingTermination+0x58>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	3b01      	subs	r3, #1
 80099b2:	4a0a      	ldr	r2, [pc, #40]	; (80099dc <prvCheckTasksWaitingTermination+0x58>)
 80099b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80099b6:	f000 fded 	bl	800a594 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 f810 	bl	80099e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099c0:	4b06      	ldr	r3, [pc, #24]	; (80099dc <prvCheckTasksWaitingTermination+0x58>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d1e1      	bne.n	800998c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80099c8:	bf00      	nop
 80099ca:	bf00      	nop
 80099cc:	3708      	adds	r7, #8
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	20000ea0 	.word	0x20000ea0
 80099d8:	20000ecc 	.word	0x20000ecc
 80099dc:	20000eb4 	.word	0x20000eb4

080099e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b084      	sub	sp, #16
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d108      	bne.n	8009a04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099f6:	4618      	mov	r0, r3
 80099f8:	f000 ff8a 	bl	800a910 <vPortFree>
				vPortFree( pxTCB );
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 ff87 	bl	800a910 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009a02:	e018      	b.n	8009a36 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d103      	bne.n	8009a16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 ff7e 	bl	800a910 <vPortFree>
	}
 8009a14:	e00f      	b.n	8009a36 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009a1c:	2b02      	cmp	r3, #2
 8009a1e:	d00a      	beq.n	8009a36 <prvDeleteTCB+0x56>
	__asm volatile
 8009a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a24:	f383 8811 	msr	BASEPRI, r3
 8009a28:	f3bf 8f6f 	isb	sy
 8009a2c:	f3bf 8f4f 	dsb	sy
 8009a30:	60fb      	str	r3, [r7, #12]
}
 8009a32:	bf00      	nop
 8009a34:	e7fe      	b.n	8009a34 <prvDeleteTCB+0x54>
	}
 8009a36:	bf00      	nop
 8009a38:	3710      	adds	r7, #16
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
	...

08009a40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a40:	b480      	push	{r7}
 8009a42:	b083      	sub	sp, #12
 8009a44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a46:	4b0c      	ldr	r3, [pc, #48]	; (8009a78 <prvResetNextTaskUnblockTime+0x38>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d104      	bne.n	8009a5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009a50:	4b0a      	ldr	r3, [pc, #40]	; (8009a7c <prvResetNextTaskUnblockTime+0x3c>)
 8009a52:	f04f 32ff 	mov.w	r2, #4294967295
 8009a56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009a58:	e008      	b.n	8009a6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a5a:	4b07      	ldr	r3, [pc, #28]	; (8009a78 <prvResetNextTaskUnblockTime+0x38>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	68db      	ldr	r3, [r3, #12]
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	4a04      	ldr	r2, [pc, #16]	; (8009a7c <prvResetNextTaskUnblockTime+0x3c>)
 8009a6a:	6013      	str	r3, [r2, #0]
}
 8009a6c:	bf00      	nop
 8009a6e:	370c      	adds	r7, #12
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr
 8009a78:	20000e84 	.word	0x20000e84
 8009a7c:	20000eec 	.word	0x20000eec

08009a80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009a80:	b480      	push	{r7}
 8009a82:	b083      	sub	sp, #12
 8009a84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009a86:	4b0b      	ldr	r3, [pc, #44]	; (8009ab4 <xTaskGetSchedulerState+0x34>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d102      	bne.n	8009a94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	607b      	str	r3, [r7, #4]
 8009a92:	e008      	b.n	8009aa6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a94:	4b08      	ldr	r3, [pc, #32]	; (8009ab8 <xTaskGetSchedulerState+0x38>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d102      	bne.n	8009aa2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009a9c:	2302      	movs	r3, #2
 8009a9e:	607b      	str	r3, [r7, #4]
 8009aa0:	e001      	b.n	8009aa6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009aa6:	687b      	ldr	r3, [r7, #4]
	}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	370c      	adds	r7, #12
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr
 8009ab4:	20000ed8 	.word	0x20000ed8
 8009ab8:	20000ef4 	.word	0x20000ef4

08009abc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b086      	sub	sp, #24
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d056      	beq.n	8009b80 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009ad2:	4b2e      	ldr	r3, [pc, #184]	; (8009b8c <xTaskPriorityDisinherit+0xd0>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	693a      	ldr	r2, [r7, #16]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d00a      	beq.n	8009af2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae0:	f383 8811 	msr	BASEPRI, r3
 8009ae4:	f3bf 8f6f 	isb	sy
 8009ae8:	f3bf 8f4f 	dsb	sy
 8009aec:	60fb      	str	r3, [r7, #12]
}
 8009aee:	bf00      	nop
 8009af0:	e7fe      	b.n	8009af0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d10a      	bne.n	8009b10 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afe:	f383 8811 	msr	BASEPRI, r3
 8009b02:	f3bf 8f6f 	isb	sy
 8009b06:	f3bf 8f4f 	dsb	sy
 8009b0a:	60bb      	str	r3, [r7, #8]
}
 8009b0c:	bf00      	nop
 8009b0e:	e7fe      	b.n	8009b0e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b14:	1e5a      	subs	r2, r3, #1
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d02c      	beq.n	8009b80 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d128      	bne.n	8009b80 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	3304      	adds	r3, #4
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7fe fbf2 	bl	800831c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b50:	4b0f      	ldr	r3, [pc, #60]	; (8009b90 <xTaskPriorityDisinherit+0xd4>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d903      	bls.n	8009b60 <xTaskPriorityDisinherit+0xa4>
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b5c:	4a0c      	ldr	r2, [pc, #48]	; (8009b90 <xTaskPriorityDisinherit+0xd4>)
 8009b5e:	6013      	str	r3, [r2, #0]
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b64:	4613      	mov	r3, r2
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	4413      	add	r3, r2
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	4a09      	ldr	r2, [pc, #36]	; (8009b94 <xTaskPriorityDisinherit+0xd8>)
 8009b6e:	441a      	add	r2, r3
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	3304      	adds	r3, #4
 8009b74:	4619      	mov	r1, r3
 8009b76:	4610      	mov	r0, r2
 8009b78:	f7fe fb73 	bl	8008262 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009b80:	697b      	ldr	r3, [r7, #20]
	}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3718      	adds	r7, #24
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	200009f8 	.word	0x200009f8
 8009b90:	20000ed4 	.word	0x20000ed4
 8009b94:	200009fc 	.word	0x200009fc

08009b98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009ba2:	4b21      	ldr	r3, [pc, #132]	; (8009c28 <prvAddCurrentTaskToDelayedList+0x90>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ba8:	4b20      	ldr	r3, [pc, #128]	; (8009c2c <prvAddCurrentTaskToDelayedList+0x94>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	3304      	adds	r3, #4
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7fe fbb4 	bl	800831c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bba:	d10a      	bne.n	8009bd2 <prvAddCurrentTaskToDelayedList+0x3a>
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d007      	beq.n	8009bd2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bc2:	4b1a      	ldr	r3, [pc, #104]	; (8009c2c <prvAddCurrentTaskToDelayedList+0x94>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	3304      	adds	r3, #4
 8009bc8:	4619      	mov	r1, r3
 8009bca:	4819      	ldr	r0, [pc, #100]	; (8009c30 <prvAddCurrentTaskToDelayedList+0x98>)
 8009bcc:	f7fe fb49 	bl	8008262 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009bd0:	e026      	b.n	8009c20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009bd2:	68fa      	ldr	r2, [r7, #12]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	4413      	add	r3, r2
 8009bd8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009bda:	4b14      	ldr	r3, [pc, #80]	; (8009c2c <prvAddCurrentTaskToDelayedList+0x94>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	68ba      	ldr	r2, [r7, #8]
 8009be0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009be2:	68ba      	ldr	r2, [r7, #8]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d209      	bcs.n	8009bfe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bea:	4b12      	ldr	r3, [pc, #72]	; (8009c34 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	4b0f      	ldr	r3, [pc, #60]	; (8009c2c <prvAddCurrentTaskToDelayedList+0x94>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	3304      	adds	r3, #4
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	4610      	mov	r0, r2
 8009bf8:	f7fe fb57 	bl	80082aa <vListInsert>
}
 8009bfc:	e010      	b.n	8009c20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bfe:	4b0e      	ldr	r3, [pc, #56]	; (8009c38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009c00:	681a      	ldr	r2, [r3, #0]
 8009c02:	4b0a      	ldr	r3, [pc, #40]	; (8009c2c <prvAddCurrentTaskToDelayedList+0x94>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	3304      	adds	r3, #4
 8009c08:	4619      	mov	r1, r3
 8009c0a:	4610      	mov	r0, r2
 8009c0c:	f7fe fb4d 	bl	80082aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009c10:	4b0a      	ldr	r3, [pc, #40]	; (8009c3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	68ba      	ldr	r2, [r7, #8]
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d202      	bcs.n	8009c20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009c1a:	4a08      	ldr	r2, [pc, #32]	; (8009c3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	6013      	str	r3, [r2, #0]
}
 8009c20:	bf00      	nop
 8009c22:	3710      	adds	r7, #16
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}
 8009c28:	20000ed0 	.word	0x20000ed0
 8009c2c:	200009f8 	.word	0x200009f8
 8009c30:	20000eb8 	.word	0x20000eb8
 8009c34:	20000e88 	.word	0x20000e88
 8009c38:	20000e84 	.word	0x20000e84
 8009c3c:	20000eec 	.word	0x20000eec

08009c40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b08a      	sub	sp, #40	; 0x28
 8009c44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009c46:	2300      	movs	r3, #0
 8009c48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009c4a:	f000 fb07 	bl	800a25c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009c4e:	4b1c      	ldr	r3, [pc, #112]	; (8009cc0 <xTimerCreateTimerTask+0x80>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d021      	beq.n	8009c9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009c56:	2300      	movs	r3, #0
 8009c58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009c5e:	1d3a      	adds	r2, r7, #4
 8009c60:	f107 0108 	add.w	r1, r7, #8
 8009c64:	f107 030c 	add.w	r3, r7, #12
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7fe fab3 	bl	80081d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009c6e:	6879      	ldr	r1, [r7, #4]
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	9202      	str	r2, [sp, #8]
 8009c76:	9301      	str	r3, [sp, #4]
 8009c78:	2302      	movs	r3, #2
 8009c7a:	9300      	str	r3, [sp, #0]
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	460a      	mov	r2, r1
 8009c80:	4910      	ldr	r1, [pc, #64]	; (8009cc4 <xTimerCreateTimerTask+0x84>)
 8009c82:	4811      	ldr	r0, [pc, #68]	; (8009cc8 <xTimerCreateTimerTask+0x88>)
 8009c84:	f7ff f860 	bl	8008d48 <xTaskCreateStatic>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	4a10      	ldr	r2, [pc, #64]	; (8009ccc <xTimerCreateTimerTask+0x8c>)
 8009c8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009c8e:	4b0f      	ldr	r3, [pc, #60]	; (8009ccc <xTimerCreateTimerTask+0x8c>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d001      	beq.n	8009c9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009c96:	2301      	movs	r3, #1
 8009c98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d10a      	bne.n	8009cb6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca4:	f383 8811 	msr	BASEPRI, r3
 8009ca8:	f3bf 8f6f 	isb	sy
 8009cac:	f3bf 8f4f 	dsb	sy
 8009cb0:	613b      	str	r3, [r7, #16]
}
 8009cb2:	bf00      	nop
 8009cb4:	e7fe      	b.n	8009cb4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009cb6:	697b      	ldr	r3, [r7, #20]
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3718      	adds	r7, #24
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	20000f28 	.word	0x20000f28
 8009cc4:	0800bafc 	.word	0x0800bafc
 8009cc8:	08009e05 	.word	0x08009e05
 8009ccc:	20000f2c 	.word	0x20000f2c

08009cd0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b08a      	sub	sp, #40	; 0x28
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	607a      	str	r2, [r7, #4]
 8009cdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d10a      	bne.n	8009cfe <xTimerGenericCommand+0x2e>
	__asm volatile
 8009ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cec:	f383 8811 	msr	BASEPRI, r3
 8009cf0:	f3bf 8f6f 	isb	sy
 8009cf4:	f3bf 8f4f 	dsb	sy
 8009cf8:	623b      	str	r3, [r7, #32]
}
 8009cfa:	bf00      	nop
 8009cfc:	e7fe      	b.n	8009cfc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009cfe:	4b1a      	ldr	r3, [pc, #104]	; (8009d68 <xTimerGenericCommand+0x98>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d02a      	beq.n	8009d5c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	2b05      	cmp	r3, #5
 8009d16:	dc18      	bgt.n	8009d4a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009d18:	f7ff feb2 	bl	8009a80 <xTaskGetSchedulerState>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	2b02      	cmp	r3, #2
 8009d20:	d109      	bne.n	8009d36 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009d22:	4b11      	ldr	r3, [pc, #68]	; (8009d68 <xTimerGenericCommand+0x98>)
 8009d24:	6818      	ldr	r0, [r3, #0]
 8009d26:	f107 0110 	add.w	r1, r7, #16
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d2e:	f7fe fc23 	bl	8008578 <xQueueGenericSend>
 8009d32:	6278      	str	r0, [r7, #36]	; 0x24
 8009d34:	e012      	b.n	8009d5c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009d36:	4b0c      	ldr	r3, [pc, #48]	; (8009d68 <xTimerGenericCommand+0x98>)
 8009d38:	6818      	ldr	r0, [r3, #0]
 8009d3a:	f107 0110 	add.w	r1, r7, #16
 8009d3e:	2300      	movs	r3, #0
 8009d40:	2200      	movs	r2, #0
 8009d42:	f7fe fc19 	bl	8008578 <xQueueGenericSend>
 8009d46:	6278      	str	r0, [r7, #36]	; 0x24
 8009d48:	e008      	b.n	8009d5c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009d4a:	4b07      	ldr	r3, [pc, #28]	; (8009d68 <xTimerGenericCommand+0x98>)
 8009d4c:	6818      	ldr	r0, [r3, #0]
 8009d4e:	f107 0110 	add.w	r1, r7, #16
 8009d52:	2300      	movs	r3, #0
 8009d54:	683a      	ldr	r2, [r7, #0]
 8009d56:	f7fe fd0d 	bl	8008774 <xQueueGenericSendFromISR>
 8009d5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3728      	adds	r7, #40	; 0x28
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	bf00      	nop
 8009d68:	20000f28 	.word	0x20000f28

08009d6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b088      	sub	sp, #32
 8009d70:	af02      	add	r7, sp, #8
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d76:	4b22      	ldr	r3, [pc, #136]	; (8009e00 <prvProcessExpiredTimer+0x94>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	68db      	ldr	r3, [r3, #12]
 8009d7c:	68db      	ldr	r3, [r3, #12]
 8009d7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	3304      	adds	r3, #4
 8009d84:	4618      	mov	r0, r3
 8009d86:	f7fe fac9 	bl	800831c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d90:	f003 0304 	and.w	r3, r3, #4
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d022      	beq.n	8009dde <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	699a      	ldr	r2, [r3, #24]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	18d1      	adds	r1, r2, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	683a      	ldr	r2, [r7, #0]
 8009da4:	6978      	ldr	r0, [r7, #20]
 8009da6:	f000 f8d1 	bl	8009f4c <prvInsertTimerInActiveList>
 8009daa:	4603      	mov	r3, r0
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d01f      	beq.n	8009df0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009db0:	2300      	movs	r3, #0
 8009db2:	9300      	str	r3, [sp, #0]
 8009db4:	2300      	movs	r3, #0
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	2100      	movs	r1, #0
 8009dba:	6978      	ldr	r0, [r7, #20]
 8009dbc:	f7ff ff88 	bl	8009cd0 <xTimerGenericCommand>
 8009dc0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d113      	bne.n	8009df0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dcc:	f383 8811 	msr	BASEPRI, r3
 8009dd0:	f3bf 8f6f 	isb	sy
 8009dd4:	f3bf 8f4f 	dsb	sy
 8009dd8:	60fb      	str	r3, [r7, #12]
}
 8009dda:	bf00      	nop
 8009ddc:	e7fe      	b.n	8009ddc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009de4:	f023 0301 	bic.w	r3, r3, #1
 8009de8:	b2da      	uxtb	r2, r3
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	6a1b      	ldr	r3, [r3, #32]
 8009df4:	6978      	ldr	r0, [r7, #20]
 8009df6:	4798      	blx	r3
}
 8009df8:	bf00      	nop
 8009dfa:	3718      	adds	r7, #24
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	20000f20 	.word	0x20000f20

08009e04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b084      	sub	sp, #16
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e0c:	f107 0308 	add.w	r3, r7, #8
 8009e10:	4618      	mov	r0, r3
 8009e12:	f000 f857 	bl	8009ec4 <prvGetNextExpireTime>
 8009e16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	f000 f803 	bl	8009e28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009e22:	f000 f8d5 	bl	8009fd0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e26:	e7f1      	b.n	8009e0c <prvTimerTask+0x8>

08009e28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009e32:	f7ff fa43 	bl	80092bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e36:	f107 0308 	add.w	r3, r7, #8
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f000 f866 	bl	8009f0c <prvSampleTimeNow>
 8009e40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d130      	bne.n	8009eaa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d10a      	bne.n	8009e64 <prvProcessTimerOrBlockTask+0x3c>
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d806      	bhi.n	8009e64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009e56:	f7ff fa3f 	bl	80092d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009e5a:	68f9      	ldr	r1, [r7, #12]
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f7ff ff85 	bl	8009d6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009e62:	e024      	b.n	8009eae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d008      	beq.n	8009e7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009e6a:	4b13      	ldr	r3, [pc, #76]	; (8009eb8 <prvProcessTimerOrBlockTask+0x90>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d101      	bne.n	8009e78 <prvProcessTimerOrBlockTask+0x50>
 8009e74:	2301      	movs	r3, #1
 8009e76:	e000      	b.n	8009e7a <prvProcessTimerOrBlockTask+0x52>
 8009e78:	2300      	movs	r3, #0
 8009e7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009e7c:	4b0f      	ldr	r3, [pc, #60]	; (8009ebc <prvProcessTimerOrBlockTask+0x94>)
 8009e7e:	6818      	ldr	r0, [r3, #0]
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	1ad3      	subs	r3, r2, r3
 8009e86:	683a      	ldr	r2, [r7, #0]
 8009e88:	4619      	mov	r1, r3
 8009e8a:	f7fe ff29 	bl	8008ce0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009e8e:	f7ff fa23 	bl	80092d8 <xTaskResumeAll>
 8009e92:	4603      	mov	r3, r0
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d10a      	bne.n	8009eae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009e98:	4b09      	ldr	r3, [pc, #36]	; (8009ec0 <prvProcessTimerOrBlockTask+0x98>)
 8009e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e9e:	601a      	str	r2, [r3, #0]
 8009ea0:	f3bf 8f4f 	dsb	sy
 8009ea4:	f3bf 8f6f 	isb	sy
}
 8009ea8:	e001      	b.n	8009eae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009eaa:	f7ff fa15 	bl	80092d8 <xTaskResumeAll>
}
 8009eae:	bf00      	nop
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	20000f24 	.word	0x20000f24
 8009ebc:	20000f28 	.word	0x20000f28
 8009ec0:	e000ed04 	.word	0xe000ed04

08009ec4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b085      	sub	sp, #20
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009ecc:	4b0e      	ldr	r3, [pc, #56]	; (8009f08 <prvGetNextExpireTime+0x44>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d101      	bne.n	8009eda <prvGetNextExpireTime+0x16>
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	e000      	b.n	8009edc <prvGetNextExpireTime+0x18>
 8009eda:	2200      	movs	r2, #0
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d105      	bne.n	8009ef4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009ee8:	4b07      	ldr	r3, [pc, #28]	; (8009f08 <prvGetNextExpireTime+0x44>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	68db      	ldr	r3, [r3, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	60fb      	str	r3, [r7, #12]
 8009ef2:	e001      	b.n	8009ef8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3714      	adds	r7, #20
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr
 8009f06:	bf00      	nop
 8009f08:	20000f20 	.word	0x20000f20

08009f0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009f14:	f7ff fa7e 	bl	8009414 <xTaskGetTickCount>
 8009f18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009f1a:	4b0b      	ldr	r3, [pc, #44]	; (8009f48 <prvSampleTimeNow+0x3c>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	68fa      	ldr	r2, [r7, #12]
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d205      	bcs.n	8009f30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009f24:	f000 f936 	bl	800a194 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	601a      	str	r2, [r3, #0]
 8009f2e:	e002      	b.n	8009f36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009f36:	4a04      	ldr	r2, [pc, #16]	; (8009f48 <prvSampleTimeNow+0x3c>)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3710      	adds	r7, #16
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	20000f30 	.word	0x20000f30

08009f4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b086      	sub	sp, #24
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	60b9      	str	r1, [r7, #8]
 8009f56:	607a      	str	r2, [r7, #4]
 8009f58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	68ba      	ldr	r2, [r7, #8]
 8009f62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	68fa      	ldr	r2, [r7, #12]
 8009f68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009f6a:	68ba      	ldr	r2, [r7, #8]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d812      	bhi.n	8009f98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	1ad2      	subs	r2, r2, r3
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	699b      	ldr	r3, [r3, #24]
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d302      	bcc.n	8009f86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009f80:	2301      	movs	r3, #1
 8009f82:	617b      	str	r3, [r7, #20]
 8009f84:	e01b      	b.n	8009fbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009f86:	4b10      	ldr	r3, [pc, #64]	; (8009fc8 <prvInsertTimerInActiveList+0x7c>)
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	3304      	adds	r3, #4
 8009f8e:	4619      	mov	r1, r3
 8009f90:	4610      	mov	r0, r2
 8009f92:	f7fe f98a 	bl	80082aa <vListInsert>
 8009f96:	e012      	b.n	8009fbe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d206      	bcs.n	8009fae <prvInsertTimerInActiveList+0x62>
 8009fa0:	68ba      	ldr	r2, [r7, #8]
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d302      	bcc.n	8009fae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	617b      	str	r3, [r7, #20]
 8009fac:	e007      	b.n	8009fbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009fae:	4b07      	ldr	r3, [pc, #28]	; (8009fcc <prvInsertTimerInActiveList+0x80>)
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	3304      	adds	r3, #4
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	4610      	mov	r0, r2
 8009fba:	f7fe f976 	bl	80082aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009fbe:	697b      	ldr	r3, [r7, #20]
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3718      	adds	r7, #24
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	20000f24 	.word	0x20000f24
 8009fcc:	20000f20 	.word	0x20000f20

08009fd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b08e      	sub	sp, #56	; 0x38
 8009fd4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009fd6:	e0ca      	b.n	800a16e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	da18      	bge.n	800a010 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009fde:	1d3b      	adds	r3, r7, #4
 8009fe0:	3304      	adds	r3, #4
 8009fe2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d10a      	bne.n	800a000 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fee:	f383 8811 	msr	BASEPRI, r3
 8009ff2:	f3bf 8f6f 	isb	sy
 8009ff6:	f3bf 8f4f 	dsb	sy
 8009ffa:	61fb      	str	r3, [r7, #28]
}
 8009ffc:	bf00      	nop
 8009ffe:	e7fe      	b.n	8009ffe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a006:	6850      	ldr	r0, [r2, #4]
 800a008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a00a:	6892      	ldr	r2, [r2, #8]
 800a00c:	4611      	mov	r1, r2
 800a00e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2b00      	cmp	r3, #0
 800a014:	f2c0 80ab 	blt.w	800a16e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a01e:	695b      	ldr	r3, [r3, #20]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d004      	beq.n	800a02e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a026:	3304      	adds	r3, #4
 800a028:	4618      	mov	r0, r3
 800a02a:	f7fe f977 	bl	800831c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a02e:	463b      	mov	r3, r7
 800a030:	4618      	mov	r0, r3
 800a032:	f7ff ff6b 	bl	8009f0c <prvSampleTimeNow>
 800a036:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2b09      	cmp	r3, #9
 800a03c:	f200 8096 	bhi.w	800a16c <prvProcessReceivedCommands+0x19c>
 800a040:	a201      	add	r2, pc, #4	; (adr r2, 800a048 <prvProcessReceivedCommands+0x78>)
 800a042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a046:	bf00      	nop
 800a048:	0800a071 	.word	0x0800a071
 800a04c:	0800a071 	.word	0x0800a071
 800a050:	0800a071 	.word	0x0800a071
 800a054:	0800a0e5 	.word	0x0800a0e5
 800a058:	0800a0f9 	.word	0x0800a0f9
 800a05c:	0800a143 	.word	0x0800a143
 800a060:	0800a071 	.word	0x0800a071
 800a064:	0800a071 	.word	0x0800a071
 800a068:	0800a0e5 	.word	0x0800a0e5
 800a06c:	0800a0f9 	.word	0x0800a0f9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a072:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a076:	f043 0301 	orr.w	r3, r3, #1
 800a07a:	b2da      	uxtb	r2, r3
 800a07c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a07e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a082:	68ba      	ldr	r2, [r7, #8]
 800a084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a086:	699b      	ldr	r3, [r3, #24]
 800a088:	18d1      	adds	r1, r2, r3
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a08e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a090:	f7ff ff5c 	bl	8009f4c <prvInsertTimerInActiveList>
 800a094:	4603      	mov	r3, r0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d069      	beq.n	800a16e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09c:	6a1b      	ldr	r3, [r3, #32]
 800a09e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0a8:	f003 0304 	and.w	r3, r3, #4
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d05e      	beq.n	800a16e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a0b0:	68ba      	ldr	r2, [r7, #8]
 800a0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b4:	699b      	ldr	r3, [r3, #24]
 800a0b6:	441a      	add	r2, r3
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	9300      	str	r3, [sp, #0]
 800a0bc:	2300      	movs	r3, #0
 800a0be:	2100      	movs	r1, #0
 800a0c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0c2:	f7ff fe05 	bl	8009cd0 <xTimerGenericCommand>
 800a0c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a0c8:	6a3b      	ldr	r3, [r7, #32]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d14f      	bne.n	800a16e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d2:	f383 8811 	msr	BASEPRI, r3
 800a0d6:	f3bf 8f6f 	isb	sy
 800a0da:	f3bf 8f4f 	dsb	sy
 800a0de:	61bb      	str	r3, [r7, #24]
}
 800a0e0:	bf00      	nop
 800a0e2:	e7fe      	b.n	800a0e2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0ea:	f023 0301 	bic.w	r3, r3, #1
 800a0ee:	b2da      	uxtb	r2, r3
 800a0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a0f6:	e03a      	b.n	800a16e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0fe:	f043 0301 	orr.w	r3, r3, #1
 800a102:	b2da      	uxtb	r2, r3
 800a104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a106:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a10a:	68ba      	ldr	r2, [r7, #8]
 800a10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a112:	699b      	ldr	r3, [r3, #24]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d10a      	bne.n	800a12e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11c:	f383 8811 	msr	BASEPRI, r3
 800a120:	f3bf 8f6f 	isb	sy
 800a124:	f3bf 8f4f 	dsb	sy
 800a128:	617b      	str	r3, [r7, #20]
}
 800a12a:	bf00      	nop
 800a12c:	e7fe      	b.n	800a12c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a130:	699a      	ldr	r2, [r3, #24]
 800a132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a134:	18d1      	adds	r1, r2, r3
 800a136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a13a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a13c:	f7ff ff06 	bl	8009f4c <prvInsertTimerInActiveList>
					break;
 800a140:	e015      	b.n	800a16e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a144:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a148:	f003 0302 	and.w	r3, r3, #2
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d103      	bne.n	800a158 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a150:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a152:	f000 fbdd 	bl	800a910 <vPortFree>
 800a156:	e00a      	b.n	800a16e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a15e:	f023 0301 	bic.w	r3, r3, #1
 800a162:	b2da      	uxtb	r2, r3
 800a164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a166:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a16a:	e000      	b.n	800a16e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800a16c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a16e:	4b08      	ldr	r3, [pc, #32]	; (800a190 <prvProcessReceivedCommands+0x1c0>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	1d39      	adds	r1, r7, #4
 800a174:	2200      	movs	r2, #0
 800a176:	4618      	mov	r0, r3
 800a178:	f7fe fb98 	bl	80088ac <xQueueReceive>
 800a17c:	4603      	mov	r3, r0
 800a17e:	2b00      	cmp	r3, #0
 800a180:	f47f af2a 	bne.w	8009fd8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a184:	bf00      	nop
 800a186:	bf00      	nop
 800a188:	3730      	adds	r7, #48	; 0x30
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	20000f28 	.word	0x20000f28

0800a194 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b088      	sub	sp, #32
 800a198:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a19a:	e048      	b.n	800a22e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a19c:	4b2d      	ldr	r3, [pc, #180]	; (800a254 <prvSwitchTimerLists+0xc0>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	68db      	ldr	r3, [r3, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1a6:	4b2b      	ldr	r3, [pc, #172]	; (800a254 <prvSwitchTimerLists+0xc0>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	68db      	ldr	r3, [r3, #12]
 800a1ac:	68db      	ldr	r3, [r3, #12]
 800a1ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	3304      	adds	r3, #4
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f7fe f8b1 	bl	800831c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	6a1b      	ldr	r3, [r3, #32]
 800a1be:	68f8      	ldr	r0, [r7, #12]
 800a1c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1c8:	f003 0304 	and.w	r3, r3, #4
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d02e      	beq.n	800a22e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	699b      	ldr	r3, [r3, #24]
 800a1d4:	693a      	ldr	r2, [r7, #16]
 800a1d6:	4413      	add	r3, r2
 800a1d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a1da:	68ba      	ldr	r2, [r7, #8]
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d90e      	bls.n	800a200 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	68ba      	ldr	r2, [r7, #8]
 800a1e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	68fa      	ldr	r2, [r7, #12]
 800a1ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a1ee:	4b19      	ldr	r3, [pc, #100]	; (800a254 <prvSwitchTimerLists+0xc0>)
 800a1f0:	681a      	ldr	r2, [r3, #0]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	3304      	adds	r3, #4
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	4610      	mov	r0, r2
 800a1fa:	f7fe f856 	bl	80082aa <vListInsert>
 800a1fe:	e016      	b.n	800a22e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a200:	2300      	movs	r3, #0
 800a202:	9300      	str	r3, [sp, #0]
 800a204:	2300      	movs	r3, #0
 800a206:	693a      	ldr	r2, [r7, #16]
 800a208:	2100      	movs	r1, #0
 800a20a:	68f8      	ldr	r0, [r7, #12]
 800a20c:	f7ff fd60 	bl	8009cd0 <xTimerGenericCommand>
 800a210:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d10a      	bne.n	800a22e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21c:	f383 8811 	msr	BASEPRI, r3
 800a220:	f3bf 8f6f 	isb	sy
 800a224:	f3bf 8f4f 	dsb	sy
 800a228:	603b      	str	r3, [r7, #0]
}
 800a22a:	bf00      	nop
 800a22c:	e7fe      	b.n	800a22c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a22e:	4b09      	ldr	r3, [pc, #36]	; (800a254 <prvSwitchTimerLists+0xc0>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d1b1      	bne.n	800a19c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a238:	4b06      	ldr	r3, [pc, #24]	; (800a254 <prvSwitchTimerLists+0xc0>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a23e:	4b06      	ldr	r3, [pc, #24]	; (800a258 <prvSwitchTimerLists+0xc4>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4a04      	ldr	r2, [pc, #16]	; (800a254 <prvSwitchTimerLists+0xc0>)
 800a244:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a246:	4a04      	ldr	r2, [pc, #16]	; (800a258 <prvSwitchTimerLists+0xc4>)
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	6013      	str	r3, [r2, #0]
}
 800a24c:	bf00      	nop
 800a24e:	3718      	adds	r7, #24
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}
 800a254:	20000f20 	.word	0x20000f20
 800a258:	20000f24 	.word	0x20000f24

0800a25c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a262:	f000 f967 	bl	800a534 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a266:	4b15      	ldr	r3, [pc, #84]	; (800a2bc <prvCheckForValidListAndQueue+0x60>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d120      	bne.n	800a2b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a26e:	4814      	ldr	r0, [pc, #80]	; (800a2c0 <prvCheckForValidListAndQueue+0x64>)
 800a270:	f7fd ffca 	bl	8008208 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a274:	4813      	ldr	r0, [pc, #76]	; (800a2c4 <prvCheckForValidListAndQueue+0x68>)
 800a276:	f7fd ffc7 	bl	8008208 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a27a:	4b13      	ldr	r3, [pc, #76]	; (800a2c8 <prvCheckForValidListAndQueue+0x6c>)
 800a27c:	4a10      	ldr	r2, [pc, #64]	; (800a2c0 <prvCheckForValidListAndQueue+0x64>)
 800a27e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a280:	4b12      	ldr	r3, [pc, #72]	; (800a2cc <prvCheckForValidListAndQueue+0x70>)
 800a282:	4a10      	ldr	r2, [pc, #64]	; (800a2c4 <prvCheckForValidListAndQueue+0x68>)
 800a284:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a286:	2300      	movs	r3, #0
 800a288:	9300      	str	r3, [sp, #0]
 800a28a:	4b11      	ldr	r3, [pc, #68]	; (800a2d0 <prvCheckForValidListAndQueue+0x74>)
 800a28c:	4a11      	ldr	r2, [pc, #68]	; (800a2d4 <prvCheckForValidListAndQueue+0x78>)
 800a28e:	2110      	movs	r1, #16
 800a290:	200a      	movs	r0, #10
 800a292:	f7fe f8d5 	bl	8008440 <xQueueGenericCreateStatic>
 800a296:	4603      	mov	r3, r0
 800a298:	4a08      	ldr	r2, [pc, #32]	; (800a2bc <prvCheckForValidListAndQueue+0x60>)
 800a29a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a29c:	4b07      	ldr	r3, [pc, #28]	; (800a2bc <prvCheckForValidListAndQueue+0x60>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d005      	beq.n	800a2b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a2a4:	4b05      	ldr	r3, [pc, #20]	; (800a2bc <prvCheckForValidListAndQueue+0x60>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	490b      	ldr	r1, [pc, #44]	; (800a2d8 <prvCheckForValidListAndQueue+0x7c>)
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7fe fcee 	bl	8008c8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a2b0:	f000 f970 	bl	800a594 <vPortExitCritical>
}
 800a2b4:	bf00      	nop
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	20000f28 	.word	0x20000f28
 800a2c0:	20000ef8 	.word	0x20000ef8
 800a2c4:	20000f0c 	.word	0x20000f0c
 800a2c8:	20000f20 	.word	0x20000f20
 800a2cc:	20000f24 	.word	0x20000f24
 800a2d0:	20000fd4 	.word	0x20000fd4
 800a2d4:	20000f34 	.word	0x20000f34
 800a2d8:	0800bb04 	.word	0x0800bb04

0800a2dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b085      	sub	sp, #20
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	3b04      	subs	r3, #4
 800a2ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a2f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	3b04      	subs	r3, #4
 800a2fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	f023 0201 	bic.w	r2, r3, #1
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	3b04      	subs	r3, #4
 800a30a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a30c:	4a0c      	ldr	r2, [pc, #48]	; (800a340 <pxPortInitialiseStack+0x64>)
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	3b14      	subs	r3, #20
 800a316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	3b04      	subs	r3, #4
 800a322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f06f 0202 	mvn.w	r2, #2
 800a32a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	3b20      	subs	r3, #32
 800a330:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a332:	68fb      	ldr	r3, [r7, #12]
}
 800a334:	4618      	mov	r0, r3
 800a336:	3714      	adds	r7, #20
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr
 800a340:	0800a345 	.word	0x0800a345

0800a344 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a344:	b480      	push	{r7}
 800a346:	b085      	sub	sp, #20
 800a348:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a34a:	2300      	movs	r3, #0
 800a34c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a34e:	4b12      	ldr	r3, [pc, #72]	; (800a398 <prvTaskExitError+0x54>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a356:	d00a      	beq.n	800a36e <prvTaskExitError+0x2a>
	__asm volatile
 800a358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35c:	f383 8811 	msr	BASEPRI, r3
 800a360:	f3bf 8f6f 	isb	sy
 800a364:	f3bf 8f4f 	dsb	sy
 800a368:	60fb      	str	r3, [r7, #12]
}
 800a36a:	bf00      	nop
 800a36c:	e7fe      	b.n	800a36c <prvTaskExitError+0x28>
	__asm volatile
 800a36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a372:	f383 8811 	msr	BASEPRI, r3
 800a376:	f3bf 8f6f 	isb	sy
 800a37a:	f3bf 8f4f 	dsb	sy
 800a37e:	60bb      	str	r3, [r7, #8]
}
 800a380:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a382:	bf00      	nop
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d0fc      	beq.n	800a384 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a38a:	bf00      	nop
 800a38c:	bf00      	nop
 800a38e:	3714      	adds	r7, #20
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr
 800a398:	20000020 	.word	0x20000020
 800a39c:	00000000 	.word	0x00000000

0800a3a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a3a0:	4b07      	ldr	r3, [pc, #28]	; (800a3c0 <pxCurrentTCBConst2>)
 800a3a2:	6819      	ldr	r1, [r3, #0]
 800a3a4:	6808      	ldr	r0, [r1, #0]
 800a3a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3aa:	f380 8809 	msr	PSP, r0
 800a3ae:	f3bf 8f6f 	isb	sy
 800a3b2:	f04f 0000 	mov.w	r0, #0
 800a3b6:	f380 8811 	msr	BASEPRI, r0
 800a3ba:	4770      	bx	lr
 800a3bc:	f3af 8000 	nop.w

0800a3c0 <pxCurrentTCBConst2>:
 800a3c0:	200009f8 	.word	0x200009f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a3c4:	bf00      	nop
 800a3c6:	bf00      	nop

0800a3c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a3c8:	4808      	ldr	r0, [pc, #32]	; (800a3ec <prvPortStartFirstTask+0x24>)
 800a3ca:	6800      	ldr	r0, [r0, #0]
 800a3cc:	6800      	ldr	r0, [r0, #0]
 800a3ce:	f380 8808 	msr	MSP, r0
 800a3d2:	f04f 0000 	mov.w	r0, #0
 800a3d6:	f380 8814 	msr	CONTROL, r0
 800a3da:	b662      	cpsie	i
 800a3dc:	b661      	cpsie	f
 800a3de:	f3bf 8f4f 	dsb	sy
 800a3e2:	f3bf 8f6f 	isb	sy
 800a3e6:	df00      	svc	0
 800a3e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a3ea:	bf00      	nop
 800a3ec:	e000ed08 	.word	0xe000ed08

0800a3f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b086      	sub	sp, #24
 800a3f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a3f6:	4b46      	ldr	r3, [pc, #280]	; (800a510 <xPortStartScheduler+0x120>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a46      	ldr	r2, [pc, #280]	; (800a514 <xPortStartScheduler+0x124>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d10a      	bne.n	800a416 <xPortStartScheduler+0x26>
	__asm volatile
 800a400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a404:	f383 8811 	msr	BASEPRI, r3
 800a408:	f3bf 8f6f 	isb	sy
 800a40c:	f3bf 8f4f 	dsb	sy
 800a410:	613b      	str	r3, [r7, #16]
}
 800a412:	bf00      	nop
 800a414:	e7fe      	b.n	800a414 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a416:	4b3e      	ldr	r3, [pc, #248]	; (800a510 <xPortStartScheduler+0x120>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4a3f      	ldr	r2, [pc, #252]	; (800a518 <xPortStartScheduler+0x128>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d10a      	bne.n	800a436 <xPortStartScheduler+0x46>
	__asm volatile
 800a420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a424:	f383 8811 	msr	BASEPRI, r3
 800a428:	f3bf 8f6f 	isb	sy
 800a42c:	f3bf 8f4f 	dsb	sy
 800a430:	60fb      	str	r3, [r7, #12]
}
 800a432:	bf00      	nop
 800a434:	e7fe      	b.n	800a434 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a436:	4b39      	ldr	r3, [pc, #228]	; (800a51c <xPortStartScheduler+0x12c>)
 800a438:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	b2db      	uxtb	r3, r3
 800a440:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	22ff      	movs	r2, #255	; 0xff
 800a446:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a450:	78fb      	ldrb	r3, [r7, #3]
 800a452:	b2db      	uxtb	r3, r3
 800a454:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a458:	b2da      	uxtb	r2, r3
 800a45a:	4b31      	ldr	r3, [pc, #196]	; (800a520 <xPortStartScheduler+0x130>)
 800a45c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a45e:	4b31      	ldr	r3, [pc, #196]	; (800a524 <xPortStartScheduler+0x134>)
 800a460:	2207      	movs	r2, #7
 800a462:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a464:	e009      	b.n	800a47a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a466:	4b2f      	ldr	r3, [pc, #188]	; (800a524 <xPortStartScheduler+0x134>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	3b01      	subs	r3, #1
 800a46c:	4a2d      	ldr	r2, [pc, #180]	; (800a524 <xPortStartScheduler+0x134>)
 800a46e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a470:	78fb      	ldrb	r3, [r7, #3]
 800a472:	b2db      	uxtb	r3, r3
 800a474:	005b      	lsls	r3, r3, #1
 800a476:	b2db      	uxtb	r3, r3
 800a478:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a47a:	78fb      	ldrb	r3, [r7, #3]
 800a47c:	b2db      	uxtb	r3, r3
 800a47e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a482:	2b80      	cmp	r3, #128	; 0x80
 800a484:	d0ef      	beq.n	800a466 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a486:	4b27      	ldr	r3, [pc, #156]	; (800a524 <xPortStartScheduler+0x134>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f1c3 0307 	rsb	r3, r3, #7
 800a48e:	2b04      	cmp	r3, #4
 800a490:	d00a      	beq.n	800a4a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a496:	f383 8811 	msr	BASEPRI, r3
 800a49a:	f3bf 8f6f 	isb	sy
 800a49e:	f3bf 8f4f 	dsb	sy
 800a4a2:	60bb      	str	r3, [r7, #8]
}
 800a4a4:	bf00      	nop
 800a4a6:	e7fe      	b.n	800a4a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a4a8:	4b1e      	ldr	r3, [pc, #120]	; (800a524 <xPortStartScheduler+0x134>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	021b      	lsls	r3, r3, #8
 800a4ae:	4a1d      	ldr	r2, [pc, #116]	; (800a524 <xPortStartScheduler+0x134>)
 800a4b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a4b2:	4b1c      	ldr	r3, [pc, #112]	; (800a524 <xPortStartScheduler+0x134>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a4ba:	4a1a      	ldr	r2, [pc, #104]	; (800a524 <xPortStartScheduler+0x134>)
 800a4bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	b2da      	uxtb	r2, r3
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a4c6:	4b18      	ldr	r3, [pc, #96]	; (800a528 <xPortStartScheduler+0x138>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4a17      	ldr	r2, [pc, #92]	; (800a528 <xPortStartScheduler+0x138>)
 800a4cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a4d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a4d2:	4b15      	ldr	r3, [pc, #84]	; (800a528 <xPortStartScheduler+0x138>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a14      	ldr	r2, [pc, #80]	; (800a528 <xPortStartScheduler+0x138>)
 800a4d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a4dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a4de:	f000 f8dd 	bl	800a69c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a4e2:	4b12      	ldr	r3, [pc, #72]	; (800a52c <xPortStartScheduler+0x13c>)
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a4e8:	f000 f8fc 	bl	800a6e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a4ec:	4b10      	ldr	r3, [pc, #64]	; (800a530 <xPortStartScheduler+0x140>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4a0f      	ldr	r2, [pc, #60]	; (800a530 <xPortStartScheduler+0x140>)
 800a4f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a4f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a4f8:	f7ff ff66 	bl	800a3c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a4fc:	f7ff f854 	bl	80095a8 <vTaskSwitchContext>
	prvTaskExitError();
 800a500:	f7ff ff20 	bl	800a344 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a504:	2300      	movs	r3, #0
}
 800a506:	4618      	mov	r0, r3
 800a508:	3718      	adds	r7, #24
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	e000ed00 	.word	0xe000ed00
 800a514:	410fc271 	.word	0x410fc271
 800a518:	410fc270 	.word	0x410fc270
 800a51c:	e000e400 	.word	0xe000e400
 800a520:	20001024 	.word	0x20001024
 800a524:	20001028 	.word	0x20001028
 800a528:	e000ed20 	.word	0xe000ed20
 800a52c:	20000020 	.word	0x20000020
 800a530:	e000ef34 	.word	0xe000ef34

0800a534 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
	__asm volatile
 800a53a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a53e:	f383 8811 	msr	BASEPRI, r3
 800a542:	f3bf 8f6f 	isb	sy
 800a546:	f3bf 8f4f 	dsb	sy
 800a54a:	607b      	str	r3, [r7, #4]
}
 800a54c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a54e:	4b0f      	ldr	r3, [pc, #60]	; (800a58c <vPortEnterCritical+0x58>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	3301      	adds	r3, #1
 800a554:	4a0d      	ldr	r2, [pc, #52]	; (800a58c <vPortEnterCritical+0x58>)
 800a556:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a558:	4b0c      	ldr	r3, [pc, #48]	; (800a58c <vPortEnterCritical+0x58>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d10f      	bne.n	800a580 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a560:	4b0b      	ldr	r3, [pc, #44]	; (800a590 <vPortEnterCritical+0x5c>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	b2db      	uxtb	r3, r3
 800a566:	2b00      	cmp	r3, #0
 800a568:	d00a      	beq.n	800a580 <vPortEnterCritical+0x4c>
	__asm volatile
 800a56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56e:	f383 8811 	msr	BASEPRI, r3
 800a572:	f3bf 8f6f 	isb	sy
 800a576:	f3bf 8f4f 	dsb	sy
 800a57a:	603b      	str	r3, [r7, #0]
}
 800a57c:	bf00      	nop
 800a57e:	e7fe      	b.n	800a57e <vPortEnterCritical+0x4a>
	}
}
 800a580:	bf00      	nop
 800a582:	370c      	adds	r7, #12
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr
 800a58c:	20000020 	.word	0x20000020
 800a590:	e000ed04 	.word	0xe000ed04

0800a594 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a59a:	4b12      	ldr	r3, [pc, #72]	; (800a5e4 <vPortExitCritical+0x50>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d10a      	bne.n	800a5b8 <vPortExitCritical+0x24>
	__asm volatile
 800a5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a6:	f383 8811 	msr	BASEPRI, r3
 800a5aa:	f3bf 8f6f 	isb	sy
 800a5ae:	f3bf 8f4f 	dsb	sy
 800a5b2:	607b      	str	r3, [r7, #4]
}
 800a5b4:	bf00      	nop
 800a5b6:	e7fe      	b.n	800a5b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a5b8:	4b0a      	ldr	r3, [pc, #40]	; (800a5e4 <vPortExitCritical+0x50>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	3b01      	subs	r3, #1
 800a5be:	4a09      	ldr	r2, [pc, #36]	; (800a5e4 <vPortExitCritical+0x50>)
 800a5c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a5c2:	4b08      	ldr	r3, [pc, #32]	; (800a5e4 <vPortExitCritical+0x50>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d105      	bne.n	800a5d6 <vPortExitCritical+0x42>
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	f383 8811 	msr	BASEPRI, r3
}
 800a5d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a5d6:	bf00      	nop
 800a5d8:	370c      	adds	r7, #12
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr
 800a5e2:	bf00      	nop
 800a5e4:	20000020 	.word	0x20000020
	...

0800a5f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a5f0:	f3ef 8009 	mrs	r0, PSP
 800a5f4:	f3bf 8f6f 	isb	sy
 800a5f8:	4b15      	ldr	r3, [pc, #84]	; (800a650 <pxCurrentTCBConst>)
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	f01e 0f10 	tst.w	lr, #16
 800a600:	bf08      	it	eq
 800a602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a60a:	6010      	str	r0, [r2, #0]
 800a60c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a610:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a614:	f380 8811 	msr	BASEPRI, r0
 800a618:	f3bf 8f4f 	dsb	sy
 800a61c:	f3bf 8f6f 	isb	sy
 800a620:	f7fe ffc2 	bl	80095a8 <vTaskSwitchContext>
 800a624:	f04f 0000 	mov.w	r0, #0
 800a628:	f380 8811 	msr	BASEPRI, r0
 800a62c:	bc09      	pop	{r0, r3}
 800a62e:	6819      	ldr	r1, [r3, #0]
 800a630:	6808      	ldr	r0, [r1, #0]
 800a632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a636:	f01e 0f10 	tst.w	lr, #16
 800a63a:	bf08      	it	eq
 800a63c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a640:	f380 8809 	msr	PSP, r0
 800a644:	f3bf 8f6f 	isb	sy
 800a648:	4770      	bx	lr
 800a64a:	bf00      	nop
 800a64c:	f3af 8000 	nop.w

0800a650 <pxCurrentTCBConst>:
 800a650:	200009f8 	.word	0x200009f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a654:	bf00      	nop
 800a656:	bf00      	nop

0800a658 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af00      	add	r7, sp, #0
	__asm volatile
 800a65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a662:	f383 8811 	msr	BASEPRI, r3
 800a666:	f3bf 8f6f 	isb	sy
 800a66a:	f3bf 8f4f 	dsb	sy
 800a66e:	607b      	str	r3, [r7, #4]
}
 800a670:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a672:	f7fe fedf 	bl	8009434 <xTaskIncrementTick>
 800a676:	4603      	mov	r3, r0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d003      	beq.n	800a684 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a67c:	4b06      	ldr	r3, [pc, #24]	; (800a698 <xPortSysTickHandler+0x40>)
 800a67e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a682:	601a      	str	r2, [r3, #0]
 800a684:	2300      	movs	r3, #0
 800a686:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	f383 8811 	msr	BASEPRI, r3
}
 800a68e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a690:	bf00      	nop
 800a692:	3708      	adds	r7, #8
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}
 800a698:	e000ed04 	.word	0xe000ed04

0800a69c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a69c:	b480      	push	{r7}
 800a69e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a6a0:	4b0b      	ldr	r3, [pc, #44]	; (800a6d0 <vPortSetupTimerInterrupt+0x34>)
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a6a6:	4b0b      	ldr	r3, [pc, #44]	; (800a6d4 <vPortSetupTimerInterrupt+0x38>)
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a6ac:	4b0a      	ldr	r3, [pc, #40]	; (800a6d8 <vPortSetupTimerInterrupt+0x3c>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a0a      	ldr	r2, [pc, #40]	; (800a6dc <vPortSetupTimerInterrupt+0x40>)
 800a6b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a6b6:	099b      	lsrs	r3, r3, #6
 800a6b8:	4a09      	ldr	r2, [pc, #36]	; (800a6e0 <vPortSetupTimerInterrupt+0x44>)
 800a6ba:	3b01      	subs	r3, #1
 800a6bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a6be:	4b04      	ldr	r3, [pc, #16]	; (800a6d0 <vPortSetupTimerInterrupt+0x34>)
 800a6c0:	2207      	movs	r2, #7
 800a6c2:	601a      	str	r2, [r3, #0]
}
 800a6c4:	bf00      	nop
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6cc:	4770      	bx	lr
 800a6ce:	bf00      	nop
 800a6d0:	e000e010 	.word	0xe000e010
 800a6d4:	e000e018 	.word	0xe000e018
 800a6d8:	20000014 	.word	0x20000014
 800a6dc:	10624dd3 	.word	0x10624dd3
 800a6e0:	e000e014 	.word	0xe000e014

0800a6e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a6e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a6f4 <vPortEnableVFP+0x10>
 800a6e8:	6801      	ldr	r1, [r0, #0]
 800a6ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a6ee:	6001      	str	r1, [r0, #0]
 800a6f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a6f2:	bf00      	nop
 800a6f4:	e000ed88 	.word	0xe000ed88

0800a6f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b085      	sub	sp, #20
 800a6fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a6fe:	f3ef 8305 	mrs	r3, IPSR
 800a702:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2b0f      	cmp	r3, #15
 800a708:	d914      	bls.n	800a734 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a70a:	4a17      	ldr	r2, [pc, #92]	; (800a768 <vPortValidateInterruptPriority+0x70>)
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	4413      	add	r3, r2
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a714:	4b15      	ldr	r3, [pc, #84]	; (800a76c <vPortValidateInterruptPriority+0x74>)
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	7afa      	ldrb	r2, [r7, #11]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d20a      	bcs.n	800a734 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a722:	f383 8811 	msr	BASEPRI, r3
 800a726:	f3bf 8f6f 	isb	sy
 800a72a:	f3bf 8f4f 	dsb	sy
 800a72e:	607b      	str	r3, [r7, #4]
}
 800a730:	bf00      	nop
 800a732:	e7fe      	b.n	800a732 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a734:	4b0e      	ldr	r3, [pc, #56]	; (800a770 <vPortValidateInterruptPriority+0x78>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a73c:	4b0d      	ldr	r3, [pc, #52]	; (800a774 <vPortValidateInterruptPriority+0x7c>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	429a      	cmp	r2, r3
 800a742:	d90a      	bls.n	800a75a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a748:	f383 8811 	msr	BASEPRI, r3
 800a74c:	f3bf 8f6f 	isb	sy
 800a750:	f3bf 8f4f 	dsb	sy
 800a754:	603b      	str	r3, [r7, #0]
}
 800a756:	bf00      	nop
 800a758:	e7fe      	b.n	800a758 <vPortValidateInterruptPriority+0x60>
	}
 800a75a:	bf00      	nop
 800a75c:	3714      	adds	r7, #20
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr
 800a766:	bf00      	nop
 800a768:	e000e3f0 	.word	0xe000e3f0
 800a76c:	20001024 	.word	0x20001024
 800a770:	e000ed0c 	.word	0xe000ed0c
 800a774:	20001028 	.word	0x20001028

0800a778 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b08a      	sub	sp, #40	; 0x28
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a780:	2300      	movs	r3, #0
 800a782:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a784:	f7fe fd9a 	bl	80092bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a788:	4b5b      	ldr	r3, [pc, #364]	; (800a8f8 <pvPortMalloc+0x180>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d101      	bne.n	800a794 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a790:	f000 f920 	bl	800a9d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a794:	4b59      	ldr	r3, [pc, #356]	; (800a8fc <pvPortMalloc+0x184>)
 800a796:	681a      	ldr	r2, [r3, #0]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	4013      	ands	r3, r2
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	f040 8093 	bne.w	800a8c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d01d      	beq.n	800a7e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a7a8:	2208      	movs	r2, #8
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f003 0307 	and.w	r3, r3, #7
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d014      	beq.n	800a7e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f023 0307 	bic.w	r3, r3, #7
 800a7c0:	3308      	adds	r3, #8
 800a7c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f003 0307 	and.w	r3, r3, #7
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d00a      	beq.n	800a7e4 <pvPortMalloc+0x6c>
	__asm volatile
 800a7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d2:	f383 8811 	msr	BASEPRI, r3
 800a7d6:	f3bf 8f6f 	isb	sy
 800a7da:	f3bf 8f4f 	dsb	sy
 800a7de:	617b      	str	r3, [r7, #20]
}
 800a7e0:	bf00      	nop
 800a7e2:	e7fe      	b.n	800a7e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d06e      	beq.n	800a8c8 <pvPortMalloc+0x150>
 800a7ea:	4b45      	ldr	r3, [pc, #276]	; (800a900 <pvPortMalloc+0x188>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d869      	bhi.n	800a8c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a7f4:	4b43      	ldr	r3, [pc, #268]	; (800a904 <pvPortMalloc+0x18c>)
 800a7f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a7f8:	4b42      	ldr	r3, [pc, #264]	; (800a904 <pvPortMalloc+0x18c>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a7fe:	e004      	b.n	800a80a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a802:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	429a      	cmp	r2, r3
 800a812:	d903      	bls.n	800a81c <pvPortMalloc+0xa4>
 800a814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d1f1      	bne.n	800a800 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a81c:	4b36      	ldr	r3, [pc, #216]	; (800a8f8 <pvPortMalloc+0x180>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a822:	429a      	cmp	r2, r3
 800a824:	d050      	beq.n	800a8c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a826:	6a3b      	ldr	r3, [r7, #32]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	2208      	movs	r2, #8
 800a82c:	4413      	add	r3, r2
 800a82e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	6a3b      	ldr	r3, [r7, #32]
 800a836:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83a:	685a      	ldr	r2, [r3, #4]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	1ad2      	subs	r2, r2, r3
 800a840:	2308      	movs	r3, #8
 800a842:	005b      	lsls	r3, r3, #1
 800a844:	429a      	cmp	r2, r3
 800a846:	d91f      	bls.n	800a888 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	4413      	add	r3, r2
 800a84e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a850:	69bb      	ldr	r3, [r7, #24]
 800a852:	f003 0307 	and.w	r3, r3, #7
 800a856:	2b00      	cmp	r3, #0
 800a858:	d00a      	beq.n	800a870 <pvPortMalloc+0xf8>
	__asm volatile
 800a85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a85e:	f383 8811 	msr	BASEPRI, r3
 800a862:	f3bf 8f6f 	isb	sy
 800a866:	f3bf 8f4f 	dsb	sy
 800a86a:	613b      	str	r3, [r7, #16]
}
 800a86c:	bf00      	nop
 800a86e:	e7fe      	b.n	800a86e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a872:	685a      	ldr	r2, [r3, #4]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	1ad2      	subs	r2, r2, r3
 800a878:	69bb      	ldr	r3, [r7, #24]
 800a87a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a882:	69b8      	ldr	r0, [r7, #24]
 800a884:	f000 f908 	bl	800aa98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a888:	4b1d      	ldr	r3, [pc, #116]	; (800a900 <pvPortMalloc+0x188>)
 800a88a:	681a      	ldr	r2, [r3, #0]
 800a88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	1ad3      	subs	r3, r2, r3
 800a892:	4a1b      	ldr	r2, [pc, #108]	; (800a900 <pvPortMalloc+0x188>)
 800a894:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a896:	4b1a      	ldr	r3, [pc, #104]	; (800a900 <pvPortMalloc+0x188>)
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	4b1b      	ldr	r3, [pc, #108]	; (800a908 <pvPortMalloc+0x190>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d203      	bcs.n	800a8aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a8a2:	4b17      	ldr	r3, [pc, #92]	; (800a900 <pvPortMalloc+0x188>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4a18      	ldr	r2, [pc, #96]	; (800a908 <pvPortMalloc+0x190>)
 800a8a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ac:	685a      	ldr	r2, [r3, #4]
 800a8ae:	4b13      	ldr	r3, [pc, #76]	; (800a8fc <pvPortMalloc+0x184>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	431a      	orrs	r2, r3
 800a8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a8be:	4b13      	ldr	r3, [pc, #76]	; (800a90c <pvPortMalloc+0x194>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	4a11      	ldr	r2, [pc, #68]	; (800a90c <pvPortMalloc+0x194>)
 800a8c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a8c8:	f7fe fd06 	bl	80092d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8cc:	69fb      	ldr	r3, [r7, #28]
 800a8ce:	f003 0307 	and.w	r3, r3, #7
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d00a      	beq.n	800a8ec <pvPortMalloc+0x174>
	__asm volatile
 800a8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8da:	f383 8811 	msr	BASEPRI, r3
 800a8de:	f3bf 8f6f 	isb	sy
 800a8e2:	f3bf 8f4f 	dsb	sy
 800a8e6:	60fb      	str	r3, [r7, #12]
}
 800a8e8:	bf00      	nop
 800a8ea:	e7fe      	b.n	800a8ea <pvPortMalloc+0x172>
	return pvReturn;
 800a8ec:	69fb      	ldr	r3, [r7, #28]
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3728      	adds	r7, #40	; 0x28
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop
 800a8f8:	20004c34 	.word	0x20004c34
 800a8fc:	20004c48 	.word	0x20004c48
 800a900:	20004c38 	.word	0x20004c38
 800a904:	20004c2c 	.word	0x20004c2c
 800a908:	20004c3c 	.word	0x20004c3c
 800a90c:	20004c40 	.word	0x20004c40

0800a910 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b086      	sub	sp, #24
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d04d      	beq.n	800a9be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a922:	2308      	movs	r3, #8
 800a924:	425b      	negs	r3, r3
 800a926:	697a      	ldr	r2, [r7, #20]
 800a928:	4413      	add	r3, r2
 800a92a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	685a      	ldr	r2, [r3, #4]
 800a934:	4b24      	ldr	r3, [pc, #144]	; (800a9c8 <vPortFree+0xb8>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4013      	ands	r3, r2
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d10a      	bne.n	800a954 <vPortFree+0x44>
	__asm volatile
 800a93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a942:	f383 8811 	msr	BASEPRI, r3
 800a946:	f3bf 8f6f 	isb	sy
 800a94a:	f3bf 8f4f 	dsb	sy
 800a94e:	60fb      	str	r3, [r7, #12]
}
 800a950:	bf00      	nop
 800a952:	e7fe      	b.n	800a952 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d00a      	beq.n	800a972 <vPortFree+0x62>
	__asm volatile
 800a95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a960:	f383 8811 	msr	BASEPRI, r3
 800a964:	f3bf 8f6f 	isb	sy
 800a968:	f3bf 8f4f 	dsb	sy
 800a96c:	60bb      	str	r3, [r7, #8]
}
 800a96e:	bf00      	nop
 800a970:	e7fe      	b.n	800a970 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	685a      	ldr	r2, [r3, #4]
 800a976:	4b14      	ldr	r3, [pc, #80]	; (800a9c8 <vPortFree+0xb8>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4013      	ands	r3, r2
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d01e      	beq.n	800a9be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d11a      	bne.n	800a9be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	685a      	ldr	r2, [r3, #4]
 800a98c:	4b0e      	ldr	r3, [pc, #56]	; (800a9c8 <vPortFree+0xb8>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	43db      	mvns	r3, r3
 800a992:	401a      	ands	r2, r3
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a998:	f7fe fc90 	bl	80092bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	685a      	ldr	r2, [r3, #4]
 800a9a0:	4b0a      	ldr	r3, [pc, #40]	; (800a9cc <vPortFree+0xbc>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4413      	add	r3, r2
 800a9a6:	4a09      	ldr	r2, [pc, #36]	; (800a9cc <vPortFree+0xbc>)
 800a9a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a9aa:	6938      	ldr	r0, [r7, #16]
 800a9ac:	f000 f874 	bl	800aa98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a9b0:	4b07      	ldr	r3, [pc, #28]	; (800a9d0 <vPortFree+0xc0>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	4a06      	ldr	r2, [pc, #24]	; (800a9d0 <vPortFree+0xc0>)
 800a9b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a9ba:	f7fe fc8d 	bl	80092d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a9be:	bf00      	nop
 800a9c0:	3718      	adds	r7, #24
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
 800a9c6:	bf00      	nop
 800a9c8:	20004c48 	.word	0x20004c48
 800a9cc:	20004c38 	.word	0x20004c38
 800a9d0:	20004c44 	.word	0x20004c44

0800a9d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b085      	sub	sp, #20
 800a9d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a9da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a9de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a9e0:	4b27      	ldr	r3, [pc, #156]	; (800aa80 <prvHeapInit+0xac>)
 800a9e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f003 0307 	and.w	r3, r3, #7
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d00c      	beq.n	800aa08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	3307      	adds	r3, #7
 800a9f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f023 0307 	bic.w	r3, r3, #7
 800a9fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a9fc:	68ba      	ldr	r2, [r7, #8]
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	1ad3      	subs	r3, r2, r3
 800aa02:	4a1f      	ldr	r2, [pc, #124]	; (800aa80 <prvHeapInit+0xac>)
 800aa04:	4413      	add	r3, r2
 800aa06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aa0c:	4a1d      	ldr	r2, [pc, #116]	; (800aa84 <prvHeapInit+0xb0>)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aa12:	4b1c      	ldr	r3, [pc, #112]	; (800aa84 <prvHeapInit+0xb0>)
 800aa14:	2200      	movs	r2, #0
 800aa16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	68ba      	ldr	r2, [r7, #8]
 800aa1c:	4413      	add	r3, r2
 800aa1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aa20:	2208      	movs	r2, #8
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	1a9b      	subs	r3, r3, r2
 800aa26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	f023 0307 	bic.w	r3, r3, #7
 800aa2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	4a15      	ldr	r2, [pc, #84]	; (800aa88 <prvHeapInit+0xb4>)
 800aa34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aa36:	4b14      	ldr	r3, [pc, #80]	; (800aa88 <prvHeapInit+0xb4>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aa3e:	4b12      	ldr	r3, [pc, #72]	; (800aa88 <prvHeapInit+0xb4>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	2200      	movs	r2, #0
 800aa44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	68fa      	ldr	r2, [r7, #12]
 800aa4e:	1ad2      	subs	r2, r2, r3
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aa54:	4b0c      	ldr	r3, [pc, #48]	; (800aa88 <prvHeapInit+0xb4>)
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	4a0a      	ldr	r2, [pc, #40]	; (800aa8c <prvHeapInit+0xb8>)
 800aa62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	4a09      	ldr	r2, [pc, #36]	; (800aa90 <prvHeapInit+0xbc>)
 800aa6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800aa6c:	4b09      	ldr	r3, [pc, #36]	; (800aa94 <prvHeapInit+0xc0>)
 800aa6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aa72:	601a      	str	r2, [r3, #0]
}
 800aa74:	bf00      	nop
 800aa76:	3714      	adds	r7, #20
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr
 800aa80:	2000102c 	.word	0x2000102c
 800aa84:	20004c2c 	.word	0x20004c2c
 800aa88:	20004c34 	.word	0x20004c34
 800aa8c:	20004c3c 	.word	0x20004c3c
 800aa90:	20004c38 	.word	0x20004c38
 800aa94:	20004c48 	.word	0x20004c48

0800aa98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b085      	sub	sp, #20
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aaa0:	4b28      	ldr	r3, [pc, #160]	; (800ab44 <prvInsertBlockIntoFreeList+0xac>)
 800aaa2:	60fb      	str	r3, [r7, #12]
 800aaa4:	e002      	b.n	800aaac <prvInsertBlockIntoFreeList+0x14>
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	60fb      	str	r3, [r7, #12]
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d8f7      	bhi.n	800aaa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	68ba      	ldr	r2, [r7, #8]
 800aac0:	4413      	add	r3, r2
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d108      	bne.n	800aada <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	685a      	ldr	r2, [r3, #4]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	441a      	add	r2, r3
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	68ba      	ldr	r2, [r7, #8]
 800aae4:	441a      	add	r2, r3
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d118      	bne.n	800ab20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	4b15      	ldr	r3, [pc, #84]	; (800ab48 <prvInsertBlockIntoFreeList+0xb0>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	d00d      	beq.n	800ab16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	685a      	ldr	r2, [r3, #4]
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	441a      	add	r2, r3
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	681a      	ldr	r2, [r3, #0]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	601a      	str	r2, [r3, #0]
 800ab14:	e008      	b.n	800ab28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ab16:	4b0c      	ldr	r3, [pc, #48]	; (800ab48 <prvInsertBlockIntoFreeList+0xb0>)
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	601a      	str	r2, [r3, #0]
 800ab1e:	e003      	b.n	800ab28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d002      	beq.n	800ab36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab36:	bf00      	nop
 800ab38:	3714      	adds	r7, #20
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr
 800ab42:	bf00      	nop
 800ab44:	20004c2c 	.word	0x20004c2c
 800ab48:	20004c34 	.word	0x20004c34

0800ab4c <gyroStart>:
#include "i2c.h"


// Enable and configure ICM-20948 gyroscope
// -------------------------------------------------------------------
void gyroStart() {
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	af00      	add	r7, sp, #0
	writeByte(0x07, 0x07); // Write 8'b00000111 to ICM register 7 (PWR_MGMT_2), disable Gyroscope (all axes)
 800ab50:	2107      	movs	r1, #7
 800ab52:	2007      	movs	r0, #7
 800ab54:	f000 f87c 	bl	800ac50 <writeByte>
	osDelayUntil(10);
 800ab58:	200a      	movs	r0, #10
 800ab5a:	f7fd faf4 	bl	8008146 <osDelayUntil>
	writeByte(0x07, 0x00); // Enable Accelerometer and Gyroscope (all axes)
 800ab5e:	2100      	movs	r1, #0
 800ab60:	2007      	movs	r0, #7
 800ab62:	f000 f875 	bl	800ac50 <writeByte>
	osDelayUntil(10);
 800ab66:	200a      	movs	r0, #10
 800ab68:	f7fd faed 	bl	8008146 <osDelayUntil>
}
 800ab6c:	bf00      	nop
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <gyroInit>:

void gyroInit() {
 800ab70:	b580      	push	{r7, lr}
 800ab72:	af00      	add	r7, sp, #0
	writeByte(0x06, 0x00);	// Write 0x00 to ICM register 6 (PWR_MGMT_1), wakes chip from sleep mode,
 800ab74:	2100      	movs	r1, #0
 800ab76:	2006      	movs	r0, #6
 800ab78:	f000 f86a 	bl	800ac50 <writeByte>
							//turn off low power, Internal 20MHz oscillator
	osDelayUntil(10);
 800ab7c:	200a      	movs	r0, #10
 800ab7e:	f7fd fae2 	bl	8008146 <osDelayUntil>
	writeByte(0x03, 0x80);	// Enables DMP (Digital Motion Processor) features
 800ab82:	2180      	movs	r1, #128	; 0x80
 800ab84:	2003      	movs	r0, #3
 800ab86:	f000 f863 	bl	800ac50 <writeByte>
	osDelayUntil(10);
 800ab8a:	200a      	movs	r0, #10
 800ab8c:	f7fd fadb 	bl	8008146 <osDelayUntil>
	writeByte(0x07, 0x07);	// Disable Gyroscope (all axes)
 800ab90:	2107      	movs	r1, #7
 800ab92:	2007      	movs	r0, #7
 800ab94:	f000 f85c 	bl	800ac50 <writeByte>
	osDelayUntil(10);
 800ab98:	200a      	movs	r0, #10
 800ab9a:	f7fd fad4 	bl	8008146 <osDelayUntil>
	writeByte(0x06, 0x01);	// Auto select best available clock source
 800ab9e:	2101      	movs	r1, #1
 800aba0:	2006      	movs	r0, #6
 800aba2:	f000 f855 	bl	800ac50 <writeByte>
	osDelayUntil(10);
 800aba6:	200a      	movs	r0, #10
 800aba8:	f7fd facd 	bl	8008146 <osDelayUntil>
	writeByte(0x7F, 0x20);	// Switch to USER BANK 2
 800abac:	2120      	movs	r1, #32
 800abae:	207f      	movs	r0, #127	; 0x7f
 800abb0:	f000 f84e 	bl	800ac50 <writeByte>
	osDelayUntil(10);
 800abb4:	200a      	movs	r0, #10
 800abb6:	f7fd fac6 	bl	8008146 <osDelayUntil>
	writeByte(0x01, 0x2F);	// Config gyro, enable gyro DLPF, set gyro Full Scale to +-2000dps,
 800abba:	212f      	movs	r1, #47	; 0x2f
 800abbc:	2001      	movs	r0, #1
 800abbe:	f000 f847 	bl	800ac50 <writeByte>
							// gyro low pass filter = 3'b101
	osDelayUntil(10);
 800abc2:	200a      	movs	r0, #10
 800abc4:	f7fd fabf 	bl	8008146 <osDelayUntil>
	writeByte(0x0, 0x00);	// Set gyro sample rate divider = 1 + 0(GYRO_SMPLRT_DIV[7:0])
 800abc8:	2100      	movs	r1, #0
 800abca:	2000      	movs	r0, #0
 800abcc:	f000 f840 	bl	800ac50 <writeByte>
	osDelayUntil(10);
 800abd0:	200a      	movs	r0, #10
 800abd2:	f7fd fab8 	bl	8008146 <osDelayUntil>
	writeByte(0x7F, 0x00);	// Switch to USER BANK 0
 800abd6:	2100      	movs	r1, #0
 800abd8:	207f      	movs	r0, #127	; 0x7f
 800abda:	f000 f839 	bl	800ac50 <writeByte>
	osDelayUntil(10);
 800abde:	200a      	movs	r0, #10
 800abe0:	f7fd fab1 	bl	8008146 <osDelayUntil>
	writeByte(0x07, 0x00);	// Enable Gyroscope and Accelerometer
 800abe4:	2100      	movs	r1, #0
 800abe6:	2007      	movs	r0, #7
 800abe8:	f000 f832 	bl	800ac50 <writeByte>
	osDelayUntil(10);
 800abec:	200a      	movs	r0, #10
 800abee:	f7fd faaa 	bl	8008146 <osDelayUntil>
}
 800abf2:	bf00      	nop
 800abf4:	bd80      	pop	{r7, pc}
	...

0800abf8 <readByte>:
uint8_t i2cBuffer[20];
uint8_t ICMAddr = 0x68;

// Helper functions to transmit and receive data from ICM using I2C
// -------------------------------------------------------------------
void readByte(uint8_t addr, uint8_t *data) {
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b084      	sub	sp, #16
 800abfc:	af02      	add	r7, sp, #8
 800abfe:	4603      	mov	r3, r0
 800ac00:	6039      	str	r1, [r7, #0]
 800ac02:	71fb      	strb	r3, [r7, #7]
	i2cBuffer[0] = addr;
 800ac04:	4a0f      	ldr	r2, [pc, #60]	; (800ac44 <readByte+0x4c>)
 800ac06:	79fb      	ldrb	r3, [r7, #7]
 800ac08:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddr << 1, i2cBuffer, 1, 10);
 800ac0a:	4b0f      	ldr	r3, [pc, #60]	; (800ac48 <readByte+0x50>)
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	b29b      	uxth	r3, r3
 800ac10:	005b      	lsls	r3, r3, #1
 800ac12:	b299      	uxth	r1, r3
 800ac14:	230a      	movs	r3, #10
 800ac16:	9300      	str	r3, [sp, #0]
 800ac18:	2301      	movs	r3, #1
 800ac1a:	4a0a      	ldr	r2, [pc, #40]	; (800ac44 <readByte+0x4c>)
 800ac1c:	480b      	ldr	r0, [pc, #44]	; (800ac4c <readByte+0x54>)
 800ac1e:	f7f9 f94f 	bl	8003ec0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ICMAddr << 1, data, 2, 20);
 800ac22:	4b09      	ldr	r3, [pc, #36]	; (800ac48 <readByte+0x50>)
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	005b      	lsls	r3, r3, #1
 800ac2a:	b299      	uxth	r1, r3
 800ac2c:	2314      	movs	r3, #20
 800ac2e:	9300      	str	r3, [sp, #0]
 800ac30:	2302      	movs	r3, #2
 800ac32:	683a      	ldr	r2, [r7, #0]
 800ac34:	4805      	ldr	r0, [pc, #20]	; (800ac4c <readByte+0x54>)
 800ac36:	f7f9 fa41 	bl	80040bc <HAL_I2C_Master_Receive>
}
 800ac3a:	bf00      	nop
 800ac3c:	3708      	adds	r7, #8
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop
 800ac44:	20004c4c 	.word	0x20004c4c
 800ac48:	20000024 	.word	0x20000024
 800ac4c:	20000094 	.word	0x20000094

0800ac50 <writeByte>:

void writeByte(uint8_t addr, uint8_t data) {
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b084      	sub	sp, #16
 800ac54:	af02      	add	r7, sp, #8
 800ac56:	4603      	mov	r3, r0
 800ac58:	460a      	mov	r2, r1
 800ac5a:	71fb      	strb	r3, [r7, #7]
 800ac5c:	4613      	mov	r3, r2
 800ac5e:	71bb      	strb	r3, [r7, #6]
	i2cBuffer[0] = addr;
 800ac60:	4a0a      	ldr	r2, [pc, #40]	; (800ac8c <writeByte+0x3c>)
 800ac62:	79fb      	ldrb	r3, [r7, #7]
 800ac64:	7013      	strb	r3, [r2, #0]
	i2cBuffer[1] = data;
 800ac66:	4a09      	ldr	r2, [pc, #36]	; (800ac8c <writeByte+0x3c>)
 800ac68:	79bb      	ldrb	r3, [r7, #6]
 800ac6a:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddr << 1, i2cBuffer, 2, 20);
 800ac6c:	4b08      	ldr	r3, [pc, #32]	; (800ac90 <writeByte+0x40>)
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	b29b      	uxth	r3, r3
 800ac72:	005b      	lsls	r3, r3, #1
 800ac74:	b299      	uxth	r1, r3
 800ac76:	2314      	movs	r3, #20
 800ac78:	9300      	str	r3, [sp, #0]
 800ac7a:	2302      	movs	r3, #2
 800ac7c:	4a03      	ldr	r2, [pc, #12]	; (800ac8c <writeByte+0x3c>)
 800ac7e:	4805      	ldr	r0, [pc, #20]	; (800ac94 <writeByte+0x44>)
 800ac80:	f7f9 f91e 	bl	8003ec0 <HAL_I2C_Master_Transmit>
}
 800ac84:	bf00      	nop
 800ac86:	3708      	adds	r7, #8
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}
 800ac8c:	20004c4c 	.word	0x20004c4c
 800ac90:	20000024 	.word	0x20000024
 800ac94:	20000094 	.word	0x20000094

0800ac98 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800ac9e:	2300      	movs	r3, #0
 800aca0:	71fb      	strb	r3, [r7, #7]
 800aca2:	e026      	b.n	800acf2 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 800aca4:	79fb      	ldrb	r3, [r7, #7]
 800aca6:	3b50      	subs	r3, #80	; 0x50
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	2100      	movs	r1, #0
 800acac:	4618      	mov	r0, r3
 800acae:	f000 f82b 	bl	800ad08 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800acb2:	2100      	movs	r1, #0
 800acb4:	2000      	movs	r0, #0
 800acb6:	f000 f827 	bl	800ad08 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800acba:	2100      	movs	r1, #0
 800acbc:	2010      	movs	r0, #16
 800acbe:	f000 f823 	bl	800ad08 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800acc2:	2300      	movs	r3, #0
 800acc4:	71bb      	strb	r3, [r7, #6]
 800acc6:	e00d      	b.n	800ace4 <OLED_Refresh_Gram+0x4c>
 800acc8:	79ba      	ldrb	r2, [r7, #6]
 800acca:	79fb      	ldrb	r3, [r7, #7]
 800accc:	490d      	ldr	r1, [pc, #52]	; (800ad04 <OLED_Refresh_Gram+0x6c>)
 800acce:	00d2      	lsls	r2, r2, #3
 800acd0:	440a      	add	r2, r1
 800acd2:	4413      	add	r3, r2
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	2101      	movs	r1, #1
 800acd8:	4618      	mov	r0, r3
 800acda:	f000 f815 	bl	800ad08 <OLED_WR_Byte>
 800acde:	79bb      	ldrb	r3, [r7, #6]
 800ace0:	3301      	adds	r3, #1
 800ace2:	71bb      	strb	r3, [r7, #6]
 800ace4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	daed      	bge.n	800acc8 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800acec:	79fb      	ldrb	r3, [r7, #7]
 800acee:	3301      	adds	r3, #1
 800acf0:	71fb      	strb	r3, [r7, #7]
 800acf2:	79fb      	ldrb	r3, [r7, #7]
 800acf4:	2b07      	cmp	r3, #7
 800acf6:	d9d5      	bls.n	800aca4 <OLED_Refresh_Gram+0xc>
	}   
}
 800acf8:	bf00      	nop
 800acfa:	bf00      	nop
 800acfc:	3708      	adds	r7, #8
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}
 800ad02:	bf00      	nop
 800ad04:	20004c60 	.word	0x20004c60

0800ad08 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	4603      	mov	r3, r0
 800ad10:	460a      	mov	r2, r1
 800ad12:	71fb      	strb	r3, [r7, #7]
 800ad14:	4613      	mov	r3, r2
 800ad16:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800ad18:	79bb      	ldrb	r3, [r7, #6]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d006      	beq.n	800ad2c <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800ad1e:	2201      	movs	r2, #1
 800ad20:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ad24:	481c      	ldr	r0, [pc, #112]	; (800ad98 <OLED_WR_Byte+0x90>)
 800ad26:	f7f8 ff53 	bl	8003bd0 <HAL_GPIO_WritePin>
 800ad2a:	e005      	b.n	800ad38 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ad32:	4819      	ldr	r0, [pc, #100]	; (800ad98 <OLED_WR_Byte+0x90>)
 800ad34:	f7f8 ff4c 	bl	8003bd0 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800ad38:	2300      	movs	r3, #0
 800ad3a:	73fb      	strb	r3, [r7, #15]
 800ad3c:	e01e      	b.n	800ad7c <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800ad3e:	2200      	movs	r2, #0
 800ad40:	2120      	movs	r1, #32
 800ad42:	4815      	ldr	r0, [pc, #84]	; (800ad98 <OLED_WR_Byte+0x90>)
 800ad44:	f7f8 ff44 	bl	8003bd0 <HAL_GPIO_WritePin>
		if(dat&0x80)
 800ad48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	da05      	bge.n	800ad5c <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 800ad50:	2201      	movs	r2, #1
 800ad52:	2140      	movs	r1, #64	; 0x40
 800ad54:	4810      	ldr	r0, [pc, #64]	; (800ad98 <OLED_WR_Byte+0x90>)
 800ad56:	f7f8 ff3b 	bl	8003bd0 <HAL_GPIO_WritePin>
 800ad5a:	e004      	b.n	800ad66 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	2140      	movs	r1, #64	; 0x40
 800ad60:	480d      	ldr	r0, [pc, #52]	; (800ad98 <OLED_WR_Byte+0x90>)
 800ad62:	f7f8 ff35 	bl	8003bd0 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800ad66:	2201      	movs	r2, #1
 800ad68:	2120      	movs	r1, #32
 800ad6a:	480b      	ldr	r0, [pc, #44]	; (800ad98 <OLED_WR_Byte+0x90>)
 800ad6c:	f7f8 ff30 	bl	8003bd0 <HAL_GPIO_WritePin>
		dat<<=1;   
 800ad70:	79fb      	ldrb	r3, [r7, #7]
 800ad72:	005b      	lsls	r3, r3, #1
 800ad74:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800ad76:	7bfb      	ldrb	r3, [r7, #15]
 800ad78:	3301      	adds	r3, #1
 800ad7a:	73fb      	strb	r3, [r7, #15]
 800ad7c:	7bfb      	ldrb	r3, [r7, #15]
 800ad7e:	2b07      	cmp	r3, #7
 800ad80:	d9dd      	bls.n	800ad3e <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800ad82:	2201      	movs	r2, #1
 800ad84:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ad88:	4803      	ldr	r0, [pc, #12]	; (800ad98 <OLED_WR_Byte+0x90>)
 800ad8a:	f7f8 ff21 	bl	8003bd0 <HAL_GPIO_WritePin>
} 
 800ad8e:	bf00      	nop
 800ad90:	3710      	adds	r7, #16
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}
 800ad96:	bf00      	nop
 800ad98:	40021000 	.word	0x40021000

0800ad9c <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b082      	sub	sp, #8
 800ada0:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800ada2:	2300      	movs	r3, #0
 800ada4:	71fb      	strb	r3, [r7, #7]
 800ada6:	e014      	b.n	800add2 <OLED_Clear+0x36>
 800ada8:	2300      	movs	r3, #0
 800adaa:	71bb      	strb	r3, [r7, #6]
 800adac:	e00a      	b.n	800adc4 <OLED_Clear+0x28>
 800adae:	79ba      	ldrb	r2, [r7, #6]
 800adb0:	79fb      	ldrb	r3, [r7, #7]
 800adb2:	490c      	ldr	r1, [pc, #48]	; (800ade4 <OLED_Clear+0x48>)
 800adb4:	00d2      	lsls	r2, r2, #3
 800adb6:	440a      	add	r2, r1
 800adb8:	4413      	add	r3, r2
 800adba:	2200      	movs	r2, #0
 800adbc:	701a      	strb	r2, [r3, #0]
 800adbe:	79bb      	ldrb	r3, [r7, #6]
 800adc0:	3301      	adds	r3, #1
 800adc2:	71bb      	strb	r3, [r7, #6]
 800adc4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	daf0      	bge.n	800adae <OLED_Clear+0x12>
 800adcc:	79fb      	ldrb	r3, [r7, #7]
 800adce:	3301      	adds	r3, #1
 800add0:	71fb      	strb	r3, [r7, #7]
 800add2:	79fb      	ldrb	r3, [r7, #7]
 800add4:	2b07      	cmp	r3, #7
 800add6:	d9e7      	bls.n	800ada8 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800add8:	f7ff ff5e 	bl	800ac98 <OLED_Refresh_Gram>
}
 800addc:	bf00      	nop
 800adde:	3708      	adds	r7, #8
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}
 800ade4:	20004c60 	.word	0x20004c60

0800ade8 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800ade8:	b480      	push	{r7}
 800adea:	b085      	sub	sp, #20
 800adec:	af00      	add	r7, sp, #0
 800adee:	4603      	mov	r3, r0
 800adf0:	71fb      	strb	r3, [r7, #7]
 800adf2:	460b      	mov	r3, r1
 800adf4:	71bb      	strb	r3, [r7, #6]
 800adf6:	4613      	mov	r3, r2
 800adf8:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800adfa:	2300      	movs	r3, #0
 800adfc:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800adfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	db41      	blt.n	800ae8a <OLED_DrawPoint+0xa2>
 800ae06:	79bb      	ldrb	r3, [r7, #6]
 800ae08:	2b3f      	cmp	r3, #63	; 0x3f
 800ae0a:	d83e      	bhi.n	800ae8a <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800ae0c:	79bb      	ldrb	r3, [r7, #6]
 800ae0e:	08db      	lsrs	r3, r3, #3
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	f1c3 0307 	rsb	r3, r3, #7
 800ae16:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800ae18:	79bb      	ldrb	r3, [r7, #6]
 800ae1a:	f003 0307 	and.w	r3, r3, #7
 800ae1e:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800ae20:	7b7b      	ldrb	r3, [r7, #13]
 800ae22:	f1c3 0307 	rsb	r3, r3, #7
 800ae26:	2201      	movs	r2, #1
 800ae28:	fa02 f303 	lsl.w	r3, r2, r3
 800ae2c:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800ae2e:	797b      	ldrb	r3, [r7, #5]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d012      	beq.n	800ae5a <OLED_DrawPoint+0x72>
 800ae34:	79fa      	ldrb	r2, [r7, #7]
 800ae36:	7bbb      	ldrb	r3, [r7, #14]
 800ae38:	4917      	ldr	r1, [pc, #92]	; (800ae98 <OLED_DrawPoint+0xb0>)
 800ae3a:	00d2      	lsls	r2, r2, #3
 800ae3c:	440a      	add	r2, r1
 800ae3e:	4413      	add	r3, r2
 800ae40:	7818      	ldrb	r0, [r3, #0]
 800ae42:	79fa      	ldrb	r2, [r7, #7]
 800ae44:	7bbb      	ldrb	r3, [r7, #14]
 800ae46:	7bf9      	ldrb	r1, [r7, #15]
 800ae48:	4301      	orrs	r1, r0
 800ae4a:	b2c8      	uxtb	r0, r1
 800ae4c:	4912      	ldr	r1, [pc, #72]	; (800ae98 <OLED_DrawPoint+0xb0>)
 800ae4e:	00d2      	lsls	r2, r2, #3
 800ae50:	440a      	add	r2, r1
 800ae52:	4413      	add	r3, r2
 800ae54:	4602      	mov	r2, r0
 800ae56:	701a      	strb	r2, [r3, #0]
 800ae58:	e018      	b.n	800ae8c <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800ae5a:	79fa      	ldrb	r2, [r7, #7]
 800ae5c:	7bbb      	ldrb	r3, [r7, #14]
 800ae5e:	490e      	ldr	r1, [pc, #56]	; (800ae98 <OLED_DrawPoint+0xb0>)
 800ae60:	00d2      	lsls	r2, r2, #3
 800ae62:	440a      	add	r2, r1
 800ae64:	4413      	add	r3, r2
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	b25a      	sxtb	r2, r3
 800ae6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae6e:	43db      	mvns	r3, r3
 800ae70:	b25b      	sxtb	r3, r3
 800ae72:	4013      	ands	r3, r2
 800ae74:	b259      	sxtb	r1, r3
 800ae76:	79fa      	ldrb	r2, [r7, #7]
 800ae78:	7bbb      	ldrb	r3, [r7, #14]
 800ae7a:	b2c8      	uxtb	r0, r1
 800ae7c:	4906      	ldr	r1, [pc, #24]	; (800ae98 <OLED_DrawPoint+0xb0>)
 800ae7e:	00d2      	lsls	r2, r2, #3
 800ae80:	440a      	add	r2, r1
 800ae82:	4413      	add	r3, r2
 800ae84:	4602      	mov	r2, r0
 800ae86:	701a      	strb	r2, [r3, #0]
 800ae88:	e000      	b.n	800ae8c <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800ae8a:	bf00      	nop
}
 800ae8c:	3714      	adds	r7, #20
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr
 800ae96:	bf00      	nop
 800ae98:	20004c60 	.word	0x20004c60

0800ae9c <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800ae9c:	b590      	push	{r4, r7, lr}
 800ae9e:	b085      	sub	sp, #20
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	4604      	mov	r4, r0
 800aea4:	4608      	mov	r0, r1
 800aea6:	4611      	mov	r1, r2
 800aea8:	461a      	mov	r2, r3
 800aeaa:	4623      	mov	r3, r4
 800aeac:	71fb      	strb	r3, [r7, #7]
 800aeae:	4603      	mov	r3, r0
 800aeb0:	71bb      	strb	r3, [r7, #6]
 800aeb2:	460b      	mov	r3, r1
 800aeb4:	717b      	strb	r3, [r7, #5]
 800aeb6:	4613      	mov	r3, r2
 800aeb8:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800aeba:	79bb      	ldrb	r3, [r7, #6]
 800aebc:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800aebe:	797b      	ldrb	r3, [r7, #5]
 800aec0:	3b20      	subs	r3, #32
 800aec2:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800aec4:	2300      	movs	r3, #0
 800aec6:	73bb      	strb	r3, [r7, #14]
 800aec8:	e04d      	b.n	800af66 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800aeca:	793b      	ldrb	r3, [r7, #4]
 800aecc:	2b0c      	cmp	r3, #12
 800aece:	d10b      	bne.n	800aee8 <OLED_ShowChar+0x4c>
 800aed0:	797a      	ldrb	r2, [r7, #5]
 800aed2:	7bb9      	ldrb	r1, [r7, #14]
 800aed4:	4828      	ldr	r0, [pc, #160]	; (800af78 <OLED_ShowChar+0xdc>)
 800aed6:	4613      	mov	r3, r2
 800aed8:	005b      	lsls	r3, r3, #1
 800aeda:	4413      	add	r3, r2
 800aedc:	009b      	lsls	r3, r3, #2
 800aede:	4403      	add	r3, r0
 800aee0:	440b      	add	r3, r1
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	73fb      	strb	r3, [r7, #15]
 800aee6:	e007      	b.n	800aef8 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800aee8:	797a      	ldrb	r2, [r7, #5]
 800aeea:	7bbb      	ldrb	r3, [r7, #14]
 800aeec:	4923      	ldr	r1, [pc, #140]	; (800af7c <OLED_ShowChar+0xe0>)
 800aeee:	0112      	lsls	r2, r2, #4
 800aef0:	440a      	add	r2, r1
 800aef2:	4413      	add	r3, r2
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800aef8:	2300      	movs	r3, #0
 800aefa:	737b      	strb	r3, [r7, #13]
 800aefc:	e02d      	b.n	800af5a <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800aefe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af02:	2b00      	cmp	r3, #0
 800af04:	da07      	bge.n	800af16 <OLED_ShowChar+0x7a>
 800af06:	f897 2020 	ldrb.w	r2, [r7, #32]
 800af0a:	79b9      	ldrb	r1, [r7, #6]
 800af0c:	79fb      	ldrb	r3, [r7, #7]
 800af0e:	4618      	mov	r0, r3
 800af10:	f7ff ff6a 	bl	800ade8 <OLED_DrawPoint>
 800af14:	e00c      	b.n	800af30 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800af16:	f897 3020 	ldrb.w	r3, [r7, #32]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	bf0c      	ite	eq
 800af1e:	2301      	moveq	r3, #1
 800af20:	2300      	movne	r3, #0
 800af22:	b2db      	uxtb	r3, r3
 800af24:	461a      	mov	r2, r3
 800af26:	79b9      	ldrb	r1, [r7, #6]
 800af28:	79fb      	ldrb	r3, [r7, #7]
 800af2a:	4618      	mov	r0, r3
 800af2c:	f7ff ff5c 	bl	800ade8 <OLED_DrawPoint>
			temp<<=1;
 800af30:	7bfb      	ldrb	r3, [r7, #15]
 800af32:	005b      	lsls	r3, r3, #1
 800af34:	73fb      	strb	r3, [r7, #15]
			y++;
 800af36:	79bb      	ldrb	r3, [r7, #6]
 800af38:	3301      	adds	r3, #1
 800af3a:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800af3c:	79ba      	ldrb	r2, [r7, #6]
 800af3e:	7b3b      	ldrb	r3, [r7, #12]
 800af40:	1ad2      	subs	r2, r2, r3
 800af42:	793b      	ldrb	r3, [r7, #4]
 800af44:	429a      	cmp	r2, r3
 800af46:	d105      	bne.n	800af54 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800af48:	7b3b      	ldrb	r3, [r7, #12]
 800af4a:	71bb      	strb	r3, [r7, #6]
				x++;
 800af4c:	79fb      	ldrb	r3, [r7, #7]
 800af4e:	3301      	adds	r3, #1
 800af50:	71fb      	strb	r3, [r7, #7]
				break;
 800af52:	e005      	b.n	800af60 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800af54:	7b7b      	ldrb	r3, [r7, #13]
 800af56:	3301      	adds	r3, #1
 800af58:	737b      	strb	r3, [r7, #13]
 800af5a:	7b7b      	ldrb	r3, [r7, #13]
 800af5c:	2b07      	cmp	r3, #7
 800af5e:	d9ce      	bls.n	800aefe <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800af60:	7bbb      	ldrb	r3, [r7, #14]
 800af62:	3301      	adds	r3, #1
 800af64:	73bb      	strb	r3, [r7, #14]
 800af66:	7bba      	ldrb	r2, [r7, #14]
 800af68:	793b      	ldrb	r3, [r7, #4]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d3ad      	bcc.n	800aeca <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800af6e:	bf00      	nop
 800af70:	bf00      	nop
 800af72:	3714      	adds	r7, #20
 800af74:	46bd      	mov	sp, r7
 800af76:	bd90      	pop	{r4, r7, pc}
 800af78:	0800bbd8 	.word	0x0800bbd8
 800af7c:	0800c04c 	.word	0x0800c04c

0800af80 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b084      	sub	sp, #16
 800af84:	af02      	add	r7, sp, #8
 800af86:	4603      	mov	r3, r0
 800af88:	603a      	str	r2, [r7, #0]
 800af8a:	71fb      	strb	r3, [r7, #7]
 800af8c:	460b      	mov	r3, r1
 800af8e:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800af90:	e01f      	b.n	800afd2 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800af92:	79fb      	ldrb	r3, [r7, #7]
 800af94:	2b7a      	cmp	r3, #122	; 0x7a
 800af96:	d904      	bls.n	800afa2 <OLED_ShowString+0x22>
 800af98:	2300      	movs	r3, #0
 800af9a:	71fb      	strb	r3, [r7, #7]
 800af9c:	79bb      	ldrb	r3, [r7, #6]
 800af9e:	3310      	adds	r3, #16
 800afa0:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800afa2:	79bb      	ldrb	r3, [r7, #6]
 800afa4:	2b3a      	cmp	r3, #58	; 0x3a
 800afa6:	d905      	bls.n	800afb4 <OLED_ShowString+0x34>
 800afa8:	2300      	movs	r3, #0
 800afaa:	71fb      	strb	r3, [r7, #7]
 800afac:	79fb      	ldrb	r3, [r7, #7]
 800afae:	71bb      	strb	r3, [r7, #6]
 800afb0:	f7ff fef4 	bl	800ad9c <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	781a      	ldrb	r2, [r3, #0]
 800afb8:	79b9      	ldrb	r1, [r7, #6]
 800afba:	79f8      	ldrb	r0, [r7, #7]
 800afbc:	2301      	movs	r3, #1
 800afbe:	9300      	str	r3, [sp, #0]
 800afc0:	230c      	movs	r3, #12
 800afc2:	f7ff ff6b 	bl	800ae9c <OLED_ShowChar>
        x+=8;
 800afc6:	79fb      	ldrb	r3, [r7, #7]
 800afc8:	3308      	adds	r3, #8
 800afca:	71fb      	strb	r3, [r7, #7]
        p++;
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	3301      	adds	r3, #1
 800afd0:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d1db      	bne.n	800af92 <OLED_ShowString+0x12>
    }  
}	 
 800afda:	bf00      	nop
 800afdc:	bf00      	nop
 800afde:	3708      	adds	r7, #8
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <OLED_Init>:

void OLED_Init(void)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800afe8:	f7f9 fe20 	bl	8004c2c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800afec:	4b41      	ldr	r3, [pc, #260]	; (800b0f4 <OLED_Init+0x110>)
 800afee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aff0:	4a40      	ldr	r2, [pc, #256]	; (800b0f4 <OLED_Init+0x110>)
 800aff2:	f023 0301 	bic.w	r3, r3, #1
 800aff6:	6713      	str	r3, [r2, #112]	; 0x70
 800aff8:	4b3e      	ldr	r3, [pc, #248]	; (800b0f4 <OLED_Init+0x110>)
 800affa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800affc:	4a3d      	ldr	r2, [pc, #244]	; (800b0f4 <OLED_Init+0x110>)
 800affe:	f023 0304 	bic.w	r3, r3, #4
 800b002:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800b004:	f7f9 fe26 	bl	8004c54 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800b008:	2200      	movs	r2, #0
 800b00a:	2180      	movs	r1, #128	; 0x80
 800b00c:	483a      	ldr	r0, [pc, #232]	; (800b0f8 <OLED_Init+0x114>)
 800b00e:	f7f8 fddf 	bl	8003bd0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800b012:	2064      	movs	r0, #100	; 0x64
 800b014:	f7f8 fa78 	bl	8003508 <HAL_Delay>
	OLED_RST_Set();
 800b018:	2201      	movs	r2, #1
 800b01a:	2180      	movs	r1, #128	; 0x80
 800b01c:	4836      	ldr	r0, [pc, #216]	; (800b0f8 <OLED_Init+0x114>)
 800b01e:	f7f8 fdd7 	bl	8003bd0 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800b022:	2100      	movs	r1, #0
 800b024:	20ae      	movs	r0, #174	; 0xae
 800b026:	f7ff fe6f 	bl	800ad08 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800b02a:	2100      	movs	r1, #0
 800b02c:	20d5      	movs	r0, #213	; 0xd5
 800b02e:	f7ff fe6b 	bl	800ad08 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800b032:	2100      	movs	r1, #0
 800b034:	2050      	movs	r0, #80	; 0x50
 800b036:	f7ff fe67 	bl	800ad08 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800b03a:	2100      	movs	r1, #0
 800b03c:	20a8      	movs	r0, #168	; 0xa8
 800b03e:	f7ff fe63 	bl	800ad08 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800b042:	2100      	movs	r1, #0
 800b044:	203f      	movs	r0, #63	; 0x3f
 800b046:	f7ff fe5f 	bl	800ad08 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800b04a:	2100      	movs	r1, #0
 800b04c:	20d3      	movs	r0, #211	; 0xd3
 800b04e:	f7ff fe5b 	bl	800ad08 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800b052:	2100      	movs	r1, #0
 800b054:	2000      	movs	r0, #0
 800b056:	f7ff fe57 	bl	800ad08 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800b05a:	2100      	movs	r1, #0
 800b05c:	2040      	movs	r0, #64	; 0x40
 800b05e:	f7ff fe53 	bl	800ad08 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800b062:	2100      	movs	r1, #0
 800b064:	208d      	movs	r0, #141	; 0x8d
 800b066:	f7ff fe4f 	bl	800ad08 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800b06a:	2100      	movs	r1, #0
 800b06c:	2014      	movs	r0, #20
 800b06e:	f7ff fe4b 	bl	800ad08 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800b072:	2100      	movs	r1, #0
 800b074:	2020      	movs	r0, #32
 800b076:	f7ff fe47 	bl	800ad08 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800b07a:	2100      	movs	r1, #0
 800b07c:	2002      	movs	r0, #2
 800b07e:	f7ff fe43 	bl	800ad08 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800b082:	2100      	movs	r1, #0
 800b084:	20a1      	movs	r0, #161	; 0xa1
 800b086:	f7ff fe3f 	bl	800ad08 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800b08a:	2100      	movs	r1, #0
 800b08c:	20c0      	movs	r0, #192	; 0xc0
 800b08e:	f7ff fe3b 	bl	800ad08 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800b092:	2100      	movs	r1, #0
 800b094:	20da      	movs	r0, #218	; 0xda
 800b096:	f7ff fe37 	bl	800ad08 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800b09a:	2100      	movs	r1, #0
 800b09c:	2012      	movs	r0, #18
 800b09e:	f7ff fe33 	bl	800ad08 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800b0a2:	2100      	movs	r1, #0
 800b0a4:	2081      	movs	r0, #129	; 0x81
 800b0a6:	f7ff fe2f 	bl	800ad08 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800b0aa:	2100      	movs	r1, #0
 800b0ac:	20ef      	movs	r0, #239	; 0xef
 800b0ae:	f7ff fe2b 	bl	800ad08 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800b0b2:	2100      	movs	r1, #0
 800b0b4:	20d9      	movs	r0, #217	; 0xd9
 800b0b6:	f7ff fe27 	bl	800ad08 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800b0ba:	2100      	movs	r1, #0
 800b0bc:	20f1      	movs	r0, #241	; 0xf1
 800b0be:	f7ff fe23 	bl	800ad08 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800b0c2:	2100      	movs	r1, #0
 800b0c4:	20db      	movs	r0, #219	; 0xdb
 800b0c6:	f7ff fe1f 	bl	800ad08 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800b0ca:	2100      	movs	r1, #0
 800b0cc:	2030      	movs	r0, #48	; 0x30
 800b0ce:	f7ff fe1b 	bl	800ad08 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800b0d2:	2100      	movs	r1, #0
 800b0d4:	20a4      	movs	r0, #164	; 0xa4
 800b0d6:	f7ff fe17 	bl	800ad08 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800b0da:	2100      	movs	r1, #0
 800b0dc:	20a6      	movs	r0, #166	; 0xa6
 800b0de:	f7ff fe13 	bl	800ad08 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800b0e2:	2100      	movs	r1, #0
 800b0e4:	20af      	movs	r0, #175	; 0xaf
 800b0e6:	f7ff fe0f 	bl	800ad08 <OLED_WR_Byte>
	OLED_Clear(); 
 800b0ea:	f7ff fe57 	bl	800ad9c <OLED_Clear>
 800b0ee:	bf00      	nop
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop
 800b0f4:	40023800 	.word	0x40023800
 800b0f8:	40021000 	.word	0x40021000

0800b0fc <malloc>:
 800b0fc:	4b02      	ldr	r3, [pc, #8]	; (800b108 <malloc+0xc>)
 800b0fe:	4601      	mov	r1, r0
 800b100:	6818      	ldr	r0, [r3, #0]
 800b102:	f000 b82b 	b.w	800b15c <_malloc_r>
 800b106:	bf00      	nop
 800b108:	20000074 	.word	0x20000074

0800b10c <free>:
 800b10c:	4b02      	ldr	r3, [pc, #8]	; (800b118 <free+0xc>)
 800b10e:	4601      	mov	r1, r0
 800b110:	6818      	ldr	r0, [r3, #0]
 800b112:	f000 b921 	b.w	800b358 <_free_r>
 800b116:	bf00      	nop
 800b118:	20000074 	.word	0x20000074

0800b11c <sbrk_aligned>:
 800b11c:	b570      	push	{r4, r5, r6, lr}
 800b11e:	4e0e      	ldr	r6, [pc, #56]	; (800b158 <sbrk_aligned+0x3c>)
 800b120:	460c      	mov	r4, r1
 800b122:	6831      	ldr	r1, [r6, #0]
 800b124:	4605      	mov	r5, r0
 800b126:	b911      	cbnz	r1, 800b12e <sbrk_aligned+0x12>
 800b128:	f000 f8cc 	bl	800b2c4 <_sbrk_r>
 800b12c:	6030      	str	r0, [r6, #0]
 800b12e:	4621      	mov	r1, r4
 800b130:	4628      	mov	r0, r5
 800b132:	f000 f8c7 	bl	800b2c4 <_sbrk_r>
 800b136:	1c43      	adds	r3, r0, #1
 800b138:	d00a      	beq.n	800b150 <sbrk_aligned+0x34>
 800b13a:	1cc4      	adds	r4, r0, #3
 800b13c:	f024 0403 	bic.w	r4, r4, #3
 800b140:	42a0      	cmp	r0, r4
 800b142:	d007      	beq.n	800b154 <sbrk_aligned+0x38>
 800b144:	1a21      	subs	r1, r4, r0
 800b146:	4628      	mov	r0, r5
 800b148:	f000 f8bc 	bl	800b2c4 <_sbrk_r>
 800b14c:	3001      	adds	r0, #1
 800b14e:	d101      	bne.n	800b154 <sbrk_aligned+0x38>
 800b150:	f04f 34ff 	mov.w	r4, #4294967295
 800b154:	4620      	mov	r0, r4
 800b156:	bd70      	pop	{r4, r5, r6, pc}
 800b158:	20005064 	.word	0x20005064

0800b15c <_malloc_r>:
 800b15c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b160:	1ccd      	adds	r5, r1, #3
 800b162:	f025 0503 	bic.w	r5, r5, #3
 800b166:	3508      	adds	r5, #8
 800b168:	2d0c      	cmp	r5, #12
 800b16a:	bf38      	it	cc
 800b16c:	250c      	movcc	r5, #12
 800b16e:	2d00      	cmp	r5, #0
 800b170:	4607      	mov	r7, r0
 800b172:	db01      	blt.n	800b178 <_malloc_r+0x1c>
 800b174:	42a9      	cmp	r1, r5
 800b176:	d905      	bls.n	800b184 <_malloc_r+0x28>
 800b178:	230c      	movs	r3, #12
 800b17a:	603b      	str	r3, [r7, #0]
 800b17c:	2600      	movs	r6, #0
 800b17e:	4630      	mov	r0, r6
 800b180:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b184:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b258 <_malloc_r+0xfc>
 800b188:	f000 f868 	bl	800b25c <__malloc_lock>
 800b18c:	f8d8 3000 	ldr.w	r3, [r8]
 800b190:	461c      	mov	r4, r3
 800b192:	bb5c      	cbnz	r4, 800b1ec <_malloc_r+0x90>
 800b194:	4629      	mov	r1, r5
 800b196:	4638      	mov	r0, r7
 800b198:	f7ff ffc0 	bl	800b11c <sbrk_aligned>
 800b19c:	1c43      	adds	r3, r0, #1
 800b19e:	4604      	mov	r4, r0
 800b1a0:	d155      	bne.n	800b24e <_malloc_r+0xf2>
 800b1a2:	f8d8 4000 	ldr.w	r4, [r8]
 800b1a6:	4626      	mov	r6, r4
 800b1a8:	2e00      	cmp	r6, #0
 800b1aa:	d145      	bne.n	800b238 <_malloc_r+0xdc>
 800b1ac:	2c00      	cmp	r4, #0
 800b1ae:	d048      	beq.n	800b242 <_malloc_r+0xe6>
 800b1b0:	6823      	ldr	r3, [r4, #0]
 800b1b2:	4631      	mov	r1, r6
 800b1b4:	4638      	mov	r0, r7
 800b1b6:	eb04 0903 	add.w	r9, r4, r3
 800b1ba:	f000 f883 	bl	800b2c4 <_sbrk_r>
 800b1be:	4581      	cmp	r9, r0
 800b1c0:	d13f      	bne.n	800b242 <_malloc_r+0xe6>
 800b1c2:	6821      	ldr	r1, [r4, #0]
 800b1c4:	1a6d      	subs	r5, r5, r1
 800b1c6:	4629      	mov	r1, r5
 800b1c8:	4638      	mov	r0, r7
 800b1ca:	f7ff ffa7 	bl	800b11c <sbrk_aligned>
 800b1ce:	3001      	adds	r0, #1
 800b1d0:	d037      	beq.n	800b242 <_malloc_r+0xe6>
 800b1d2:	6823      	ldr	r3, [r4, #0]
 800b1d4:	442b      	add	r3, r5
 800b1d6:	6023      	str	r3, [r4, #0]
 800b1d8:	f8d8 3000 	ldr.w	r3, [r8]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d038      	beq.n	800b252 <_malloc_r+0xf6>
 800b1e0:	685a      	ldr	r2, [r3, #4]
 800b1e2:	42a2      	cmp	r2, r4
 800b1e4:	d12b      	bne.n	800b23e <_malloc_r+0xe2>
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	605a      	str	r2, [r3, #4]
 800b1ea:	e00f      	b.n	800b20c <_malloc_r+0xb0>
 800b1ec:	6822      	ldr	r2, [r4, #0]
 800b1ee:	1b52      	subs	r2, r2, r5
 800b1f0:	d41f      	bmi.n	800b232 <_malloc_r+0xd6>
 800b1f2:	2a0b      	cmp	r2, #11
 800b1f4:	d917      	bls.n	800b226 <_malloc_r+0xca>
 800b1f6:	1961      	adds	r1, r4, r5
 800b1f8:	42a3      	cmp	r3, r4
 800b1fa:	6025      	str	r5, [r4, #0]
 800b1fc:	bf18      	it	ne
 800b1fe:	6059      	strne	r1, [r3, #4]
 800b200:	6863      	ldr	r3, [r4, #4]
 800b202:	bf08      	it	eq
 800b204:	f8c8 1000 	streq.w	r1, [r8]
 800b208:	5162      	str	r2, [r4, r5]
 800b20a:	604b      	str	r3, [r1, #4]
 800b20c:	4638      	mov	r0, r7
 800b20e:	f104 060b 	add.w	r6, r4, #11
 800b212:	f000 f829 	bl	800b268 <__malloc_unlock>
 800b216:	f026 0607 	bic.w	r6, r6, #7
 800b21a:	1d23      	adds	r3, r4, #4
 800b21c:	1af2      	subs	r2, r6, r3
 800b21e:	d0ae      	beq.n	800b17e <_malloc_r+0x22>
 800b220:	1b9b      	subs	r3, r3, r6
 800b222:	50a3      	str	r3, [r4, r2]
 800b224:	e7ab      	b.n	800b17e <_malloc_r+0x22>
 800b226:	42a3      	cmp	r3, r4
 800b228:	6862      	ldr	r2, [r4, #4]
 800b22a:	d1dd      	bne.n	800b1e8 <_malloc_r+0x8c>
 800b22c:	f8c8 2000 	str.w	r2, [r8]
 800b230:	e7ec      	b.n	800b20c <_malloc_r+0xb0>
 800b232:	4623      	mov	r3, r4
 800b234:	6864      	ldr	r4, [r4, #4]
 800b236:	e7ac      	b.n	800b192 <_malloc_r+0x36>
 800b238:	4634      	mov	r4, r6
 800b23a:	6876      	ldr	r6, [r6, #4]
 800b23c:	e7b4      	b.n	800b1a8 <_malloc_r+0x4c>
 800b23e:	4613      	mov	r3, r2
 800b240:	e7cc      	b.n	800b1dc <_malloc_r+0x80>
 800b242:	230c      	movs	r3, #12
 800b244:	603b      	str	r3, [r7, #0]
 800b246:	4638      	mov	r0, r7
 800b248:	f000 f80e 	bl	800b268 <__malloc_unlock>
 800b24c:	e797      	b.n	800b17e <_malloc_r+0x22>
 800b24e:	6025      	str	r5, [r4, #0]
 800b250:	e7dc      	b.n	800b20c <_malloc_r+0xb0>
 800b252:	605b      	str	r3, [r3, #4]
 800b254:	deff      	udf	#255	; 0xff
 800b256:	bf00      	nop
 800b258:	20005060 	.word	0x20005060

0800b25c <__malloc_lock>:
 800b25c:	4801      	ldr	r0, [pc, #4]	; (800b264 <__malloc_lock+0x8>)
 800b25e:	f000 b86b 	b.w	800b338 <__retarget_lock_acquire_recursive>
 800b262:	bf00      	nop
 800b264:	200051a4 	.word	0x200051a4

0800b268 <__malloc_unlock>:
 800b268:	4801      	ldr	r0, [pc, #4]	; (800b270 <__malloc_unlock+0x8>)
 800b26a:	f000 b866 	b.w	800b33a <__retarget_lock_release_recursive>
 800b26e:	bf00      	nop
 800b270:	200051a4 	.word	0x200051a4

0800b274 <siprintf>:
 800b274:	b40e      	push	{r1, r2, r3}
 800b276:	b500      	push	{lr}
 800b278:	b09c      	sub	sp, #112	; 0x70
 800b27a:	ab1d      	add	r3, sp, #116	; 0x74
 800b27c:	9002      	str	r0, [sp, #8]
 800b27e:	9006      	str	r0, [sp, #24]
 800b280:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b284:	4809      	ldr	r0, [pc, #36]	; (800b2ac <siprintf+0x38>)
 800b286:	9107      	str	r1, [sp, #28]
 800b288:	9104      	str	r1, [sp, #16]
 800b28a:	4909      	ldr	r1, [pc, #36]	; (800b2b0 <siprintf+0x3c>)
 800b28c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b290:	9105      	str	r1, [sp, #20]
 800b292:	6800      	ldr	r0, [r0, #0]
 800b294:	9301      	str	r3, [sp, #4]
 800b296:	a902      	add	r1, sp, #8
 800b298:	f000 f904 	bl	800b4a4 <_svfiprintf_r>
 800b29c:	9b02      	ldr	r3, [sp, #8]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	701a      	strb	r2, [r3, #0]
 800b2a2:	b01c      	add	sp, #112	; 0x70
 800b2a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2a8:	b003      	add	sp, #12
 800b2aa:	4770      	bx	lr
 800b2ac:	20000074 	.word	0x20000074
 800b2b0:	ffff0208 	.word	0xffff0208

0800b2b4 <memset>:
 800b2b4:	4402      	add	r2, r0
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	4293      	cmp	r3, r2
 800b2ba:	d100      	bne.n	800b2be <memset+0xa>
 800b2bc:	4770      	bx	lr
 800b2be:	f803 1b01 	strb.w	r1, [r3], #1
 800b2c2:	e7f9      	b.n	800b2b8 <memset+0x4>

0800b2c4 <_sbrk_r>:
 800b2c4:	b538      	push	{r3, r4, r5, lr}
 800b2c6:	4d06      	ldr	r5, [pc, #24]	; (800b2e0 <_sbrk_r+0x1c>)
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	4604      	mov	r4, r0
 800b2cc:	4608      	mov	r0, r1
 800b2ce:	602b      	str	r3, [r5, #0]
 800b2d0:	f7f8 f836 	bl	8003340 <_sbrk>
 800b2d4:	1c43      	adds	r3, r0, #1
 800b2d6:	d102      	bne.n	800b2de <_sbrk_r+0x1a>
 800b2d8:	682b      	ldr	r3, [r5, #0]
 800b2da:	b103      	cbz	r3, 800b2de <_sbrk_r+0x1a>
 800b2dc:	6023      	str	r3, [r4, #0]
 800b2de:	bd38      	pop	{r3, r4, r5, pc}
 800b2e0:	200051a0 	.word	0x200051a0

0800b2e4 <__errno>:
 800b2e4:	4b01      	ldr	r3, [pc, #4]	; (800b2ec <__errno+0x8>)
 800b2e6:	6818      	ldr	r0, [r3, #0]
 800b2e8:	4770      	bx	lr
 800b2ea:	bf00      	nop
 800b2ec:	20000074 	.word	0x20000074

0800b2f0 <__libc_init_array>:
 800b2f0:	b570      	push	{r4, r5, r6, lr}
 800b2f2:	4d0d      	ldr	r5, [pc, #52]	; (800b328 <__libc_init_array+0x38>)
 800b2f4:	4c0d      	ldr	r4, [pc, #52]	; (800b32c <__libc_init_array+0x3c>)
 800b2f6:	1b64      	subs	r4, r4, r5
 800b2f8:	10a4      	asrs	r4, r4, #2
 800b2fa:	2600      	movs	r6, #0
 800b2fc:	42a6      	cmp	r6, r4
 800b2fe:	d109      	bne.n	800b314 <__libc_init_array+0x24>
 800b300:	4d0b      	ldr	r5, [pc, #44]	; (800b330 <__libc_init_array+0x40>)
 800b302:	4c0c      	ldr	r4, [pc, #48]	; (800b334 <__libc_init_array+0x44>)
 800b304:	f000 fbae 	bl	800ba64 <_init>
 800b308:	1b64      	subs	r4, r4, r5
 800b30a:	10a4      	asrs	r4, r4, #2
 800b30c:	2600      	movs	r6, #0
 800b30e:	42a6      	cmp	r6, r4
 800b310:	d105      	bne.n	800b31e <__libc_init_array+0x2e>
 800b312:	bd70      	pop	{r4, r5, r6, pc}
 800b314:	f855 3b04 	ldr.w	r3, [r5], #4
 800b318:	4798      	blx	r3
 800b31a:	3601      	adds	r6, #1
 800b31c:	e7ee      	b.n	800b2fc <__libc_init_array+0xc>
 800b31e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b322:	4798      	blx	r3
 800b324:	3601      	adds	r6, #1
 800b326:	e7f2      	b.n	800b30e <__libc_init_array+0x1e>
 800b328:	0800c678 	.word	0x0800c678
 800b32c:	0800c678 	.word	0x0800c678
 800b330:	0800c678 	.word	0x0800c678
 800b334:	0800c67c 	.word	0x0800c67c

0800b338 <__retarget_lock_acquire_recursive>:
 800b338:	4770      	bx	lr

0800b33a <__retarget_lock_release_recursive>:
 800b33a:	4770      	bx	lr

0800b33c <memcpy>:
 800b33c:	440a      	add	r2, r1
 800b33e:	4291      	cmp	r1, r2
 800b340:	f100 33ff 	add.w	r3, r0, #4294967295
 800b344:	d100      	bne.n	800b348 <memcpy+0xc>
 800b346:	4770      	bx	lr
 800b348:	b510      	push	{r4, lr}
 800b34a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b34e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b352:	4291      	cmp	r1, r2
 800b354:	d1f9      	bne.n	800b34a <memcpy+0xe>
 800b356:	bd10      	pop	{r4, pc}

0800b358 <_free_r>:
 800b358:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b35a:	2900      	cmp	r1, #0
 800b35c:	d044      	beq.n	800b3e8 <_free_r+0x90>
 800b35e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b362:	9001      	str	r0, [sp, #4]
 800b364:	2b00      	cmp	r3, #0
 800b366:	f1a1 0404 	sub.w	r4, r1, #4
 800b36a:	bfb8      	it	lt
 800b36c:	18e4      	addlt	r4, r4, r3
 800b36e:	f7ff ff75 	bl	800b25c <__malloc_lock>
 800b372:	4a1e      	ldr	r2, [pc, #120]	; (800b3ec <_free_r+0x94>)
 800b374:	9801      	ldr	r0, [sp, #4]
 800b376:	6813      	ldr	r3, [r2, #0]
 800b378:	b933      	cbnz	r3, 800b388 <_free_r+0x30>
 800b37a:	6063      	str	r3, [r4, #4]
 800b37c:	6014      	str	r4, [r2, #0]
 800b37e:	b003      	add	sp, #12
 800b380:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b384:	f7ff bf70 	b.w	800b268 <__malloc_unlock>
 800b388:	42a3      	cmp	r3, r4
 800b38a:	d908      	bls.n	800b39e <_free_r+0x46>
 800b38c:	6825      	ldr	r5, [r4, #0]
 800b38e:	1961      	adds	r1, r4, r5
 800b390:	428b      	cmp	r3, r1
 800b392:	bf01      	itttt	eq
 800b394:	6819      	ldreq	r1, [r3, #0]
 800b396:	685b      	ldreq	r3, [r3, #4]
 800b398:	1949      	addeq	r1, r1, r5
 800b39a:	6021      	streq	r1, [r4, #0]
 800b39c:	e7ed      	b.n	800b37a <_free_r+0x22>
 800b39e:	461a      	mov	r2, r3
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	b10b      	cbz	r3, 800b3a8 <_free_r+0x50>
 800b3a4:	42a3      	cmp	r3, r4
 800b3a6:	d9fa      	bls.n	800b39e <_free_r+0x46>
 800b3a8:	6811      	ldr	r1, [r2, #0]
 800b3aa:	1855      	adds	r5, r2, r1
 800b3ac:	42a5      	cmp	r5, r4
 800b3ae:	d10b      	bne.n	800b3c8 <_free_r+0x70>
 800b3b0:	6824      	ldr	r4, [r4, #0]
 800b3b2:	4421      	add	r1, r4
 800b3b4:	1854      	adds	r4, r2, r1
 800b3b6:	42a3      	cmp	r3, r4
 800b3b8:	6011      	str	r1, [r2, #0]
 800b3ba:	d1e0      	bne.n	800b37e <_free_r+0x26>
 800b3bc:	681c      	ldr	r4, [r3, #0]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	6053      	str	r3, [r2, #4]
 800b3c2:	440c      	add	r4, r1
 800b3c4:	6014      	str	r4, [r2, #0]
 800b3c6:	e7da      	b.n	800b37e <_free_r+0x26>
 800b3c8:	d902      	bls.n	800b3d0 <_free_r+0x78>
 800b3ca:	230c      	movs	r3, #12
 800b3cc:	6003      	str	r3, [r0, #0]
 800b3ce:	e7d6      	b.n	800b37e <_free_r+0x26>
 800b3d0:	6825      	ldr	r5, [r4, #0]
 800b3d2:	1961      	adds	r1, r4, r5
 800b3d4:	428b      	cmp	r3, r1
 800b3d6:	bf04      	itt	eq
 800b3d8:	6819      	ldreq	r1, [r3, #0]
 800b3da:	685b      	ldreq	r3, [r3, #4]
 800b3dc:	6063      	str	r3, [r4, #4]
 800b3de:	bf04      	itt	eq
 800b3e0:	1949      	addeq	r1, r1, r5
 800b3e2:	6021      	streq	r1, [r4, #0]
 800b3e4:	6054      	str	r4, [r2, #4]
 800b3e6:	e7ca      	b.n	800b37e <_free_r+0x26>
 800b3e8:	b003      	add	sp, #12
 800b3ea:	bd30      	pop	{r4, r5, pc}
 800b3ec:	20005060 	.word	0x20005060

0800b3f0 <__ssputs_r>:
 800b3f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3f4:	688e      	ldr	r6, [r1, #8]
 800b3f6:	461f      	mov	r7, r3
 800b3f8:	42be      	cmp	r6, r7
 800b3fa:	680b      	ldr	r3, [r1, #0]
 800b3fc:	4682      	mov	sl, r0
 800b3fe:	460c      	mov	r4, r1
 800b400:	4690      	mov	r8, r2
 800b402:	d82c      	bhi.n	800b45e <__ssputs_r+0x6e>
 800b404:	898a      	ldrh	r2, [r1, #12]
 800b406:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b40a:	d026      	beq.n	800b45a <__ssputs_r+0x6a>
 800b40c:	6965      	ldr	r5, [r4, #20]
 800b40e:	6909      	ldr	r1, [r1, #16]
 800b410:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b414:	eba3 0901 	sub.w	r9, r3, r1
 800b418:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b41c:	1c7b      	adds	r3, r7, #1
 800b41e:	444b      	add	r3, r9
 800b420:	106d      	asrs	r5, r5, #1
 800b422:	429d      	cmp	r5, r3
 800b424:	bf38      	it	cc
 800b426:	461d      	movcc	r5, r3
 800b428:	0553      	lsls	r3, r2, #21
 800b42a:	d527      	bpl.n	800b47c <__ssputs_r+0x8c>
 800b42c:	4629      	mov	r1, r5
 800b42e:	f7ff fe95 	bl	800b15c <_malloc_r>
 800b432:	4606      	mov	r6, r0
 800b434:	b360      	cbz	r0, 800b490 <__ssputs_r+0xa0>
 800b436:	6921      	ldr	r1, [r4, #16]
 800b438:	464a      	mov	r2, r9
 800b43a:	f7ff ff7f 	bl	800b33c <memcpy>
 800b43e:	89a3      	ldrh	r3, [r4, #12]
 800b440:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b448:	81a3      	strh	r3, [r4, #12]
 800b44a:	6126      	str	r6, [r4, #16]
 800b44c:	6165      	str	r5, [r4, #20]
 800b44e:	444e      	add	r6, r9
 800b450:	eba5 0509 	sub.w	r5, r5, r9
 800b454:	6026      	str	r6, [r4, #0]
 800b456:	60a5      	str	r5, [r4, #8]
 800b458:	463e      	mov	r6, r7
 800b45a:	42be      	cmp	r6, r7
 800b45c:	d900      	bls.n	800b460 <__ssputs_r+0x70>
 800b45e:	463e      	mov	r6, r7
 800b460:	6820      	ldr	r0, [r4, #0]
 800b462:	4632      	mov	r2, r6
 800b464:	4641      	mov	r1, r8
 800b466:	f000 faab 	bl	800b9c0 <memmove>
 800b46a:	68a3      	ldr	r3, [r4, #8]
 800b46c:	1b9b      	subs	r3, r3, r6
 800b46e:	60a3      	str	r3, [r4, #8]
 800b470:	6823      	ldr	r3, [r4, #0]
 800b472:	4433      	add	r3, r6
 800b474:	6023      	str	r3, [r4, #0]
 800b476:	2000      	movs	r0, #0
 800b478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b47c:	462a      	mov	r2, r5
 800b47e:	f000 fab9 	bl	800b9f4 <_realloc_r>
 800b482:	4606      	mov	r6, r0
 800b484:	2800      	cmp	r0, #0
 800b486:	d1e0      	bne.n	800b44a <__ssputs_r+0x5a>
 800b488:	6921      	ldr	r1, [r4, #16]
 800b48a:	4650      	mov	r0, sl
 800b48c:	f7ff ff64 	bl	800b358 <_free_r>
 800b490:	230c      	movs	r3, #12
 800b492:	f8ca 3000 	str.w	r3, [sl]
 800b496:	89a3      	ldrh	r3, [r4, #12]
 800b498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b49c:	81a3      	strh	r3, [r4, #12]
 800b49e:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a2:	e7e9      	b.n	800b478 <__ssputs_r+0x88>

0800b4a4 <_svfiprintf_r>:
 800b4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4a8:	4698      	mov	r8, r3
 800b4aa:	898b      	ldrh	r3, [r1, #12]
 800b4ac:	061b      	lsls	r3, r3, #24
 800b4ae:	b09d      	sub	sp, #116	; 0x74
 800b4b0:	4607      	mov	r7, r0
 800b4b2:	460d      	mov	r5, r1
 800b4b4:	4614      	mov	r4, r2
 800b4b6:	d50e      	bpl.n	800b4d6 <_svfiprintf_r+0x32>
 800b4b8:	690b      	ldr	r3, [r1, #16]
 800b4ba:	b963      	cbnz	r3, 800b4d6 <_svfiprintf_r+0x32>
 800b4bc:	2140      	movs	r1, #64	; 0x40
 800b4be:	f7ff fe4d 	bl	800b15c <_malloc_r>
 800b4c2:	6028      	str	r0, [r5, #0]
 800b4c4:	6128      	str	r0, [r5, #16]
 800b4c6:	b920      	cbnz	r0, 800b4d2 <_svfiprintf_r+0x2e>
 800b4c8:	230c      	movs	r3, #12
 800b4ca:	603b      	str	r3, [r7, #0]
 800b4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b4d0:	e0d0      	b.n	800b674 <_svfiprintf_r+0x1d0>
 800b4d2:	2340      	movs	r3, #64	; 0x40
 800b4d4:	616b      	str	r3, [r5, #20]
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	9309      	str	r3, [sp, #36]	; 0x24
 800b4da:	2320      	movs	r3, #32
 800b4dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b4e0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4e4:	2330      	movs	r3, #48	; 0x30
 800b4e6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b68c <_svfiprintf_r+0x1e8>
 800b4ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b4ee:	f04f 0901 	mov.w	r9, #1
 800b4f2:	4623      	mov	r3, r4
 800b4f4:	469a      	mov	sl, r3
 800b4f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4fa:	b10a      	cbz	r2, 800b500 <_svfiprintf_r+0x5c>
 800b4fc:	2a25      	cmp	r2, #37	; 0x25
 800b4fe:	d1f9      	bne.n	800b4f4 <_svfiprintf_r+0x50>
 800b500:	ebba 0b04 	subs.w	fp, sl, r4
 800b504:	d00b      	beq.n	800b51e <_svfiprintf_r+0x7a>
 800b506:	465b      	mov	r3, fp
 800b508:	4622      	mov	r2, r4
 800b50a:	4629      	mov	r1, r5
 800b50c:	4638      	mov	r0, r7
 800b50e:	f7ff ff6f 	bl	800b3f0 <__ssputs_r>
 800b512:	3001      	adds	r0, #1
 800b514:	f000 80a9 	beq.w	800b66a <_svfiprintf_r+0x1c6>
 800b518:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b51a:	445a      	add	r2, fp
 800b51c:	9209      	str	r2, [sp, #36]	; 0x24
 800b51e:	f89a 3000 	ldrb.w	r3, [sl]
 800b522:	2b00      	cmp	r3, #0
 800b524:	f000 80a1 	beq.w	800b66a <_svfiprintf_r+0x1c6>
 800b528:	2300      	movs	r3, #0
 800b52a:	f04f 32ff 	mov.w	r2, #4294967295
 800b52e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b532:	f10a 0a01 	add.w	sl, sl, #1
 800b536:	9304      	str	r3, [sp, #16]
 800b538:	9307      	str	r3, [sp, #28]
 800b53a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b53e:	931a      	str	r3, [sp, #104]	; 0x68
 800b540:	4654      	mov	r4, sl
 800b542:	2205      	movs	r2, #5
 800b544:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b548:	4850      	ldr	r0, [pc, #320]	; (800b68c <_svfiprintf_r+0x1e8>)
 800b54a:	f7f4 fe41 	bl	80001d0 <memchr>
 800b54e:	9a04      	ldr	r2, [sp, #16]
 800b550:	b9d8      	cbnz	r0, 800b58a <_svfiprintf_r+0xe6>
 800b552:	06d0      	lsls	r0, r2, #27
 800b554:	bf44      	itt	mi
 800b556:	2320      	movmi	r3, #32
 800b558:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b55c:	0711      	lsls	r1, r2, #28
 800b55e:	bf44      	itt	mi
 800b560:	232b      	movmi	r3, #43	; 0x2b
 800b562:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b566:	f89a 3000 	ldrb.w	r3, [sl]
 800b56a:	2b2a      	cmp	r3, #42	; 0x2a
 800b56c:	d015      	beq.n	800b59a <_svfiprintf_r+0xf6>
 800b56e:	9a07      	ldr	r2, [sp, #28]
 800b570:	4654      	mov	r4, sl
 800b572:	2000      	movs	r0, #0
 800b574:	f04f 0c0a 	mov.w	ip, #10
 800b578:	4621      	mov	r1, r4
 800b57a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b57e:	3b30      	subs	r3, #48	; 0x30
 800b580:	2b09      	cmp	r3, #9
 800b582:	d94d      	bls.n	800b620 <_svfiprintf_r+0x17c>
 800b584:	b1b0      	cbz	r0, 800b5b4 <_svfiprintf_r+0x110>
 800b586:	9207      	str	r2, [sp, #28]
 800b588:	e014      	b.n	800b5b4 <_svfiprintf_r+0x110>
 800b58a:	eba0 0308 	sub.w	r3, r0, r8
 800b58e:	fa09 f303 	lsl.w	r3, r9, r3
 800b592:	4313      	orrs	r3, r2
 800b594:	9304      	str	r3, [sp, #16]
 800b596:	46a2      	mov	sl, r4
 800b598:	e7d2      	b.n	800b540 <_svfiprintf_r+0x9c>
 800b59a:	9b03      	ldr	r3, [sp, #12]
 800b59c:	1d19      	adds	r1, r3, #4
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	9103      	str	r1, [sp, #12]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	bfbb      	ittet	lt
 800b5a6:	425b      	neglt	r3, r3
 800b5a8:	f042 0202 	orrlt.w	r2, r2, #2
 800b5ac:	9307      	strge	r3, [sp, #28]
 800b5ae:	9307      	strlt	r3, [sp, #28]
 800b5b0:	bfb8      	it	lt
 800b5b2:	9204      	strlt	r2, [sp, #16]
 800b5b4:	7823      	ldrb	r3, [r4, #0]
 800b5b6:	2b2e      	cmp	r3, #46	; 0x2e
 800b5b8:	d10c      	bne.n	800b5d4 <_svfiprintf_r+0x130>
 800b5ba:	7863      	ldrb	r3, [r4, #1]
 800b5bc:	2b2a      	cmp	r3, #42	; 0x2a
 800b5be:	d134      	bne.n	800b62a <_svfiprintf_r+0x186>
 800b5c0:	9b03      	ldr	r3, [sp, #12]
 800b5c2:	1d1a      	adds	r2, r3, #4
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	9203      	str	r2, [sp, #12]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	bfb8      	it	lt
 800b5cc:	f04f 33ff 	movlt.w	r3, #4294967295
 800b5d0:	3402      	adds	r4, #2
 800b5d2:	9305      	str	r3, [sp, #20]
 800b5d4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b69c <_svfiprintf_r+0x1f8>
 800b5d8:	7821      	ldrb	r1, [r4, #0]
 800b5da:	2203      	movs	r2, #3
 800b5dc:	4650      	mov	r0, sl
 800b5de:	f7f4 fdf7 	bl	80001d0 <memchr>
 800b5e2:	b138      	cbz	r0, 800b5f4 <_svfiprintf_r+0x150>
 800b5e4:	9b04      	ldr	r3, [sp, #16]
 800b5e6:	eba0 000a 	sub.w	r0, r0, sl
 800b5ea:	2240      	movs	r2, #64	; 0x40
 800b5ec:	4082      	lsls	r2, r0
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	3401      	adds	r4, #1
 800b5f2:	9304      	str	r3, [sp, #16]
 800b5f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5f8:	4825      	ldr	r0, [pc, #148]	; (800b690 <_svfiprintf_r+0x1ec>)
 800b5fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5fe:	2206      	movs	r2, #6
 800b600:	f7f4 fde6 	bl	80001d0 <memchr>
 800b604:	2800      	cmp	r0, #0
 800b606:	d038      	beq.n	800b67a <_svfiprintf_r+0x1d6>
 800b608:	4b22      	ldr	r3, [pc, #136]	; (800b694 <_svfiprintf_r+0x1f0>)
 800b60a:	bb1b      	cbnz	r3, 800b654 <_svfiprintf_r+0x1b0>
 800b60c:	9b03      	ldr	r3, [sp, #12]
 800b60e:	3307      	adds	r3, #7
 800b610:	f023 0307 	bic.w	r3, r3, #7
 800b614:	3308      	adds	r3, #8
 800b616:	9303      	str	r3, [sp, #12]
 800b618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b61a:	4433      	add	r3, r6
 800b61c:	9309      	str	r3, [sp, #36]	; 0x24
 800b61e:	e768      	b.n	800b4f2 <_svfiprintf_r+0x4e>
 800b620:	fb0c 3202 	mla	r2, ip, r2, r3
 800b624:	460c      	mov	r4, r1
 800b626:	2001      	movs	r0, #1
 800b628:	e7a6      	b.n	800b578 <_svfiprintf_r+0xd4>
 800b62a:	2300      	movs	r3, #0
 800b62c:	3401      	adds	r4, #1
 800b62e:	9305      	str	r3, [sp, #20]
 800b630:	4619      	mov	r1, r3
 800b632:	f04f 0c0a 	mov.w	ip, #10
 800b636:	4620      	mov	r0, r4
 800b638:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b63c:	3a30      	subs	r2, #48	; 0x30
 800b63e:	2a09      	cmp	r2, #9
 800b640:	d903      	bls.n	800b64a <_svfiprintf_r+0x1a6>
 800b642:	2b00      	cmp	r3, #0
 800b644:	d0c6      	beq.n	800b5d4 <_svfiprintf_r+0x130>
 800b646:	9105      	str	r1, [sp, #20]
 800b648:	e7c4      	b.n	800b5d4 <_svfiprintf_r+0x130>
 800b64a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b64e:	4604      	mov	r4, r0
 800b650:	2301      	movs	r3, #1
 800b652:	e7f0      	b.n	800b636 <_svfiprintf_r+0x192>
 800b654:	ab03      	add	r3, sp, #12
 800b656:	9300      	str	r3, [sp, #0]
 800b658:	462a      	mov	r2, r5
 800b65a:	4b0f      	ldr	r3, [pc, #60]	; (800b698 <_svfiprintf_r+0x1f4>)
 800b65c:	a904      	add	r1, sp, #16
 800b65e:	4638      	mov	r0, r7
 800b660:	f3af 8000 	nop.w
 800b664:	1c42      	adds	r2, r0, #1
 800b666:	4606      	mov	r6, r0
 800b668:	d1d6      	bne.n	800b618 <_svfiprintf_r+0x174>
 800b66a:	89ab      	ldrh	r3, [r5, #12]
 800b66c:	065b      	lsls	r3, r3, #25
 800b66e:	f53f af2d 	bmi.w	800b4cc <_svfiprintf_r+0x28>
 800b672:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b674:	b01d      	add	sp, #116	; 0x74
 800b676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b67a:	ab03      	add	r3, sp, #12
 800b67c:	9300      	str	r3, [sp, #0]
 800b67e:	462a      	mov	r2, r5
 800b680:	4b05      	ldr	r3, [pc, #20]	; (800b698 <_svfiprintf_r+0x1f4>)
 800b682:	a904      	add	r1, sp, #16
 800b684:	4638      	mov	r0, r7
 800b686:	f000 f879 	bl	800b77c <_printf_i>
 800b68a:	e7eb      	b.n	800b664 <_svfiprintf_r+0x1c0>
 800b68c:	0800c63c 	.word	0x0800c63c
 800b690:	0800c646 	.word	0x0800c646
 800b694:	00000000 	.word	0x00000000
 800b698:	0800b3f1 	.word	0x0800b3f1
 800b69c:	0800c642 	.word	0x0800c642

0800b6a0 <_printf_common>:
 800b6a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6a4:	4616      	mov	r6, r2
 800b6a6:	4699      	mov	r9, r3
 800b6a8:	688a      	ldr	r2, [r1, #8]
 800b6aa:	690b      	ldr	r3, [r1, #16]
 800b6ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	bfb8      	it	lt
 800b6b4:	4613      	movlt	r3, r2
 800b6b6:	6033      	str	r3, [r6, #0]
 800b6b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b6bc:	4607      	mov	r7, r0
 800b6be:	460c      	mov	r4, r1
 800b6c0:	b10a      	cbz	r2, 800b6c6 <_printf_common+0x26>
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	6033      	str	r3, [r6, #0]
 800b6c6:	6823      	ldr	r3, [r4, #0]
 800b6c8:	0699      	lsls	r1, r3, #26
 800b6ca:	bf42      	ittt	mi
 800b6cc:	6833      	ldrmi	r3, [r6, #0]
 800b6ce:	3302      	addmi	r3, #2
 800b6d0:	6033      	strmi	r3, [r6, #0]
 800b6d2:	6825      	ldr	r5, [r4, #0]
 800b6d4:	f015 0506 	ands.w	r5, r5, #6
 800b6d8:	d106      	bne.n	800b6e8 <_printf_common+0x48>
 800b6da:	f104 0a19 	add.w	sl, r4, #25
 800b6de:	68e3      	ldr	r3, [r4, #12]
 800b6e0:	6832      	ldr	r2, [r6, #0]
 800b6e2:	1a9b      	subs	r3, r3, r2
 800b6e4:	42ab      	cmp	r3, r5
 800b6e6:	dc26      	bgt.n	800b736 <_printf_common+0x96>
 800b6e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b6ec:	1e13      	subs	r3, r2, #0
 800b6ee:	6822      	ldr	r2, [r4, #0]
 800b6f0:	bf18      	it	ne
 800b6f2:	2301      	movne	r3, #1
 800b6f4:	0692      	lsls	r2, r2, #26
 800b6f6:	d42b      	bmi.n	800b750 <_printf_common+0xb0>
 800b6f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b6fc:	4649      	mov	r1, r9
 800b6fe:	4638      	mov	r0, r7
 800b700:	47c0      	blx	r8
 800b702:	3001      	adds	r0, #1
 800b704:	d01e      	beq.n	800b744 <_printf_common+0xa4>
 800b706:	6823      	ldr	r3, [r4, #0]
 800b708:	6922      	ldr	r2, [r4, #16]
 800b70a:	f003 0306 	and.w	r3, r3, #6
 800b70e:	2b04      	cmp	r3, #4
 800b710:	bf02      	ittt	eq
 800b712:	68e5      	ldreq	r5, [r4, #12]
 800b714:	6833      	ldreq	r3, [r6, #0]
 800b716:	1aed      	subeq	r5, r5, r3
 800b718:	68a3      	ldr	r3, [r4, #8]
 800b71a:	bf0c      	ite	eq
 800b71c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b720:	2500      	movne	r5, #0
 800b722:	4293      	cmp	r3, r2
 800b724:	bfc4      	itt	gt
 800b726:	1a9b      	subgt	r3, r3, r2
 800b728:	18ed      	addgt	r5, r5, r3
 800b72a:	2600      	movs	r6, #0
 800b72c:	341a      	adds	r4, #26
 800b72e:	42b5      	cmp	r5, r6
 800b730:	d11a      	bne.n	800b768 <_printf_common+0xc8>
 800b732:	2000      	movs	r0, #0
 800b734:	e008      	b.n	800b748 <_printf_common+0xa8>
 800b736:	2301      	movs	r3, #1
 800b738:	4652      	mov	r2, sl
 800b73a:	4649      	mov	r1, r9
 800b73c:	4638      	mov	r0, r7
 800b73e:	47c0      	blx	r8
 800b740:	3001      	adds	r0, #1
 800b742:	d103      	bne.n	800b74c <_printf_common+0xac>
 800b744:	f04f 30ff 	mov.w	r0, #4294967295
 800b748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b74c:	3501      	adds	r5, #1
 800b74e:	e7c6      	b.n	800b6de <_printf_common+0x3e>
 800b750:	18e1      	adds	r1, r4, r3
 800b752:	1c5a      	adds	r2, r3, #1
 800b754:	2030      	movs	r0, #48	; 0x30
 800b756:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b75a:	4422      	add	r2, r4
 800b75c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b760:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b764:	3302      	adds	r3, #2
 800b766:	e7c7      	b.n	800b6f8 <_printf_common+0x58>
 800b768:	2301      	movs	r3, #1
 800b76a:	4622      	mov	r2, r4
 800b76c:	4649      	mov	r1, r9
 800b76e:	4638      	mov	r0, r7
 800b770:	47c0      	blx	r8
 800b772:	3001      	adds	r0, #1
 800b774:	d0e6      	beq.n	800b744 <_printf_common+0xa4>
 800b776:	3601      	adds	r6, #1
 800b778:	e7d9      	b.n	800b72e <_printf_common+0x8e>
	...

0800b77c <_printf_i>:
 800b77c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b780:	7e0f      	ldrb	r7, [r1, #24]
 800b782:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b784:	2f78      	cmp	r7, #120	; 0x78
 800b786:	4691      	mov	r9, r2
 800b788:	4680      	mov	r8, r0
 800b78a:	460c      	mov	r4, r1
 800b78c:	469a      	mov	sl, r3
 800b78e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b792:	d807      	bhi.n	800b7a4 <_printf_i+0x28>
 800b794:	2f62      	cmp	r7, #98	; 0x62
 800b796:	d80a      	bhi.n	800b7ae <_printf_i+0x32>
 800b798:	2f00      	cmp	r7, #0
 800b79a:	f000 80d4 	beq.w	800b946 <_printf_i+0x1ca>
 800b79e:	2f58      	cmp	r7, #88	; 0x58
 800b7a0:	f000 80c0 	beq.w	800b924 <_printf_i+0x1a8>
 800b7a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b7ac:	e03a      	b.n	800b824 <_printf_i+0xa8>
 800b7ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b7b2:	2b15      	cmp	r3, #21
 800b7b4:	d8f6      	bhi.n	800b7a4 <_printf_i+0x28>
 800b7b6:	a101      	add	r1, pc, #4	; (adr r1, 800b7bc <_printf_i+0x40>)
 800b7b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b7bc:	0800b815 	.word	0x0800b815
 800b7c0:	0800b829 	.word	0x0800b829
 800b7c4:	0800b7a5 	.word	0x0800b7a5
 800b7c8:	0800b7a5 	.word	0x0800b7a5
 800b7cc:	0800b7a5 	.word	0x0800b7a5
 800b7d0:	0800b7a5 	.word	0x0800b7a5
 800b7d4:	0800b829 	.word	0x0800b829
 800b7d8:	0800b7a5 	.word	0x0800b7a5
 800b7dc:	0800b7a5 	.word	0x0800b7a5
 800b7e0:	0800b7a5 	.word	0x0800b7a5
 800b7e4:	0800b7a5 	.word	0x0800b7a5
 800b7e8:	0800b92d 	.word	0x0800b92d
 800b7ec:	0800b855 	.word	0x0800b855
 800b7f0:	0800b8e7 	.word	0x0800b8e7
 800b7f4:	0800b7a5 	.word	0x0800b7a5
 800b7f8:	0800b7a5 	.word	0x0800b7a5
 800b7fc:	0800b94f 	.word	0x0800b94f
 800b800:	0800b7a5 	.word	0x0800b7a5
 800b804:	0800b855 	.word	0x0800b855
 800b808:	0800b7a5 	.word	0x0800b7a5
 800b80c:	0800b7a5 	.word	0x0800b7a5
 800b810:	0800b8ef 	.word	0x0800b8ef
 800b814:	682b      	ldr	r3, [r5, #0]
 800b816:	1d1a      	adds	r2, r3, #4
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	602a      	str	r2, [r5, #0]
 800b81c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b820:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b824:	2301      	movs	r3, #1
 800b826:	e09f      	b.n	800b968 <_printf_i+0x1ec>
 800b828:	6820      	ldr	r0, [r4, #0]
 800b82a:	682b      	ldr	r3, [r5, #0]
 800b82c:	0607      	lsls	r7, r0, #24
 800b82e:	f103 0104 	add.w	r1, r3, #4
 800b832:	6029      	str	r1, [r5, #0]
 800b834:	d501      	bpl.n	800b83a <_printf_i+0xbe>
 800b836:	681e      	ldr	r6, [r3, #0]
 800b838:	e003      	b.n	800b842 <_printf_i+0xc6>
 800b83a:	0646      	lsls	r6, r0, #25
 800b83c:	d5fb      	bpl.n	800b836 <_printf_i+0xba>
 800b83e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b842:	2e00      	cmp	r6, #0
 800b844:	da03      	bge.n	800b84e <_printf_i+0xd2>
 800b846:	232d      	movs	r3, #45	; 0x2d
 800b848:	4276      	negs	r6, r6
 800b84a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b84e:	485a      	ldr	r0, [pc, #360]	; (800b9b8 <_printf_i+0x23c>)
 800b850:	230a      	movs	r3, #10
 800b852:	e012      	b.n	800b87a <_printf_i+0xfe>
 800b854:	682b      	ldr	r3, [r5, #0]
 800b856:	6820      	ldr	r0, [r4, #0]
 800b858:	1d19      	adds	r1, r3, #4
 800b85a:	6029      	str	r1, [r5, #0]
 800b85c:	0605      	lsls	r5, r0, #24
 800b85e:	d501      	bpl.n	800b864 <_printf_i+0xe8>
 800b860:	681e      	ldr	r6, [r3, #0]
 800b862:	e002      	b.n	800b86a <_printf_i+0xee>
 800b864:	0641      	lsls	r1, r0, #25
 800b866:	d5fb      	bpl.n	800b860 <_printf_i+0xe4>
 800b868:	881e      	ldrh	r6, [r3, #0]
 800b86a:	4853      	ldr	r0, [pc, #332]	; (800b9b8 <_printf_i+0x23c>)
 800b86c:	2f6f      	cmp	r7, #111	; 0x6f
 800b86e:	bf0c      	ite	eq
 800b870:	2308      	moveq	r3, #8
 800b872:	230a      	movne	r3, #10
 800b874:	2100      	movs	r1, #0
 800b876:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b87a:	6865      	ldr	r5, [r4, #4]
 800b87c:	60a5      	str	r5, [r4, #8]
 800b87e:	2d00      	cmp	r5, #0
 800b880:	bfa2      	ittt	ge
 800b882:	6821      	ldrge	r1, [r4, #0]
 800b884:	f021 0104 	bicge.w	r1, r1, #4
 800b888:	6021      	strge	r1, [r4, #0]
 800b88a:	b90e      	cbnz	r6, 800b890 <_printf_i+0x114>
 800b88c:	2d00      	cmp	r5, #0
 800b88e:	d04b      	beq.n	800b928 <_printf_i+0x1ac>
 800b890:	4615      	mov	r5, r2
 800b892:	fbb6 f1f3 	udiv	r1, r6, r3
 800b896:	fb03 6711 	mls	r7, r3, r1, r6
 800b89a:	5dc7      	ldrb	r7, [r0, r7]
 800b89c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b8a0:	4637      	mov	r7, r6
 800b8a2:	42bb      	cmp	r3, r7
 800b8a4:	460e      	mov	r6, r1
 800b8a6:	d9f4      	bls.n	800b892 <_printf_i+0x116>
 800b8a8:	2b08      	cmp	r3, #8
 800b8aa:	d10b      	bne.n	800b8c4 <_printf_i+0x148>
 800b8ac:	6823      	ldr	r3, [r4, #0]
 800b8ae:	07de      	lsls	r6, r3, #31
 800b8b0:	d508      	bpl.n	800b8c4 <_printf_i+0x148>
 800b8b2:	6923      	ldr	r3, [r4, #16]
 800b8b4:	6861      	ldr	r1, [r4, #4]
 800b8b6:	4299      	cmp	r1, r3
 800b8b8:	bfde      	ittt	le
 800b8ba:	2330      	movle	r3, #48	; 0x30
 800b8bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b8c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b8c4:	1b52      	subs	r2, r2, r5
 800b8c6:	6122      	str	r2, [r4, #16]
 800b8c8:	f8cd a000 	str.w	sl, [sp]
 800b8cc:	464b      	mov	r3, r9
 800b8ce:	aa03      	add	r2, sp, #12
 800b8d0:	4621      	mov	r1, r4
 800b8d2:	4640      	mov	r0, r8
 800b8d4:	f7ff fee4 	bl	800b6a0 <_printf_common>
 800b8d8:	3001      	adds	r0, #1
 800b8da:	d14a      	bne.n	800b972 <_printf_i+0x1f6>
 800b8dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b8e0:	b004      	add	sp, #16
 800b8e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8e6:	6823      	ldr	r3, [r4, #0]
 800b8e8:	f043 0320 	orr.w	r3, r3, #32
 800b8ec:	6023      	str	r3, [r4, #0]
 800b8ee:	4833      	ldr	r0, [pc, #204]	; (800b9bc <_printf_i+0x240>)
 800b8f0:	2778      	movs	r7, #120	; 0x78
 800b8f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b8f6:	6823      	ldr	r3, [r4, #0]
 800b8f8:	6829      	ldr	r1, [r5, #0]
 800b8fa:	061f      	lsls	r7, r3, #24
 800b8fc:	f851 6b04 	ldr.w	r6, [r1], #4
 800b900:	d402      	bmi.n	800b908 <_printf_i+0x18c>
 800b902:	065f      	lsls	r7, r3, #25
 800b904:	bf48      	it	mi
 800b906:	b2b6      	uxthmi	r6, r6
 800b908:	07df      	lsls	r7, r3, #31
 800b90a:	bf48      	it	mi
 800b90c:	f043 0320 	orrmi.w	r3, r3, #32
 800b910:	6029      	str	r1, [r5, #0]
 800b912:	bf48      	it	mi
 800b914:	6023      	strmi	r3, [r4, #0]
 800b916:	b91e      	cbnz	r6, 800b920 <_printf_i+0x1a4>
 800b918:	6823      	ldr	r3, [r4, #0]
 800b91a:	f023 0320 	bic.w	r3, r3, #32
 800b91e:	6023      	str	r3, [r4, #0]
 800b920:	2310      	movs	r3, #16
 800b922:	e7a7      	b.n	800b874 <_printf_i+0xf8>
 800b924:	4824      	ldr	r0, [pc, #144]	; (800b9b8 <_printf_i+0x23c>)
 800b926:	e7e4      	b.n	800b8f2 <_printf_i+0x176>
 800b928:	4615      	mov	r5, r2
 800b92a:	e7bd      	b.n	800b8a8 <_printf_i+0x12c>
 800b92c:	682b      	ldr	r3, [r5, #0]
 800b92e:	6826      	ldr	r6, [r4, #0]
 800b930:	6961      	ldr	r1, [r4, #20]
 800b932:	1d18      	adds	r0, r3, #4
 800b934:	6028      	str	r0, [r5, #0]
 800b936:	0635      	lsls	r5, r6, #24
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	d501      	bpl.n	800b940 <_printf_i+0x1c4>
 800b93c:	6019      	str	r1, [r3, #0]
 800b93e:	e002      	b.n	800b946 <_printf_i+0x1ca>
 800b940:	0670      	lsls	r0, r6, #25
 800b942:	d5fb      	bpl.n	800b93c <_printf_i+0x1c0>
 800b944:	8019      	strh	r1, [r3, #0]
 800b946:	2300      	movs	r3, #0
 800b948:	6123      	str	r3, [r4, #16]
 800b94a:	4615      	mov	r5, r2
 800b94c:	e7bc      	b.n	800b8c8 <_printf_i+0x14c>
 800b94e:	682b      	ldr	r3, [r5, #0]
 800b950:	1d1a      	adds	r2, r3, #4
 800b952:	602a      	str	r2, [r5, #0]
 800b954:	681d      	ldr	r5, [r3, #0]
 800b956:	6862      	ldr	r2, [r4, #4]
 800b958:	2100      	movs	r1, #0
 800b95a:	4628      	mov	r0, r5
 800b95c:	f7f4 fc38 	bl	80001d0 <memchr>
 800b960:	b108      	cbz	r0, 800b966 <_printf_i+0x1ea>
 800b962:	1b40      	subs	r0, r0, r5
 800b964:	6060      	str	r0, [r4, #4]
 800b966:	6863      	ldr	r3, [r4, #4]
 800b968:	6123      	str	r3, [r4, #16]
 800b96a:	2300      	movs	r3, #0
 800b96c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b970:	e7aa      	b.n	800b8c8 <_printf_i+0x14c>
 800b972:	6923      	ldr	r3, [r4, #16]
 800b974:	462a      	mov	r2, r5
 800b976:	4649      	mov	r1, r9
 800b978:	4640      	mov	r0, r8
 800b97a:	47d0      	blx	sl
 800b97c:	3001      	adds	r0, #1
 800b97e:	d0ad      	beq.n	800b8dc <_printf_i+0x160>
 800b980:	6823      	ldr	r3, [r4, #0]
 800b982:	079b      	lsls	r3, r3, #30
 800b984:	d413      	bmi.n	800b9ae <_printf_i+0x232>
 800b986:	68e0      	ldr	r0, [r4, #12]
 800b988:	9b03      	ldr	r3, [sp, #12]
 800b98a:	4298      	cmp	r0, r3
 800b98c:	bfb8      	it	lt
 800b98e:	4618      	movlt	r0, r3
 800b990:	e7a6      	b.n	800b8e0 <_printf_i+0x164>
 800b992:	2301      	movs	r3, #1
 800b994:	4632      	mov	r2, r6
 800b996:	4649      	mov	r1, r9
 800b998:	4640      	mov	r0, r8
 800b99a:	47d0      	blx	sl
 800b99c:	3001      	adds	r0, #1
 800b99e:	d09d      	beq.n	800b8dc <_printf_i+0x160>
 800b9a0:	3501      	adds	r5, #1
 800b9a2:	68e3      	ldr	r3, [r4, #12]
 800b9a4:	9903      	ldr	r1, [sp, #12]
 800b9a6:	1a5b      	subs	r3, r3, r1
 800b9a8:	42ab      	cmp	r3, r5
 800b9aa:	dcf2      	bgt.n	800b992 <_printf_i+0x216>
 800b9ac:	e7eb      	b.n	800b986 <_printf_i+0x20a>
 800b9ae:	2500      	movs	r5, #0
 800b9b0:	f104 0619 	add.w	r6, r4, #25
 800b9b4:	e7f5      	b.n	800b9a2 <_printf_i+0x226>
 800b9b6:	bf00      	nop
 800b9b8:	0800c64d 	.word	0x0800c64d
 800b9bc:	0800c65e 	.word	0x0800c65e

0800b9c0 <memmove>:
 800b9c0:	4288      	cmp	r0, r1
 800b9c2:	b510      	push	{r4, lr}
 800b9c4:	eb01 0402 	add.w	r4, r1, r2
 800b9c8:	d902      	bls.n	800b9d0 <memmove+0x10>
 800b9ca:	4284      	cmp	r4, r0
 800b9cc:	4623      	mov	r3, r4
 800b9ce:	d807      	bhi.n	800b9e0 <memmove+0x20>
 800b9d0:	1e43      	subs	r3, r0, #1
 800b9d2:	42a1      	cmp	r1, r4
 800b9d4:	d008      	beq.n	800b9e8 <memmove+0x28>
 800b9d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b9de:	e7f8      	b.n	800b9d2 <memmove+0x12>
 800b9e0:	4402      	add	r2, r0
 800b9e2:	4601      	mov	r1, r0
 800b9e4:	428a      	cmp	r2, r1
 800b9e6:	d100      	bne.n	800b9ea <memmove+0x2a>
 800b9e8:	bd10      	pop	{r4, pc}
 800b9ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b9ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b9f2:	e7f7      	b.n	800b9e4 <memmove+0x24>

0800b9f4 <_realloc_r>:
 800b9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9f8:	4680      	mov	r8, r0
 800b9fa:	4614      	mov	r4, r2
 800b9fc:	460e      	mov	r6, r1
 800b9fe:	b921      	cbnz	r1, 800ba0a <_realloc_r+0x16>
 800ba00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba04:	4611      	mov	r1, r2
 800ba06:	f7ff bba9 	b.w	800b15c <_malloc_r>
 800ba0a:	b92a      	cbnz	r2, 800ba18 <_realloc_r+0x24>
 800ba0c:	f7ff fca4 	bl	800b358 <_free_r>
 800ba10:	4625      	mov	r5, r4
 800ba12:	4628      	mov	r0, r5
 800ba14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba18:	f000 f81b 	bl	800ba52 <_malloc_usable_size_r>
 800ba1c:	4284      	cmp	r4, r0
 800ba1e:	4607      	mov	r7, r0
 800ba20:	d802      	bhi.n	800ba28 <_realloc_r+0x34>
 800ba22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ba26:	d812      	bhi.n	800ba4e <_realloc_r+0x5a>
 800ba28:	4621      	mov	r1, r4
 800ba2a:	4640      	mov	r0, r8
 800ba2c:	f7ff fb96 	bl	800b15c <_malloc_r>
 800ba30:	4605      	mov	r5, r0
 800ba32:	2800      	cmp	r0, #0
 800ba34:	d0ed      	beq.n	800ba12 <_realloc_r+0x1e>
 800ba36:	42bc      	cmp	r4, r7
 800ba38:	4622      	mov	r2, r4
 800ba3a:	4631      	mov	r1, r6
 800ba3c:	bf28      	it	cs
 800ba3e:	463a      	movcs	r2, r7
 800ba40:	f7ff fc7c 	bl	800b33c <memcpy>
 800ba44:	4631      	mov	r1, r6
 800ba46:	4640      	mov	r0, r8
 800ba48:	f7ff fc86 	bl	800b358 <_free_r>
 800ba4c:	e7e1      	b.n	800ba12 <_realloc_r+0x1e>
 800ba4e:	4635      	mov	r5, r6
 800ba50:	e7df      	b.n	800ba12 <_realloc_r+0x1e>

0800ba52 <_malloc_usable_size_r>:
 800ba52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba56:	1f18      	subs	r0, r3, #4
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	bfbc      	itt	lt
 800ba5c:	580b      	ldrlt	r3, [r1, r0]
 800ba5e:	18c0      	addlt	r0, r0, r3
 800ba60:	4770      	bx	lr
	...

0800ba64 <_init>:
 800ba64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba66:	bf00      	nop
 800ba68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba6a:	bc08      	pop	{r3}
 800ba6c:	469e      	mov	lr, r3
 800ba6e:	4770      	bx	lr

0800ba70 <_fini>:
 800ba70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba72:	bf00      	nop
 800ba74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba76:	bc08      	pop	{r3}
 800ba78:	469e      	mov	lr, r3
 800ba7a:	4770      	bx	lr
