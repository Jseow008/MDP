
MDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bf4  0800bb6c  0800bb6c  0001bb6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c760  0800c760  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800c760  0800c760  0001c760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c768  0800c768  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c768  0800c768  0001c768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c76c  0800c76c  0001c76c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800c770  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00005130  20000078  20000078  00020078  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200051a8  200051a8  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b711  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003b35  00000000  00000000  0003b7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001900  00000000  00000000  0003f338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001391  00000000  00000000  00040c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000049c4  00000000  00000000  00041fc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001d651  00000000  00000000  0004698d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d8c05  00000000  00000000  00063fde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000713c  00000000  00000000  0013cbe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  00143d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bb54 	.word	0x0800bb54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800bb54 	.word	0x0800bb54

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b970 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9e08      	ldr	r6, [sp, #32]
 8000be2:	460d      	mov	r5, r1
 8000be4:	4604      	mov	r4, r0
 8000be6:	460f      	mov	r7, r1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d14a      	bne.n	8000c82 <__udivmoddi4+0xa6>
 8000bec:	428a      	cmp	r2, r1
 8000bee:	4694      	mov	ip, r2
 8000bf0:	d965      	bls.n	8000cbe <__udivmoddi4+0xe2>
 8000bf2:	fab2 f382 	clz	r3, r2
 8000bf6:	b143      	cbz	r3, 8000c0a <__udivmoddi4+0x2e>
 8000bf8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bfc:	f1c3 0220 	rsb	r2, r3, #32
 8000c00:	409f      	lsls	r7, r3
 8000c02:	fa20 f202 	lsr.w	r2, r0, r2
 8000c06:	4317      	orrs	r7, r2
 8000c08:	409c      	lsls	r4, r3
 8000c0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0e:	fa1f f58c 	uxth.w	r5, ip
 8000c12:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c16:	0c22      	lsrs	r2, r4, #16
 8000c18:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c20:	fb01 f005 	mul.w	r0, r1, r5
 8000c24:	4290      	cmp	r0, r2
 8000c26:	d90a      	bls.n	8000c3e <__udivmoddi4+0x62>
 8000c28:	eb1c 0202 	adds.w	r2, ip, r2
 8000c2c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c30:	f080 811c 	bcs.w	8000e6c <__udivmoddi4+0x290>
 8000c34:	4290      	cmp	r0, r2
 8000c36:	f240 8119 	bls.w	8000e6c <__udivmoddi4+0x290>
 8000c3a:	3902      	subs	r1, #2
 8000c3c:	4462      	add	r2, ip
 8000c3e:	1a12      	subs	r2, r2, r0
 8000c40:	b2a4      	uxth	r4, r4
 8000c42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4e:	fb00 f505 	mul.w	r5, r0, r5
 8000c52:	42a5      	cmp	r5, r4
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x90>
 8000c56:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5e:	f080 8107 	bcs.w	8000e70 <__udivmoddi4+0x294>
 8000c62:	42a5      	cmp	r5, r4
 8000c64:	f240 8104 	bls.w	8000e70 <__udivmoddi4+0x294>
 8000c68:	4464      	add	r4, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c70:	1b64      	subs	r4, r4, r5
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11e      	cbz	r6, 8000c7e <__udivmoddi4+0xa2>
 8000c76:	40dc      	lsrs	r4, r3
 8000c78:	2300      	movs	r3, #0
 8000c7a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d908      	bls.n	8000c98 <__udivmoddi4+0xbc>
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	f000 80ed 	beq.w	8000e66 <__udivmoddi4+0x28a>
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c92:	4608      	mov	r0, r1
 8000c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	d149      	bne.n	8000d34 <__udivmoddi4+0x158>
 8000ca0:	42ab      	cmp	r3, r5
 8000ca2:	d302      	bcc.n	8000caa <__udivmoddi4+0xce>
 8000ca4:	4282      	cmp	r2, r0
 8000ca6:	f200 80f8 	bhi.w	8000e9a <__udivmoddi4+0x2be>
 8000caa:	1a84      	subs	r4, r0, r2
 8000cac:	eb65 0203 	sbc.w	r2, r5, r3
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	4617      	mov	r7, r2
 8000cb4:	2e00      	cmp	r6, #0
 8000cb6:	d0e2      	beq.n	8000c7e <__udivmoddi4+0xa2>
 8000cb8:	e9c6 4700 	strd	r4, r7, [r6]
 8000cbc:	e7df      	b.n	8000c7e <__udivmoddi4+0xa2>
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xe6>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f382 	clz	r3, r2
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x210>
 8000ccc:	1a8a      	subs	r2, r1, r2
 8000cce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd2:	fa1f fe8c 	uxth.w	lr, ip
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cdc:	fb07 2015 	mls	r0, r7, r5, r2
 8000ce0:	0c22      	lsrs	r2, r4, #16
 8000ce2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce6:	fb0e f005 	mul.w	r0, lr, r5
 8000cea:	4290      	cmp	r0, r2
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x124>
 8000cee:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x122>
 8000cf8:	4290      	cmp	r0, r2
 8000cfa:	f200 80cb 	bhi.w	8000e94 <__udivmoddi4+0x2b8>
 8000cfe:	4645      	mov	r5, r8
 8000d00:	1a12      	subs	r2, r2, r0
 8000d02:	b2a4      	uxth	r4, r4
 8000d04:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d08:	fb07 2210 	mls	r2, r7, r0, r2
 8000d0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d10:	fb0e fe00 	mul.w	lr, lr, r0
 8000d14:	45a6      	cmp	lr, r4
 8000d16:	d908      	bls.n	8000d2a <__udivmoddi4+0x14e>
 8000d18:	eb1c 0404 	adds.w	r4, ip, r4
 8000d1c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d20:	d202      	bcs.n	8000d28 <__udivmoddi4+0x14c>
 8000d22:	45a6      	cmp	lr, r4
 8000d24:	f200 80bb 	bhi.w	8000e9e <__udivmoddi4+0x2c2>
 8000d28:	4610      	mov	r0, r2
 8000d2a:	eba4 040e 	sub.w	r4, r4, lr
 8000d2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d32:	e79f      	b.n	8000c74 <__udivmoddi4+0x98>
 8000d34:	f1c1 0720 	rsb	r7, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d42:	fa05 f401 	lsl.w	r4, r5, r1
 8000d46:	fa20 f307 	lsr.w	r3, r0, r7
 8000d4a:	40fd      	lsrs	r5, r7
 8000d4c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d50:	4323      	orrs	r3, r4
 8000d52:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d56:	fa1f fe8c 	uxth.w	lr, ip
 8000d5a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5e:	0c1c      	lsrs	r4, r3, #16
 8000d60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d64:	fb08 f50e 	mul.w	r5, r8, lr
 8000d68:	42a5      	cmp	r5, r4
 8000d6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d72:	d90b      	bls.n	8000d8c <__udivmoddi4+0x1b0>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d7c:	f080 8088 	bcs.w	8000e90 <__udivmoddi4+0x2b4>
 8000d80:	42a5      	cmp	r5, r4
 8000d82:	f240 8085 	bls.w	8000e90 <__udivmoddi4+0x2b4>
 8000d86:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8a:	4464      	add	r4, ip
 8000d8c:	1b64      	subs	r4, r4, r5
 8000d8e:	b29d      	uxth	r5, r3
 8000d90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d94:	fb09 4413 	mls	r4, r9, r3, r4
 8000d98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000da0:	45a6      	cmp	lr, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1da>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dac:	d26c      	bcs.n	8000e88 <__udivmoddi4+0x2ac>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	d96a      	bls.n	8000e88 <__udivmoddi4+0x2ac>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	4464      	add	r4, ip
 8000db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dba:	fba3 9502 	umull	r9, r5, r3, r2
 8000dbe:	eba4 040e 	sub.w	r4, r4, lr
 8000dc2:	42ac      	cmp	r4, r5
 8000dc4:	46c8      	mov	r8, r9
 8000dc6:	46ae      	mov	lr, r5
 8000dc8:	d356      	bcc.n	8000e78 <__udivmoddi4+0x29c>
 8000dca:	d053      	beq.n	8000e74 <__udivmoddi4+0x298>
 8000dcc:	b156      	cbz	r6, 8000de4 <__udivmoddi4+0x208>
 8000dce:	ebb0 0208 	subs.w	r2, r0, r8
 8000dd2:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dda:	40ca      	lsrs	r2, r1
 8000ddc:	40cc      	lsrs	r4, r1
 8000dde:	4317      	orrs	r7, r2
 8000de0:	e9c6 7400 	strd	r7, r4, [r6]
 8000de4:	4618      	mov	r0, r3
 8000de6:	2100      	movs	r1, #0
 8000de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dec:	f1c3 0120 	rsb	r1, r3, #32
 8000df0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df4:	fa20 f201 	lsr.w	r2, r0, r1
 8000df8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dfc:	409d      	lsls	r5, r3
 8000dfe:	432a      	orrs	r2, r5
 8000e00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e04:	fa1f fe8c 	uxth.w	lr, ip
 8000e08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e0c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e10:	0c11      	lsrs	r1, r2, #16
 8000e12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e16:	fb00 f50e 	mul.w	r5, r0, lr
 8000e1a:	428d      	cmp	r5, r1
 8000e1c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x258>
 8000e22:	eb1c 0101 	adds.w	r1, ip, r1
 8000e26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2a:	d22f      	bcs.n	8000e8c <__udivmoddi4+0x2b0>
 8000e2c:	428d      	cmp	r5, r1
 8000e2e:	d92d      	bls.n	8000e8c <__udivmoddi4+0x2b0>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4461      	add	r1, ip
 8000e34:	1b49      	subs	r1, r1, r5
 8000e36:	b292      	uxth	r2, r2
 8000e38:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e3c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e44:	fb05 f10e 	mul.w	r1, r5, lr
 8000e48:	4291      	cmp	r1, r2
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x282>
 8000e4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e50:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e54:	d216      	bcs.n	8000e84 <__udivmoddi4+0x2a8>
 8000e56:	4291      	cmp	r1, r2
 8000e58:	d914      	bls.n	8000e84 <__udivmoddi4+0x2a8>
 8000e5a:	3d02      	subs	r5, #2
 8000e5c:	4462      	add	r2, ip
 8000e5e:	1a52      	subs	r2, r2, r1
 8000e60:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e64:	e738      	b.n	8000cd8 <__udivmoddi4+0xfc>
 8000e66:	4631      	mov	r1, r6
 8000e68:	4630      	mov	r0, r6
 8000e6a:	e708      	b.n	8000c7e <__udivmoddi4+0xa2>
 8000e6c:	4639      	mov	r1, r7
 8000e6e:	e6e6      	b.n	8000c3e <__udivmoddi4+0x62>
 8000e70:	4610      	mov	r0, r2
 8000e72:	e6fb      	b.n	8000c6c <__udivmoddi4+0x90>
 8000e74:	4548      	cmp	r0, r9
 8000e76:	d2a9      	bcs.n	8000dcc <__udivmoddi4+0x1f0>
 8000e78:	ebb9 0802 	subs.w	r8, r9, r2
 8000e7c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e80:	3b01      	subs	r3, #1
 8000e82:	e7a3      	b.n	8000dcc <__udivmoddi4+0x1f0>
 8000e84:	4645      	mov	r5, r8
 8000e86:	e7ea      	b.n	8000e5e <__udivmoddi4+0x282>
 8000e88:	462b      	mov	r3, r5
 8000e8a:	e794      	b.n	8000db6 <__udivmoddi4+0x1da>
 8000e8c:	4640      	mov	r0, r8
 8000e8e:	e7d1      	b.n	8000e34 <__udivmoddi4+0x258>
 8000e90:	46d0      	mov	r8, sl
 8000e92:	e77b      	b.n	8000d8c <__udivmoddi4+0x1b0>
 8000e94:	3d02      	subs	r5, #2
 8000e96:	4462      	add	r2, ip
 8000e98:	e732      	b.n	8000d00 <__udivmoddi4+0x124>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e70a      	b.n	8000cb4 <__udivmoddi4+0xd8>
 8000e9e:	4464      	add	r4, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e742      	b.n	8000d2a <__udivmoddi4+0x14e>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <usDelay>:
int dequeue(Queue *qPtr);
void getFront(Queue q);
int isEmptyQueue(Queue q);
void deleteQueue(Queue *qPtr);

void usDelay(uint16_t time){
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim5, 0);
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <usDelay+0x30>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER (&htim5) < time);
 8000eba:	bf00      	nop
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <usDelay+0x30>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ec2:	88fb      	ldrh	r3, [r7, #6]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d3f9      	bcc.n	8000ebc <usDelay+0x14>
}
 8000ec8:	bf00      	nop
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	200001c0 	.word	0x200001c0

08000edc <HCSR04_Read>:
uint32_t Difference = 0;
uint8_t Is_First_Captured = 0;	//1st value captured
uint8_t Distance = 5;

void HCSR04_Read (void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee6:	480b      	ldr	r0, [pc, #44]	; (8000f14 <HCSR04_Read+0x38>)
 8000ee8:	f002 fee6 	bl	8003cb8 <HAL_GPIO_WritePin>
	usDelay(10);  // wait for 10 us
 8000eec:	200a      	movs	r0, #10
 8000eee:	f7ff ffdb 	bl	8000ea8 <usDelay>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ef8:	4806      	ldr	r0, [pc, #24]	; (8000f14 <HCSR04_Read+0x38>)
 8000efa:	f002 fedd 	bl	8003cb8 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim5, TIM_IT_CC2);
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HCSR04_Read+0x3c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <HCSR04_Read+0x3c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f042 0204 	orr.w	r2, r2, #4
 8000f0c:	60da      	str	r2, [r3, #12]
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40020800 	.word	0x40020800
 8000f18:	200001c0 	.word	0x200001c0

08000f1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f20:	f002 faf4 	bl	800350c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f24:	f000 f86e 	bl	8001004 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f28:	f000 fb66 	bl	80015f8 <MX_GPIO_Init>
  MX_TIM8_Init();
 8000f2c:	f000 fa90 	bl	8001450 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000f30:	f000 f992 	bl	8001258 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f34:	f000 f9e4 	bl	8001300 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000f38:	f000 fb34 	bl	80015a4 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000f3c:	f000 f8ee 	bl	800111c <MX_TIM1_Init>
  MX_I2C1_Init();
 8000f40:	f000 f8be 	bl	80010c0 <MX_I2C1_Init>
  MX_TIM5_Init();
 8000f44:	f000 fa30 	bl	80013a8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000f48:	f00a f8c4 	bl	800b0d4 <OLED_Init>
  gyroInit();
 8000f4c:	f009 fe88 	bl	800ac60 <gyroInit>
  HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 10);
 8000f50:	220a      	movs	r2, #10
 8000f52:	491a      	ldr	r1, [pc, #104]	; (8000fbc <main+0xa0>)
 8000f54:	481a      	ldr	r0, [pc, #104]	; (8000fc0 <main+0xa4>)
 8000f56:	f006 f8c4 	bl	80070e2 <HAL_UART_Receive_IT>
  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);
 8000f5a:	2104      	movs	r1, #4
 8000f5c:	4819      	ldr	r0, [pc, #100]	; (8000fc4 <main+0xa8>)
 8000f5e:	f004 fd19 	bl	8005994 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f62:	f007 f86d 	bl	8008040 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f66:	4a18      	ldr	r2, [pc, #96]	; (8000fc8 <main+0xac>)
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4818      	ldr	r0, [pc, #96]	; (8000fcc <main+0xb0>)
 8000f6c:	f007 f8b2 	bl	80080d4 <osThreadNew>
 8000f70:	4603      	mov	r3, r0
 8000f72:	4a17      	ldr	r2, [pc, #92]	; (8000fd0 <main+0xb4>)
 8000f74:	6013      	str	r3, [r2, #0]

  /* creation of show */
  showHandle = osThreadNew(showMsg, NULL, &show_attributes);
 8000f76:	4a17      	ldr	r2, [pc, #92]	; (8000fd4 <main+0xb8>)
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4817      	ldr	r0, [pc, #92]	; (8000fd8 <main+0xbc>)
 8000f7c:	f007 f8aa 	bl	80080d4 <osThreadNew>
 8000f80:	4603      	mov	r3, r0
 8000f82:	4a16      	ldr	r2, [pc, #88]	; (8000fdc <main+0xc0>)
 8000f84:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motors, NULL, &MotorTask_attributes);
 8000f86:	4a16      	ldr	r2, [pc, #88]	; (8000fe0 <main+0xc4>)
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4816      	ldr	r0, [pc, #88]	; (8000fe4 <main+0xc8>)
 8000f8c:	f007 f8a2 	bl	80080d4 <osThreadNew>
 8000f90:	4603      	mov	r3, r0
 8000f92:	4a15      	ldr	r2, [pc, #84]	; (8000fe8 <main+0xcc>)
 8000f94:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(encoder, NULL, &EncoderTask_attributes);
 8000f96:	4a15      	ldr	r2, [pc, #84]	; (8000fec <main+0xd0>)
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4815      	ldr	r0, [pc, #84]	; (8000ff0 <main+0xd4>)
 8000f9c:	f007 f89a 	bl	80080d4 <osThreadNew>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4a14      	ldr	r2, [pc, #80]	; (8000ff4 <main+0xd8>)
 8000fa4:	6013      	str	r3, [r2, #0]

  /* creation of GyroTask */
  GyroTaskHandle = osThreadNew(gryo_task, NULL, &GyroTask_attributes);
 8000fa6:	4a14      	ldr	r2, [pc, #80]	; (8000ff8 <main+0xdc>)
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4814      	ldr	r0, [pc, #80]	; (8000ffc <main+0xe0>)
 8000fac:	f007 f892 	bl	80080d4 <osThreadNew>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	4a13      	ldr	r2, [pc, #76]	; (8001000 <main+0xe4>)
 8000fb4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fb6:	f007 f867 	bl	8008088 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <main+0x9e>
 8000fbc:	200002ac 	.word	0x200002ac
 8000fc0:	20000250 	.word	0x20000250
 8000fc4:	200001c0 	.word	0x200001c0
 8000fc8:	0800bbfc 	.word	0x0800bbfc
 8000fcc:	080018cd 	.word	0x080018cd
 8000fd0:	20000298 	.word	0x20000298
 8000fd4:	0800bc20 	.word	0x0800bc20
 8000fd8:	08001919 	.word	0x08001919
 8000fdc:	2000029c 	.word	0x2000029c
 8000fe0:	0800bc44 	.word	0x0800bc44
 8000fe4:	08001971 	.word	0x08001971
 8000fe8:	200002a0 	.word	0x200002a0
 8000fec:	0800bc68 	.word	0x0800bc68
 8000ff0:	08002d3d 	.word	0x08002d3d
 8000ff4:	200002a4 	.word	0x200002a4
 8000ff8:	0800bc8c 	.word	0x0800bc8c
 8000ffc:	08002e49 	.word	0x08002e49
 8001000:	200002a8 	.word	0x200002a8

08001004 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b094      	sub	sp, #80	; 0x50
 8001008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100a:	f107 0320 	add.w	r3, r7, #32
 800100e:	2230      	movs	r2, #48	; 0x30
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f00a f9c6 	bl	800b3a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001028:	2300      	movs	r3, #0
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <SystemClock_Config+0xb4>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	4a21      	ldr	r2, [pc, #132]	; (80010b8 <SystemClock_Config+0xb4>)
 8001032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001036:	6413      	str	r3, [r2, #64]	; 0x40
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <SystemClock_Config+0xb4>)
 800103a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001044:	2300      	movs	r3, #0
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <SystemClock_Config+0xb8>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a1b      	ldr	r2, [pc, #108]	; (80010bc <SystemClock_Config+0xb8>)
 800104e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001052:	6013      	str	r3, [r2, #0]
 8001054:	4b19      	ldr	r3, [pc, #100]	; (80010bc <SystemClock_Config+0xb8>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001060:	2302      	movs	r3, #2
 8001062:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001064:	2301      	movs	r3, #1
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001068:	2310      	movs	r3, #16
 800106a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800106c:	2300      	movs	r3, #0
 800106e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001070:	f107 0320 	add.w	r3, r7, #32
 8001074:	4618      	mov	r0, r3
 8001076:	f003 fe75 	bl	8004d64 <HAL_RCC_OscConfig>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001080:	f001 ff4e 	bl	8002f20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001084:	230f      	movs	r3, #15
 8001086:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001088:	2300      	movs	r3, #0
 800108a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f004 f8d8 	bl	8005254 <HAL_RCC_ClockConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80010aa:	f001 ff39 	bl	8002f20 <Error_Handler>
  }
}
 80010ae:	bf00      	nop
 80010b0:	3750      	adds	r7, #80	; 0x50
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40007000 	.word	0x40007000

080010c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <MX_I2C1_Init+0x50>)
 80010c6:	4a13      	ldr	r2, [pc, #76]	; (8001114 <MX_I2C1_Init+0x54>)
 80010c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <MX_I2C1_Init+0x50>)
 80010cc:	4a12      	ldr	r2, [pc, #72]	; (8001118 <MX_I2C1_Init+0x58>)
 80010ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <MX_I2C1_Init+0x50>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <MX_I2C1_Init+0x50>)
 80010d8:	2200      	movs	r2, #0
 80010da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <MX_I2C1_Init+0x50>)
 80010de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010e4:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <MX_I2C1_Init+0x50>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <MX_I2C1_Init+0x50>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010f0:	4b07      	ldr	r3, [pc, #28]	; (8001110 <MX_I2C1_Init+0x50>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <MX_I2C1_Init+0x50>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010fc:	4804      	ldr	r0, [pc, #16]	; (8001110 <MX_I2C1_Init+0x50>)
 80010fe:	f002 fe0f 	bl	8003d20 <HAL_I2C_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001108:	f001 ff0a 	bl	8002f20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000094 	.word	0x20000094
 8001114:	40005400 	.word	0x40005400
 8001118:	000186a0 	.word	0x000186a0

0800111c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b096      	sub	sp, #88	; 0x58
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001122:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001130:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800113a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	611a      	str	r2, [r3, #16]
 800114a:	615a      	str	r2, [r3, #20]
 800114c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	2220      	movs	r2, #32
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f00a f925 	bl	800b3a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800115a:	4b3d      	ldr	r3, [pc, #244]	; (8001250 <MX_TIM1_Init+0x134>)
 800115c:	4a3d      	ldr	r2, [pc, #244]	; (8001254 <MX_TIM1_Init+0x138>)
 800115e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8001160:	4b3b      	ldr	r3, [pc, #236]	; (8001250 <MX_TIM1_Init+0x134>)
 8001162:	22a0      	movs	r2, #160	; 0xa0
 8001164:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001166:	4b3a      	ldr	r3, [pc, #232]	; (8001250 <MX_TIM1_Init+0x134>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800116c:	4b38      	ldr	r3, [pc, #224]	; (8001250 <MX_TIM1_Init+0x134>)
 800116e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001172:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001174:	4b36      	ldr	r3, [pc, #216]	; (8001250 <MX_TIM1_Init+0x134>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800117a:	4b35      	ldr	r3, [pc, #212]	; (8001250 <MX_TIM1_Init+0x134>)
 800117c:	2200      	movs	r2, #0
 800117e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001180:	4b33      	ldr	r3, [pc, #204]	; (8001250 <MX_TIM1_Init+0x134>)
 8001182:	2280      	movs	r2, #128	; 0x80
 8001184:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001186:	4832      	ldr	r0, [pc, #200]	; (8001250 <MX_TIM1_Init+0x134>)
 8001188:	f004 fa44 	bl	8005614 <HAL_TIM_Base_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001192:	f001 fec5 	bl	8002f20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001196:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800119c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011a0:	4619      	mov	r1, r3
 80011a2:	482b      	ldr	r0, [pc, #172]	; (8001250 <MX_TIM1_Init+0x134>)
 80011a4:	f005 f8a0 	bl	80062e8 <HAL_TIM_ConfigClockSource>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011ae:	f001 feb7 	bl	8002f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011b2:	4827      	ldr	r0, [pc, #156]	; (8001250 <MX_TIM1_Init+0x134>)
 80011b4:	f004 fa7d 	bl	80056b2 <HAL_TIM_PWM_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80011be:	f001 feaf 	bl	8002f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c2:	2300      	movs	r3, #0
 80011c4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011ce:	4619      	mov	r1, r3
 80011d0:	481f      	ldr	r0, [pc, #124]	; (8001250 <MX_TIM1_Init+0x134>)
 80011d2:	f005 fdc9 	bl	8006d68 <HAL_TIMEx_MasterConfigSynchronization>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80011dc:	f001 fea0 	bl	8002f20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e0:	2360      	movs	r3, #96	; 0x60
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011f0:	2300      	movs	r3, #0
 80011f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011f4:	2300      	movs	r3, #0
 80011f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fc:	220c      	movs	r2, #12
 80011fe:	4619      	mov	r1, r3
 8001200:	4813      	ldr	r0, [pc, #76]	; (8001250 <MX_TIM1_Init+0x134>)
 8001202:	f004 ffaf 	bl	8006164 <HAL_TIM_PWM_ConfigChannel>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 800120c:	f001 fe88 	bl	8002f20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001214:	2300      	movs	r3, #0
 8001216:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001224:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001228:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	4619      	mov	r1, r3
 8001232:	4807      	ldr	r0, [pc, #28]	; (8001250 <MX_TIM1_Init+0x134>)
 8001234:	f005 fe14 	bl	8006e60 <HAL_TIMEx_ConfigBreakDeadTime>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800123e:	f001 fe6f 	bl	8002f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001242:	4803      	ldr	r0, [pc, #12]	; (8001250 <MX_TIM1_Init+0x134>)
 8001244:	f002 f82e 	bl	80032a4 <HAL_TIM_MspPostInit>

}
 8001248:	bf00      	nop
 800124a:	3758      	adds	r7, #88	; 0x58
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	200000e8 	.word	0x200000e8
 8001254:	40010000 	.word	0x40010000

08001258 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08c      	sub	sp, #48	; 0x30
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800125e:	f107 030c 	add.w	r3, r7, #12
 8001262:	2224      	movs	r2, #36	; 0x24
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f00a f89c 	bl	800b3a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001274:	4b21      	ldr	r3, [pc, #132]	; (80012fc <MX_TIM2_Init+0xa4>)
 8001276:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800127a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800127c:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <MX_TIM2_Init+0xa4>)
 800127e:	2200      	movs	r2, #0
 8001280:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001282:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <MX_TIM2_Init+0xa4>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001288:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <MX_TIM2_Init+0xa4>)
 800128a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800128e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001290:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <MX_TIM2_Init+0xa4>)
 8001292:	2200      	movs	r2, #0
 8001294:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001296:	4b19      	ldr	r3, [pc, #100]	; (80012fc <MX_TIM2_Init+0xa4>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800129c:	2303      	movs	r3, #3
 800129e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012a0:	2300      	movs	r3, #0
 80012a2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012a4:	2301      	movs	r3, #1
 80012a6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80012ac:	230a      	movs	r3, #10
 80012ae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012b0:	2300      	movs	r3, #0
 80012b2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012b4:	2301      	movs	r3, #1
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	4619      	mov	r1, r3
 80012c6:	480d      	ldr	r0, [pc, #52]	; (80012fc <MX_TIM2_Init+0xa4>)
 80012c8:	f004 fc8c 	bl	8005be4 <HAL_TIM_Encoder_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80012d2:	f001 fe25 	bl	8002f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	4619      	mov	r1, r3
 80012e2:	4806      	ldr	r0, [pc, #24]	; (80012fc <MX_TIM2_Init+0xa4>)
 80012e4:	f005 fd40 	bl	8006d68 <HAL_TIMEx_MasterConfigSynchronization>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80012ee:	f001 fe17 	bl	8002f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	3730      	adds	r7, #48	; 0x30
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000130 	.word	0x20000130

08001300 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08c      	sub	sp, #48	; 0x30
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001306:	f107 030c 	add.w	r3, r7, #12
 800130a:	2224      	movs	r2, #36	; 0x24
 800130c:	2100      	movs	r1, #0
 800130e:	4618      	mov	r0, r3
 8001310:	f00a f848 	bl	800b3a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800131c:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <MX_TIM3_Init+0xa0>)
 800131e:	4a21      	ldr	r2, [pc, #132]	; (80013a4 <MX_TIM3_Init+0xa4>)
 8001320:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001322:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <MX_TIM3_Init+0xa0>)
 8001324:	2200      	movs	r2, #0
 8001326:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001328:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <MX_TIM3_Init+0xa0>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800132e:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <MX_TIM3_Init+0xa0>)
 8001330:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001334:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001336:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <MX_TIM3_Init+0xa0>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133c:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <MX_TIM3_Init+0xa0>)
 800133e:	2200      	movs	r2, #0
 8001340:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001342:	2303      	movs	r3, #3
 8001344:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001346:	2300      	movs	r3, #0
 8001348:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800134a:	2301      	movs	r3, #1
 800134c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800134e:	2300      	movs	r3, #0
 8001350:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001352:	230a      	movs	r3, #10
 8001354:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001356:	2300      	movs	r3, #0
 8001358:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800135a:	2301      	movs	r3, #1
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800135e:	2300      	movs	r3, #0
 8001360:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001362:	230a      	movs	r3, #10
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001366:	f107 030c 	add.w	r3, r7, #12
 800136a:	4619      	mov	r1, r3
 800136c:	480c      	ldr	r0, [pc, #48]	; (80013a0 <MX_TIM3_Init+0xa0>)
 800136e:	f004 fc39 	bl	8005be4 <HAL_TIM_Encoder_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001378:	f001 fdd2 	bl	8002f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137c:	2300      	movs	r3, #0
 800137e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	4619      	mov	r1, r3
 8001388:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_TIM3_Init+0xa0>)
 800138a:	f005 fced 	bl	8006d68 <HAL_TIMEx_MasterConfigSynchronization>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001394:	f001 fdc4 	bl	8002f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	3730      	adds	r7, #48	; 0x30
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000178 	.word	0x20000178
 80013a4:	40000400 	.word	0x40000400

080013a8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ae:	f107 0310 	add.w	r3, r7, #16
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013b8:	463b      	mov	r3, r7
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80013c4:	4b20      	ldr	r3, [pc, #128]	; (8001448 <MX_TIM5_Init+0xa0>)
 80013c6:	4a21      	ldr	r2, [pc, #132]	; (800144c <MX_TIM5_Init+0xa4>)
 80013c8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 16-1;
 80013ca:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <MX_TIM5_Init+0xa0>)
 80013cc:	220f      	movs	r2, #15
 80013ce:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d0:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <MX_TIM5_Init+0xa0>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80013d6:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <MX_TIM5_Init+0xa0>)
 80013d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013dc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013de:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <MX_TIM5_Init+0xa0>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e4:	4b18      	ldr	r3, [pc, #96]	; (8001448 <MX_TIM5_Init+0xa0>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80013ea:	4817      	ldr	r0, [pc, #92]	; (8001448 <MX_TIM5_Init+0xa0>)
 80013ec:	f004 fa82 	bl	80058f4 <HAL_TIM_IC_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80013f6:	f001 fd93 	bl	8002f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001402:	f107 0310 	add.w	r3, r7, #16
 8001406:	4619      	mov	r1, r3
 8001408:	480f      	ldr	r0, [pc, #60]	; (8001448 <MX_TIM5_Init+0xa0>)
 800140a:	f005 fcad 	bl	8006d68 <HAL_TIMEx_MasterConfigSynchronization>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001414:	f001 fd84 	bl	8002f20 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001418:	2300      	movs	r3, #0
 800141a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800141c:	2301      	movs	r3, #1
 800141e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001420:	2300      	movs	r3, #0
 8001422:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001428:	463b      	mov	r3, r7
 800142a:	2204      	movs	r2, #4
 800142c:	4619      	mov	r1, r3
 800142e:	4806      	ldr	r0, [pc, #24]	; (8001448 <MX_TIM5_Init+0xa0>)
 8001430:	f004 fdfc 	bl	800602c <HAL_TIM_IC_ConfigChannel>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 800143a:	f001 fd71 	bl	8002f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800143e:	bf00      	nop
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200001c0 	.word	0x200001c0
 800144c:	40000c00 	.word	0x40000c00

08001450 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b096      	sub	sp, #88	; 0x58
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001456:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001464:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800146e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
 800147c:	611a      	str	r2, [r3, #16]
 800147e:	615a      	str	r2, [r3, #20]
 8001480:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	2220      	movs	r2, #32
 8001486:	2100      	movs	r1, #0
 8001488:	4618      	mov	r0, r3
 800148a:	f009 ff8b 	bl	800b3a4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800148e:	4b43      	ldr	r3, [pc, #268]	; (800159c <MX_TIM8_Init+0x14c>)
 8001490:	4a43      	ldr	r2, [pc, #268]	; (80015a0 <MX_TIM8_Init+0x150>)
 8001492:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001494:	4b41      	ldr	r3, [pc, #260]	; (800159c <MX_TIM8_Init+0x14c>)
 8001496:	2200      	movs	r2, #0
 8001498:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149a:	4b40      	ldr	r3, [pc, #256]	; (800159c <MX_TIM8_Init+0x14c>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80014a0:	4b3e      	ldr	r3, [pc, #248]	; (800159c <MX_TIM8_Init+0x14c>)
 80014a2:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80014a6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a8:	4b3c      	ldr	r3, [pc, #240]	; (800159c <MX_TIM8_Init+0x14c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80014ae:	4b3b      	ldr	r3, [pc, #236]	; (800159c <MX_TIM8_Init+0x14c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b4:	4b39      	ldr	r3, [pc, #228]	; (800159c <MX_TIM8_Init+0x14c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80014ba:	4838      	ldr	r0, [pc, #224]	; (800159c <MX_TIM8_Init+0x14c>)
 80014bc:	f004 f8aa 	bl	8005614 <HAL_TIM_Base_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80014c6:	f001 fd2b 	bl	8002f20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80014d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014d4:	4619      	mov	r1, r3
 80014d6:	4831      	ldr	r0, [pc, #196]	; (800159c <MX_TIM8_Init+0x14c>)
 80014d8:	f004 ff06 	bl	80062e8 <HAL_TIM_ConfigClockSource>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80014e2:	f001 fd1d 	bl	8002f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80014e6:	482d      	ldr	r0, [pc, #180]	; (800159c <MX_TIM8_Init+0x14c>)
 80014e8:	f004 f8e3 	bl	80056b2 <HAL_TIM_PWM_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80014f2:	f001 fd15 	bl	8002f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f6:	2300      	movs	r3, #0
 80014f8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80014fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001502:	4619      	mov	r1, r3
 8001504:	4825      	ldr	r0, [pc, #148]	; (800159c <MX_TIM8_Init+0x14c>)
 8001506:	f005 fc2f 	bl	8006d68 <HAL_TIMEx_MasterConfigSynchronization>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001510:	f001 fd06 	bl	8002f20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001514:	2360      	movs	r3, #96	; 0x60
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800151c:	2300      	movs	r3, #0
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001520:	2300      	movs	r3, #0
 8001522:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001528:	2300      	movs	r3, #0
 800152a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800152c:	2300      	movs	r3, #0
 800152e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001534:	2200      	movs	r2, #0
 8001536:	4619      	mov	r1, r3
 8001538:	4818      	ldr	r0, [pc, #96]	; (800159c <MX_TIM8_Init+0x14c>)
 800153a:	f004 fe13 	bl	8006164 <HAL_TIM_PWM_ConfigChannel>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001544:	f001 fcec 	bl	8002f20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154c:	2204      	movs	r2, #4
 800154e:	4619      	mov	r1, r3
 8001550:	4812      	ldr	r0, [pc, #72]	; (800159c <MX_TIM8_Init+0x14c>)
 8001552:	f004 fe07 	bl	8006164 <HAL_TIM_PWM_ConfigChannel>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 800155c:	f001 fce0 	bl	8002f20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001574:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001578:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800157a:	2300      	movs	r3, #0
 800157c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	4619      	mov	r1, r3
 8001582:	4806      	ldr	r0, [pc, #24]	; (800159c <MX_TIM8_Init+0x14c>)
 8001584:	f005 fc6c 	bl	8006e60 <HAL_TIMEx_ConfigBreakDeadTime>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800158e:	f001 fcc7 	bl	8002f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001592:	bf00      	nop
 8001594:	3758      	adds	r7, #88	; 0x58
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000208 	.word	0x20000208
 80015a0:	40010400 	.word	0x40010400

080015a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <MX_USART3_UART_Init+0x4c>)
 80015aa:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <MX_USART3_UART_Init+0x50>)
 80015ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <MX_USART3_UART_Init+0x4c>)
 80015b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <MX_USART3_UART_Init+0x4c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <MX_USART3_UART_Init+0x4c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <MX_USART3_UART_Init+0x4c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_USART3_UART_Init+0x4c>)
 80015ca:	220c      	movs	r2, #12
 80015cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <MX_USART3_UART_Init+0x4c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_USART3_UART_Init+0x4c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015da:	4805      	ldr	r0, [pc, #20]	; (80015f0 <MX_USART3_UART_Init+0x4c>)
 80015dc:	f005 fca6 	bl	8006f2c <HAL_UART_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015e6:	f001 fc9b 	bl	8002f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000250 	.word	0x20000250
 80015f4:	40004800 	.word	0x40004800

080015f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	; 0x28
 80015fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fe:	f107 0314 	add.w	r3, r7, #20
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
 800160c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	4b42      	ldr	r3, [pc, #264]	; (800171c <MX_GPIO_Init+0x124>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a41      	ldr	r2, [pc, #260]	; (800171c <MX_GPIO_Init+0x124>)
 8001618:	f043 0310 	orr.w	r3, r3, #16
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b3f      	ldr	r3, [pc, #252]	; (800171c <MX_GPIO_Init+0x124>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0310 	and.w	r3, r3, #16
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	4b3b      	ldr	r3, [pc, #236]	; (800171c <MX_GPIO_Init+0x124>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4a3a      	ldr	r2, [pc, #232]	; (800171c <MX_GPIO_Init+0x124>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4b38      	ldr	r3, [pc, #224]	; (800171c <MX_GPIO_Init+0x124>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	4b34      	ldr	r3, [pc, #208]	; (800171c <MX_GPIO_Init+0x124>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a33      	ldr	r2, [pc, #204]	; (800171c <MX_GPIO_Init+0x124>)
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b31      	ldr	r3, [pc, #196]	; (800171c <MX_GPIO_Init+0x124>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	4b2d      	ldr	r3, [pc, #180]	; (800171c <MX_GPIO_Init+0x124>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a2c      	ldr	r2, [pc, #176]	; (800171c <MX_GPIO_Init+0x124>)
 800166c:	f043 0302 	orr.w	r3, r3, #2
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b2a      	ldr	r3, [pc, #168]	; (800171c <MX_GPIO_Init+0x124>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 800167e:	2200      	movs	r2, #0
 8001680:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8001684:	4826      	ldr	r0, [pc, #152]	; (8001720 <MX_GPIO_Init+0x128>)
 8001686:	f002 fb17 	bl	8003cb8 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 800168a:	2200      	movs	r2, #0
 800168c:	213c      	movs	r1, #60	; 0x3c
 800168e:	4825      	ldr	r0, [pc, #148]	; (8001724 <MX_GPIO_Init+0x12c>)
 8001690:	f002 fb12 	bl	8003cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8001694:	2200      	movs	r2, #0
 8001696:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800169a:	4823      	ldr	r0, [pc, #140]	; (8001728 <MX_GPIO_Init+0x130>)
 800169c:	f002 fb0c 	bl	8003cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 80016a0:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 80016a4:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a6:	2301      	movs	r3, #1
 80016a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ae:	2300      	movs	r3, #0
 80016b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	4619      	mov	r1, r3
 80016b8:	4819      	ldr	r0, [pc, #100]	; (8001720 <MX_GPIO_Init+0x128>)
 80016ba:	f002 f961 	bl	8003980 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin;
 80016be:	230c      	movs	r3, #12
 80016c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c2:	2301      	movs	r3, #1
 80016c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ca:	2302      	movs	r3, #2
 80016cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4619      	mov	r1, r3
 80016d4:	4813      	ldr	r0, [pc, #76]	; (8001724 <MX_GPIO_Init+0x12c>)
 80016d6:	f002 f953 	bl	8003980 <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = BIN1_Pin|BIN2_Pin;
 80016da:	2330      	movs	r3, #48	; 0x30
 80016dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016de:	2301      	movs	r3, #1
 80016e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2300      	movs	r3, #0
 80016e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	4619      	mov	r1, r3
 80016f0:	480c      	ldr	r0, [pc, #48]	; (8001724 <MX_GPIO_Init+0x12c>)
 80016f2:	f002 f945 	bl	8003980 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 80016f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fc:	2301      	movs	r3, #1
 80016fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	4619      	mov	r1, r3
 800170e:	4806      	ldr	r0, [pc, #24]	; (8001728 <MX_GPIO_Init+0x130>)
 8001710:	f002 f936 	bl	8003980 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001714:	bf00      	nop
 8001716:	3728      	adds	r7, #40	; 0x28
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40023800 	.word	0x40023800
 8001720:	40021000 	.word	0x40021000
 8001724:	40020000 	.word	0x40020000
 8001728:	40020800 	.word	0x40020800

0800172c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]

	UNUSED(huart);

	//enqueue(&q,aRxBuffer);

	HAL_UART_Transmit(&huart3,(uint8_t *) aRxBuffer,10,0xFFFF);
 8001734:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001738:	220a      	movs	r2, #10
 800173a:	4906      	ldr	r1, [pc, #24]	; (8001754 <HAL_UART_RxCpltCallback+0x28>)
 800173c:	4806      	ldr	r0, [pc, #24]	; (8001758 <HAL_UART_RxCpltCallback+0x2c>)
 800173e:	f005 fc45 	bl	8006fcc <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001742:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001746:	4805      	ldr	r0, [pc, #20]	; (800175c <HAL_UART_RxCpltCallback+0x30>)
 8001748:	f002 facf 	bl	8003cea <HAL_GPIO_TogglePin>
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	200002ac 	.word	0x200002ac
 8001758:	20000250 	.word	0x20000250
 800175c:	40021000 	.word	0x40021000

08001760 <reset_motorVal>:



//linked list code
void reset_motorVal(){
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
	// Reset Values
	frontback = 'w';	// Front/back character
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <reset_motorVal+0x28>)
 8001766:	2277      	movs	r2, #119	; 0x77
 8001768:	701a      	strb	r2, [r3, #0]
	fb_speed = '0';	// Front/back speed
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <reset_motorVal+0x2c>)
 800176c:	2230      	movs	r2, #48	; 0x30
 800176e:	701a      	strb	r2, [r3, #0]
	leftright = 'a';	// Left/right character
 8001770:	4b07      	ldr	r3, [pc, #28]	; (8001790 <reset_motorVal+0x30>)
 8001772:	2261      	movs	r2, #97	; 0x61
 8001774:	701a      	strb	r2, [r3, #0]
	lr_speed = '0';	// Left/right speed
 8001776:	4b07      	ldr	r3, [pc, #28]	; (8001794 <reset_motorVal+0x34>)
 8001778:	2230      	movs	r2, #48	; 0x30
 800177a:	701a      	strb	r2, [r3, #0]
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20000000 	.word	0x20000000
 800178c:	20000001 	.word	0x20000001
 8001790:	20000002 	.word	0x20000002
 8001794:	20000003 	.word	0x20000003

08001798 <enqueue>:

//input stuff into the queue
void enqueue(Queue *qPtr, uint8_t msg[4]){
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
    QueueNode *newNode;
    newNode = (QueueNode *) malloc(sizeof(QueueNode));
 80017a2:	2008      	movs	r0, #8
 80017a4:	f009 fd22 	bl	800b1ec <malloc>
 80017a8:	4603      	mov	r3, r0
 80017aa:	60bb      	str	r3, [r7, #8]
    for(int i=0; i<4; i++){
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	e00b      	b.n	80017ca <enqueue+0x32>
        newNode->msg[i] = msg[i];
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	4413      	add	r3, r2
 80017b8:	7819      	ldrb	r1, [r3, #0]
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4413      	add	r3, r2
 80017c0:	460a      	mov	r2, r1
 80017c2:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<4; i++){
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	3301      	adds	r3, #1
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	ddf0      	ble.n	80017b2 <enqueue+0x1a>
    }
    newNode->next = NULL;
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	2200      	movs	r2, #0
 80017d4:	605a      	str	r2, [r3, #4]

    if(isEmptyQueue(*qPtr))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017dc:	f000 f864 	bl	80018a8 <isEmptyQueue>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d003      	beq.n	80017ee <enqueue+0x56>
        qPtr->head=newNode;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68ba      	ldr	r2, [r7, #8]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	e003      	b.n	80017f6 <enqueue+0x5e>
    else
        qPtr->tail->next = newNode;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	605a      	str	r2, [r3, #4]

    qPtr->tail = newNode;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68ba      	ldr	r2, [r7, #8]
 80017fa:	609a      	str	r2, [r3, #8]
    qPtr->size++;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	1c5a      	adds	r2, r3, #1
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	601a      	str	r2, [r3, #0]
}
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <dequeue>:
int dequeue(Queue *qPtr){
 800180e:	b580      	push	{r7, lr}
 8001810:	b084      	sub	sp, #16
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
    if(qPtr==NULL || qPtr->head==NULL){ //Queue is empty or NULL pointer
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <dequeue+0x16>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <dequeue+0x1a>
        return 0;
 8001824:	2300      	movs	r3, #0
 8001826:	e017      	b.n	8001858 <dequeue+0x4a>
    }
    else{
       QueueNode *temp = qPtr->head;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	60fb      	str	r3, [r7, #12]
       qPtr->head = qPtr->head->next;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	605a      	str	r2, [r3, #4]
       if(qPtr->head == NULL) //Queue is emptied
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d102      	bne.n	8001846 <dequeue+0x38>
           qPtr->tail = NULL;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]

       free(temp);
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f009 fcd8 	bl	800b1fc <free>
       qPtr->size--;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	1e5a      	subs	r2, r3, #1
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	601a      	str	r2, [r3, #0]
       return 1;
 8001856:	2301      	movs	r3, #1
    }
}
 8001858:	4618      	mov	r0, r3
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <getFront>:

//get the front of the queue (not sure if working)
void getFront(Queue q){
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        frontback = (uint8_t)(q.head->msg[0]);
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	781a      	ldrb	r2, [r3, #0]
 8001870:	4b09      	ldr	r3, [pc, #36]	; (8001898 <getFront+0x38>)
 8001872:	701a      	strb	r2, [r3, #0]
        fb_speed = (uint8_t)(q.head->msg[1]);
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	785a      	ldrb	r2, [r3, #1]
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <getFront+0x3c>)
 800187a:	701a      	strb	r2, [r3, #0]
        leftright = (uint8_t)(q.head->msg[2]);
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	789a      	ldrb	r2, [r3, #2]
 8001880:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <getFront+0x40>)
 8001882:	701a      	strb	r2, [r3, #0]
        lr_speed = (uint8_t)(q.head->msg[3]);
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	78da      	ldrb	r2, [r3, #3]
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <getFront+0x44>)
 800188a:	701a      	strb	r2, [r3, #0]
}
 800188c:	bf00      	nop
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	20000000 	.word	0x20000000
 800189c:	20000001 	.word	0x20000001
 80018a0:	20000002 	.word	0x20000002
 80018a4:	20000003 	.word	0x20000003

080018a8 <isEmptyQueue>:

//check if queue is empty (output 1 if empty, 0 if not empty)
int isEmptyQueue(Queue q){
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if(q.size==0) return 1;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <isEmptyQueue+0x16>
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <isEmptyQueue+0x18>
    else return 0;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  uint8_t ch = 'A';
 80018d4:	2341      	movs	r3, #65	; 0x41
 80018d6:	73fb      	strb	r3, [r7, #15]
  for(;;)
  {
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch,1, 0xFFFF);
 80018d8:	f107 010f 	add.w	r1, r7, #15
 80018dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018e0:	2201      	movs	r2, #1
 80018e2:	480b      	ldr	r0, [pc, #44]	; (8001910 <StartDefaultTask+0x44>)
 80018e4:	f005 fb72 	bl	8006fcc <HAL_UART_Transmit>
	if(ch<'Z')
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
 80018ea:	2b59      	cmp	r3, #89	; 0x59
 80018ec:	d804      	bhi.n	80018f8 <StartDefaultTask+0x2c>
		ch++;
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
 80018f0:	3301      	adds	r3, #1
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	73fb      	strb	r3, [r7, #15]
 80018f6:	e001      	b.n	80018fc <StartDefaultTask+0x30>
	else ch = 'A';
 80018f8:	2341      	movs	r3, #65	; 0x41
 80018fa:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80018fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001900:	4804      	ldr	r0, [pc, #16]	; (8001914 <StartDefaultTask+0x48>)
 8001902:	f002 f9f2 	bl	8003cea <HAL_GPIO_TogglePin>
	osDelay(1000);
 8001906:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800190a:	f006 fc75 	bl	80081f8 <osDelay>
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch,1, 0xFFFF);
 800190e:	e7e3      	b.n	80018d8 <StartDefaultTask+0xc>
 8001910:	20000250 	.word	0x20000250
 8001914:	40021000 	.word	0x40021000

08001918 <showMsg>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_showMsg */
void showMsg(void *argument)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b088      	sub	sp, #32
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN showMsg */
  uint8_t test[20] = "testing\0";
 8001920:	4a10      	ldr	r2, [pc, #64]	; (8001964 <showMsg+0x4c>)
 8001922:	f107 030c 	add.w	r3, r7, #12
 8001926:	ca07      	ldmia	r2, {r0, r1, r2}
 8001928:	c303      	stmia	r3!, {r0, r1}
 800192a:	701a      	strb	r2, [r3, #0]
 800192c:	f107 0315 	add.w	r3, r7, #21
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	f8c3 2007 	str.w	r2, [r3, #7]

  /* Infinite loop */
  for(;;)
  {
   sprintf(test, "%s\0", aRxBuffer);
 800193a:	f107 030c 	add.w	r3, r7, #12
 800193e:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <showMsg+0x50>)
 8001940:	490a      	ldr	r1, [pc, #40]	; (800196c <showMsg+0x54>)
 8001942:	4618      	mov	r0, r3
 8001944:	f009 fd0e 	bl	800b364 <siprintf>
   OLED_ShowString(10,20,test);
 8001948:	f107 030c 	add.w	r3, r7, #12
 800194c:	461a      	mov	r2, r3
 800194e:	2114      	movs	r1, #20
 8001950:	200a      	movs	r0, #10
 8001952:	f009 fb8d 	bl	800b070 <OLED_ShowString>
   OLED_Refresh_Gram();
 8001956:	f009 fa17 	bl	800ad88 <OLED_Refresh_Gram>
   osDelay(1000);
 800195a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800195e:	f006 fc4b 	bl	80081f8 <osDelay>
   sprintf(test, "%s\0", aRxBuffer);
 8001962:	e7ea      	b.n	800193a <showMsg+0x22>
 8001964:	0800bba8 	.word	0x0800bba8
 8001968:	200002ac 	.word	0x200002ac
 800196c:	0800bba4 	.word	0x0800bba4

08001970 <motors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motors */
void motors(void *argument)
{
 8001970:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001974:	b0a2      	sub	sp, #136	; 0x88
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN motor */
	uint16_t servo_max = 5;		// Servo_max * (0-9) = servo_value
 800197a:	2305      	movs	r3, #5
 800197c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

	// For differential steering
	double motor_offset_r = 1;
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	4b9e      	ldr	r3, [pc, #632]	; (8001c00 <motors+0x290>)
 8001986:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	double motor_offset_l = 1;
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	4b9c      	ldr	r3, [pc, #624]	; (8001c00 <motors+0x290>)
 8001990:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

	uint16_t pwmVal_motor = 0;	// Current motor pwm value
 8001994:	2300      	movs	r3, #0
 8001996:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	uint16_t motor_min = 1000;// Min value for pwm to complete 2 instruction without stopping
 800199a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800199e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	uint16_t motor_increment = 100;
 80019a2:	2364      	movs	r3, #100	; 0x64
 80019a4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	uint16_t motor_reference;	// Reference pwm value for motor
	uint32_t target_dist;	// Distance to travel

	// PID Values
	uint8_t kp = 3;
 80019a8:	2303      	movs	r3, #3
 80019aa:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	uint8_t ki = 0.8;
 80019ae:	2300      	movs	r3, #0
 80019b0:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a

	uint8_t kp_back = 2;
 80019b4:	2302      	movs	r3, #2
 80019b6:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69

	// Distance Values
	uint8_t grad = 160;
 80019ba:	23a0      	movs	r3, #160	; 0xa0
 80019bc:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	uint8_t y_intercept = 55;
 80019c0:	2337      	movs	r3, #55	; 0x37
 80019c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	int16_t eintegral = 0;	// Integral error
 80019c6:	2300      	movs	r3, #0
 80019c8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	int32_t err;			// To total error for Integral
	int back_angle_threshold;

	// Set servo value to centre
	uint8_t servo_val = pwmVal_servo;
 80019cc:	4b8d      	ldr	r3, [pc, #564]	; (8001c04 <motors+0x294>)
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

	// Adds to servo middle value to find the goddamn pictures
	uint8_t search_dir = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80019da:	2100      	movs	r1, #0
 80019dc:	488a      	ldr	r0, [pc, #552]	; (8001c08 <motors+0x298>)
 80019de:	f003 fec1 	bl	8005764 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80019e2:	2104      	movs	r1, #4
 80019e4:	4888      	ldr	r0, [pc, #544]	; (8001c08 <motors+0x298>)
 80019e6:	f003 febd 	bl	8005764 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80019ea:	210c      	movs	r1, #12
 80019ec:	4887      	ldr	r0, [pc, #540]	; (8001c0c <motors+0x29c>)
 80019ee:	f003 feb9 	bl	8005764 <HAL_TIM_PWM_Start>

	int turn_angle;
	int stuck;
	// Initialize your queue
	Queue q = { 0, NULL, NULL };
 80019f2:	2300      	movs	r3, #0
 80019f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80019f6:	2300      	movs	r3, #0
 80019f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019fa:	2300      	movs	r3, #0
 80019fc:	643b      	str	r3, [r7, #64]	; 0x40
	// msg[1] - Distance back and front
	// msg[2] - Left/Right instruction ('a' for left, 'd' for right, '0' for center)
	// msg[3] - Speed for turning

	// Create instructions
	uint8_t reset[] = {'z', '0', '0', '0'}; // Stop
 80019fe:	4b84      	ldr	r3, [pc, #528]	; (8001c10 <motors+0x2a0>)
 8001a00:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t stop[] = {'k', '0', '0', '0'}; // Stop
 8001a02:	4b84      	ldr	r3, [pc, #528]	; (8001c14 <motors+0x2a4>)
 8001a04:	633b      	str	r3, [r7, #48]	; 0x30
	//uint8_t F3[] = {'w', '1', '0', '0'}; // Move forward with speed level 3 and turn left with speed level 4
	uint8_t up_right_90[] = {'w', '5', 'd','8'}; // Move forward with speed level 3 and turn left with speed level 4
 8001a06:	4b84      	ldr	r3, [pc, #528]	; (8001c18 <motors+0x2a8>)
 8001a08:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t up_right_45[] = {'w', '5', 'd','5'}; // Move forward with speed level 3 and turn left with speed level 4
 8001a0a:	4b84      	ldr	r3, [pc, #528]	; (8001c1c <motors+0x2ac>)
 8001a0c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t up_left_90[] = {'w', '5', 'a','9'}; // Move forward with speed level 3 and turn left with speed level 4
 8001a0e:	4b84      	ldr	r3, [pc, #528]	; (8001c20 <motors+0x2b0>)
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t up_left_45[] = {'w', '5', 'a','5'}; // Move forward with speed level 3 and turn left with speed level 4
 8001a12:	4b84      	ldr	r3, [pc, #528]	; (8001c24 <motors+0x2b4>)
 8001a14:	623b      	str	r3, [r7, #32]
	uint8_t up_max[] = {'w', '9', '0','0'}; // Move forward with speed level 3 and turn left with speed level 4
 8001a16:	4b84      	ldr	r3, [pc, #528]	; (8001c28 <motors+0x2b8>)
 8001a18:	61fb      	str	r3, [r7, #28]

	// Enqueue the instructions
	enqueue(&q, reset);
 8001a1a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001a1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a22:	4611      	mov	r1, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff feb7 	bl	8001798 <enqueue>
	enqueue(&q, up_right_90);
 8001a2a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001a2e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff feaf 	bl	8001798 <enqueue>
	enqueue(&q, up_max);
 8001a3a:	f107 021c 	add.w	r2, r7, #28
 8001a3e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a42:	4611      	mov	r1, r2
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fea7 	bl	8001798 <enqueue>
	enqueue(&q, up_left_45);
 8001a4a:	f107 0220 	add.w	r2, r7, #32
 8001a4e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a52:	4611      	mov	r1, r2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff fe9f 	bl	8001798 <enqueue>
	enqueue(&q, up_max);
 8001a5a:	f107 021c 	add.w	r2, r7, #28
 8001a5e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a62:	4611      	mov	r1, r2
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fe97 	bl	8001798 <enqueue>
	enqueue(&q, up_right_45);
 8001a6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fe8f 	bl	8001798 <enqueue>
	enqueue(&q, up_max);
 8001a7a:	f107 021c 	add.w	r2, r7, #28
 8001a7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a82:	4611      	mov	r1, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fe87 	bl	8001798 <enqueue>
	enqueue(&q, up_right_45);
 8001a8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a92:	4611      	mov	r1, r2
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fe7f 	bl	8001798 <enqueue>

	/* Infinite loop */
	for (;;) {
		if (isEmptyQueue(q) != 1) {
 8001a9a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001aa2:	f7ff ff01 	bl	80018a8 <isEmptyQueue>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	f001 8114 	beq.w	8002cd6 <motors+0x1366>
			stuck = 0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	65bb      	str	r3, [r7, #88]	; 0x58
			uint8_t hello[20];

			// Setting values according to queue head
			getFront(q);
 8001ab2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ab6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001aba:	f7ff fed1 	bl	8001860 <getFront>
			// Reset Encoder distance measurement
			encoder_dist = 0;
 8001abe:	4b5b      	ldr	r3, [pc, #364]	; (8001c2c <motors+0x2bc>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
			// Integral error
			eintegral = 0;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

			// Default: Start with acceleration
			accelerate = 1;
 8001aca:	2301      	movs	r3, #1
 8001acc:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			target_dist = (int) ((fb_speed - 48) * grad - y_intercept);
 8001ad0:	4b57      	ldr	r3, [pc, #348]	; (8001c30 <motors+0x2c0>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	3b30      	subs	r3, #48	; 0x30
 8001ad6:	f897 2068 	ldrb.w	r2, [r7, #104]	; 0x68
 8001ada:	fb03 f202 	mul.w	r2, r3, r2
 8001ade:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	66fb      	str	r3, [r7, #108]	; 0x6c
			if (target_dist <= 0)
 8001ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <motors+0x180>
				target_dist = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	66fb      	str	r3, [r7, #108]	; 0x6c

			// Display direction of movement
			sprintf(hello, "Dir %c : %3d\0", frontback, (fb_speed - 48));
 8001af0:	4b50      	ldr	r3, [pc, #320]	; (8001c34 <motors+0x2c4>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	4b4e      	ldr	r3, [pc, #312]	; (8001c30 <motors+0x2c0>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	3b30      	subs	r3, #48	; 0x30
 8001afc:	f107 0008 	add.w	r0, r7, #8
 8001b00:	494d      	ldr	r1, [pc, #308]	; (8001c38 <motors+0x2c8>)
 8001b02:	f009 fc2f 	bl	800b364 <siprintf>
			OLED_ShowString(10, 30, hello);
 8001b06:	f107 0308 	add.w	r3, r7, #8
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	211e      	movs	r1, #30
 8001b0e:	200a      	movs	r0, #10
 8001b10:	f009 faae 	bl	800b070 <OLED_ShowString>

			// Check if moving straight or turn
			if (lr_speed == '0') {
 8001b14:	4b49      	ldr	r3, [pc, #292]	; (8001c3c <motors+0x2cc>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b30      	cmp	r3, #48	; 0x30
 8001b1a:	d104      	bne.n	8001b26 <motors+0x1b6>
				//Move faster if straight
				motor_reference = 2800;
 8001b1c:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8001b20:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8001b24:	e003      	b.n	8001b2e <motors+0x1be>
			}

			else
				motor_reference = 1600;
 8001b26:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8001b2a:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

			// Turn Servo to desired position
			// Centre - offset for left turn
			if (leftright == 'a') {
 8001b2e:	4b44      	ldr	r3, [pc, #272]	; (8001c40 <motors+0x2d0>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b61      	cmp	r3, #97	; 0x61
 8001b34:	f040 808a 	bne.w	8001c4c <motors+0x2dc>
				// Decrease in servo's position from center
				// -48 to convert ASCII to integer
				// servo_max declared at 5
				htim1.Instance->CCR4 = pwmVal_servo - 1.1 * (lr_speed - 48) * servo_max;
 8001b38:	4b32      	ldr	r3, [pc, #200]	; (8001c04 <motors+0x294>)
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7fe fce9 	bl	8000514 <__aeabi_i2d>
 8001b42:	4604      	mov	r4, r0
 8001b44:	460d      	mov	r5, r1
 8001b46:	4b3d      	ldr	r3, [pc, #244]	; (8001c3c <motors+0x2cc>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	3b30      	subs	r3, #48	; 0x30
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe fce1 	bl	8000514 <__aeabi_i2d>
 8001b52:	a327      	add	r3, pc, #156	; (adr r3, 8001bf0 <motors+0x280>)
 8001b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b58:	f7fe fd46 	bl	80005e8 <__aeabi_dmul>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4690      	mov	r8, r2
 8001b62:	4699      	mov	r9, r3
 8001b64:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7fe fcd3 	bl	8000514 <__aeabi_i2d>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4640      	mov	r0, r8
 8001b74:	4649      	mov	r1, r9
 8001b76:	f7fe fd37 	bl	80005e8 <__aeabi_dmul>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4620      	mov	r0, r4
 8001b80:	4629      	mov	r1, r5
 8001b82:	f7fe fb79 	bl	8000278 <__aeabi_dsub>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4920      	ldr	r1, [pc, #128]	; (8001c0c <motors+0x29c>)
 8001b8c:	680c      	ldr	r4, [r1, #0]
 8001b8e:	4610      	mov	r0, r2
 8001b90:	4619      	mov	r1, r3
 8001b92:	f7fe ffeb 	bl	8000b6c <__aeabi_d2uiz>
 8001b96:	4603      	mov	r3, r0
 8001b98:	6423      	str	r3, [r4, #64]	; 0x40
				// right motor offset
				// right motor spins more due to differential steering
				motor_offset_r = 0.03 * (lr_speed - 48) + 1;
 8001b9a:	4b28      	ldr	r3, [pc, #160]	; (8001c3c <motors+0x2cc>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	3b30      	subs	r3, #48	; 0x30
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7fe fcb7 	bl	8000514 <__aeabi_i2d>
 8001ba6:	a314      	add	r3, pc, #80	; (adr r3, 8001bf8 <motors+0x288>)
 8001ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bac:	f7fe fd1c 	bl	80005e8 <__aeabi_dmul>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <motors+0x290>)
 8001bbe:	f7fe fb5d 	bl	800027c <__adddf3>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
				motor_offset_l = 1;
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <motors+0x290>)
 8001bd0:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

				// Front Gyro threshold
				if (frontback == 'w')
 8001bd4:	4b17      	ldr	r3, [pc, #92]	; (8001c34 <motors+0x2c4>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b77      	cmp	r3, #119	; 0x77
 8001bda:	d103      	bne.n	8001be4 <motors+0x274>
					// if traveling forward then angle = left turn angle
					turn_angle = turn_angle_l;
 8001bdc:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <motors+0x2d4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001be2:	e090      	b.n	8001d06 <motors+0x396>
				// Back Gyro threshold
				else
					// angle = right turn angle
					turn_angle = turn_angle_r;
 8001be4:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <motors+0x2d8>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001bea:	e08c      	b.n	8001d06 <motors+0x396>
 8001bec:	f3af 8000 	nop.w
 8001bf0:	9999999a 	.word	0x9999999a
 8001bf4:	3ff19999 	.word	0x3ff19999
 8001bf8:	eb851eb8 	.word	0xeb851eb8
 8001bfc:	3f9eb851 	.word	0x3f9eb851
 8001c00:	3ff00000 	.word	0x3ff00000
 8001c04:	20000004 	.word	0x20000004
 8001c08:	20000208 	.word	0x20000208
 8001c0c:	200000e8 	.word	0x200000e8
 8001c10:	3030307a 	.word	0x3030307a
 8001c14:	3030306b 	.word	0x3030306b
 8001c18:	38643577 	.word	0x38643577
 8001c1c:	35643577 	.word	0x35643577
 8001c20:	39613577 	.word	0x39613577
 8001c24:	35613577 	.word	0x35613577
 8001c28:	30303977 	.word	0x30303977
 8001c2c:	200002f0 	.word	0x200002f0
 8001c30:	20000001 	.word	0x20000001
 8001c34:	20000000 	.word	0x20000000
 8001c38:	0800bbbc 	.word	0x0800bbbc
 8001c3c:	20000003 	.word	0x20000003
 8001c40:	20000002 	.word	0x20000002
 8001c44:	20000008 	.word	0x20000008
 8001c48:	2000000c 	.word	0x2000000c

			} else if (leftright == 'd') {
 8001c4c:	4b9c      	ldr	r3, [pc, #624]	; (8001ec0 <motors+0x550>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b64      	cmp	r3, #100	; 0x64
 8001c52:	d158      	bne.n	8001d06 <motors+0x396>
				htim1.Instance->CCR4 = pwmVal_servo + 1.73 * (lr_speed - 48) * servo_max;
 8001c54:	4b9b      	ldr	r3, [pc, #620]	; (8001ec4 <motors+0x554>)
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe fc5b 	bl	8000514 <__aeabi_i2d>
 8001c5e:	4604      	mov	r4, r0
 8001c60:	460d      	mov	r5, r1
 8001c62:	4b99      	ldr	r3, [pc, #612]	; (8001ec8 <motors+0x558>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	3b30      	subs	r3, #48	; 0x30
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fc53 	bl	8000514 <__aeabi_i2d>
 8001c6e:	a38e      	add	r3, pc, #568	; (adr r3, 8001ea8 <motors+0x538>)
 8001c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c74:	f7fe fcb8 	bl	80005e8 <__aeabi_dmul>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4690      	mov	r8, r2
 8001c7e:	4699      	mov	r9, r3
 8001c80:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe fc45 	bl	8000514 <__aeabi_i2d>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	4640      	mov	r0, r8
 8001c90:	4649      	mov	r1, r9
 8001c92:	f7fe fca9 	bl	80005e8 <__aeabi_dmul>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	4629      	mov	r1, r5
 8001c9e:	f7fe faed 	bl	800027c <__adddf3>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4989      	ldr	r1, [pc, #548]	; (8001ecc <motors+0x55c>)
 8001ca8:	680c      	ldr	r4, [r1, #0]
 8001caa:	4610      	mov	r0, r2
 8001cac:	4619      	mov	r1, r3
 8001cae:	f7fe ff5d 	bl	8000b6c <__aeabi_d2uiz>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	6423      	str	r3, [r4, #64]	; 0x40
				// left motor offset
				motor_offset_r = 1;
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	4b85      	ldr	r3, [pc, #532]	; (8001ed0 <motors+0x560>)
 8001cbc:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
				motor_offset_l = 0.03 * (lr_speed - 48) + 1;
 8001cc0:	4b81      	ldr	r3, [pc, #516]	; (8001ec8 <motors+0x558>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	3b30      	subs	r3, #48	; 0x30
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe fc24 	bl	8000514 <__aeabi_i2d>
 8001ccc:	a378      	add	r3, pc, #480	; (adr r3, 8001eb0 <motors+0x540>)
 8001cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd2:	f7fe fc89 	bl	80005e8 <__aeabi_dmul>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4610      	mov	r0, r2
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	4b7b      	ldr	r3, [pc, #492]	; (8001ed0 <motors+0x560>)
 8001ce4:	f7fe faca 	bl	800027c <__adddf3>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

				// Front Gyro Threshold
				if (frontback == 'w')
 8001cf0:	4b78      	ldr	r3, [pc, #480]	; (8001ed4 <motors+0x564>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b77      	cmp	r3, #119	; 0x77
 8001cf6:	d103      	bne.n	8001d00 <motors+0x390>
					turn_angle = turn_angle_r;
 8001cf8:	4b77      	ldr	r3, [pc, #476]	; (8001ed8 <motors+0x568>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001cfe:	e002      	b.n	8001d06 <motors+0x396>
				// Back Gyro threshold
				else
					turn_angle = turn_angle_l;
 8001d00:	4b76      	ldr	r3, [pc, #472]	; (8001edc <motors+0x56c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	65fb      	str	r3, [r7, #92]	; 0x5c
			}

			pwmVal_motor = motor_min;
 8001d06:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001d0a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

			// Move Motor forward (Normal)
			if (frontback == 'w') {
 8001d0e:	4b71      	ldr	r3, [pc, #452]	; (8001ed4 <motors+0x564>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b77      	cmp	r3, #119	; 0x77
 8001d14:	f040 8284 	bne.w	8002220 <motors+0x8b0>
				for (;;) {
					// H-Bridge Circuit for AINx; 1 turn on, the other turns off
					// MOTOR A
					HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001d18:	2201      	movs	r2, #1
 8001d1a:	2104      	movs	r1, #4
 8001d1c:	4870      	ldr	r0, [pc, #448]	; (8001ee0 <motors+0x570>)
 8001d1e:	f001 ffcb 	bl	8003cb8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2108      	movs	r1, #8
 8001d26:	486e      	ldr	r0, [pc, #440]	; (8001ee0 <motors+0x570>)
 8001d28:	f001 ffc6 	bl	8003cb8 <HAL_GPIO_WritePin>

					// MOTOR B
					HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	2120      	movs	r1, #32
 8001d30:	486b      	ldr	r0, [pc, #428]	; (8001ee0 <motors+0x570>)
 8001d32:	f001 ffc1 	bl	8003cb8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8001d36:	2200      	movs	r2, #0
 8001d38:	2110      	movs	r1, #16
 8001d3a:	4869      	ldr	r0, [pc, #420]	; (8001ee0 <motors+0x570>)
 8001d3c:	f001 ffbc 	bl	8003cb8 <HAL_GPIO_WritePin>

					// Going straight only
					if (lr_speed == '0') {
 8001d40:	4b61      	ldr	r3, [pc, #388]	; (8001ec8 <motors+0x558>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b30      	cmp	r3, #48	; 0x30
 8001d46:	f040 80d3 	bne.w	8001ef0 <motors+0x580>
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, motor_offset_r*pwmVal_motor);
 8001d4a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe fbe0 	bl	8000514 <__aeabi_i2d>
 8001d54:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001d58:	f7fe fc46 	bl	80005e8 <__aeabi_dmul>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4960      	ldr	r1, [pc, #384]	; (8001ee4 <motors+0x574>)
 8001d62:	680c      	ldr	r4, [r1, #0]
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
 8001d68:	f7fe ff00 	bl	8000b6c <__aeabi_d2uiz>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	6363      	str	r3, [r4, #52]	; 0x34
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, motor_offset_l*pwmVal_motor);
 8001d70:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe fbcd 	bl	8000514 <__aeabi_i2d>
 8001d7a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001d7e:	f7fe fc33 	bl	80005e8 <__aeabi_dmul>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4957      	ldr	r1, [pc, #348]	; (8001ee4 <motors+0x574>)
 8001d88:	680c      	ldr	r4, [r1, #0]
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f7fe feed 	bl	8000b6c <__aeabi_d2uiz>
 8001d92:	4603      	mov	r3, r0
 8001d94:	63a3      	str	r3, [r4, #56]	; 0x38

						if (accelerate == 1) {
 8001d96:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d166      	bne.n	8001e6c <motors+0x4fc>
							// Accelerating
							pwmVal_motor += motor_increment;
 8001d9e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8001da2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001da6:	4413      	add	r3, r2
 8001da8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

							// Accelerate till hit reference speed before maintaining constant speed
							// Reference speed is determined above, based on if it is moving straight or turning
							if (pwmVal_motor >= motor_reference) {
 8001dac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8001db0:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8001db4:	429a      	cmp	r2, r3
 8001db6:	f0c0 822f 	bcc.w	8002218 <motors+0x8a8>
								// Acc flag set to 0
								accelerate = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
								// PID for error adjustment
								while (encoder_dist < (int) target_dist * 0.95) {
 8001dc0:	e03a      	b.n	8001e38 <motors+0x4c8>
									// Proportional Error: Output value proportional to current error value

									// Err: Difference between current angle and target angle
									// (0 in this case since it is moving straight)
									err = curAngle - 0;
 8001dc2:	4b49      	ldr	r3, [pc, #292]	; (8001ee8 <motors+0x578>)
 8001dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc8:	4610      	mov	r0, r2
 8001dca:	4619      	mov	r1, r3
 8001dcc:	f7fe fea6 	bl	8000b1c <__aeabi_d2iz>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	64bb      	str	r3, [r7, #72]	; 0x48
									// Integral error: Accumulation of past error, removal of residual SSE that occurs with pure proportional control
									eintegral += err;
 8001dd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001ddc:	4413      	add	r3, r2
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

									// PID equation
									// Controller adjusts servo's position to correct any deviations from straight path
									// Pre-defined kp = 3; ki = 0.8;
									servo_val = (uint8_t) (pwmVal_servo + kp * err + ki * eintegral);
 8001de4:	4b37      	ldr	r3, [pc, #220]	; (8001ec4 <motors+0x554>)
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	f897 106a 	ldrb.w	r1, [r7, #106]	; 0x6a
 8001df4:	fb11 f303 	smulbb	r3, r1, r3
 8001df8:	b2d9      	uxtb	r1, r3
 8001dfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	f897 006b 	ldrb.w	r0, [r7, #107]	; 0x6b
 8001e02:	fb10 f303 	smulbb	r3, r0, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	440b      	add	r3, r1
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

									// Error Correction: Set servo value to correct error
									htim1.Instance->CCR4 = servo_val;
 8001e12:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <motors+0x55c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001e1a:	641a      	str	r2, [r3, #64]	; 0x40

									stuck++;
 8001e1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e1e:	3301      	adds	r3, #1
 8001e20:	65bb      	str	r3, [r7, #88]	; 0x58
									if (stuck > 600) {
 8001e22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e24:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001e28:	dd03      	ble.n	8001e32 <motors+0x4c2>
										encoder_dist = target_dist;
 8001e2a:	4a30      	ldr	r2, [pc, #192]	; (8001eec <motors+0x57c>)
 8001e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e2e:	6013      	str	r3, [r2, #0]
										break;
 8001e30:	e1f2      	b.n	8002218 <motors+0x8a8>
									}

									osDelay(10);
 8001e32:	200a      	movs	r0, #10
 8001e34:	f006 f9e0 	bl	80081f8 <osDelay>
								while (encoder_dist < (int) target_dist * 0.95) {
 8001e38:	4b2c      	ldr	r3, [pc, #176]	; (8001eec <motors+0x57c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fb59 	bl	80004f4 <__aeabi_ui2d>
 8001e42:	4604      	mov	r4, r0
 8001e44:	460d      	mov	r5, r1
 8001e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7fe fb63 	bl	8000514 <__aeabi_i2d>
 8001e4e:	a31a      	add	r3, pc, #104	; (adr r3, 8001eb8 <motors+0x548>)
 8001e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e54:	f7fe fbc8 	bl	80005e8 <__aeabi_dmul>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4620      	mov	r0, r4
 8001e5e:	4629      	mov	r1, r5
 8001e60:	f7fe fe34 	bl	8000acc <__aeabi_dcmplt>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1ab      	bne.n	8001dc2 <motors+0x452>
 8001e6a:	e1d5      	b.n	8002218 <motors+0x8a8>
						}

						// Deceleration and Distance Monitoring
						else {
							// Gradual deceleration
							if (pwmVal_motor > motor_min)
 8001e6c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8001e70:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d90c      	bls.n	8001e92 <motors+0x522>
								pwmVal_motor -= 5 * motor_increment;
 8001e78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	0392      	lsls	r2, r2, #14
 8001e80:	1ad2      	subs	r2, r2, r3
 8001e82:	0092      	lsls	r2, r2, #2
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001e8c:	4413      	add	r3, r2
 8001e8e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

							// Break movement loop once target distance is covered
							if (encoder_dist >= target_dist)
 8001e92:	4b16      	ldr	r3, [pc, #88]	; (8001eec <motors+0x57c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	f200 81bd 	bhi.w	8002218 <motors+0x8a8>
								break;
 8001e9e:	f000 bf10 	b.w	8002cc2 <motors+0x1352>
 8001ea2:	bf00      	nop
 8001ea4:	f3af 8000 	nop.w
 8001ea8:	7ae147ae 	.word	0x7ae147ae
 8001eac:	3ffbae14 	.word	0x3ffbae14
 8001eb0:	eb851eb8 	.word	0xeb851eb8
 8001eb4:	3f9eb851 	.word	0x3f9eb851
 8001eb8:	66666666 	.word	0x66666666
 8001ebc:	3fee6666 	.word	0x3fee6666
 8001ec0:	20000002 	.word	0x20000002
 8001ec4:	20000004 	.word	0x20000004
 8001ec8:	20000003 	.word	0x20000003
 8001ecc:	200000e8 	.word	0x200000e8
 8001ed0:	3ff00000 	.word	0x3ff00000
 8001ed4:	20000000 	.word	0x20000000
 8001ed8:	2000000c 	.word	0x2000000c
 8001edc:	20000008 	.word	0x20000008
 8001ee0:	40020000 	.word	0x40020000
 8001ee4:	20000208 	.word	0x20000208
 8001ee8:	200002e0 	.word	0x200002e0
 8001eec:	200002f0 	.word	0x200002f0

					}// End of Straight movement

					// 45 deg turn
					// Distance Values: grad = 160; y_intercept = 55;
					else if (lr_speed < '6') {
 8001ef0:	4bb5      	ldr	r3, [pc, #724]	; (80021c8 <motors+0x858>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b35      	cmp	r3, #53	; 0x35
 8001ef6:	f200 809e 	bhi.w	8002036 <motors+0x6c6>
						target_dist = (int) (2 * grad - y_intercept);
 8001efa:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001efe:	005a      	lsls	r2, r3, #1
 8001f00:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	66fb      	str	r3, [r7, #108]	; 0x6c

						gyroStart();
 8001f08:	f008 fe98 	bl	800ac3c <gyroStart>
						osDelay(100);
 8001f0c:	2064      	movs	r0, #100	; 0x64
 8001f0e:	f006 f973 	bl	80081f8 <osDelay>

						// Target Angle Threshold: Prevent overshooting
						turn_angle = 0.525 * turn_angle;
 8001f12:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001f14:	f7fe fafe 	bl	8000514 <__aeabi_i2d>
 8001f18:	a3a9      	add	r3, pc, #676	; (adr r3, 80021c0 <motors+0x850>)
 8001f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1e:	f7fe fb63 	bl	80005e8 <__aeabi_dmul>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4610      	mov	r0, r2
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f7fe fdf7 	bl	8000b1c <__aeabi_d2iz>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	65fb      	str	r3, [r7, #92]	; 0x5c

						// Set speed
						pwmVal_motor = (int) ((fb_speed - 48) * 400);
 8001f32:	4ba6      	ldr	r3, [pc, #664]	; (80021cc <motors+0x85c>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	3b30      	subs	r3, #48	; 0x30
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	0092      	lsls	r2, r2, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	461a      	mov	r2, r3
 8001f42:	0091      	lsls	r1, r2, #2
 8001f44:	461a      	mov	r2, r3
 8001f46:	460b      	mov	r3, r1
 8001f48:	4413      	add	r3, r2
 8001f4a:	011b      	lsls	r3, r3, #4
 8001f4c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

						/************ Stage 1 45 deg turn out *********************/
						// Move motor
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, motor_offset_r*pwmVal_motor);
 8001f50:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe fadd 	bl	8000514 <__aeabi_i2d>
 8001f5a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001f5e:	f7fe fb43 	bl	80005e8 <__aeabi_dmul>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	499a      	ldr	r1, [pc, #616]	; (80021d0 <motors+0x860>)
 8001f68:	680c      	ldr	r4, [r1, #0]
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f7fe fdfd 	bl	8000b6c <__aeabi_d2uiz>
 8001f72:	4603      	mov	r3, r0
 8001f74:	6363      	str	r3, [r4, #52]	; 0x34
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, motor_offset_l*pwmVal_motor);
 8001f76:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe faca 	bl	8000514 <__aeabi_i2d>
 8001f80:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001f84:	f7fe fb30 	bl	80005e8 <__aeabi_dmul>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4990      	ldr	r1, [pc, #576]	; (80021d0 <motors+0x860>)
 8001f8e:	680c      	ldr	r4, [r1, #0]
 8001f90:	4610      	mov	r0, r2
 8001f92:	4619      	mov	r1, r3
 8001f94:	f7fe fdea 	bl	8000b6c <__aeabi_d2uiz>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	63a3      	str	r3, [r4, #56]	; 0x38

						// Continuous check to move angle to threshold
						while (abs(curAngle) < turn_angle) {
 8001f9c:	e002      	b.n	8001fa4 <motors+0x634>
							osDelay(10);
 8001f9e:	200a      	movs	r0, #10
 8001fa0:	f006 f92a 	bl	80081f8 <osDelay>
						while (abs(curAngle) < turn_angle) {
 8001fa4:	4b8b      	ldr	r3, [pc, #556]	; (80021d4 <motors+0x864>)
 8001fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001faa:	4610      	mov	r0, r2
 8001fac:	4619      	mov	r1, r3
 8001fae:	f7fe fdb5 	bl	8000b1c <__aeabi_d2iz>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	bfb8      	it	lt
 8001fb8:	425b      	neglt	r3, r3
 8001fba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	dcee      	bgt.n	8001f9e <motors+0x62e>
						}

						// Once Threshold (45 degrees) reached, turn servo to center
						htim1.Instance->CCR4 = pwmVal_servo;
 8001fc0:	4b85      	ldr	r3, [pc, #532]	; (80021d8 <motors+0x868>)
 8001fc2:	881a      	ldrh	r2, [r3, #0]
 8001fc4:	4b85      	ldr	r3, [pc, #532]	; (80021dc <motors+0x86c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	641a      	str	r2, [r3, #64]	; 0x40

						// Stop motor
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
 8001fca:	4b81      	ldr	r3, [pc, #516]	; (80021d0 <motors+0x860>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	635a      	str	r2, [r3, #52]	; 0x34
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0);
 8001fd2:	4b7f      	ldr	r3, [pc, #508]	; (80021d0 <motors+0x860>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	639a      	str	r2, [r3, #56]	; 0x38

						// curAngle: adjusted to account for overflow/underflow error in turn angle measurement
						// Prep for subsequent movements
						curAngle = curAngle > 0 ? curAngle - turn_angle : curAngle + turn_angle;
 8001fda:	4b7e      	ldr	r3, [pc, #504]	; (80021d4 <motors+0x864>)
 8001fdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fe0:	f04f 0200 	mov.w	r2, #0
 8001fe4:	f04f 0300 	mov.w	r3, #0
 8001fe8:	f7fe fd8e 	bl	8000b08 <__aeabi_dcmpgt>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00e      	beq.n	8002010 <motors+0x6a0>
 8001ff2:	4b78      	ldr	r3, [pc, #480]	; (80021d4 <motors+0x864>)
 8001ff4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001ff8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001ffa:	f7fe fa8b 	bl	8000514 <__aeabi_i2d>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4620      	mov	r0, r4
 8002004:	4629      	mov	r1, r5
 8002006:	f7fe f937 	bl	8000278 <__aeabi_dsub>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	e009      	b.n	8002024 <motors+0x6b4>
 8002010:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002012:	f7fe fa7f 	bl	8000514 <__aeabi_i2d>
 8002016:	4b6f      	ldr	r3, [pc, #444]	; (80021d4 <motors+0x864>)
 8002018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201c:	f7fe f92e 	bl	800027c <__adddf3>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	496b      	ldr	r1, [pc, #428]	; (80021d4 <motors+0x864>)
 8002026:	e9c1 2300 	strd	r2, r3, [r1]

						// Wait for full stability
						osDelay(500);
 800202a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800202e:	f006 f8e3 	bl	80081f8 <osDelay>
						break;
 8002032:	f000 be46 	b.w	8002cc2 <motors+0x1352>
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0);*/
					}

					// Turning 90 degree
					else {
						gyroStart();
 8002036:	f008 fe01 	bl	800ac3c <gyroStart>
						osDelay(100);
 800203a:	2064      	movs	r0, #100	; 0x64
 800203c:	f006 f8dc 	bl	80081f8 <osDelay>

						// Set speed
						pwmVal_motor = (int) ((fb_speed - 48) * 400);
 8002040:	4b62      	ldr	r3, [pc, #392]	; (80021cc <motors+0x85c>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	3b30      	subs	r3, #48	; 0x30
 8002046:	b29b      	uxth	r3, r3
 8002048:	461a      	mov	r2, r3
 800204a:	0092      	lsls	r2, r2, #2
 800204c:	4413      	add	r3, r2
 800204e:	461a      	mov	r2, r3
 8002050:	0091      	lsls	r1, r2, #2
 8002052:	461a      	mov	r2, r3
 8002054:	460b      	mov	r3, r1
 8002056:	4413      	add	r3, r2
 8002058:	011b      	lsls	r3, r3, #4
 800205a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

						// Move motor
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, motor_offset_r*pwmVal_motor);
 800205e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fa56 	bl	8000514 <__aeabi_i2d>
 8002068:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800206c:	f7fe fabc 	bl	80005e8 <__aeabi_dmul>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4956      	ldr	r1, [pc, #344]	; (80021d0 <motors+0x860>)
 8002076:	680c      	ldr	r4, [r1, #0]
 8002078:	4610      	mov	r0, r2
 800207a:	4619      	mov	r1, r3
 800207c:	f7fe fd76 	bl	8000b6c <__aeabi_d2uiz>
 8002080:	4603      	mov	r3, r0
 8002082:	6363      	str	r3, [r4, #52]	; 0x34
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, motor_offset_l*pwmVal_motor);
 8002084:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe fa43 	bl	8000514 <__aeabi_i2d>
 800208e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002092:	f7fe faa9 	bl	80005e8 <__aeabi_dmul>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	494d      	ldr	r1, [pc, #308]	; (80021d0 <motors+0x860>)
 800209c:	680c      	ldr	r4, [r1, #0]
 800209e:	4610      	mov	r0, r2
 80020a0:	4619      	mov	r1, r3
 80020a2:	f7fe fd63 	bl	8000b6c <__aeabi_d2uiz>
 80020a6:	4603      	mov	r3, r0
 80020a8:	63a3      	str	r3, [r4, #56]	; 0x38

						// Move til angle threshold
						// Did not apply the same fractional adjustment for turn_angle
						while (abs(curAngle) < turn_angle) {
 80020aa:	e032      	b.n	8002112 <motors+0x7a2>
							osDelay(10);
 80020ac:	200a      	movs	r0, #10
 80020ae:	f006 f8a3 	bl	80081f8 <osDelay>
							stuck++;
 80020b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020b4:	3301      	adds	r3, #1
 80020b6:	65bb      	str	r3, [r7, #88]	; 0x58
							if (stuck > 1000) {
 80020b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020be:	dd28      	ble.n	8002112 <motors+0x7a2>
								curAngle = curAngle > 0 ? curAngle - turn_angle : curAngle + turn_angle;
 80020c0:	4b44      	ldr	r3, [pc, #272]	; (80021d4 <motors+0x864>)
 80020c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020c6:	f04f 0200 	mov.w	r2, #0
 80020ca:	f04f 0300 	mov.w	r3, #0
 80020ce:	f7fe fd1b 	bl	8000b08 <__aeabi_dcmpgt>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00e      	beq.n	80020f6 <motors+0x786>
 80020d8:	4b3e      	ldr	r3, [pc, #248]	; (80021d4 <motors+0x864>)
 80020da:	e9d3 4500 	ldrd	r4, r5, [r3]
 80020de:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80020e0:	f7fe fa18 	bl	8000514 <__aeabi_i2d>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4620      	mov	r0, r4
 80020ea:	4629      	mov	r1, r5
 80020ec:	f7fe f8c4 	bl	8000278 <__aeabi_dsub>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	e009      	b.n	800210a <motors+0x79a>
 80020f6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80020f8:	f7fe fa0c 	bl	8000514 <__aeabi_i2d>
 80020fc:	4b35      	ldr	r3, [pc, #212]	; (80021d4 <motors+0x864>)
 80020fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002102:	f7fe f8bb 	bl	800027c <__adddf3>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	4932      	ldr	r1, [pc, #200]	; (80021d4 <motors+0x864>)
 800210c:	e9c1 2300 	strd	r2, r3, [r1]
								break;
 8002110:	e00d      	b.n	800212e <motors+0x7be>
						while (abs(curAngle) < turn_angle) {
 8002112:	4b30      	ldr	r3, [pc, #192]	; (80021d4 <motors+0x864>)
 8002114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002118:	4610      	mov	r0, r2
 800211a:	4619      	mov	r1, r3
 800211c:	f7fe fcfe 	bl	8000b1c <__aeabi_d2iz>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	bfb8      	it	lt
 8002126:	425b      	neglt	r3, r3
 8002128:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800212a:	429a      	cmp	r2, r3
 800212c:	dcbe      	bgt.n	80020ac <motors+0x73c>
							}
						}

						// Once Threshold reached, turn servo centre
						htim1.Instance->CCR4 = pwmVal_servo;
 800212e:	4b2a      	ldr	r3, [pc, #168]	; (80021d8 <motors+0x868>)
 8002130:	881a      	ldrh	r2, [r3, #0]
 8002132:	4b2a      	ldr	r3, [pc, #168]	; (80021dc <motors+0x86c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	641a      	str	r2, [r3, #64]	; 0x40

						// Stop motor
						pwmVal_motor = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, motor_offset_r*pwmVal_motor);
 800213e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe f9e6 	bl	8000514 <__aeabi_i2d>
 8002148:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800214c:	f7fe fa4c 	bl	80005e8 <__aeabi_dmul>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	491e      	ldr	r1, [pc, #120]	; (80021d0 <motors+0x860>)
 8002156:	680c      	ldr	r4, [r1, #0]
 8002158:	4610      	mov	r0, r2
 800215a:	4619      	mov	r1, r3
 800215c:	f7fe fd06 	bl	8000b6c <__aeabi_d2uiz>
 8002160:	4603      	mov	r3, r0
 8002162:	6363      	str	r3, [r4, #52]	; 0x34
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, motor_offset_l*pwmVal_motor);
 8002164:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe f9d3 	bl	8000514 <__aeabi_i2d>
 800216e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002172:	f7fe fa39 	bl	80005e8 <__aeabi_dmul>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	4915      	ldr	r1, [pc, #84]	; (80021d0 <motors+0x860>)
 800217c:	680c      	ldr	r4, [r1, #0]
 800217e:	4610      	mov	r0, r2
 8002180:	4619      	mov	r1, r3
 8002182:	f7fe fcf3 	bl	8000b6c <__aeabi_d2uiz>
 8002186:	4603      	mov	r3, r0
 8002188:	63a3      	str	r3, [r4, #56]	; 0x38

						// curAngle: adjusted to account for overflow/underflow error in turn angle measurement
						// Prep for subsequent movements
						curAngle =	curAngle > 0 ? curAngle - turn_angle : curAngle + turn_angle;
 800218a:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <motors+0x864>)
 800218c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	f7fe fcb6 	bl	8000b08 <__aeabi_dcmpgt>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d01e      	beq.n	80021e0 <motors+0x870>
 80021a2:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <motors+0x864>)
 80021a4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80021a8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80021aa:	f7fe f9b3 	bl	8000514 <__aeabi_i2d>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4620      	mov	r0, r4
 80021b4:	4629      	mov	r1, r5
 80021b6:	f7fe f85f 	bl	8000278 <__aeabi_dsub>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	e019      	b.n	80021f4 <motors+0x884>
 80021c0:	cccccccd 	.word	0xcccccccd
 80021c4:	3fe0cccc 	.word	0x3fe0cccc
 80021c8:	20000003 	.word	0x20000003
 80021cc:	20000001 	.word	0x20000001
 80021d0:	20000208 	.word	0x20000208
 80021d4:	200002e0 	.word	0x200002e0
 80021d8:	20000004 	.word	0x20000004
 80021dc:	200000e8 	.word	0x200000e8
 80021e0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80021e2:	f7fe f997 	bl	8000514 <__aeabi_i2d>
 80021e6:	4bb4      	ldr	r3, [pc, #720]	; (80024b8 <motors+0xb48>)
 80021e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ec:	f7fe f846 	bl	800027c <__adddf3>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	49b0      	ldr	r1, [pc, #704]	; (80024b8 <motors+0xb48>)
 80021f6:	e9c1 2300 	strd	r2, r3, [r1]

						kp = 3;
 80021fa:	2303      	movs	r3, #3
 80021fc:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
						ki = 0.8;
 8002200:	2300      	movs	r3, #0
 8002202:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
						eintegral = 0;	// Integral error
 8002206:	2300      	movs	r3, #0
 8002208:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

						osDelay(1000);
 800220c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002210:	f005 fff2 	bl	80081f8 <osDelay>

						// Break movement loop
						break;
 8002214:	f000 bd55 	b.w	8002cc2 <motors+0x1352>
					}	// End of Turning

					// To let gyro have the task thread or else OS will only focus on motor thread
					osDelay(10);
 8002218:	200a      	movs	r0, #10
 800221a:	f005 ffed 	bl	80081f8 <osDelay>
					HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 800221e:	e57b      	b.n	8001d18 <motors+0x3a8>

				}
			}

			// Move Motor backwards(Normal)
			else if (frontback == 's') {
 8002220:	4ba6      	ldr	r3, [pc, #664]	; (80024bc <motors+0xb4c>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b73      	cmp	r3, #115	; 0x73
 8002226:	f040 81d0 	bne.w	80025ca <motors+0xc5a>
				for (;;) {
					// MOTOR A
					HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800222a:	2200      	movs	r2, #0
 800222c:	2104      	movs	r1, #4
 800222e:	48a4      	ldr	r0, [pc, #656]	; (80024c0 <motors+0xb50>)
 8002230:	f001 fd42 	bl	8003cb8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002234:	2201      	movs	r2, #1
 8002236:	2108      	movs	r1, #8
 8002238:	48a1      	ldr	r0, [pc, #644]	; (80024c0 <motors+0xb50>)
 800223a:	f001 fd3d 	bl	8003cb8 <HAL_GPIO_WritePin>

					// MOTOR B
					HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 800223e:	2200      	movs	r2, #0
 8002240:	2120      	movs	r1, #32
 8002242:	489f      	ldr	r0, [pc, #636]	; (80024c0 <motors+0xb50>)
 8002244:	f001 fd38 	bl	8003cb8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8002248:	2201      	movs	r2, #1
 800224a:	2110      	movs	r1, #16
 800224c:	489c      	ldr	r0, [pc, #624]	; (80024c0 <motors+0xb50>)
 800224e:	f001 fd33 	bl	8003cb8 <HAL_GPIO_WritePin>

					// Going straight only
					if (lr_speed == '0') {
 8002252:	4b9c      	ldr	r3, [pc, #624]	; (80024c4 <motors+0xb54>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b30      	cmp	r3, #48	; 0x30
 8002258:	f040 80ac 	bne.w	80023b4 <motors+0xa44>
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, motor_offset_r*pwmVal_motor);
 800225c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002260:	4618      	mov	r0, r3
 8002262:	f7fe f957 	bl	8000514 <__aeabi_i2d>
 8002266:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800226a:	f7fe f9bd 	bl	80005e8 <__aeabi_dmul>
 800226e:	4602      	mov	r2, r0
 8002270:	460b      	mov	r3, r1
 8002272:	4995      	ldr	r1, [pc, #596]	; (80024c8 <motors+0xb58>)
 8002274:	680c      	ldr	r4, [r1, #0]
 8002276:	4610      	mov	r0, r2
 8002278:	4619      	mov	r1, r3
 800227a:	f7fe fc77 	bl	8000b6c <__aeabi_d2uiz>
 800227e:	4603      	mov	r3, r0
 8002280:	6363      	str	r3, [r4, #52]	; 0x34
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, motor_offset_l*pwmVal_motor);
 8002282:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe f944 	bl	8000514 <__aeabi_i2d>
 800228c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002290:	f7fe f9aa 	bl	80005e8 <__aeabi_dmul>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	498b      	ldr	r1, [pc, #556]	; (80024c8 <motors+0xb58>)
 800229a:	680c      	ldr	r4, [r1, #0]
 800229c:	4610      	mov	r0, r2
 800229e:	4619      	mov	r1, r3
 80022a0:	f7fe fc64 	bl	8000b6c <__aeabi_d2uiz>
 80022a4:	4603      	mov	r3, r0
 80022a6:	63a3      	str	r3, [r4, #56]	; 0x38

						if (accelerate == 1) {
 80022a8:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d166      	bne.n	800237e <motors+0xa0e>

							pwmVal_motor += motor_increment;	// Accelerating
 80022b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80022b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022b8:	4413      	add	r3, r2
 80022ba:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

							if (pwmVal_motor >= motor_reference) {// Constant speed
 80022be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80022c2:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80022c6:	429a      	cmp	r2, r3
 80022c8:	f0c0 817b 	bcc.w	80025c2 <motors+0xc52>
								accelerate = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
								while (encoder_dist < (int) target_dist * 0.95) {
 80022d2:	e03a      	b.n	800234a <motors+0x9da>
									// PID for error adjustment
									err = curAngle - 0;	// Proportional error
 80022d4:	4b78      	ldr	r3, [pc, #480]	; (80024b8 <motors+0xb48>)
 80022d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022da:	4610      	mov	r0, r2
 80022dc:	4619      	mov	r1, r3
 80022de:	f7fe fc1d 	bl	8000b1c <__aeabi_d2iz>
 80022e2:	4603      	mov	r3, r0
 80022e4:	64bb      	str	r3, [r7, #72]	; 0x48
									eintegral += err;		// Integral error
 80022e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80022ee:	4413      	add	r3, r2
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

									// PID equation (opposite correction)
									servo_val = (uint8_t) (pwmVal_servo - kp * err - ki * eintegral);
 80022f6:	4b75      	ldr	r3, [pc, #468]	; (80024cc <motors+0xb5c>)
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	f897 106b 	ldrb.w	r1, [r7, #107]	; 0x6b
 8002304:	fb11 f303 	smulbb	r3, r1, r3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	b2da      	uxtb	r2, r3
 800230e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002312:	b2db      	uxtb	r3, r3
 8002314:	f897 106a 	ldrb.w	r1, [r7, #106]	; 0x6a
 8002318:	fb11 f303 	smulbb	r3, r1, r3
 800231c:	b2db      	uxtb	r3, r3
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

									// Set servo value
									htim1.Instance->CCR4 = servo_val;// Turn servo to correct error
 8002324:	4b6a      	ldr	r3, [pc, #424]	; (80024d0 <motors+0xb60>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800232c:	641a      	str	r2, [r3, #64]	; 0x40

									stuck++;
 800232e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002330:	3301      	adds	r3, #1
 8002332:	65bb      	str	r3, [r7, #88]	; 0x58
									if (stuck > 600) {
 8002334:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002336:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800233a:	dd03      	ble.n	8002344 <motors+0x9d4>
										encoder_dist = target_dist;
 800233c:	4a65      	ldr	r2, [pc, #404]	; (80024d4 <motors+0xb64>)
 800233e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002340:	6013      	str	r3, [r2, #0]
										break;
 8002342:	e13e      	b.n	80025c2 <motors+0xc52>
									}

									osDelay(10);
 8002344:	200a      	movs	r0, #10
 8002346:	f005 ff57 	bl	80081f8 <osDelay>
								while (encoder_dist < (int) target_dist * 0.95) {
 800234a:	4b62      	ldr	r3, [pc, #392]	; (80024d4 <motors+0xb64>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f7fe f8d0 	bl	80004f4 <__aeabi_ui2d>
 8002354:	4604      	mov	r4, r0
 8002356:	460d      	mov	r5, r1
 8002358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe f8da 	bl	8000514 <__aeabi_i2d>
 8002360:	a353      	add	r3, pc, #332	; (adr r3, 80024b0 <motors+0xb40>)
 8002362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002366:	f7fe f93f 	bl	80005e8 <__aeabi_dmul>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	4620      	mov	r0, r4
 8002370:	4629      	mov	r1, r5
 8002372:	f7fe fbab 	bl	8000acc <__aeabi_dcmplt>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1ab      	bne.n	80022d4 <motors+0x964>
 800237c:	e121      	b.n	80025c2 <motors+0xc52>
								}
							}
						}

						else {		// Decelerate
							if (pwmVal_motor > motor_min)
 800237e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8002382:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002386:	429a      	cmp	r2, r3
 8002388:	d90c      	bls.n	80023a4 <motors+0xa34>
								pwmVal_motor -= 5 * motor_increment;
 800238a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800238e:	461a      	mov	r2, r3
 8002390:	0392      	lsls	r2, r2, #14
 8002392:	1ad2      	subs	r2, r2, r3
 8002394:	0092      	lsls	r2, r2, #2
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	b29a      	uxth	r2, r3
 800239a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800239e:	4413      	add	r3, r2
 80023a0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

							// Break movement loop
							if (encoder_dist >= target_dist)
 80023a4:	4b4b      	ldr	r3, [pc, #300]	; (80024d4 <motors+0xb64>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80023aa:	429a      	cmp	r2, r3
 80023ac:	f200 8109 	bhi.w	80025c2 <motors+0xc52>
								break;
 80023b0:	f000 bc87 	b.w	8002cc2 <motors+0x1352>

					}		// End of Straight movement

					// Turning
					else {
						gyroStart();
 80023b4:	f008 fc42 	bl	800ac3c <gyroStart>
						osDelay(100);
 80023b8:	2064      	movs	r0, #100	; 0x64
 80023ba:	f005 ff1d 	bl	80081f8 <osDelay>

						back_angle_threshold = (int) (0.95 * turn_angle);
 80023be:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80023c0:	f7fe f8a8 	bl	8000514 <__aeabi_i2d>
 80023c4:	a33a      	add	r3, pc, #232	; (adr r3, 80024b0 <motors+0xb40>)
 80023c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ca:	f7fe f90d 	bl	80005e8 <__aeabi_dmul>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	4610      	mov	r0, r2
 80023d4:	4619      	mov	r1, r3
 80023d6:	f7fe fba1 	bl	8000b1c <__aeabi_d2iz>
 80023da:	4603      	mov	r3, r0
 80023dc:	647b      	str	r3, [r7, #68]	; 0x44

						pwmVal_motor = (int) ((fb_speed - 48) * 400);
 80023de:	4b3e      	ldr	r3, [pc, #248]	; (80024d8 <motors+0xb68>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	3b30      	subs	r3, #48	; 0x30
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	461a      	mov	r2, r3
 80023e8:	0092      	lsls	r2, r2, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	461a      	mov	r2, r3
 80023ee:	0091      	lsls	r1, r2, #2
 80023f0:	461a      	mov	r2, r3
 80023f2:	460b      	mov	r3, r1
 80023f4:	4413      	add	r3, r2
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

						// Move motor
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, motor_offset_r*pwmVal_motor);
 80023fc:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002400:	4618      	mov	r0, r3
 8002402:	f7fe f887 	bl	8000514 <__aeabi_i2d>
 8002406:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800240a:	f7fe f8ed 	bl	80005e8 <__aeabi_dmul>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	492d      	ldr	r1, [pc, #180]	; (80024c8 <motors+0xb58>)
 8002414:	680c      	ldr	r4, [r1, #0]
 8002416:	4610      	mov	r0, r2
 8002418:	4619      	mov	r1, r3
 800241a:	f7fe fba7 	bl	8000b6c <__aeabi_d2uiz>
 800241e:	4603      	mov	r3, r0
 8002420:	6363      	str	r3, [r4, #52]	; 0x34
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, motor_offset_l*pwmVal_motor);
 8002422:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002426:	4618      	mov	r0, r3
 8002428:	f7fe f874 	bl	8000514 <__aeabi_i2d>
 800242c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002430:	f7fe f8da 	bl	80005e8 <__aeabi_dmul>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4923      	ldr	r1, [pc, #140]	; (80024c8 <motors+0xb58>)
 800243a:	680c      	ldr	r4, [r1, #0]
 800243c:	4610      	mov	r0, r2
 800243e:	4619      	mov	r1, r3
 8002440:	f7fe fb94 	bl	8000b6c <__aeabi_d2uiz>
 8002444:	4603      	mov	r3, r0
 8002446:	63a3      	str	r3, [r4, #56]	; 0x38

						// Move til angle threshold
						while (abs(curAngle) < back_angle_threshold) { // Tends to over steer a lot
 8002448:	e048      	b.n	80024dc <motors+0xb6c>
							osDelay(10);
 800244a:	200a      	movs	r0, #10
 800244c:	f005 fed4 	bl	80081f8 <osDelay>
							stuck++;
 8002450:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002452:	3301      	adds	r3, #1
 8002454:	65bb      	str	r3, [r7, #88]	; 0x58
							if (stuck > 1000) {
 8002456:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002458:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800245c:	dd3e      	ble.n	80024dc <motors+0xb6c>
								curAngle = curAngle > 0 ? curAngle - back_angle_threshold : curAngle + back_angle_threshold;
 800245e:	4b16      	ldr	r3, [pc, #88]	; (80024b8 <motors+0xb48>)
 8002460:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	f04f 0300 	mov.w	r3, #0
 800246c:	f7fe fb4c 	bl	8000b08 <__aeabi_dcmpgt>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00e      	beq.n	8002494 <motors+0xb24>
 8002476:	4b10      	ldr	r3, [pc, #64]	; (80024b8 <motors+0xb48>)
 8002478:	e9d3 4500 	ldrd	r4, r5, [r3]
 800247c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800247e:	f7fe f849 	bl	8000514 <__aeabi_i2d>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	4620      	mov	r0, r4
 8002488:	4629      	mov	r1, r5
 800248a:	f7fd fef5 	bl	8000278 <__aeabi_dsub>
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	e009      	b.n	80024a8 <motors+0xb38>
 8002494:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002496:	f7fe f83d 	bl	8000514 <__aeabi_i2d>
 800249a:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <motors+0xb48>)
 800249c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a0:	f7fd feec 	bl	800027c <__adddf3>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4903      	ldr	r1, [pc, #12]	; (80024b8 <motors+0xb48>)
 80024aa:	e9c1 2300 	strd	r2, r3, [r1]
								break;
 80024ae:	e023      	b.n	80024f8 <motors+0xb88>
 80024b0:	66666666 	.word	0x66666666
 80024b4:	3fee6666 	.word	0x3fee6666
 80024b8:	200002e0 	.word	0x200002e0
 80024bc:	20000000 	.word	0x20000000
 80024c0:	40020000 	.word	0x40020000
 80024c4:	20000003 	.word	0x20000003
 80024c8:	20000208 	.word	0x20000208
 80024cc:	20000004 	.word	0x20000004
 80024d0:	200000e8 	.word	0x200000e8
 80024d4:	200002f0 	.word	0x200002f0
 80024d8:	20000001 	.word	0x20000001
						while (abs(curAngle) < back_angle_threshold) { // Tends to over steer a lot
 80024dc:	4bba      	ldr	r3, [pc, #744]	; (80027c8 <motors+0xe58>)
 80024de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e2:	4610      	mov	r0, r2
 80024e4:	4619      	mov	r1, r3
 80024e6:	f7fe fb19 	bl	8000b1c <__aeabi_d2iz>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	bfb8      	it	lt
 80024f0:	425b      	neglt	r3, r3
 80024f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80024f4:	429a      	cmp	r2, r3
 80024f6:	dca8      	bgt.n	800244a <motors+0xada>
							}
						}

						// Once Threshold reached, turn servo centre
						htim1.Instance->CCR4 = pwmVal_servo; // Turn servo to the centre
 80024f8:	4bb4      	ldr	r3, [pc, #720]	; (80027cc <motors+0xe5c>)
 80024fa:	881a      	ldrh	r2, [r3, #0]
 80024fc:	4bb4      	ldr	r3, [pc, #720]	; (80027d0 <motors+0xe60>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	641a      	str	r2, [r3, #64]	; 0x40

						// Stop motor
						pwmVal_motor = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, motor_offset_r*pwmVal_motor);
 8002508:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800250c:	4618      	mov	r0, r3
 800250e:	f7fe f801 	bl	8000514 <__aeabi_i2d>
 8002512:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002516:	f7fe f867 	bl	80005e8 <__aeabi_dmul>
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	49ad      	ldr	r1, [pc, #692]	; (80027d4 <motors+0xe64>)
 8002520:	680c      	ldr	r4, [r1, #0]
 8002522:	4610      	mov	r0, r2
 8002524:	4619      	mov	r1, r3
 8002526:	f7fe fb21 	bl	8000b6c <__aeabi_d2uiz>
 800252a:	4603      	mov	r3, r0
 800252c:	6363      	str	r3, [r4, #52]	; 0x34
						__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, motor_offset_l*pwmVal_motor);
 800252e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002532:	4618      	mov	r0, r3
 8002534:	f7fd ffee 	bl	8000514 <__aeabi_i2d>
 8002538:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800253c:	f7fe f854 	bl	80005e8 <__aeabi_dmul>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	49a3      	ldr	r1, [pc, #652]	; (80027d4 <motors+0xe64>)
 8002546:	680c      	ldr	r4, [r1, #0]
 8002548:	4610      	mov	r0, r2
 800254a:	4619      	mov	r1, r3
 800254c:	f7fe fb0e 	bl	8000b6c <__aeabi_d2uiz>
 8002550:	4603      	mov	r3, r0
 8002552:	63a3      	str	r3, [r4, #56]	; 0x38

						// Let overflow be error to account for
						curAngle = curAngle > 0 ? curAngle - back_angle_threshold : curAngle + back_angle_threshold;
 8002554:	4b9c      	ldr	r3, [pc, #624]	; (80027c8 <motors+0xe58>)
 8002556:	e9d3 0100 	ldrd	r0, r1, [r3]
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	f04f 0300 	mov.w	r3, #0
 8002562:	f7fe fad1 	bl	8000b08 <__aeabi_dcmpgt>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00e      	beq.n	800258a <motors+0xc1a>
 800256c:	4b96      	ldr	r3, [pc, #600]	; (80027c8 <motors+0xe58>)
 800256e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002572:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002574:	f7fd ffce 	bl	8000514 <__aeabi_i2d>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4620      	mov	r0, r4
 800257e:	4629      	mov	r1, r5
 8002580:	f7fd fe7a 	bl	8000278 <__aeabi_dsub>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	e009      	b.n	800259e <motors+0xc2e>
 800258a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800258c:	f7fd ffc2 	bl	8000514 <__aeabi_i2d>
 8002590:	4b8d      	ldr	r3, [pc, #564]	; (80027c8 <motors+0xe58>)
 8002592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002596:	f7fd fe71 	bl	800027c <__adddf3>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	498a      	ldr	r1, [pc, #552]	; (80027c8 <motors+0xe58>)
 80025a0:	e9c1 2300 	strd	r2, r3, [r1]

						kp = kp_back;
 80025a4:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80025a8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
						ki = 0.8;
 80025ac:	2300      	movs	r3, #0
 80025ae:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
						eintegral = 0;	// Integral error
 80025b2:	2300      	movs	r3, #0
 80025b4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

						osDelay(1000);
 80025b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025bc:	f005 fe1c 	bl	80081f8 <osDelay>

						// Break movement loop
						break;
 80025c0:	e37f      	b.n	8002cc2 <motors+0x1352>
					}	// End of Turning

					// To let gyro have the task thread or else OS will only focus on motor thread
					osDelay(10);
 80025c2:	200a      	movs	r0, #10
 80025c4:	f005 fe18 	bl	80081f8 <osDelay>
					HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80025c8:	e62f      	b.n	800222a <motors+0x8ba>
				}
			}

			// No motor/reset values and start gyro
			else if (frontback == 'k') {
 80025ca:	4b83      	ldr	r3, [pc, #524]	; (80027d8 <motors+0xe68>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b6b      	cmp	r3, #107	; 0x6b
 80025d0:	d129      	bne.n	8002626 <motors+0xcb6>
				// Reset all values
				encoder_offset = 0;
 80025d2:	4b82      	ldr	r3, [pc, #520]	; (80027dc <motors+0xe6c>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
				encoder_error = 0;
 80025d8:	4b81      	ldr	r3, [pc, #516]	; (80027e0 <motors+0xe70>)
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
				curAngle = 0;
 80025de:	497a      	ldr	r1, [pc, #488]	; (80027c8 <motors+0xe58>)
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	f04f 0300 	mov.w	r3, #0
 80025e8:	e9c1 2300 	strd	r2, r3, [r1]
				pwmVal_motor = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

				__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmVal_motor);
 80025f2:	4b78      	ldr	r3, [pc, #480]	; (80027d4 <motors+0xe64>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80025fa:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmVal_motor);
 80025fc:	4b75      	ldr	r3, [pc, #468]	; (80027d4 <motors+0xe64>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8002604:	639a      	str	r2, [r3, #56]	; 0x38

				osDelay(1500);
 8002606:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800260a:	f005 fdf5 	bl	80081f8 <osDelay>
				gyroStart();					// Start Gyro Calibration
 800260e:	f008 fb15 	bl	800ac3c <gyroStart>

				osDelay((fb_speed - 48) * 50);	// Additional delay if required
 8002612:	4b74      	ldr	r3, [pc, #464]	; (80027e4 <motors+0xe74>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	3b30      	subs	r3, #48	; 0x30
 8002618:	2232      	movs	r2, #50	; 0x32
 800261a:	fb02 f303 	mul.w	r3, r2, r3
 800261e:	4618      	mov	r0, r3
 8002620:	f005 fdea 	bl	80081f8 <osDelay>
 8002624:	e34d      	b.n	8002cc2 <motors+0x1352>
			}

			// Move backwards (Slow)
			else if (frontback == 'y') {
 8002626:	4b6c      	ldr	r3, [pc, #432]	; (80027d8 <motors+0xe68>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b79      	cmp	r3, #121	; 0x79
 800262c:	f040 8091 	bne.w	8002752 <motors+0xde2>

				// E.g. 8cm back movement, target_dist = 80
				target_dist = (int) ((fb_speed - 48) * 10);
 8002630:	4b6c      	ldr	r3, [pc, #432]	; (80027e4 <motors+0xe74>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	66fb      	str	r3, [r7, #108]	; 0x6c
				// Slow down reference
				pwmVal_motor = motor_min;
 8002642:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002646:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

				// MOTOR A
				HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 800264a:	2200      	movs	r2, #0
 800264c:	2104      	movs	r1, #4
 800264e:	4866      	ldr	r0, [pc, #408]	; (80027e8 <motors+0xe78>)
 8002650:	f001 fb32 	bl	8003cb8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002654:	2201      	movs	r2, #1
 8002656:	2108      	movs	r1, #8
 8002658:	4863      	ldr	r0, [pc, #396]	; (80027e8 <motors+0xe78>)
 800265a:	f001 fb2d 	bl	8003cb8 <HAL_GPIO_WritePin>

				// MOTOR B
				HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 800265e:	2200      	movs	r2, #0
 8002660:	2120      	movs	r1, #32
 8002662:	4861      	ldr	r0, [pc, #388]	; (80027e8 <motors+0xe78>)
 8002664:	f001 fb28 	bl	8003cb8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8002668:	2201      	movs	r2, #1
 800266a:	2110      	movs	r1, #16
 800266c:	485e      	ldr	r0, [pc, #376]	; (80027e8 <motors+0xe78>)
 800266e:	f001 fb23 	bl	8003cb8 <HAL_GPIO_WritePin>

				// Move Motor
				__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmVal_motor);
 8002672:	4b58      	ldr	r3, [pc, #352]	; (80027d4 <motors+0xe64>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800267a:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmVal_motor);
 800267c:	4b55      	ldr	r3, [pc, #340]	; (80027d4 <motors+0xe64>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8002684:	639a      	str	r2, [r3, #56]	; 0x38

				while (encoder_dist < (int) target_dist * 0.95) {
 8002686:	e042      	b.n	800270e <motors+0xd9e>
					// PID for error adjustment
					err = curAngle - 0;		// Proportional error
 8002688:	4b4f      	ldr	r3, [pc, #316]	; (80027c8 <motors+0xe58>)
 800268a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268e:	4610      	mov	r0, r2
 8002690:	4619      	mov	r1, r3
 8002692:	f7fe fa43 	bl	8000b1c <__aeabi_d2iz>
 8002696:	4603      	mov	r3, r0
 8002698:	64bb      	str	r3, [r7, #72]	; 0x48
					eintegral += err;		// Integral error
 800269a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800269c:	b29a      	uxth	r2, r3
 800269e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80026a2:	4413      	add	r3, r2
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

					// PID equation (opposite correction)
					servo_val = (uint8_t) (pwmVal_servo - 0.8 * (kp * err + ki * eintegral));
 80026aa:	4b48      	ldr	r3, [pc, #288]	; (80027cc <motors+0xe5c>)
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fd ff30 	bl	8000514 <__aeabi_i2d>
 80026b4:	4604      	mov	r4, r0
 80026b6:	460d      	mov	r5, r1
 80026b8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80026bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026be:	fb03 f202 	mul.w	r2, r3, r2
 80026c2:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80026c6:	f9b7 1064 	ldrsh.w	r1, [r7, #100]	; 0x64
 80026ca:	fb01 f303 	mul.w	r3, r1, r3
 80026ce:	4413      	add	r3, r2
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fd ff1f 	bl	8000514 <__aeabi_i2d>
 80026d6:	a338      	add	r3, pc, #224	; (adr r3, 80027b8 <motors+0xe48>)
 80026d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026dc:	f7fd ff84 	bl	80005e8 <__aeabi_dmul>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4620      	mov	r0, r4
 80026e6:	4629      	mov	r1, r5
 80026e8:	f7fd fdc6 	bl	8000278 <__aeabi_dsub>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4610      	mov	r0, r2
 80026f2:	4619      	mov	r1, r3
 80026f4:	f7fe fa3a 	bl	8000b6c <__aeabi_d2uiz>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

					// Set servo value
					htim1.Instance->CCR4 = servo_val;// Turn servo to correct error
 80026fe:	4b34      	ldr	r3, [pc, #208]	; (80027d0 <motors+0xe60>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002706:	641a      	str	r2, [r3, #64]	; 0x40

					osDelay(1);
 8002708:	2001      	movs	r0, #1
 800270a:	f005 fd75 	bl	80081f8 <osDelay>
				while (encoder_dist < (int) target_dist * 0.95) {
 800270e:	4b37      	ldr	r3, [pc, #220]	; (80027ec <motors+0xe7c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7fd feee 	bl	80004f4 <__aeabi_ui2d>
 8002718:	4604      	mov	r4, r0
 800271a:	460d      	mov	r5, r1
 800271c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800271e:	4618      	mov	r0, r3
 8002720:	f7fd fef8 	bl	8000514 <__aeabi_i2d>
 8002724:	a326      	add	r3, pc, #152	; (adr r3, 80027c0 <motors+0xe50>)
 8002726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272a:	f7fd ff5d 	bl	80005e8 <__aeabi_dmul>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4620      	mov	r0, r4
 8002734:	4629      	mov	r1, r5
 8002736:	f7fe f9c9 	bl	8000acc <__aeabi_dcmplt>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1a3      	bne.n	8002688 <motors+0xd18>
				}

				// Stop motor
				__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
 8002740:	4b24      	ldr	r3, [pc, #144]	; (80027d4 <motors+0xe64>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2200      	movs	r2, #0
 8002746:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0);
 8002748:	4b22      	ldr	r3, [pc, #136]	; (80027d4 <motors+0xe64>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2200      	movs	r2, #0
 800274e:	639a      	str	r2, [r3, #56]	; 0x38
 8002750:	e2b7      	b.n	8002cc2 <motors+0x1352>

			}

			// Move forwards (Slow)
			else if (frontback == 'u') {
 8002752:	4b21      	ldr	r3, [pc, #132]	; (80027d8 <motors+0xe68>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b75      	cmp	r3, #117	; 0x75
 8002758:	f040 80af 	bne.w	80028ba <motors+0xf4a>
				target_dist = (int) ((fb_speed - 48) * 10);
 800275c:	4b21      	ldr	r3, [pc, #132]	; (80027e4 <motors+0xe74>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	66fb      	str	r3, [r7, #108]	; 0x6c

				// Slow down reference
				pwmVal_motor = motor_min;
 800276e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002772:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

				// MOTOR A
				HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002776:	2201      	movs	r2, #1
 8002778:	2104      	movs	r1, #4
 800277a:	481b      	ldr	r0, [pc, #108]	; (80027e8 <motors+0xe78>)
 800277c:	f001 fa9c 	bl	8003cb8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8002780:	2200      	movs	r2, #0
 8002782:	2108      	movs	r1, #8
 8002784:	4818      	ldr	r0, [pc, #96]	; (80027e8 <motors+0xe78>)
 8002786:	f001 fa97 	bl	8003cb8 <HAL_GPIO_WritePin>

				// MOTOR B
				HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 800278a:	2201      	movs	r2, #1
 800278c:	2120      	movs	r1, #32
 800278e:	4816      	ldr	r0, [pc, #88]	; (80027e8 <motors+0xe78>)
 8002790:	f001 fa92 	bl	8003cb8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8002794:	2200      	movs	r2, #0
 8002796:	2110      	movs	r1, #16
 8002798:	4813      	ldr	r0, [pc, #76]	; (80027e8 <motors+0xe78>)
 800279a:	f001 fa8d 	bl	8003cb8 <HAL_GPIO_WritePin>

				// Move motor
				__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmVal_motor);
 800279e:	4b0d      	ldr	r3, [pc, #52]	; (80027d4 <motors+0xe64>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80027a6:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmVal_motor);
 80027a8:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <motors+0xe64>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80027b0:	639a      	str	r2, [r3, #56]	; 0x38

				while (encoder_dist < (int) target_dist * 0.95) {
 80027b2:	e060      	b.n	8002876 <motors+0xf06>
 80027b4:	f3af 8000 	nop.w
 80027b8:	9999999a 	.word	0x9999999a
 80027bc:	3fe99999 	.word	0x3fe99999
 80027c0:	66666666 	.word	0x66666666
 80027c4:	3fee6666 	.word	0x3fee6666
 80027c8:	200002e0 	.word	0x200002e0
 80027cc:	20000004 	.word	0x20000004
 80027d0:	200000e8 	.word	0x200000e8
 80027d4:	20000208 	.word	0x20000208
 80027d8:	20000000 	.word	0x20000000
 80027dc:	200002e8 	.word	0x200002e8
 80027e0:	200002ec 	.word	0x200002ec
 80027e4:	20000001 	.word	0x20000001
 80027e8:	40020000 	.word	0x40020000
 80027ec:	200002f0 	.word	0x200002f0
					// PID for error adjustment
					err = curAngle - 0;		// Proportional error
 80027f0:	4bb7      	ldr	r3, [pc, #732]	; (8002ad0 <motors+0x1160>)
 80027f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f6:	4610      	mov	r0, r2
 80027f8:	4619      	mov	r1, r3
 80027fa:	f7fe f98f 	bl	8000b1c <__aeabi_d2iz>
 80027fe:	4603      	mov	r3, r0
 8002800:	64bb      	str	r3, [r7, #72]	; 0x48
					eintegral += err;		// Integral error
 8002802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002804:	b29a      	uxth	r2, r3
 8002806:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800280a:	4413      	add	r3, r2
 800280c:	b29b      	uxth	r3, r3
 800280e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

					// PID equation
					servo_val = (uint8_t) (pwmVal_servo + 0.8 * (kp * err + ki * eintegral));
 8002812:	4bb0      	ldr	r3, [pc, #704]	; (8002ad4 <motors+0x1164>)
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f7fd fe7c 	bl	8000514 <__aeabi_i2d>
 800281c:	4604      	mov	r4, r0
 800281e:	460d      	mov	r5, r1
 8002820:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002824:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002826:	fb03 f202 	mul.w	r2, r3, r2
 800282a:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 800282e:	f9b7 1064 	ldrsh.w	r1, [r7, #100]	; 0x64
 8002832:	fb01 f303 	mul.w	r3, r1, r3
 8002836:	4413      	add	r3, r2
 8002838:	4618      	mov	r0, r3
 800283a:	f7fd fe6b 	bl	8000514 <__aeabi_i2d>
 800283e:	a39e      	add	r3, pc, #632	; (adr r3, 8002ab8 <motors+0x1148>)
 8002840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002844:	f7fd fed0 	bl	80005e8 <__aeabi_dmul>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	4620      	mov	r0, r4
 800284e:	4629      	mov	r1, r5
 8002850:	f7fd fd14 	bl	800027c <__adddf3>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	4610      	mov	r0, r2
 800285a:	4619      	mov	r1, r3
 800285c:	f7fe f986 	bl	8000b6c <__aeabi_d2uiz>
 8002860:	4603      	mov	r3, r0
 8002862:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

					htim1.Instance->CCR4 = servo_val;
 8002866:	4b9c      	ldr	r3, [pc, #624]	; (8002ad8 <motors+0x1168>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800286e:	641a      	str	r2, [r3, #64]	; 0x40

					osDelay(1);
 8002870:	2001      	movs	r0, #1
 8002872:	f005 fcc1 	bl	80081f8 <osDelay>
				while (encoder_dist < (int) target_dist * 0.95) {
 8002876:	4b99      	ldr	r3, [pc, #612]	; (8002adc <motors+0x116c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7fd fe3a 	bl	80004f4 <__aeabi_ui2d>
 8002880:	4604      	mov	r4, r0
 8002882:	460d      	mov	r5, r1
 8002884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002886:	4618      	mov	r0, r3
 8002888:	f7fd fe44 	bl	8000514 <__aeabi_i2d>
 800288c:	a38c      	add	r3, pc, #560	; (adr r3, 8002ac0 <motors+0x1150>)
 800288e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002892:	f7fd fea9 	bl	80005e8 <__aeabi_dmul>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	4620      	mov	r0, r4
 800289c:	4629      	mov	r1, r5
 800289e:	f7fe f915 	bl	8000acc <__aeabi_dcmplt>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1a3      	bne.n	80027f0 <motors+0xe80>
				}

				// Stop motor
				__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
 80028a8:	4b8d      	ldr	r3, [pc, #564]	; (8002ae0 <motors+0x1170>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2200      	movs	r2, #0
 80028ae:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0);
 80028b0:	4b8b      	ldr	r3, [pc, #556]	; (8002ae0 <motors+0x1170>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2200      	movs	r2, #0
 80028b6:	639a      	str	r2, [r3, #56]	; 0x38
 80028b8:	e203      	b.n	8002cc2 <motors+0x1352>

			}

			else if (frontback == 'l') {
 80028ba:	4b8a      	ldr	r3, [pc, #552]	; (8002ae4 <motors+0x1174>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b6c      	cmp	r3, #108	; 0x6c
 80028c0:	d114      	bne.n	80028ec <motors+0xf7c>
				// Outside
				if (fb_speed == '1') {
 80028c2:	4b89      	ldr	r3, [pc, #548]	; (8002ae8 <motors+0x1178>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b31      	cmp	r3, #49	; 0x31
 80028c8:	d106      	bne.n	80028d8 <motors+0xf68>
					grad = 142;
 80028ca:	238e      	movs	r3, #142	; 0x8e
 80028cc:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
					y_intercept = 50;
 80028d0:	2332      	movs	r3, #50	; 0x32
 80028d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80028d6:	e1f4      	b.n	8002cc2 <motors+0x1352>
				}

				else {
					grad = 163;
 80028d8:	23a3      	movs	r3, #163	; 0xa3
 80028da:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
					y_intercept = 55;
 80028de:	2337      	movs	r3, #55	; 0x37
 80028e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					kp_back = 5;
 80028e4:	2305      	movs	r3, #5
 80028e6:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
 80028ea:	e1ea      	b.n	8002cc2 <motors+0x1352>
				}
			}

			// No Image found (Emergency Fail Safe)
			else if (frontback == 'n') {
 80028ec:	4b7d      	ldr	r3, [pc, #500]	; (8002ae4 <motors+0x1174>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b6e      	cmp	r3, #110	; 0x6e
 80028f2:	f040 817e 	bne.w	8002bf2 <motors+0x1282>
				encoder_dist = 0;
 80028f6:	4b79      	ldr	r3, [pc, #484]	; (8002adc <motors+0x116c>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]

				int8_t angle_to_turn;

				// Initialise motor
				// MOTOR A
				HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80028fc:	2201      	movs	r2, #1
 80028fe:	2104      	movs	r1, #4
 8002900:	487a      	ldr	r0, [pc, #488]	; (8002aec <motors+0x117c>)
 8002902:	f001 f9d9 	bl	8003cb8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8002906:	2200      	movs	r2, #0
 8002908:	2108      	movs	r1, #8
 800290a:	4878      	ldr	r0, [pc, #480]	; (8002aec <motors+0x117c>)
 800290c:	f001 f9d4 	bl	8003cb8 <HAL_GPIO_WritePin>

				// MOTOR B
				HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8002910:	2201      	movs	r2, #1
 8002912:	2120      	movs	r1, #32
 8002914:	4875      	ldr	r0, [pc, #468]	; (8002aec <motors+0x117c>)
 8002916:	f001 f9cf 	bl	8003cb8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 800291a:	2200      	movs	r2, #0
 800291c:	2110      	movs	r1, #16
 800291e:	4873      	ldr	r0, [pc, #460]	; (8002aec <motors+0x117c>)
 8002920:	f001 f9ca 	bl	8003cb8 <HAL_GPIO_WritePin>

				// Clockwise search
				if (search_dir == 0) {
 8002924:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8002928:	2b00      	cmp	r3, #0
 800292a:	f040 809d 	bne.w	8002a68 <motors+0x10f8>
					// Turn the wheel
					htim1.Instance->CCR4 = pwmVal_servo + 40;// similar to u5a0
 800292e:	4b69      	ldr	r3, [pc, #420]	; (8002ad4 <motors+0x1164>)
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002936:	4b68      	ldr	r3, [pc, #416]	; (8002ad8 <motors+0x1168>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	641a      	str	r2, [r3, #64]	; 0x40

					// Move motor
					__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 800);
 800293c:	4b68      	ldr	r3, [pc, #416]	; (8002ae0 <motors+0x1170>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002944:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 2600);
 8002946:	4b66      	ldr	r3, [pc, #408]	; (8002ae0 <motors+0x1170>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f640 2228 	movw	r2, #2600	; 0xa28
 800294e:	639a      	str	r2, [r3, #56]	; 0x38

					angle_to_turn = curAngle - (int) (turn_angle / 2);
 8002950:	4b5f      	ldr	r3, [pc, #380]	; (8002ad0 <motors+0x1160>)
 8002952:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002958:	0fda      	lsrs	r2, r3, #31
 800295a:	4413      	add	r3, r2
 800295c:	105b      	asrs	r3, r3, #1
 800295e:	4618      	mov	r0, r3
 8002960:	f7fd fdd8 	bl	8000514 <__aeabi_i2d>
 8002964:	4602      	mov	r2, r0
 8002966:	460b      	mov	r3, r1
 8002968:	4620      	mov	r0, r4
 800296a:	4629      	mov	r1, r5
 800296c:	f7fd fc84 	bl	8000278 <__aeabi_dsub>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	4610      	mov	r0, r2
 8002976:	4619      	mov	r1, r3
 8002978:	f7fe f8d0 	bl	8000b1c <__aeabi_d2iz>
 800297c:	4603      	mov	r3, r0
 800297e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

					// Move til angle threshold
					while (curAngle > angle_to_turn) // Turn 45 degree
 8002982:	e002      	b.n	800298a <motors+0x101a>
						osDelay(10);
 8002984:	200a      	movs	r0, #10
 8002986:	f005 fc37 	bl	80081f8 <osDelay>
					while (curAngle > angle_to_turn) // Turn 45 degree
 800298a:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800298e:	4618      	mov	r0, r3
 8002990:	f7fd fdc0 	bl	8000514 <__aeabi_i2d>
 8002994:	4b4e      	ldr	r3, [pc, #312]	; (8002ad0 <motors+0x1160>)
 8002996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299a:	f7fe f897 	bl	8000acc <__aeabi_dcmplt>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1ef      	bne.n	8002984 <motors+0x1014>

					// Stop motor
					__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
 80029a4:	4b4e      	ldr	r3, [pc, #312]	; (8002ae0 <motors+0x1170>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2200      	movs	r2, #0
 80029aa:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0);
 80029ac:	4b4c      	ldr	r3, [pc, #304]	; (8002ae0 <motors+0x1170>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2200      	movs	r2, #0
 80029b2:	639a      	str	r2, [r3, #56]	; 0x38

					osDelay(500);
 80029b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029b8:	f005 fc1e 	bl	80081f8 <osDelay>

					htim1.Instance->CCR4 = pwmVal_servo;
 80029bc:	4b45      	ldr	r3, [pc, #276]	; (8002ad4 <motors+0x1164>)
 80029be:	881a      	ldrh	r2, [r3, #0]
 80029c0:	4b45      	ldr	r3, [pc, #276]	; (8002ad8 <motors+0x1168>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	641a      	str	r2, [r3, #64]	; 0x40

					// Let it go back same amount
					target_dist = 0.9 * encoder_dist;
 80029c6:	4b45      	ldr	r3, [pc, #276]	; (8002adc <motors+0x116c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fd fd92 	bl	80004f4 <__aeabi_ui2d>
 80029d0:	a33d      	add	r3, pc, #244	; (adr r3, 8002ac8 <motors+0x1158>)
 80029d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d6:	f7fd fe07 	bl	80005e8 <__aeabi_dmul>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	4610      	mov	r0, r2
 80029e0:	4619      	mov	r1, r3
 80029e2:	f7fe f8c3 	bl	8000b6c <__aeabi_d2uiz>
 80029e6:	4603      	mov	r3, r0
 80029e8:	66fb      	str	r3, [r7, #108]	; 0x6c
					encoder_dist = 0;
 80029ea:	4b3c      	ldr	r3, [pc, #240]	; (8002adc <motors+0x116c>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]

					// Reverse Motor
					// MOTOR A
					HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80029f0:	2200      	movs	r2, #0
 80029f2:	2104      	movs	r1, #4
 80029f4:	483d      	ldr	r0, [pc, #244]	; (8002aec <motors+0x117c>)
 80029f6:	f001 f95f 	bl	8003cb8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80029fa:	2201      	movs	r2, #1
 80029fc:	2108      	movs	r1, #8
 80029fe:	483b      	ldr	r0, [pc, #236]	; (8002aec <motors+0x117c>)
 8002a00:	f001 f95a 	bl	8003cb8 <HAL_GPIO_WritePin>

					// MOTOR B
					HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8002a04:	2200      	movs	r2, #0
 8002a06:	2120      	movs	r1, #32
 8002a08:	4838      	ldr	r0, [pc, #224]	; (8002aec <motors+0x117c>)
 8002a0a:	f001 f955 	bl	8003cb8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8002a0e:	2201      	movs	r2, #1
 8002a10:	2110      	movs	r1, #16
 8002a12:	4836      	ldr	r0, [pc, #216]	; (8002aec <motors+0x117c>)
 8002a14:	f001 f950 	bl	8003cb8 <HAL_GPIO_WritePin>

					osDelay(10);
 8002a18:	200a      	movs	r0, #10
 8002a1a:	f005 fbed 	bl	80081f8 <osDelay>

					// Move motor
					__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 2000);
 8002a1e:	4b30      	ldr	r3, [pc, #192]	; (8002ae0 <motors+0x1170>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002a26:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 2000);
 8002a28:	4b2d      	ldr	r3, [pc, #180]	; (8002ae0 <motors+0x1170>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002a30:	639a      	str	r2, [r3, #56]	; 0x38

					while (encoder_dist < target_dist) {
 8002a32:	e002      	b.n	8002a3a <motors+0x10ca>
						osDelay(10);
 8002a34:	200a      	movs	r0, #10
 8002a36:	f005 fbdf 	bl	80081f8 <osDelay>
					while (encoder_dist < target_dist) {
 8002a3a:	4b28      	ldr	r3, [pc, #160]	; (8002adc <motors+0x116c>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d8f7      	bhi.n	8002a34 <motors+0x10c4>
					}

					// Stop motor
					__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
 8002a44:	4b26      	ldr	r3, [pc, #152]	; (8002ae0 <motors+0x1170>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0);
 8002a4c:	4b24      	ldr	r3, [pc, #144]	; (8002ae0 <motors+0x1170>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2200      	movs	r2, #0
 8002a52:	639a      	str	r2, [r3, #56]	; 0x38

					search_dir = !search_dir;
 8002a54:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	bf0c      	ite	eq
 8002a5c:	2301      	moveq	r3, #1
 8002a5e:	2300      	movne	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 8002a66:	e12c      	b.n	8002cc2 <motors+0x1352>
					//					if(abs(curAngle) > abs(turn_angle)){
				}

				else {
					// Turn the wheel
					htim1.Instance->CCR4 = pwmVal_servo - 30;// similar to u5a0
 8002a68:	4b1a      	ldr	r3, [pc, #104]	; (8002ad4 <motors+0x1164>)
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	f1a3 021e 	sub.w	r2, r3, #30
 8002a70:	4b19      	ldr	r3, [pc, #100]	; (8002ad8 <motors+0x1168>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	641a      	str	r2, [r3, #64]	; 0x40

					// Move motor
					__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 2600);
 8002a76:	4b1a      	ldr	r3, [pc, #104]	; (8002ae0 <motors+0x1170>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f640 2228 	movw	r2, #2600	; 0xa28
 8002a7e:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 800);
 8002a80:	4b17      	ldr	r3, [pc, #92]	; (8002ae0 <motors+0x1170>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002a88:	639a      	str	r2, [r3, #56]	; 0x38

					angle_to_turn = curAngle + (int) (turn_angle / 2);
 8002a8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a8c:	0fda      	lsrs	r2, r3, #31
 8002a8e:	4413      	add	r3, r2
 8002a90:	105b      	asrs	r3, r3, #1
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fd fd3e 	bl	8000514 <__aeabi_i2d>
 8002a98:	4b0d      	ldr	r3, [pc, #52]	; (8002ad0 <motors+0x1160>)
 8002a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9e:	f7fd fbed 	bl	800027c <__adddf3>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	f7fe f837 	bl	8000b1c <__aeabi_d2iz>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

					// Move til angle threshold
					while (curAngle < angle_to_turn) // Turn 45 degree
 8002ab4:	e01f      	b.n	8002af6 <motors+0x1186>
 8002ab6:	bf00      	nop
 8002ab8:	9999999a 	.word	0x9999999a
 8002abc:	3fe99999 	.word	0x3fe99999
 8002ac0:	66666666 	.word	0x66666666
 8002ac4:	3fee6666 	.word	0x3fee6666
 8002ac8:	cccccccd 	.word	0xcccccccd
 8002acc:	3feccccc 	.word	0x3feccccc
 8002ad0:	200002e0 	.word	0x200002e0
 8002ad4:	20000004 	.word	0x20000004
 8002ad8:	200000e8 	.word	0x200000e8
 8002adc:	200002f0 	.word	0x200002f0
 8002ae0:	20000208 	.word	0x20000208
 8002ae4:	20000000 	.word	0x20000000
 8002ae8:	20000001 	.word	0x20000001
 8002aec:	40020000 	.word	0x40020000
						osDelay(10);
 8002af0:	200a      	movs	r0, #10
 8002af2:	f005 fb81 	bl	80081f8 <osDelay>
					while (curAngle < angle_to_turn) // Turn 45 degree
 8002af6:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fd fd0a 	bl	8000514 <__aeabi_i2d>
 8002b00:	4b83      	ldr	r3, [pc, #524]	; (8002d10 <motors+0x13a0>)
 8002b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b06:	f7fd ffff 	bl	8000b08 <__aeabi_dcmpgt>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1ef      	bne.n	8002af0 <motors+0x1180>

					// Stop motor
					__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
 8002b10:	4b80      	ldr	r3, [pc, #512]	; (8002d14 <motors+0x13a4>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2200      	movs	r2, #0
 8002b16:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0);
 8002b18:	4b7e      	ldr	r3, [pc, #504]	; (8002d14 <motors+0x13a4>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	639a      	str	r2, [r3, #56]	; 0x38

					osDelay(500);
 8002b20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b24:	f005 fb68 	bl	80081f8 <osDelay>

					htim1.Instance->CCR4 = pwmVal_servo;
 8002b28:	4b7b      	ldr	r3, [pc, #492]	; (8002d18 <motors+0x13a8>)
 8002b2a:	881a      	ldrh	r2, [r3, #0]
 8002b2c:	4b7b      	ldr	r3, [pc, #492]	; (8002d1c <motors+0x13ac>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	641a      	str	r2, [r3, #64]	; 0x40

					// Let it go back same amount
					target_dist = 0.9 * encoder_dist;
 8002b32:	4b7b      	ldr	r3, [pc, #492]	; (8002d20 <motors+0x13b0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fd fcdc 	bl	80004f4 <__aeabi_ui2d>
 8002b3c:	a372      	add	r3, pc, #456	; (adr r3, 8002d08 <motors+0x1398>)
 8002b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b42:	f7fd fd51 	bl	80005e8 <__aeabi_dmul>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4610      	mov	r0, r2
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	f7fe f80d 	bl	8000b6c <__aeabi_d2uiz>
 8002b52:	4603      	mov	r3, r0
 8002b54:	66fb      	str	r3, [r7, #108]	; 0x6c
					encoder_dist = 0;
 8002b56:	4b72      	ldr	r3, [pc, #456]	; (8002d20 <motors+0x13b0>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]

					// Reverse Motor
					// MOTOR A
					HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2104      	movs	r1, #4
 8002b60:	4870      	ldr	r0, [pc, #448]	; (8002d24 <motors+0x13b4>)
 8002b62:	f001 f8a9 	bl	8003cb8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8002b66:	2201      	movs	r2, #1
 8002b68:	2108      	movs	r1, #8
 8002b6a:	486e      	ldr	r0, [pc, #440]	; (8002d24 <motors+0x13b4>)
 8002b6c:	f001 f8a4 	bl	8003cb8 <HAL_GPIO_WritePin>

					// MOTOR B
					HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8002b70:	2200      	movs	r2, #0
 8002b72:	2120      	movs	r1, #32
 8002b74:	486b      	ldr	r0, [pc, #428]	; (8002d24 <motors+0x13b4>)
 8002b76:	f001 f89f 	bl	8003cb8 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	2110      	movs	r1, #16
 8002b7e:	4869      	ldr	r0, [pc, #420]	; (8002d24 <motors+0x13b4>)
 8002b80:	f001 f89a 	bl	8003cb8 <HAL_GPIO_WritePin>

					osDelay(10);
 8002b84:	200a      	movs	r0, #10
 8002b86:	f005 fb37 	bl	80081f8 <osDelay>

					// Move motor
					__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 2000);
 8002b8a:	4b62      	ldr	r3, [pc, #392]	; (8002d14 <motors+0x13a4>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002b92:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 2000);
 8002b94:	4b5f      	ldr	r3, [pc, #380]	; (8002d14 <motors+0x13a4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002b9c:	639a      	str	r2, [r3, #56]	; 0x38

					while (encoder_dist < target_dist) {
 8002b9e:	e002      	b.n	8002ba6 <motors+0x1236>
						osDelay(10);
 8002ba0:	200a      	movs	r0, #10
 8002ba2:	f005 fb29 	bl	80081f8 <osDelay>
					while (encoder_dist < target_dist) {
 8002ba6:	4b5e      	ldr	r3, [pc, #376]	; (8002d20 <motors+0x13b0>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d8f7      	bhi.n	8002ba0 <motors+0x1230>
					}

					// Stop motor
					__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
 8002bb0:	4b58      	ldr	r3, [pc, #352]	; (8002d14 <motors+0x13a4>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	635a      	str	r2, [r3, #52]	; 0x34
					__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0);
 8002bb8:	4b56      	ldr	r3, [pc, #344]	; (8002d14 <motors+0x13a4>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	639a      	str	r2, [r3, #56]	; 0x38

					if (curAngle >= turn_angle / 2)
 8002bc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bc2:	0fda      	lsrs	r2, r3, #31
 8002bc4:	4413      	add	r3, r2
 8002bc6:	105b      	asrs	r3, r3, #1
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fd fca3 	bl	8000514 <__aeabi_i2d>
 8002bce:	4b50      	ldr	r3, [pc, #320]	; (8002d10 <motors+0x13a0>)
 8002bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd4:	f7fd ff84 	bl	8000ae0 <__aeabi_dcmple>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d071      	beq.n	8002cc2 <motors+0x1352>
						search_dir = !search_dir;
 8002bde:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	bf0c      	ite	eq
 8002be6:	2301      	moveq	r3, #1
 8002be8:	2300      	movne	r3, #0
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 8002bf0:	e067      	b.n	8002cc2 <motors+0x1352>
				}

			}

			// Read Ultrasonic Sensor for distance
			else if (frontback == 'h') {
 8002bf2:	4b4d      	ldr	r3, [pc, #308]	; (8002d28 <motors+0x13b8>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b68      	cmp	r3, #104	; 0x68
 8002bf8:	d118      	bne.n	8002c2c <motors+0x12bc>
				osDelay(100);
 8002bfa:	2064      	movs	r0, #100	; 0x64
 8002bfc:	f005 fafc 	bl	80081f8 <osDelay>
				HCSR04_Read();
 8002c00:	f7fe f96c 	bl	8000edc <HCSR04_Read>

				msg[1] = Distance;
 8002c04:	4b49      	ldr	r3, [pc, #292]	; (8002d2c <motors+0x13bc>)
 8002c06:	781a      	ldrb	r2, [r3, #0]
 8002c08:	4b49      	ldr	r3, [pc, #292]	; (8002d30 <motors+0x13c0>)
 8002c0a:	705a      	strb	r2, [r3, #1]
				if (HAL_UART_Transmit(&huart3, (uint8_t*) msg, 2, 0xFFFF) == HAL_OK)
 8002c0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c10:	2202      	movs	r2, #2
 8002c12:	4947      	ldr	r1, [pc, #284]	; (8002d30 <motors+0x13c0>)
 8002c14:	4847      	ldr	r0, [pc, #284]	; (8002d34 <motors+0x13c4>)
 8002c16:	f004 f9d9 	bl	8006fcc <HAL_UART_Transmit>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d150      	bne.n	8002cc2 <motors+0x1352>
					HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8002c20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c24:	4844      	ldr	r0, [pc, #272]	; (8002d38 <motors+0x13c8>)
 8002c26:	f001 f860 	bl	8003cea <HAL_GPIO_TogglePin>
 8002c2a:	e04a      	b.n	8002cc2 <motors+0x1352>
			}

			// Send Message to Rpi to signify completion
			else if (frontback == 'm') {
 8002c2c:	4b3e      	ldr	r3, [pc, #248]	; (8002d28 <motors+0x13b8>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b6d      	cmp	r3, #109	; 0x6d
 8002c32:	d121      	bne.n	8002c78 <motors+0x1308>
				osDelay(100);
 8002c34:	2064      	movs	r0, #100	; 0x64
 8002c36:	f005 fadf 	bl	80081f8 <osDelay>

				msg[0] = 'e';
 8002c3a:	4b3d      	ldr	r3, [pc, #244]	; (8002d30 <motors+0x13c0>)
 8002c3c:	2265      	movs	r2, #101	; 0x65
 8002c3e:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 4; j++) {
 8002c40:	2300      	movs	r3, #0
 8002c42:	657b      	str	r3, [r7, #84]	; 0x54
 8002c44:	e00c      	b.n	8002c60 <motors+0x12f0>
					HAL_UART_Transmit(&huart3, (uint8_t*) msg, 2, 0xFFFF);
 8002c46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	4938      	ldr	r1, [pc, #224]	; (8002d30 <motors+0x13c0>)
 8002c4e:	4839      	ldr	r0, [pc, #228]	; (8002d34 <motors+0x13c4>)
 8002c50:	f004 f9bc 	bl	8006fcc <HAL_UART_Transmit>
					osDelay(100);
 8002c54:	2064      	movs	r0, #100	; 0x64
 8002c56:	f005 facf 	bl	80081f8 <osDelay>
				for (int j = 0; j < 4; j++) {
 8002c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	657b      	str	r3, [r7, #84]	; 0x54
 8002c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c62:	2b03      	cmp	r3, #3
 8002c64:	ddef      	ble.n	8002c46 <motors+0x12d6>
				}
				HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8002c66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c6a:	4833      	ldr	r0, [pc, #204]	; (8002d38 <motors+0x13c8>)
 8002c6c:	f001 f83d 	bl	8003cea <HAL_GPIO_TogglePin>

				msg[0] = 'w';
 8002c70:	4b2f      	ldr	r3, [pc, #188]	; (8002d30 <motors+0x13c0>)
 8002c72:	2277      	movs	r2, #119	; 0x77
 8002c74:	701a      	strb	r2, [r3, #0]
 8002c76:	e024      	b.n	8002cc2 <motors+0x1352>
			}

			else if (frontback == 'z') {
 8002c78:	4b2b      	ldr	r3, [pc, #172]	; (8002d28 <motors+0x13b8>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b7a      	cmp	r3, #122	; 0x7a
 8002c7e:	d120      	bne.n	8002cc2 <motors+0x1352>
				osDelay(100);
 8002c80:	2064      	movs	r0, #100	; 0x64
 8002c82:	f005 fab9 	bl	80081f8 <osDelay>
				htim1.Instance->CCR4 = 198;
 8002c86:	4b25      	ldr	r3, [pc, #148]	; (8002d1c <motors+0x13ac>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	22c6      	movs	r2, #198	; 0xc6
 8002c8c:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(1000);
 8002c8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c92:	f005 fab1 	bl	80081f8 <osDelay>
				htim1.Instance->CCR4 = 98;
 8002c96:	4b21      	ldr	r3, [pc, #132]	; (8002d1c <motors+0x13ac>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2262      	movs	r2, #98	; 0x62
 8002c9c:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(1000);
 8002c9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ca2:	f005 faa9 	bl	80081f8 <osDelay>
				htim1.Instance->CCR4 = pwmVal_servo;
 8002ca6:	4b1c      	ldr	r3, [pc, #112]	; (8002d18 <motors+0x13a8>)
 8002ca8:	881a      	ldrh	r2, [r3, #0]
 8002caa:	4b1c      	ldr	r3, [pc, #112]	; (8002d1c <motors+0x13ac>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	641a      	str	r2, [r3, #64]	; 0x40
				osDelay(500);
 8002cb0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002cb4:	f005 faa0 	bl	80081f8 <osDelay>
				HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8002cb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cbc:	481e      	ldr	r0, [pc, #120]	; (8002d38 <motors+0x13c8>)
 8002cbe:	f001 f814 	bl	8003cea <HAL_GPIO_TogglePin>
			}

			osDelay(10);
 8002cc2:	200a      	movs	r0, #10
 8002cc4:	f005 fa98 	bl	80081f8 <osDelay>
			dequeue(&q);
 8002cc8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7fe fd9e 	bl	800180e <dequeue>
 8002cd2:	f7fe bee2 	b.w	8001a9a <motors+0x12a>

		}	// ENDIF Queue not empty

		// Queue empty
		else {
			reset_motorVal();	//Reset the values
 8002cd6:	f7fe fd43 	bl	8001760 <reset_motorVal>
			pwmVal_motor = 0;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

			htim1.Instance->CCR4 = pwmVal_servo;	// Reset Servo values
 8002ce0:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <motors+0x13a8>)
 8002ce2:	881a      	ldrh	r2, [r3, #0]
 8002ce4:	4b0d      	ldr	r3, [pc, #52]	; (8002d1c <motors+0x13ac>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	641a      	str	r2, [r3, #64]	; 0x40

			// Stop motor
			__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmVal_motor);
 8002cea:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <motors+0x13a4>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8002cf2:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmVal_motor);
 8002cf4:	4b07      	ldr	r3, [pc, #28]	; (8002d14 <motors+0x13a4>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8002cfc:	639a      	str	r2, [r3, #56]	; 0x38
		if (isEmptyQueue(q) != 1) {
 8002cfe:	f7fe becc 	b.w	8001a9a <motors+0x12a>
 8002d02:	bf00      	nop
 8002d04:	f3af 8000 	nop.w
 8002d08:	cccccccd 	.word	0xcccccccd
 8002d0c:	3feccccc 	.word	0x3feccccc
 8002d10:	200002e0 	.word	0x200002e0
 8002d14:	20000208 	.word	0x20000208
 8002d18:	20000004 	.word	0x20000004
 8002d1c:	200000e8 	.word	0x200000e8
 8002d20:	200002f0 	.word	0x200002f0
 8002d24:	40020000 	.word	0x40020000
 8002d28:	20000000 	.word	0x20000000
 8002d2c:	20000012 	.word	0x20000012
 8002d30:	20000010 	.word	0x20000010
 8002d34:	20000250 	.word	0x20000250
 8002d38:	40021000 	.word	0x40021000

08002d3c <encoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder */
void encoder(void *argument)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08c      	sub	sp, #48	; 0x30
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder */

  //Initializes Timer 2 to start counting pulses from encoder on input channels
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002d44:	213c      	movs	r1, #60	; 0x3c
 8002d46:	483a      	ldr	r0, [pc, #232]	; (8002e30 <encoder+0xf4>)
 8002d48:	f002 fff2 	bl	8005d30 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8002d4c:	213c      	movs	r1, #60	; 0x3c
 8002d4e:	4839      	ldr	r0, [pc, #228]	; (8002e34 <encoder+0xf8>)
 8002d50:	f002 ffee 	bl	8005d30 <HAL_TIM_Encoder_Start>

  //Store encoder counts at different times
  int cnt1, cnt3;
  //hold difference in encoder counts, used to calculate speed
  int diffa=0, diffb=0;
 8002d54:	2300      	movs	r3, #0
 8002d56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d58:	2300      	movs	r3, #0
 8002d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t tick;
  //format strings for OLED
  uint8_t msg[20];

  //obtain current system time in ms
  tick = HAL_GetTick();
 8002d5c:	f000 fc3c 	bl	80035d8 <HAL_GetTick>
 8002d60:	6278      	str	r0, [r7, #36]	; 0x24
  /* Infinite loop */
  //checks encoder's position and calculating speed based on position change over time
  for(;;)
  {
		// Every 1000 ticks, get reading(How fast wheel turn)
		if(HAL_GetTick()-tick > 10){
 8002d62:	f000 fc39 	bl	80035d8 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b0a      	cmp	r3, #10
 8002d6e:	d9f8      	bls.n	8002d62 <encoder+0x26>

			// At rising edge, counter increase by 1
			cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8002d70:	4b2f      	ldr	r3, [pc, #188]	; (8002e30 <encoder+0xf4>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	623b      	str	r3, [r7, #32]
			cnt3 = __HAL_TIM_GET_COUNTER(&htim3);
 8002d78:	4b2e      	ldr	r3, [pc, #184]	; (8002e34 <encoder+0xf8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	61fb      	str	r3, [r7, #28]

			/* Motor A */
			// Counting up; Motor moving forward
			// 32500 is the max tick
			if (cnt1 - 32500 > 0) {
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	f647 62f4 	movw	r2, #32500	; 0x7ef4
 8002d86:	4293      	cmp	r3, r2
 8002d88:	dd05      	ble.n	8002d96 <encoder+0x5a>
				diffa = cnt1 - 65535;
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8002d90:	3bff      	subs	r3, #255	; 0xff
 8002d92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d94:	e006      	b.n	8002da4 <encoder+0x68>
			}
			// Counting down; Motor moving backward
			else if (cnt1 - 32500 < 0) {
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	f647 62f3 	movw	r2, #32499	; 0x7ef3
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	dc01      	bgt.n	8002da4 <encoder+0x68>
				diffa = cnt1;
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	62fb      	str	r3, [r7, #44]	; 0x2c
			}

			/* Motor B */
			// Counting up; Motor moving backward
			if (cnt3 - 32500 > 0) {
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f647 62f4 	movw	r2, #32500	; 0x7ef4
 8002daa:	4293      	cmp	r3, r2
 8002dac:	dd05      	ble.n	8002dba <encoder+0x7e>
				diffb = (cnt3 - 65535);
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8002db4:	3bff      	subs	r3, #255	; 0xff
 8002db6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002db8:	e006      	b.n	8002dc8 <encoder+0x8c>
			}
			// Counting down; Motor moving forward
			else if (cnt3 - 32500 < 0) {
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	f647 62f3 	movw	r2, #32499	; 0x7ef3
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	dc01      	bgt.n	8002dc8 <encoder+0x8c>
				diffb = cnt3;
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			encoder_error = diffa + diffb;
 8002dc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dcc:	4413      	add	r3, r2
 8002dce:	4a1a      	ldr	r2, [pc, #104]	; (8002e38 <encoder+0xfc>)
 8002dd0:	6013      	str	r3, [r2, #0]
			// Updating of total distance
			encoder_dist += (abs(diffa) + abs(diffb));
 8002dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002dd8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	bfb8      	it	lt
 8002de2:	425b      	neglt	r3, r3
 8002de4:	4413      	add	r3, r2
 8002de6:	461a      	mov	r2, r3
 8002de8:	4b14      	ldr	r3, [pc, #80]	; (8002e3c <encoder+0x100>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4413      	add	r3, r2
 8002dee:	4a13      	ldr	r2, [pc, #76]	; (8002e3c <encoder+0x100>)
 8002df0:	6013      	str	r3, [r2, #0]

			//sprintf(msg, "Diff:%3d\0", encoder_error);
			//OLED_ShowString(10, 30, msg);

			//Distance (meters)= (PPR×Gear Ratio/Encoder Counts)*Wheel Circumference (meters)
			sprintf(msg, "Dist:%3d\0", encoder_dist);
 8002df2:	4b12      	ldr	r3, [pc, #72]	; (8002e3c <encoder+0x100>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	f107 0308 	add.w	r3, r7, #8
 8002dfa:	4911      	ldr	r1, [pc, #68]	; (8002e40 <encoder+0x104>)
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f008 fab1 	bl	800b364 <siprintf>
			OLED_ShowString(10, 40, msg);
 8002e02:	f107 0308 	add.w	r3, r7, #8
 8002e06:	461a      	mov	r2, r3
 8002e08:	2128      	movs	r1, #40	; 0x28
 8002e0a:	200a      	movs	r0, #10
 8002e0c:	f008 f930 	bl	800b070 <OLED_ShowString>

			// Reset base tick
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002e10:	4b07      	ldr	r3, [pc, #28]	; (8002e30 <encoder+0xf4>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2200      	movs	r2, #0
 8002e16:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8002e18:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <encoder+0xf8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	625a      	str	r2, [r3, #36]	; 0x24

			tick = HAL_GetTick();
 8002e20:	f000 fbda 	bl	80035d8 <HAL_GetTick>
 8002e24:	6278      	str	r0, [r7, #36]	; 0x24

			osDelay(10);
 8002e26:	200a      	movs	r0, #10
 8002e28:	f005 f9e6 	bl	80081f8 <osDelay>
		if(HAL_GetTick()-tick > 10){
 8002e2c:	e799      	b.n	8002d62 <encoder+0x26>
 8002e2e:	bf00      	nop
 8002e30:	20000130 	.word	0x20000130
 8002e34:	20000178 	.word	0x20000178
 8002e38:	200002ec 	.word	0x200002ec
 8002e3c:	200002f0 	.word	0x200002f0
 8002e40:	0800bbcc 	.word	0x0800bbcc
 8002e44:	00000000 	.word	0x00000000

08002e48 <gryo_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_gryo_task */
void gryo_task(void *argument)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b088      	sub	sp, #32
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN gyro_task */
	/* Infinite loop */
	uint8_t val[2] = { 0, 0 }; // To store ICM gyro values
 8002e50:	2300      	movs	r3, #0
 8002e52:	82bb      	strh	r3, [r7, #20]
	gyroInit();
 8002e54:	f007 ff04 	bl	800ac60 <gyroInit>
	int16_t angular_speed = 0;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	83fb      	strh	r3, [r7, #30]
	int16_t angle = 0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	83bb      	strh	r3, [r7, #28]

	curAngle = 0;
 8002e60:	492d      	ldr	r1, [pc, #180]	; (8002f18 <gryo_task+0xd0>)
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	f04f 0300 	mov.w	r3, #0
 8002e6a:	e9c1 2300 	strd	r2, r3, [r1]
	uint32_t tick = HAL_GetTick();
 8002e6e:	f000 fbb3 	bl	80035d8 <HAL_GetTick>
 8002e72:	61b8      	str	r0, [r7, #24]
	osDelay(100);
 8002e74:	2064      	movs	r0, #100	; 0x64
 8002e76:	f005 f9bf 	bl	80081f8 <osDelay>
	for (;;) {
		uint8_t msg[8];
		readByte(0x37, val);
 8002e7a:	f107 0314 	add.w	r3, r7, #20
 8002e7e:	4619      	mov	r1, r3
 8002e80:	2037      	movs	r0, #55	; 0x37
 8002e82:	f007 ff31 	bl	800ace8 <readByte>
		angular_speed = (val[0] << 8) | val[1];	// appending the 2 bytes together
 8002e86:	7d3b      	ldrb	r3, [r7, #20]
 8002e88:	021b      	lsls	r3, r3, #8
 8002e8a:	b21a      	sxth	r2, r3
 8002e8c:	7d7b      	ldrb	r3, [r7, #21]
 8002e8e:	b21b      	sxth	r3, r3
 8002e90:	4313      	orrs	r3, r2
 8002e92:	83fb      	strh	r3, [r7, #30]
		angle = ((double) (angular_speed * (100)) / 10000.0); //1.69
 8002e94:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002e98:	2264      	movs	r2, #100	; 0x64
 8002e9a:	fb02 f303 	mul.w	r3, r2, r3
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fd fb38 	bl	8000514 <__aeabi_i2d>
 8002ea4:	a31a      	add	r3, pc, #104	; (adr r3, 8002f10 <gryo_task+0xc8>)
 8002ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eaa:	f7fd fcc7 	bl	800083c <__aeabi_ddiv>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	f7fd fe31 	bl	8000b1c <__aeabi_d2iz>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	83bb      	strh	r3, [r7, #28]

		curAngle += angle;
 8002ebe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7fd fb26 	bl	8000514 <__aeabi_i2d>
 8002ec8:	4b13      	ldr	r3, [pc, #76]	; (8002f18 <gryo_task+0xd0>)
 8002eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ece:	f7fd f9d5 	bl	800027c <__adddf3>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	4910      	ldr	r1, [pc, #64]	; (8002f18 <gryo_task+0xd0>)
 8002ed8:	e9c1 2300 	strd	r2, r3, [r1]

		sprintf(msg, "gyro : %3d\0", (int) curAngle);
 8002edc:	4b0e      	ldr	r3, [pc, #56]	; (8002f18 <gryo_task+0xd0>)
 8002ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee2:	4610      	mov	r0, r2
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	f7fd fe19 	bl	8000b1c <__aeabi_d2iz>
 8002eea:	4602      	mov	r2, r0
 8002eec:	f107 030c 	add.w	r3, r7, #12
 8002ef0:	490a      	ldr	r1, [pc, #40]	; (8002f1c <gryo_task+0xd4>)
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f008 fa36 	bl	800b364 <siprintf>
		OLED_ShowString(10, 20, msg);
 8002ef8:	f107 030c 	add.w	r3, r7, #12
 8002efc:	461a      	mov	r2, r3
 8002efe:	2114      	movs	r1, #20
 8002f00:	200a      	movs	r0, #10
 8002f02:	f008 f8b5 	bl	800b070 <OLED_ShowString>

		osDelay(100);
 8002f06:	2064      	movs	r0, #100	; 0x64
 8002f08:	f005 f976 	bl	80081f8 <osDelay>
	for (;;) {
 8002f0c:	e7b5      	b.n	8002e7a <gryo_task+0x32>
 8002f0e:	bf00      	nop
 8002f10:	00000000 	.word	0x00000000
 8002f14:	40c38800 	.word	0x40c38800
 8002f18:	200002e0 	.word	0x200002e0
 8002f1c:	0800bbd8 	.word	0x0800bbd8

08002f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f24:	b672      	cpsid	i
}
 8002f26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f28:	e7fe      	b.n	8002f28 <Error_Handler+0x8>
	...

08002f2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f32:	2300      	movs	r3, #0
 8002f34:	607b      	str	r3, [r7, #4]
 8002f36:	4b12      	ldr	r3, [pc, #72]	; (8002f80 <HAL_MspInit+0x54>)
 8002f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3a:	4a11      	ldr	r2, [pc, #68]	; (8002f80 <HAL_MspInit+0x54>)
 8002f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f40:	6453      	str	r3, [r2, #68]	; 0x44
 8002f42:	4b0f      	ldr	r3, [pc, #60]	; (8002f80 <HAL_MspInit+0x54>)
 8002f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f4a:	607b      	str	r3, [r7, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	603b      	str	r3, [r7, #0]
 8002f52:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <HAL_MspInit+0x54>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	4a0a      	ldr	r2, [pc, #40]	; (8002f80 <HAL_MspInit+0x54>)
 8002f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f5e:	4b08      	ldr	r3, [pc, #32]	; (8002f80 <HAL_MspInit+0x54>)
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	210f      	movs	r1, #15
 8002f6e:	f06f 0001 	mvn.w	r0, #1
 8002f72:	f000 fc3c 	bl	80037ee <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f76:	bf00      	nop
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40023800 	.word	0x40023800

08002f84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08a      	sub	sp, #40	; 0x28
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f8c:	f107 0314 	add.w	r3, r7, #20
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	60da      	str	r2, [r3, #12]
 8002f9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a19      	ldr	r2, [pc, #100]	; (8003008 <HAL_I2C_MspInit+0x84>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d12c      	bne.n	8003000 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	4b18      	ldr	r3, [pc, #96]	; (800300c <HAL_I2C_MspInit+0x88>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	4a17      	ldr	r2, [pc, #92]	; (800300c <HAL_I2C_MspInit+0x88>)
 8002fb0:	f043 0302 	orr.w	r3, r3, #2
 8002fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb6:	4b15      	ldr	r3, [pc, #84]	; (800300c <HAL_I2C_MspInit+0x88>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002fc2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fc8:	2312      	movs	r3, #18
 8002fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002fd4:	2304      	movs	r3, #4
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fd8:	f107 0314 	add.w	r3, r7, #20
 8002fdc:	4619      	mov	r1, r3
 8002fde:	480c      	ldr	r0, [pc, #48]	; (8003010 <HAL_I2C_MspInit+0x8c>)
 8002fe0:	f000 fcce 	bl	8003980 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	4b08      	ldr	r3, [pc, #32]	; (800300c <HAL_I2C_MspInit+0x88>)
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	4a07      	ldr	r2, [pc, #28]	; (800300c <HAL_I2C_MspInit+0x88>)
 8002fee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ff2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff4:	4b05      	ldr	r3, [pc, #20]	; (800300c <HAL_I2C_MspInit+0x88>)
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003000:	bf00      	nop
 8003002:	3728      	adds	r7, #40	; 0x28
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40005400 	.word	0x40005400
 800300c:	40023800 	.word	0x40023800
 8003010:	40020400 	.word	0x40020400

08003014 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08a      	sub	sp, #40	; 0x28
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800301c:	f107 0314 	add.w	r3, r7, #20
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	605a      	str	r2, [r3, #4]
 8003026:	609a      	str	r2, [r3, #8]
 8003028:	60da      	str	r2, [r3, #12]
 800302a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a23      	ldr	r2, [pc, #140]	; (80030c0 <HAL_TIM_Base_MspInit+0xac>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d10e      	bne.n	8003054 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003036:	2300      	movs	r3, #0
 8003038:	613b      	str	r3, [r7, #16]
 800303a:	4b22      	ldr	r3, [pc, #136]	; (80030c4 <HAL_TIM_Base_MspInit+0xb0>)
 800303c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303e:	4a21      	ldr	r2, [pc, #132]	; (80030c4 <HAL_TIM_Base_MspInit+0xb0>)
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	6453      	str	r3, [r2, #68]	; 0x44
 8003046:	4b1f      	ldr	r3, [pc, #124]	; (80030c4 <HAL_TIM_Base_MspInit+0xb0>)
 8003048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	613b      	str	r3, [r7, #16]
 8003050:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003052:	e030      	b.n	80030b6 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM8)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a1b      	ldr	r2, [pc, #108]	; (80030c8 <HAL_TIM_Base_MspInit+0xb4>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d12b      	bne.n	80030b6 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800305e:	2300      	movs	r3, #0
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	4b18      	ldr	r3, [pc, #96]	; (80030c4 <HAL_TIM_Base_MspInit+0xb0>)
 8003064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003066:	4a17      	ldr	r2, [pc, #92]	; (80030c4 <HAL_TIM_Base_MspInit+0xb0>)
 8003068:	f043 0302 	orr.w	r3, r3, #2
 800306c:	6453      	str	r3, [r2, #68]	; 0x44
 800306e:	4b15      	ldr	r3, [pc, #84]	; (80030c4 <HAL_TIM_Base_MspInit+0xb0>)
 8003070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800307a:	2300      	movs	r3, #0
 800307c:	60bb      	str	r3, [r7, #8]
 800307e:	4b11      	ldr	r3, [pc, #68]	; (80030c4 <HAL_TIM_Base_MspInit+0xb0>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003082:	4a10      	ldr	r2, [pc, #64]	; (80030c4 <HAL_TIM_Base_MspInit+0xb0>)
 8003084:	f043 0304 	orr.w	r3, r3, #4
 8003088:	6313      	str	r3, [r2, #48]	; 0x30
 800308a:	4b0e      	ldr	r3, [pc, #56]	; (80030c4 <HAL_TIM_Base_MspInit+0xb0>)
 800308c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308e:	f003 0304 	and.w	r3, r3, #4
 8003092:	60bb      	str	r3, [r7, #8]
 8003094:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8003096:	23c0      	movs	r3, #192	; 0xc0
 8003098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309a:	2302      	movs	r3, #2
 800309c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a2:	2300      	movs	r3, #0
 80030a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80030a6:	2303      	movs	r3, #3
 80030a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030aa:	f107 0314 	add.w	r3, r7, #20
 80030ae:	4619      	mov	r1, r3
 80030b0:	4806      	ldr	r0, [pc, #24]	; (80030cc <HAL_TIM_Base_MspInit+0xb8>)
 80030b2:	f000 fc65 	bl	8003980 <HAL_GPIO_Init>
}
 80030b6:	bf00      	nop
 80030b8:	3728      	adds	r7, #40	; 0x28
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40010000 	.word	0x40010000
 80030c4:	40023800 	.word	0x40023800
 80030c8:	40010400 	.word	0x40010400
 80030cc:	40020800 	.word	0x40020800

080030d0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b08c      	sub	sp, #48	; 0x30
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d8:	f107 031c 	add.w	r3, r7, #28
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	605a      	str	r2, [r3, #4]
 80030e2:	609a      	str	r2, [r3, #8]
 80030e4:	60da      	str	r2, [r3, #12]
 80030e6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f0:	d14b      	bne.n	800318a <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	61bb      	str	r3, [r7, #24]
 80030f6:	4b3f      	ldr	r3, [pc, #252]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x124>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	4a3e      	ldr	r2, [pc, #248]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x124>)
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	6413      	str	r3, [r2, #64]	; 0x40
 8003102:	4b3c      	ldr	r3, [pc, #240]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	61bb      	str	r3, [r7, #24]
 800310c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	4b38      	ldr	r3, [pc, #224]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	4a37      	ldr	r2, [pc, #220]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	6313      	str	r3, [r2, #48]	; 0x30
 800311e:	4b35      	ldr	r3, [pc, #212]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	613b      	str	r3, [r7, #16]
 800312e:	4b31      	ldr	r3, [pc, #196]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	4a30      	ldr	r2, [pc, #192]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003134:	f043 0302 	orr.w	r3, r3, #2
 8003138:	6313      	str	r3, [r2, #48]	; 0x30
 800313a:	4b2e      	ldr	r3, [pc, #184]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x124>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	613b      	str	r3, [r7, #16]
 8003144:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800314a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314c:	2302      	movs	r3, #2
 800314e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003150:	2300      	movs	r3, #0
 8003152:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003154:	2300      	movs	r3, #0
 8003156:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003158:	2301      	movs	r3, #1
 800315a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800315c:	f107 031c 	add.w	r3, r7, #28
 8003160:	4619      	mov	r1, r3
 8003162:	4825      	ldr	r0, [pc, #148]	; (80031f8 <HAL_TIM_Encoder_MspInit+0x128>)
 8003164:	f000 fc0c 	bl	8003980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003168:	2308      	movs	r3, #8
 800316a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316c:	2302      	movs	r3, #2
 800316e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003170:	2300      	movs	r3, #0
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003174:	2300      	movs	r3, #0
 8003176:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003178:	2301      	movs	r3, #1
 800317a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800317c:	f107 031c 	add.w	r3, r7, #28
 8003180:	4619      	mov	r1, r3
 8003182:	481e      	ldr	r0, [pc, #120]	; (80031fc <HAL_TIM_Encoder_MspInit+0x12c>)
 8003184:	f000 fbfc 	bl	8003980 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003188:	e030      	b.n	80031ec <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a1c      	ldr	r2, [pc, #112]	; (8003200 <HAL_TIM_Encoder_MspInit+0x130>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d12b      	bne.n	80031ec <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003194:	2300      	movs	r3, #0
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	4b16      	ldr	r3, [pc, #88]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x124>)
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	4a15      	ldr	r2, [pc, #84]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x124>)
 800319e:	f043 0302 	orr.w	r3, r3, #2
 80031a2:	6413      	str	r3, [r2, #64]	; 0x40
 80031a4:	4b13      	ldr	r3, [pc, #76]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x124>)
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031b0:	2300      	movs	r3, #0
 80031b2:	60bb      	str	r3, [r7, #8]
 80031b4:	4b0f      	ldr	r3, [pc, #60]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x124>)
 80031b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b8:	4a0e      	ldr	r2, [pc, #56]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x124>)
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	6313      	str	r3, [r2, #48]	; 0x30
 80031c0:	4b0c      	ldr	r3, [pc, #48]	; (80031f4 <HAL_TIM_Encoder_MspInit+0x124>)
 80031c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	60bb      	str	r3, [r7, #8]
 80031ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80031cc:	23c0      	movs	r3, #192	; 0xc0
 80031ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d0:	2302      	movs	r3, #2
 80031d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d4:	2300      	movs	r3, #0
 80031d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d8:	2300      	movs	r3, #0
 80031da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031dc:	2302      	movs	r3, #2
 80031de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e0:	f107 031c 	add.w	r3, r7, #28
 80031e4:	4619      	mov	r1, r3
 80031e6:	4804      	ldr	r0, [pc, #16]	; (80031f8 <HAL_TIM_Encoder_MspInit+0x128>)
 80031e8:	f000 fbca 	bl	8003980 <HAL_GPIO_Init>
}
 80031ec:	bf00      	nop
 80031ee:	3730      	adds	r7, #48	; 0x30
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40023800 	.word	0x40023800
 80031f8:	40020000 	.word	0x40020000
 80031fc:	40020400 	.word	0x40020400
 8003200:	40000400 	.word	0x40000400

08003204 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08a      	sub	sp, #40	; 0x28
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800320c:	f107 0314 	add.w	r3, r7, #20
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	605a      	str	r2, [r3, #4]
 8003216:	609a      	str	r2, [r3, #8]
 8003218:	60da      	str	r2, [r3, #12]
 800321a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM5)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a1d      	ldr	r2, [pc, #116]	; (8003298 <HAL_TIM_IC_MspInit+0x94>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d133      	bne.n	800328e <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003226:	2300      	movs	r3, #0
 8003228:	613b      	str	r3, [r7, #16]
 800322a:	4b1c      	ldr	r3, [pc, #112]	; (800329c <HAL_TIM_IC_MspInit+0x98>)
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	4a1b      	ldr	r2, [pc, #108]	; (800329c <HAL_TIM_IC_MspInit+0x98>)
 8003230:	f043 0308 	orr.w	r3, r3, #8
 8003234:	6413      	str	r3, [r2, #64]	; 0x40
 8003236:	4b19      	ldr	r3, [pc, #100]	; (800329c <HAL_TIM_IC_MspInit+0x98>)
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003242:	2300      	movs	r3, #0
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	4b15      	ldr	r3, [pc, #84]	; (800329c <HAL_TIM_IC_MspInit+0x98>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	4a14      	ldr	r2, [pc, #80]	; (800329c <HAL_TIM_IC_MspInit+0x98>)
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	6313      	str	r3, [r2, #48]	; 0x30
 8003252:	4b12      	ldr	r3, [pc, #72]	; (800329c <HAL_TIM_IC_MspInit+0x98>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800325e:	2302      	movs	r3, #2
 8003260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003262:	2302      	movs	r3, #2
 8003264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003266:	2300      	movs	r3, #0
 8003268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800326a:	2300      	movs	r3, #0
 800326c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800326e:	2302      	movs	r3, #2
 8003270:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003272:	f107 0314 	add.w	r3, r7, #20
 8003276:	4619      	mov	r1, r3
 8003278:	4809      	ldr	r0, [pc, #36]	; (80032a0 <HAL_TIM_IC_MspInit+0x9c>)
 800327a:	f000 fb81 	bl	8003980 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 800327e:	2200      	movs	r2, #0
 8003280:	2105      	movs	r1, #5
 8003282:	2032      	movs	r0, #50	; 0x32
 8003284:	f000 fab3 	bl	80037ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003288:	2032      	movs	r0, #50	; 0x32
 800328a:	f000 facc 	bl	8003826 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800328e:	bf00      	nop
 8003290:	3728      	adds	r7, #40	; 0x28
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40000c00 	.word	0x40000c00
 800329c:	40023800 	.word	0x40023800
 80032a0:	40020000 	.word	0x40020000

080032a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b088      	sub	sp, #32
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ac:	f107 030c 	add.w	r3, r7, #12
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	605a      	str	r2, [r3, #4]
 80032b6:	609a      	str	r2, [r3, #8]
 80032b8:	60da      	str	r2, [r3, #12]
 80032ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a12      	ldr	r2, [pc, #72]	; (800330c <HAL_TIM_MspPostInit+0x68>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d11e      	bne.n	8003304 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80032c6:	2300      	movs	r3, #0
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	4b11      	ldr	r3, [pc, #68]	; (8003310 <HAL_TIM_MspPostInit+0x6c>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	4a10      	ldr	r2, [pc, #64]	; (8003310 <HAL_TIM_MspPostInit+0x6c>)
 80032d0:	f043 0310 	orr.w	r3, r3, #16
 80032d4:	6313      	str	r3, [r2, #48]	; 0x30
 80032d6:	4b0e      	ldr	r3, [pc, #56]	; (8003310 <HAL_TIM_MspPostInit+0x6c>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	f003 0310 	and.w	r3, r3, #16
 80032de:	60bb      	str	r3, [r7, #8]
 80032e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80032e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80032e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e8:	2302      	movs	r3, #2
 80032ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ec:	2300      	movs	r3, #0
 80032ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f0:	2300      	movs	r3, #0
 80032f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80032f4:	2301      	movs	r3, #1
 80032f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032f8:	f107 030c 	add.w	r3, r7, #12
 80032fc:	4619      	mov	r1, r3
 80032fe:	4805      	ldr	r0, [pc, #20]	; (8003314 <HAL_TIM_MspPostInit+0x70>)
 8003300:	f000 fb3e 	bl	8003980 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003304:	bf00      	nop
 8003306:	3720      	adds	r7, #32
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40010000 	.word	0x40010000
 8003310:	40023800 	.word	0x40023800
 8003314:	40021000 	.word	0x40021000

08003318 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b08a      	sub	sp, #40	; 0x28
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003320:	f107 0314 	add.w	r3, r7, #20
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	605a      	str	r2, [r3, #4]
 800332a:	609a      	str	r2, [r3, #8]
 800332c:	60da      	str	r2, [r3, #12]
 800332e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a1d      	ldr	r2, [pc, #116]	; (80033ac <HAL_UART_MspInit+0x94>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d134      	bne.n	80033a4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800333a:	2300      	movs	r3, #0
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	4b1c      	ldr	r3, [pc, #112]	; (80033b0 <HAL_UART_MspInit+0x98>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	4a1b      	ldr	r2, [pc, #108]	; (80033b0 <HAL_UART_MspInit+0x98>)
 8003344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003348:	6413      	str	r3, [r2, #64]	; 0x40
 800334a:	4b19      	ldr	r3, [pc, #100]	; (80033b0 <HAL_UART_MspInit+0x98>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003352:	613b      	str	r3, [r7, #16]
 8003354:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	60fb      	str	r3, [r7, #12]
 800335a:	4b15      	ldr	r3, [pc, #84]	; (80033b0 <HAL_UART_MspInit+0x98>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	4a14      	ldr	r2, [pc, #80]	; (80033b0 <HAL_UART_MspInit+0x98>)
 8003360:	f043 0304 	orr.w	r3, r3, #4
 8003364:	6313      	str	r3, [r2, #48]	; 0x30
 8003366:	4b12      	ldr	r3, [pc, #72]	; (80033b0 <HAL_UART_MspInit+0x98>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003372:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003378:	2302      	movs	r3, #2
 800337a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337c:	2300      	movs	r3, #0
 800337e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003380:	2303      	movs	r3, #3
 8003382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003384:	2307      	movs	r3, #7
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003388:	f107 0314 	add.w	r3, r7, #20
 800338c:	4619      	mov	r1, r3
 800338e:	4809      	ldr	r0, [pc, #36]	; (80033b4 <HAL_UART_MspInit+0x9c>)
 8003390:	f000 faf6 	bl	8003980 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003394:	2200      	movs	r2, #0
 8003396:	2105      	movs	r1, #5
 8003398:	2027      	movs	r0, #39	; 0x27
 800339a:	f000 fa28 	bl	80037ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800339e:	2027      	movs	r0, #39	; 0x27
 80033a0:	f000 fa41 	bl	8003826 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80033a4:	bf00      	nop
 80033a6:	3728      	adds	r7, #40	; 0x28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40004800 	.word	0x40004800
 80033b0:	40023800 	.word	0x40023800
 80033b4:	40020800 	.word	0x40020800

080033b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80033bc:	e7fe      	b.n	80033bc <NMI_Handler+0x4>

080033be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033be:	b480      	push	{r7}
 80033c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033c2:	e7fe      	b.n	80033c2 <HardFault_Handler+0x4>

080033c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033c8:	e7fe      	b.n	80033c8 <MemManage_Handler+0x4>

080033ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033ca:	b480      	push	{r7}
 80033cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033ce:	e7fe      	b.n	80033ce <BusFault_Handler+0x4>

080033d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033d4:	e7fe      	b.n	80033d4 <UsageFault_Handler+0x4>

080033d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033d6:	b480      	push	{r7}
 80033d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033da:	bf00      	nop
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033e8:	f000 f8e2 	bl	80035b0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80033ec:	f006 fbbc 	bl	8009b68 <xTaskGetSchedulerState>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d001      	beq.n	80033fa <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80033f6:	f007 f9a7 	bl	800a748 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033fa:	bf00      	nop
 80033fc:	bd80      	pop	{r7, pc}
	...

08003400 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003404:	4802      	ldr	r0, [pc, #8]	; (8003410 <USART3_IRQHandler+0x10>)
 8003406:	f003 fe91 	bl	800712c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800340a:	bf00      	nop
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	20000250 	.word	0x20000250

08003414 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003418:	4802      	ldr	r0, [pc, #8]	; (8003424 <TIM5_IRQHandler+0x10>)
 800341a:	f002 fd17 	bl	8005e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800341e:	bf00      	nop
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	200001c0 	.word	0x200001c0

08003428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003430:	4a14      	ldr	r2, [pc, #80]	; (8003484 <_sbrk+0x5c>)
 8003432:	4b15      	ldr	r3, [pc, #84]	; (8003488 <_sbrk+0x60>)
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800343c:	4b13      	ldr	r3, [pc, #76]	; (800348c <_sbrk+0x64>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d102      	bne.n	800344a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003444:	4b11      	ldr	r3, [pc, #68]	; (800348c <_sbrk+0x64>)
 8003446:	4a12      	ldr	r2, [pc, #72]	; (8003490 <_sbrk+0x68>)
 8003448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800344a:	4b10      	ldr	r3, [pc, #64]	; (800348c <_sbrk+0x64>)
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4413      	add	r3, r2
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	429a      	cmp	r2, r3
 8003456:	d207      	bcs.n	8003468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003458:	f007 ffbc 	bl	800b3d4 <__errno>
 800345c:	4603      	mov	r3, r0
 800345e:	220c      	movs	r2, #12
 8003460:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003462:	f04f 33ff 	mov.w	r3, #4294967295
 8003466:	e009      	b.n	800347c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003468:	4b08      	ldr	r3, [pc, #32]	; (800348c <_sbrk+0x64>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800346e:	4b07      	ldr	r3, [pc, #28]	; (800348c <_sbrk+0x64>)
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4413      	add	r3, r2
 8003476:	4a05      	ldr	r2, [pc, #20]	; (800348c <_sbrk+0x64>)
 8003478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800347a:	68fb      	ldr	r3, [r7, #12]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3718      	adds	r7, #24
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	20020000 	.word	0x20020000
 8003488:	00000400 	.word	0x00000400
 800348c:	200002f4 	.word	0x200002f4
 8003490:	200051a8 	.word	0x200051a8

08003494 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003498:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <SystemInit+0x20>)
 800349a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349e:	4a05      	ldr	r2, [pc, #20]	; (80034b4 <SystemInit+0x20>)
 80034a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034a8:	bf00      	nop
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	e000ed00 	.word	0xe000ed00

080034b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80034b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80034bc:	f7ff ffea 	bl	8003494 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80034c0:	480c      	ldr	r0, [pc, #48]	; (80034f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80034c2:	490d      	ldr	r1, [pc, #52]	; (80034f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80034c4:	4a0d      	ldr	r2, [pc, #52]	; (80034fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80034c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034c8:	e002      	b.n	80034d0 <LoopCopyDataInit>

080034ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034ce:	3304      	adds	r3, #4

080034d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034d4:	d3f9      	bcc.n	80034ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034d6:	4a0a      	ldr	r2, [pc, #40]	; (8003500 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80034d8:	4c0a      	ldr	r4, [pc, #40]	; (8003504 <LoopFillZerobss+0x22>)
  movs r3, #0
 80034da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034dc:	e001      	b.n	80034e2 <LoopFillZerobss>

080034de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034e0:	3204      	adds	r2, #4

080034e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034e4:	d3fb      	bcc.n	80034de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80034e6:	f007 ff7b 	bl	800b3e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034ea:	f7fd fd17 	bl	8000f1c <main>
  bx  lr    
 80034ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80034f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80034f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034f8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80034fc:	0800c770 	.word	0x0800c770
  ldr r2, =_sbss
 8003500:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003504:	200051a8 	.word	0x200051a8

08003508 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003508:	e7fe      	b.n	8003508 <ADC_IRQHandler>
	...

0800350c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003510:	4b0e      	ldr	r3, [pc, #56]	; (800354c <HAL_Init+0x40>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a0d      	ldr	r2, [pc, #52]	; (800354c <HAL_Init+0x40>)
 8003516:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800351a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800351c:	4b0b      	ldr	r3, [pc, #44]	; (800354c <HAL_Init+0x40>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a0a      	ldr	r2, [pc, #40]	; (800354c <HAL_Init+0x40>)
 8003522:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003526:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003528:	4b08      	ldr	r3, [pc, #32]	; (800354c <HAL_Init+0x40>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a07      	ldr	r2, [pc, #28]	; (800354c <HAL_Init+0x40>)
 800352e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003532:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003534:	2003      	movs	r0, #3
 8003536:	f000 f94f 	bl	80037d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800353a:	200f      	movs	r0, #15
 800353c:	f000 f808 	bl	8003550 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003540:	f7ff fcf4 	bl	8002f2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40023c00 	.word	0x40023c00

08003550 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003558:	4b12      	ldr	r3, [pc, #72]	; (80035a4 <HAL_InitTick+0x54>)
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	4b12      	ldr	r3, [pc, #72]	; (80035a8 <HAL_InitTick+0x58>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	4619      	mov	r1, r3
 8003562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003566:	fbb3 f3f1 	udiv	r3, r3, r1
 800356a:	fbb2 f3f3 	udiv	r3, r2, r3
 800356e:	4618      	mov	r0, r3
 8003570:	f000 f967 	bl	8003842 <HAL_SYSTICK_Config>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e00e      	b.n	800359c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b0f      	cmp	r3, #15
 8003582:	d80a      	bhi.n	800359a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003584:	2200      	movs	r2, #0
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	f04f 30ff 	mov.w	r0, #4294967295
 800358c:	f000 f92f 	bl	80037ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003590:	4a06      	ldr	r2, [pc, #24]	; (80035ac <HAL_InitTick+0x5c>)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003596:	2300      	movs	r3, #0
 8003598:	e000      	b.n	800359c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
}
 800359c:	4618      	mov	r0, r3
 800359e:	3708      	adds	r7, #8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	20000014 	.word	0x20000014
 80035a8:	2000001c 	.word	0x2000001c
 80035ac:	20000018 	.word	0x20000018

080035b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035b4:	4b06      	ldr	r3, [pc, #24]	; (80035d0 <HAL_IncTick+0x20>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	461a      	mov	r2, r3
 80035ba:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <HAL_IncTick+0x24>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4413      	add	r3, r2
 80035c0:	4a04      	ldr	r2, [pc, #16]	; (80035d4 <HAL_IncTick+0x24>)
 80035c2:	6013      	str	r3, [r2, #0]
}
 80035c4:	bf00      	nop
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	2000001c 	.word	0x2000001c
 80035d4:	200002f8 	.word	0x200002f8

080035d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  return uwTick;
 80035dc:	4b03      	ldr	r3, [pc, #12]	; (80035ec <HAL_GetTick+0x14>)
 80035de:	681b      	ldr	r3, [r3, #0]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	200002f8 	.word	0x200002f8

080035f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035f8:	f7ff ffee 	bl	80035d8 <HAL_GetTick>
 80035fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003608:	d005      	beq.n	8003616 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800360a:	4b0a      	ldr	r3, [pc, #40]	; (8003634 <HAL_Delay+0x44>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	461a      	mov	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4413      	add	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003616:	bf00      	nop
 8003618:	f7ff ffde 	bl	80035d8 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	429a      	cmp	r2, r3
 8003626:	d8f7      	bhi.n	8003618 <HAL_Delay+0x28>
  {
  }
}
 8003628:	bf00      	nop
 800362a:	bf00      	nop
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	2000001c 	.word	0x2000001c

08003638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003648:	4b0c      	ldr	r3, [pc, #48]	; (800367c <__NVIC_SetPriorityGrouping+0x44>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003654:	4013      	ands	r3, r2
 8003656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003660:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800366a:	4a04      	ldr	r2, [pc, #16]	; (800367c <__NVIC_SetPriorityGrouping+0x44>)
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	60d3      	str	r3, [r2, #12]
}
 8003670:	bf00      	nop
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	e000ed00 	.word	0xe000ed00

08003680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003684:	4b04      	ldr	r3, [pc, #16]	; (8003698 <__NVIC_GetPriorityGrouping+0x18>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	0a1b      	lsrs	r3, r3, #8
 800368a:	f003 0307 	and.w	r3, r3, #7
}
 800368e:	4618      	mov	r0, r3
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	e000ed00 	.word	0xe000ed00

0800369c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	db0b      	blt.n	80036c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ae:	79fb      	ldrb	r3, [r7, #7]
 80036b0:	f003 021f 	and.w	r2, r3, #31
 80036b4:	4907      	ldr	r1, [pc, #28]	; (80036d4 <__NVIC_EnableIRQ+0x38>)
 80036b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ba:	095b      	lsrs	r3, r3, #5
 80036bc:	2001      	movs	r0, #1
 80036be:	fa00 f202 	lsl.w	r2, r0, r2
 80036c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	e000e100 	.word	0xe000e100

080036d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4603      	mov	r3, r0
 80036e0:	6039      	str	r1, [r7, #0]
 80036e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	db0a      	blt.n	8003702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	490c      	ldr	r1, [pc, #48]	; (8003724 <__NVIC_SetPriority+0x4c>)
 80036f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f6:	0112      	lsls	r2, r2, #4
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	440b      	add	r3, r1
 80036fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003700:	e00a      	b.n	8003718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	b2da      	uxtb	r2, r3
 8003706:	4908      	ldr	r1, [pc, #32]	; (8003728 <__NVIC_SetPriority+0x50>)
 8003708:	79fb      	ldrb	r3, [r7, #7]
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	3b04      	subs	r3, #4
 8003710:	0112      	lsls	r2, r2, #4
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	440b      	add	r3, r1
 8003716:	761a      	strb	r2, [r3, #24]
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	e000e100 	.word	0xe000e100
 8003728:	e000ed00 	.word	0xe000ed00

0800372c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800372c:	b480      	push	{r7}
 800372e:	b089      	sub	sp, #36	; 0x24
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f003 0307 	and.w	r3, r3, #7
 800373e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	f1c3 0307 	rsb	r3, r3, #7
 8003746:	2b04      	cmp	r3, #4
 8003748:	bf28      	it	cs
 800374a:	2304      	movcs	r3, #4
 800374c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	3304      	adds	r3, #4
 8003752:	2b06      	cmp	r3, #6
 8003754:	d902      	bls.n	800375c <NVIC_EncodePriority+0x30>
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	3b03      	subs	r3, #3
 800375a:	e000      	b.n	800375e <NVIC_EncodePriority+0x32>
 800375c:	2300      	movs	r3, #0
 800375e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003760:	f04f 32ff 	mov.w	r2, #4294967295
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	43da      	mvns	r2, r3
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	401a      	ands	r2, r3
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003774:	f04f 31ff 	mov.w	r1, #4294967295
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	fa01 f303 	lsl.w	r3, r1, r3
 800377e:	43d9      	mvns	r1, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003784:	4313      	orrs	r3, r2
         );
}
 8003786:	4618      	mov	r0, r3
 8003788:	3724      	adds	r7, #36	; 0x24
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
	...

08003794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3b01      	subs	r3, #1
 80037a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037a4:	d301      	bcc.n	80037aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037a6:	2301      	movs	r3, #1
 80037a8:	e00f      	b.n	80037ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037aa:	4a0a      	ldr	r2, [pc, #40]	; (80037d4 <SysTick_Config+0x40>)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3b01      	subs	r3, #1
 80037b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037b2:	210f      	movs	r1, #15
 80037b4:	f04f 30ff 	mov.w	r0, #4294967295
 80037b8:	f7ff ff8e 	bl	80036d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037bc:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <SysTick_Config+0x40>)
 80037be:	2200      	movs	r2, #0
 80037c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037c2:	4b04      	ldr	r3, [pc, #16]	; (80037d4 <SysTick_Config+0x40>)
 80037c4:	2207      	movs	r2, #7
 80037c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	e000e010 	.word	0xe000e010

080037d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7ff ff29 	bl	8003638 <__NVIC_SetPriorityGrouping>
}
 80037e6:	bf00      	nop
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b086      	sub	sp, #24
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	4603      	mov	r3, r0
 80037f6:	60b9      	str	r1, [r7, #8]
 80037f8:	607a      	str	r2, [r7, #4]
 80037fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003800:	f7ff ff3e 	bl	8003680 <__NVIC_GetPriorityGrouping>
 8003804:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	68b9      	ldr	r1, [r7, #8]
 800380a:	6978      	ldr	r0, [r7, #20]
 800380c:	f7ff ff8e 	bl	800372c <NVIC_EncodePriority>
 8003810:	4602      	mov	r2, r0
 8003812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003816:	4611      	mov	r1, r2
 8003818:	4618      	mov	r0, r3
 800381a:	f7ff ff5d 	bl	80036d8 <__NVIC_SetPriority>
}
 800381e:	bf00      	nop
 8003820:	3718      	adds	r7, #24
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b082      	sub	sp, #8
 800382a:	af00      	add	r7, sp, #0
 800382c:	4603      	mov	r3, r0
 800382e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003834:	4618      	mov	r0, r3
 8003836:	f7ff ff31 	bl	800369c <__NVIC_EnableIRQ>
}
 800383a:	bf00      	nop
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b082      	sub	sp, #8
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7ff ffa2 	bl	8003794 <SysTick_Config>
 8003850:	4603      	mov	r3, r0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b084      	sub	sp, #16
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003866:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003868:	f7ff feb6 	bl	80035d8 <HAL_GetTick>
 800386c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d008      	beq.n	800388c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2280      	movs	r2, #128	; 0x80
 800387e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e052      	b.n	8003932 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0216 	bic.w	r2, r2, #22
 800389a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	695a      	ldr	r2, [r3, #20]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038aa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d103      	bne.n	80038bc <HAL_DMA_Abort+0x62>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d007      	beq.n	80038cc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 0208 	bic.w	r2, r2, #8
 80038ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0201 	bic.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038dc:	e013      	b.n	8003906 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038de:	f7ff fe7b 	bl	80035d8 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b05      	cmp	r3, #5
 80038ea:	d90c      	bls.n	8003906 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2220      	movs	r2, #32
 80038f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2203      	movs	r2, #3
 80038f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e015      	b.n	8003932 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1e4      	bne.n	80038de <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003918:	223f      	movs	r2, #63	; 0x3f
 800391a:	409a      	lsls	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d004      	beq.n	8003958 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2280      	movs	r2, #128	; 0x80
 8003952:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e00c      	b.n	8003972 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2205      	movs	r2, #5
 800395c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0201 	bic.w	r2, r2, #1
 800396e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
	...

08003980 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003980:	b480      	push	{r7}
 8003982:	b089      	sub	sp, #36	; 0x24
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800398a:	2300      	movs	r3, #0
 800398c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800398e:	2300      	movs	r3, #0
 8003990:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003992:	2300      	movs	r3, #0
 8003994:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003996:	2300      	movs	r3, #0
 8003998:	61fb      	str	r3, [r7, #28]
 800399a:	e16b      	b.n	8003c74 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800399c:	2201      	movs	r2, #1
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	4013      	ands	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	f040 815a 	bne.w	8003c6e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d005      	beq.n	80039d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d130      	bne.n	8003a34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	2203      	movs	r2, #3
 80039de:	fa02 f303 	lsl.w	r3, r2, r3
 80039e2:	43db      	mvns	r3, r3
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	4013      	ands	r3, r2
 80039e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	68da      	ldr	r2, [r3, #12]
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a08:	2201      	movs	r2, #1
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	43db      	mvns	r3, r3
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	4013      	ands	r3, r2
 8003a16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	091b      	lsrs	r3, r3, #4
 8003a1e:	f003 0201 	and.w	r2, r3, #1
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f003 0303 	and.w	r3, r3, #3
 8003a3c:	2b03      	cmp	r3, #3
 8003a3e:	d017      	beq.n	8003a70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	2203      	movs	r2, #3
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	43db      	mvns	r3, r3
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	4013      	ands	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f003 0303 	and.w	r3, r3, #3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d123      	bne.n	8003ac4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	08da      	lsrs	r2, r3, #3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3208      	adds	r2, #8
 8003a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	220f      	movs	r2, #15
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	f003 0307 	and.w	r3, r3, #7
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	08da      	lsrs	r2, r3, #3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3208      	adds	r2, #8
 8003abe:	69b9      	ldr	r1, [r7, #24]
 8003ac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	2203      	movs	r2, #3
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f003 0203 	and.w	r2, r3, #3
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 80b4 	beq.w	8003c6e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b06:	2300      	movs	r3, #0
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	4b60      	ldr	r3, [pc, #384]	; (8003c8c <HAL_GPIO_Init+0x30c>)
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0e:	4a5f      	ldr	r2, [pc, #380]	; (8003c8c <HAL_GPIO_Init+0x30c>)
 8003b10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b14:	6453      	str	r3, [r2, #68]	; 0x44
 8003b16:	4b5d      	ldr	r3, [pc, #372]	; (8003c8c <HAL_GPIO_Init+0x30c>)
 8003b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b22:	4a5b      	ldr	r2, [pc, #364]	; (8003c90 <HAL_GPIO_Init+0x310>)
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	089b      	lsrs	r3, r3, #2
 8003b28:	3302      	adds	r3, #2
 8003b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	220f      	movs	r2, #15
 8003b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3e:	43db      	mvns	r3, r3
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	4013      	ands	r3, r2
 8003b44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a52      	ldr	r2, [pc, #328]	; (8003c94 <HAL_GPIO_Init+0x314>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d02b      	beq.n	8003ba6 <HAL_GPIO_Init+0x226>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a51      	ldr	r2, [pc, #324]	; (8003c98 <HAL_GPIO_Init+0x318>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d025      	beq.n	8003ba2 <HAL_GPIO_Init+0x222>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a50      	ldr	r2, [pc, #320]	; (8003c9c <HAL_GPIO_Init+0x31c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d01f      	beq.n	8003b9e <HAL_GPIO_Init+0x21e>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a4f      	ldr	r2, [pc, #316]	; (8003ca0 <HAL_GPIO_Init+0x320>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d019      	beq.n	8003b9a <HAL_GPIO_Init+0x21a>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a4e      	ldr	r2, [pc, #312]	; (8003ca4 <HAL_GPIO_Init+0x324>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d013      	beq.n	8003b96 <HAL_GPIO_Init+0x216>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a4d      	ldr	r2, [pc, #308]	; (8003ca8 <HAL_GPIO_Init+0x328>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d00d      	beq.n	8003b92 <HAL_GPIO_Init+0x212>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a4c      	ldr	r2, [pc, #304]	; (8003cac <HAL_GPIO_Init+0x32c>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d007      	beq.n	8003b8e <HAL_GPIO_Init+0x20e>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a4b      	ldr	r2, [pc, #300]	; (8003cb0 <HAL_GPIO_Init+0x330>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d101      	bne.n	8003b8a <HAL_GPIO_Init+0x20a>
 8003b86:	2307      	movs	r3, #7
 8003b88:	e00e      	b.n	8003ba8 <HAL_GPIO_Init+0x228>
 8003b8a:	2308      	movs	r3, #8
 8003b8c:	e00c      	b.n	8003ba8 <HAL_GPIO_Init+0x228>
 8003b8e:	2306      	movs	r3, #6
 8003b90:	e00a      	b.n	8003ba8 <HAL_GPIO_Init+0x228>
 8003b92:	2305      	movs	r3, #5
 8003b94:	e008      	b.n	8003ba8 <HAL_GPIO_Init+0x228>
 8003b96:	2304      	movs	r3, #4
 8003b98:	e006      	b.n	8003ba8 <HAL_GPIO_Init+0x228>
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e004      	b.n	8003ba8 <HAL_GPIO_Init+0x228>
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	e002      	b.n	8003ba8 <HAL_GPIO_Init+0x228>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e000      	b.n	8003ba8 <HAL_GPIO_Init+0x228>
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	69fa      	ldr	r2, [r7, #28]
 8003baa:	f002 0203 	and.w	r2, r2, #3
 8003bae:	0092      	lsls	r2, r2, #2
 8003bb0:	4093      	lsls	r3, r2
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bb8:	4935      	ldr	r1, [pc, #212]	; (8003c90 <HAL_GPIO_Init+0x310>)
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	089b      	lsrs	r3, r3, #2
 8003bbe:	3302      	adds	r3, #2
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bc6:	4b3b      	ldr	r3, [pc, #236]	; (8003cb4 <HAL_GPIO_Init+0x334>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bea:	4a32      	ldr	r2, [pc, #200]	; (8003cb4 <HAL_GPIO_Init+0x334>)
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bf0:	4b30      	ldr	r3, [pc, #192]	; (8003cb4 <HAL_GPIO_Init+0x334>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d003      	beq.n	8003c14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c14:	4a27      	ldr	r2, [pc, #156]	; (8003cb4 <HAL_GPIO_Init+0x334>)
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c1a:	4b26      	ldr	r3, [pc, #152]	; (8003cb4 <HAL_GPIO_Init+0x334>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	43db      	mvns	r3, r3
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	4013      	ands	r3, r2
 8003c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c3e:	4a1d      	ldr	r2, [pc, #116]	; (8003cb4 <HAL_GPIO_Init+0x334>)
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c44:	4b1b      	ldr	r3, [pc, #108]	; (8003cb4 <HAL_GPIO_Init+0x334>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	4013      	ands	r3, r2
 8003c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d003      	beq.n	8003c68 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c68:	4a12      	ldr	r2, [pc, #72]	; (8003cb4 <HAL_GPIO_Init+0x334>)
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	3301      	adds	r3, #1
 8003c72:	61fb      	str	r3, [r7, #28]
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	2b0f      	cmp	r3, #15
 8003c78:	f67f ae90 	bls.w	800399c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c7c:	bf00      	nop
 8003c7e:	bf00      	nop
 8003c80:	3724      	adds	r7, #36	; 0x24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	40013800 	.word	0x40013800
 8003c94:	40020000 	.word	0x40020000
 8003c98:	40020400 	.word	0x40020400
 8003c9c:	40020800 	.word	0x40020800
 8003ca0:	40020c00 	.word	0x40020c00
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	40021400 	.word	0x40021400
 8003cac:	40021800 	.word	0x40021800
 8003cb0:	40021c00 	.word	0x40021c00
 8003cb4:	40013c00 	.word	0x40013c00

08003cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	807b      	strh	r3, [r7, #2]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cc8:	787b      	ldrb	r3, [r7, #1]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cce:	887a      	ldrh	r2, [r7, #2]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cd4:	e003      	b.n	8003cde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cd6:	887b      	ldrh	r3, [r7, #2]
 8003cd8:	041a      	lsls	r2, r3, #16
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	619a      	str	r2, [r3, #24]
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b085      	sub	sp, #20
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003cfc:	887a      	ldrh	r2, [r7, #2]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	4013      	ands	r3, r2
 8003d02:	041a      	lsls	r2, r3, #16
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	43d9      	mvns	r1, r3
 8003d08:	887b      	ldrh	r3, [r7, #2]
 8003d0a:	400b      	ands	r3, r1
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	619a      	str	r2, [r3, #24]
}
 8003d12:	bf00      	nop
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
	...

08003d20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e12b      	b.n	8003f8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d106      	bne.n	8003d4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7ff f91c 	bl	8002f84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2224      	movs	r2, #36	; 0x24
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0201 	bic.w	r2, r2, #1
 8003d62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d84:	f001 fc1e 	bl	80055c4 <HAL_RCC_GetPCLK1Freq>
 8003d88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	4a81      	ldr	r2, [pc, #516]	; (8003f94 <HAL_I2C_Init+0x274>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d807      	bhi.n	8003da4 <HAL_I2C_Init+0x84>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4a80      	ldr	r2, [pc, #512]	; (8003f98 <HAL_I2C_Init+0x278>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	bf94      	ite	ls
 8003d9c:	2301      	movls	r3, #1
 8003d9e:	2300      	movhi	r3, #0
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	e006      	b.n	8003db2 <HAL_I2C_Init+0x92>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4a7d      	ldr	r2, [pc, #500]	; (8003f9c <HAL_I2C_Init+0x27c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	bf94      	ite	ls
 8003dac:	2301      	movls	r3, #1
 8003dae:	2300      	movhi	r3, #0
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e0e7      	b.n	8003f8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	4a78      	ldr	r2, [pc, #480]	; (8003fa0 <HAL_I2C_Init+0x280>)
 8003dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc2:	0c9b      	lsrs	r3, r3, #18
 8003dc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	4a6a      	ldr	r2, [pc, #424]	; (8003f94 <HAL_I2C_Init+0x274>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d802      	bhi.n	8003df4 <HAL_I2C_Init+0xd4>
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	3301      	adds	r3, #1
 8003df2:	e009      	b.n	8003e08 <HAL_I2C_Init+0xe8>
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003dfa:	fb02 f303 	mul.w	r3, r2, r3
 8003dfe:	4a69      	ldr	r2, [pc, #420]	; (8003fa4 <HAL_I2C_Init+0x284>)
 8003e00:	fba2 2303 	umull	r2, r3, r2, r3
 8003e04:	099b      	lsrs	r3, r3, #6
 8003e06:	3301      	adds	r3, #1
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6812      	ldr	r2, [r2, #0]
 8003e0c:	430b      	orrs	r3, r1
 8003e0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	495c      	ldr	r1, [pc, #368]	; (8003f94 <HAL_I2C_Init+0x274>)
 8003e24:	428b      	cmp	r3, r1
 8003e26:	d819      	bhi.n	8003e5c <HAL_I2C_Init+0x13c>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	1e59      	subs	r1, r3, #1
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e36:	1c59      	adds	r1, r3, #1
 8003e38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e3c:	400b      	ands	r3, r1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <HAL_I2C_Init+0x138>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	1e59      	subs	r1, r3, #1
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e50:	3301      	adds	r3, #1
 8003e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e56:	e051      	b.n	8003efc <HAL_I2C_Init+0x1dc>
 8003e58:	2304      	movs	r3, #4
 8003e5a:	e04f      	b.n	8003efc <HAL_I2C_Init+0x1dc>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d111      	bne.n	8003e88 <HAL_I2C_Init+0x168>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	1e58      	subs	r0, r3, #1
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6859      	ldr	r1, [r3, #4]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	440b      	add	r3, r1
 8003e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e76:	3301      	adds	r3, #1
 8003e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	bf0c      	ite	eq
 8003e80:	2301      	moveq	r3, #1
 8003e82:	2300      	movne	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	e012      	b.n	8003eae <HAL_I2C_Init+0x18e>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	1e58      	subs	r0, r3, #1
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6859      	ldr	r1, [r3, #4]
 8003e90:	460b      	mov	r3, r1
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	440b      	add	r3, r1
 8003e96:	0099      	lsls	r1, r3, #2
 8003e98:	440b      	add	r3, r1
 8003e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	bf0c      	ite	eq
 8003ea8:	2301      	moveq	r3, #1
 8003eaa:	2300      	movne	r3, #0
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <HAL_I2C_Init+0x196>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e022      	b.n	8003efc <HAL_I2C_Init+0x1dc>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10e      	bne.n	8003edc <HAL_I2C_Init+0x1bc>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	1e58      	subs	r0, r3, #1
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6859      	ldr	r1, [r3, #4]
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	440b      	add	r3, r1
 8003ecc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eda:	e00f      	b.n	8003efc <HAL_I2C_Init+0x1dc>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	1e58      	subs	r0, r3, #1
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6859      	ldr	r1, [r3, #4]
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	440b      	add	r3, r1
 8003eea:	0099      	lsls	r1, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ef8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003efc:	6879      	ldr	r1, [r7, #4]
 8003efe:	6809      	ldr	r1, [r1, #0]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69da      	ldr	r2, [r3, #28]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	431a      	orrs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	6911      	ldr	r1, [r2, #16]
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	68d2      	ldr	r2, [r2, #12]
 8003f36:	4311      	orrs	r1, r2
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	6812      	ldr	r2, [r2, #0]
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	695a      	ldr	r2, [r3, #20]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f042 0201 	orr.w	r2, r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2220      	movs	r2, #32
 8003f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	000186a0 	.word	0x000186a0
 8003f98:	001e847f 	.word	0x001e847f
 8003f9c:	003d08ff 	.word	0x003d08ff
 8003fa0:	431bde83 	.word	0x431bde83
 8003fa4:	10624dd3 	.word	0x10624dd3

08003fa8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b088      	sub	sp, #32
 8003fac:	af02      	add	r7, sp, #8
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	607a      	str	r2, [r7, #4]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	817b      	strh	r3, [r7, #10]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fbc:	f7ff fb0c 	bl	80035d8 <HAL_GetTick>
 8003fc0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b20      	cmp	r3, #32
 8003fcc:	f040 80e0 	bne.w	8004190 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	2319      	movs	r3, #25
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	4970      	ldr	r1, [pc, #448]	; (800419c <HAL_I2C_Master_Transmit+0x1f4>)
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 fc64 	bl	80048a8 <I2C_WaitOnFlagUntilTimeout>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	e0d3      	b.n	8004192 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d101      	bne.n	8003ff8 <HAL_I2C_Master_Transmit+0x50>
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	e0cc      	b.n	8004192 <HAL_I2C_Master_Transmit+0x1ea>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b01      	cmp	r3, #1
 800400c:	d007      	beq.n	800401e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f042 0201 	orr.w	r2, r2, #1
 800401c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800402c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2221      	movs	r2, #33	; 0x21
 8004032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2210      	movs	r2, #16
 800403a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	893a      	ldrh	r2, [r7, #8]
 800404e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	4a50      	ldr	r2, [pc, #320]	; (80041a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800405e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004060:	8979      	ldrh	r1, [r7, #10]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	6a3a      	ldr	r2, [r7, #32]
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 face 	bl	8004608 <I2C_MasterRequestWrite>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e08d      	b.n	8004192 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004076:	2300      	movs	r3, #0
 8004078:	613b      	str	r3, [r7, #16]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	613b      	str	r3, [r7, #16]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	613b      	str	r3, [r7, #16]
 800408a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800408c:	e066      	b.n	800415c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	6a39      	ldr	r1, [r7, #32]
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f000 fd22 	bl	8004adc <I2C_WaitOnTXEFlagUntilTimeout>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00d      	beq.n	80040ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d107      	bne.n	80040b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e06b      	b.n	8004192 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	781a      	ldrb	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	1c5a      	adds	r2, r3, #1
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	3b01      	subs	r3, #1
 80040d8:	b29a      	uxth	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e2:	3b01      	subs	r3, #1
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b04      	cmp	r3, #4
 80040f6:	d11b      	bne.n	8004130 <HAL_I2C_Master_Transmit+0x188>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d017      	beq.n	8004130 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	781a      	ldrb	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800411a:	b29b      	uxth	r3, r3
 800411c:	3b01      	subs	r3, #1
 800411e:	b29a      	uxth	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	6a39      	ldr	r1, [r7, #32]
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 fd19 	bl	8004b6c <I2C_WaitOnBTFFlagUntilTimeout>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00d      	beq.n	800415c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004144:	2b04      	cmp	r3, #4
 8004146:	d107      	bne.n	8004158 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004156:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e01a      	b.n	8004192 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004160:	2b00      	cmp	r3, #0
 8004162:	d194      	bne.n	800408e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004172:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800418c:	2300      	movs	r3, #0
 800418e:	e000      	b.n	8004192 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004190:	2302      	movs	r3, #2
  }
}
 8004192:	4618      	mov	r0, r3
 8004194:	3718      	adds	r7, #24
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	00100002 	.word	0x00100002
 80041a0:	ffff0000 	.word	0xffff0000

080041a4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b08c      	sub	sp, #48	; 0x30
 80041a8:	af02      	add	r7, sp, #8
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	607a      	str	r2, [r7, #4]
 80041ae:	461a      	mov	r2, r3
 80041b0:	460b      	mov	r3, r1
 80041b2:	817b      	strh	r3, [r7, #10]
 80041b4:	4613      	mov	r3, r2
 80041b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041b8:	f7ff fa0e 	bl	80035d8 <HAL_GetTick>
 80041bc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b20      	cmp	r3, #32
 80041c8:	f040 8217 	bne.w	80045fa <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	2319      	movs	r3, #25
 80041d2:	2201      	movs	r2, #1
 80041d4:	497c      	ldr	r1, [pc, #496]	; (80043c8 <HAL_I2C_Master_Receive+0x224>)
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 fb66 	bl	80048a8 <I2C_WaitOnFlagUntilTimeout>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80041e2:	2302      	movs	r3, #2
 80041e4:	e20a      	b.n	80045fc <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d101      	bne.n	80041f4 <HAL_I2C_Master_Receive+0x50>
 80041f0:	2302      	movs	r3, #2
 80041f2:	e203      	b.n	80045fc <HAL_I2C_Master_Receive+0x458>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b01      	cmp	r3, #1
 8004208:	d007      	beq.n	800421a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f042 0201 	orr.w	r2, r2, #1
 8004218:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004228:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2222      	movs	r2, #34	; 0x22
 800422e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2210      	movs	r2, #16
 8004236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	893a      	ldrh	r2, [r7, #8]
 800424a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004250:	b29a      	uxth	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	4a5c      	ldr	r2, [pc, #368]	; (80043cc <HAL_I2C_Master_Receive+0x228>)
 800425a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800425c:	8979      	ldrh	r1, [r7, #10]
 800425e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 fa52 	bl	800470c <I2C_MasterRequestRead>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e1c4      	b.n	80045fc <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004276:	2b00      	cmp	r3, #0
 8004278:	d113      	bne.n	80042a2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800427a:	2300      	movs	r3, #0
 800427c:	623b      	str	r3, [r7, #32]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	623b      	str	r3, [r7, #32]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	623b      	str	r3, [r7, #32]
 800428e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	e198      	b.n	80045d4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d11b      	bne.n	80042e2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ba:	2300      	movs	r3, #0
 80042bc:	61fb      	str	r3, [r7, #28]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	61fb      	str	r3, [r7, #28]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	61fb      	str	r3, [r7, #28]
 80042ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	e178      	b.n	80045d4 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d11b      	bne.n	8004322 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004308:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800430a:	2300      	movs	r3, #0
 800430c:	61bb      	str	r3, [r7, #24]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	61bb      	str	r3, [r7, #24]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	61bb      	str	r3, [r7, #24]
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	e158      	b.n	80045d4 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004330:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004332:	2300      	movs	r3, #0
 8004334:	617b      	str	r3, [r7, #20]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	617b      	str	r3, [r7, #20]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	617b      	str	r3, [r7, #20]
 8004346:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004348:	e144      	b.n	80045d4 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800434e:	2b03      	cmp	r3, #3
 8004350:	f200 80f1 	bhi.w	8004536 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004358:	2b01      	cmp	r3, #1
 800435a:	d123      	bne.n	80043a4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800435c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800435e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004360:	68f8      	ldr	r0, [r7, #12]
 8004362:	f000 fc4b 	bl	8004bfc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e145      	b.n	80045fc <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	691a      	ldr	r2, [r3, #16]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004382:	1c5a      	adds	r2, r3, #1
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800438c:	3b01      	subs	r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004398:	b29b      	uxth	r3, r3
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043a2:	e117      	b.n	80045d4 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d14e      	bne.n	800444a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b2:	2200      	movs	r2, #0
 80043b4:	4906      	ldr	r1, [pc, #24]	; (80043d0 <HAL_I2C_Master_Receive+0x22c>)
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 fa76 	bl	80048a8 <I2C_WaitOnFlagUntilTimeout>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d008      	beq.n	80043d4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e11a      	b.n	80045fc <HAL_I2C_Master_Receive+0x458>
 80043c6:	bf00      	nop
 80043c8:	00100002 	.word	0x00100002
 80043cc:	ffff0000 	.word	0xffff0000
 80043d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	691a      	ldr	r2, [r3, #16]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ee:	b2d2      	uxtb	r2, r2
 80043f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f6:	1c5a      	adds	r2, r3, #1
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004400:	3b01      	subs	r3, #1
 8004402:	b29a      	uxth	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440c:	b29b      	uxth	r3, r3
 800440e:	3b01      	subs	r3, #1
 8004410:	b29a      	uxth	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	691a      	ldr	r2, [r3, #16]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004432:	3b01      	subs	r3, #1
 8004434:	b29a      	uxth	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443e:	b29b      	uxth	r3, r3
 8004440:	3b01      	subs	r3, #1
 8004442:	b29a      	uxth	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004448:	e0c4      	b.n	80045d4 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004450:	2200      	movs	r2, #0
 8004452:	496c      	ldr	r1, [pc, #432]	; (8004604 <HAL_I2C_Master_Receive+0x460>)
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 fa27 	bl	80048a8 <I2C_WaitOnFlagUntilTimeout>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e0cb      	b.n	80045fc <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004472:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	691a      	ldr	r2, [r3, #16]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	b2d2      	uxtb	r2, r2
 8004480:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	1c5a      	adds	r2, r3, #1
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004490:	3b01      	subs	r3, #1
 8004492:	b29a      	uxth	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449c:	b29b      	uxth	r3, r3
 800449e:	3b01      	subs	r3, #1
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ac:	2200      	movs	r2, #0
 80044ae:	4955      	ldr	r1, [pc, #340]	; (8004604 <HAL_I2C_Master_Receive+0x460>)
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 f9f9 	bl	80048a8 <I2C_WaitOnFlagUntilTimeout>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e09d      	b.n	80045fc <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	691a      	ldr	r2, [r3, #16]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	1c5a      	adds	r2, r3, #1
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ec:	3b01      	subs	r3, #1
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	691a      	ldr	r2, [r3, #16]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800451e:	3b01      	subs	r3, #1
 8004520:	b29a      	uxth	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452a:	b29b      	uxth	r3, r3
 800452c:	3b01      	subs	r3, #1
 800452e:	b29a      	uxth	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004534:	e04e      	b.n	80045d4 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004538:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 fb5e 	bl	8004bfc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e058      	b.n	80045fc <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	691a      	ldr	r2, [r3, #16]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	b2d2      	uxtb	r2, r2
 8004556:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455c:	1c5a      	adds	r2, r3, #1
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004566:	3b01      	subs	r3, #1
 8004568:	b29a      	uxth	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004572:	b29b      	uxth	r3, r3
 8004574:	3b01      	subs	r3, #1
 8004576:	b29a      	uxth	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	f003 0304 	and.w	r3, r3, #4
 8004586:	2b04      	cmp	r3, #4
 8004588:	d124      	bne.n	80045d4 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800458e:	2b03      	cmp	r3, #3
 8004590:	d107      	bne.n	80045a2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045a0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	691a      	ldr	r2, [r3, #16]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	b2d2      	uxtb	r2, r2
 80045ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b4:	1c5a      	adds	r2, r3, #1
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045be:	3b01      	subs	r3, #1
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	3b01      	subs	r3, #1
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f47f aeb6 	bne.w	800434a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2220      	movs	r2, #32
 80045e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	e000      	b.n	80045fc <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80045fa:	2302      	movs	r3, #2
  }
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3728      	adds	r7, #40	; 0x28
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	00010004 	.word	0x00010004

08004608 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b088      	sub	sp, #32
 800460c:	af02      	add	r7, sp, #8
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	607a      	str	r2, [r7, #4]
 8004612:	603b      	str	r3, [r7, #0]
 8004614:	460b      	mov	r3, r1
 8004616:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	2b08      	cmp	r3, #8
 8004622:	d006      	beq.n	8004632 <I2C_MasterRequestWrite+0x2a>
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d003      	beq.n	8004632 <I2C_MasterRequestWrite+0x2a>
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004630:	d108      	bne.n	8004644 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	e00b      	b.n	800465c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004648:	2b12      	cmp	r3, #18
 800464a:	d107      	bne.n	800465c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800465a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 f91d 	bl	80048a8 <I2C_WaitOnFlagUntilTimeout>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00d      	beq.n	8004690 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004682:	d103      	bne.n	800468c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f44f 7200 	mov.w	r2, #512	; 0x200
 800468a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e035      	b.n	80046fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004698:	d108      	bne.n	80046ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800469a:	897b      	ldrh	r3, [r7, #10]
 800469c:	b2db      	uxtb	r3, r3
 800469e:	461a      	mov	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046a8:	611a      	str	r2, [r3, #16]
 80046aa:	e01b      	b.n	80046e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80046ac:	897b      	ldrh	r3, [r7, #10]
 80046ae:	11db      	asrs	r3, r3, #7
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	f003 0306 	and.w	r3, r3, #6
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	f063 030f 	orn	r3, r3, #15
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	490e      	ldr	r1, [pc, #56]	; (8004704 <I2C_MasterRequestWrite+0xfc>)
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 f966 	bl	800499c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e010      	b.n	80046fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80046da:	897b      	ldrh	r3, [r7, #10]
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	4907      	ldr	r1, [pc, #28]	; (8004708 <I2C_MasterRequestWrite+0x100>)
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f000 f956 	bl	800499c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e000      	b.n	80046fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3718      	adds	r7, #24
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	00010008 	.word	0x00010008
 8004708:	00010002 	.word	0x00010002

0800470c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b088      	sub	sp, #32
 8004710:	af02      	add	r7, sp, #8
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	607a      	str	r2, [r7, #4]
 8004716:	603b      	str	r3, [r7, #0]
 8004718:	460b      	mov	r3, r1
 800471a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004730:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	2b08      	cmp	r3, #8
 8004736:	d006      	beq.n	8004746 <I2C_MasterRequestRead+0x3a>
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d003      	beq.n	8004746 <I2C_MasterRequestRead+0x3a>
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004744:	d108      	bne.n	8004758 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	e00b      	b.n	8004770 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475c:	2b11      	cmp	r3, #17
 800475e:	d107      	bne.n	8004770 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800476e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	9300      	str	r3, [sp, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 f893 	bl	80048a8 <I2C_WaitOnFlagUntilTimeout>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00d      	beq.n	80047a4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004796:	d103      	bne.n	80047a0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800479e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e079      	b.n	8004898 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047ac:	d108      	bne.n	80047c0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80047ae:	897b      	ldrh	r3, [r7, #10]
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	f043 0301 	orr.w	r3, r3, #1
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	611a      	str	r2, [r3, #16]
 80047be:	e05f      	b.n	8004880 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80047c0:	897b      	ldrh	r3, [r7, #10]
 80047c2:	11db      	asrs	r3, r3, #7
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	f003 0306 	and.w	r3, r3, #6
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	f063 030f 	orn	r3, r3, #15
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	4930      	ldr	r1, [pc, #192]	; (80048a0 <I2C_MasterRequestRead+0x194>)
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 f8dc 	bl	800499c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e054      	b.n	8004898 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80047ee:	897b      	ldrh	r3, [r7, #10]
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	4929      	ldr	r1, [pc, #164]	; (80048a4 <I2C_MasterRequestRead+0x198>)
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 f8cc 	bl	800499c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e044      	b.n	8004898 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800480e:	2300      	movs	r3, #0
 8004810:	613b      	str	r3, [r7, #16]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	613b      	str	r3, [r7, #16]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	613b      	str	r3, [r7, #16]
 8004822:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004832:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	9300      	str	r3, [sp, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f000 f831 	bl	80048a8 <I2C_WaitOnFlagUntilTimeout>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00d      	beq.n	8004868 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800485a:	d103      	bne.n	8004864 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004862:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e017      	b.n	8004898 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004868:	897b      	ldrh	r3, [r7, #10]
 800486a:	11db      	asrs	r3, r3, #7
 800486c:	b2db      	uxtb	r3, r3
 800486e:	f003 0306 	and.w	r3, r3, #6
 8004872:	b2db      	uxtb	r3, r3
 8004874:	f063 030e 	orn	r3, r3, #14
 8004878:	b2da      	uxtb	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	4907      	ldr	r1, [pc, #28]	; (80048a4 <I2C_MasterRequestRead+0x198>)
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 f888 	bl	800499c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e000      	b.n	8004898 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3718      	adds	r7, #24
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	00010008 	.word	0x00010008
 80048a4:	00010002 	.word	0x00010002

080048a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	603b      	str	r3, [r7, #0]
 80048b4:	4613      	mov	r3, r2
 80048b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048b8:	e048      	b.n	800494c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c0:	d044      	beq.n	800494c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048c2:	f7fe fe89 	bl	80035d8 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d302      	bcc.n	80048d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d139      	bne.n	800494c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	0c1b      	lsrs	r3, r3, #16
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d10d      	bne.n	80048fe <I2C_WaitOnFlagUntilTimeout+0x56>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	43da      	mvns	r2, r3
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	4013      	ands	r3, r2
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	bf0c      	ite	eq
 80048f4:	2301      	moveq	r3, #1
 80048f6:	2300      	movne	r3, #0
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	461a      	mov	r2, r3
 80048fc:	e00c      	b.n	8004918 <I2C_WaitOnFlagUntilTimeout+0x70>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	43da      	mvns	r2, r3
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	4013      	ands	r3, r2
 800490a:	b29b      	uxth	r3, r3
 800490c:	2b00      	cmp	r3, #0
 800490e:	bf0c      	ite	eq
 8004910:	2301      	moveq	r3, #1
 8004912:	2300      	movne	r3, #0
 8004914:	b2db      	uxtb	r3, r3
 8004916:	461a      	mov	r2, r3
 8004918:	79fb      	ldrb	r3, [r7, #7]
 800491a:	429a      	cmp	r2, r3
 800491c:	d116      	bne.n	800494c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004938:	f043 0220 	orr.w	r2, r3, #32
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e023      	b.n	8004994 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	0c1b      	lsrs	r3, r3, #16
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b01      	cmp	r3, #1
 8004954:	d10d      	bne.n	8004972 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	43da      	mvns	r2, r3
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	4013      	ands	r3, r2
 8004962:	b29b      	uxth	r3, r3
 8004964:	2b00      	cmp	r3, #0
 8004966:	bf0c      	ite	eq
 8004968:	2301      	moveq	r3, #1
 800496a:	2300      	movne	r3, #0
 800496c:	b2db      	uxtb	r3, r3
 800496e:	461a      	mov	r2, r3
 8004970:	e00c      	b.n	800498c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	43da      	mvns	r2, r3
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	4013      	ands	r3, r2
 800497e:	b29b      	uxth	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	bf0c      	ite	eq
 8004984:	2301      	moveq	r3, #1
 8004986:	2300      	movne	r3, #0
 8004988:	b2db      	uxtb	r3, r3
 800498a:	461a      	mov	r2, r3
 800498c:	79fb      	ldrb	r3, [r7, #7]
 800498e:	429a      	cmp	r2, r3
 8004990:	d093      	beq.n	80048ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
 80049a8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049aa:	e071      	b.n	8004a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049ba:	d123      	bne.n	8004a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049ca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2220      	movs	r2, #32
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f0:	f043 0204 	orr.w	r2, r3, #4
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e067      	b.n	8004ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0a:	d041      	beq.n	8004a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a0c:	f7fe fde4 	bl	80035d8 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d302      	bcc.n	8004a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d136      	bne.n	8004a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	0c1b      	lsrs	r3, r3, #16
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d10c      	bne.n	8004a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	43da      	mvns	r2, r3
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	4013      	ands	r3, r2
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	bf14      	ite	ne
 8004a3e:	2301      	movne	r3, #1
 8004a40:	2300      	moveq	r3, #0
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	e00b      	b.n	8004a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	43da      	mvns	r2, r3
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	4013      	ands	r3, r2
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	bf14      	ite	ne
 8004a58:	2301      	movne	r3, #1
 8004a5a:	2300      	moveq	r3, #0
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d016      	beq.n	8004a90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2200      	movs	r2, #0
 8004a66:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7c:	f043 0220 	orr.w	r2, r3, #32
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e021      	b.n	8004ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	0c1b      	lsrs	r3, r3, #16
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d10c      	bne.n	8004ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	43da      	mvns	r2, r3
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	bf14      	ite	ne
 8004aac:	2301      	movne	r3, #1
 8004aae:	2300      	moveq	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	e00b      	b.n	8004acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	43da      	mvns	r2, r3
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	4013      	ands	r3, r2
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	bf14      	ite	ne
 8004ac6:	2301      	movne	r3, #1
 8004ac8:	2300      	moveq	r3, #0
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f47f af6d 	bne.w	80049ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ae8:	e034      	b.n	8004b54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f000 f8e3 	bl	8004cb6 <I2C_IsAcknowledgeFailed>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e034      	b.n	8004b64 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b00:	d028      	beq.n	8004b54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b02:	f7fe fd69 	bl	80035d8 <HAL_GetTick>
 8004b06:	4602      	mov	r2, r0
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	68ba      	ldr	r2, [r7, #8]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d302      	bcc.n	8004b18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d11d      	bne.n	8004b54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b22:	2b80      	cmp	r3, #128	; 0x80
 8004b24:	d016      	beq.n	8004b54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b40:	f043 0220 	orr.w	r2, r3, #32
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e007      	b.n	8004b64 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5e:	2b80      	cmp	r3, #128	; 0x80
 8004b60:	d1c3      	bne.n	8004aea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b78:	e034      	b.n	8004be4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 f89b 	bl	8004cb6 <I2C_IsAcknowledgeFailed>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e034      	b.n	8004bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b90:	d028      	beq.n	8004be4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b92:	f7fe fd21 	bl	80035d8 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d302      	bcc.n	8004ba8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d11d      	bne.n	8004be4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	f003 0304 	and.w	r3, r3, #4
 8004bb2:	2b04      	cmp	r3, #4
 8004bb4:	d016      	beq.n	8004be4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd0:	f043 0220 	orr.w	r2, r3, #32
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e007      	b.n	8004bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	f003 0304 	and.w	r3, r3, #4
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	d1c3      	bne.n	8004b7a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c08:	e049      	b.n	8004c9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	f003 0310 	and.w	r3, r3, #16
 8004c14:	2b10      	cmp	r3, #16
 8004c16:	d119      	bne.n	8004c4c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f06f 0210 	mvn.w	r2, #16
 8004c20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e030      	b.n	8004cae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c4c:	f7fe fcc4 	bl	80035d8 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d302      	bcc.n	8004c62 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d11d      	bne.n	8004c9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	695b      	ldr	r3, [r3, #20]
 8004c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c6c:	2b40      	cmp	r3, #64	; 0x40
 8004c6e:	d016      	beq.n	8004c9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8a:	f043 0220 	orr.w	r2, r3, #32
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e007      	b.n	8004cae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca8:	2b40      	cmp	r3, #64	; 0x40
 8004caa:	d1ae      	bne.n	8004c0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	b083      	sub	sp, #12
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ccc:	d11b      	bne.n	8004d06 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cd6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf2:	f043 0204 	orr.w	r2, r3, #4
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e000      	b.n	8004d08 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004d1a:	4b06      	ldr	r3, [pc, #24]	; (8004d34 <HAL_PWR_EnableBkUpAccess+0x20>)
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8004d20:	4b05      	ldr	r3, [pc, #20]	; (8004d38 <HAL_PWR_EnableBkUpAccess+0x24>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8004d26:	687b      	ldr	r3, [r7, #4]
}
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr
 8004d34:	420e0020 	.word	0x420e0020
 8004d38:	40007000 	.word	0x40007000

08004d3c <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8004d42:	4b06      	ldr	r3, [pc, #24]	; (8004d5c <HAL_PWR_DisableBkUpAccess+0x20>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8004d48:	4b05      	ldr	r3, [pc, #20]	; (8004d60 <HAL_PWR_DisableBkUpAccess+0x24>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8004d4e:	687b      	ldr	r3, [r7, #4]
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	420e0020 	.word	0x420e0020
 8004d60:	40007000 	.word	0x40007000

08004d64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e267      	b.n	8005246 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d075      	beq.n	8004e6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d82:	4b88      	ldr	r3, [pc, #544]	; (8004fa4 <HAL_RCC_OscConfig+0x240>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 030c 	and.w	r3, r3, #12
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	d00c      	beq.n	8004da8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d8e:	4b85      	ldr	r3, [pc, #532]	; (8004fa4 <HAL_RCC_OscConfig+0x240>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d96:	2b08      	cmp	r3, #8
 8004d98:	d112      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d9a:	4b82      	ldr	r3, [pc, #520]	; (8004fa4 <HAL_RCC_OscConfig+0x240>)
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004da2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004da6:	d10b      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004da8:	4b7e      	ldr	r3, [pc, #504]	; (8004fa4 <HAL_RCC_OscConfig+0x240>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d05b      	beq.n	8004e6c <HAL_RCC_OscConfig+0x108>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d157      	bne.n	8004e6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e242      	b.n	8005246 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc8:	d106      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x74>
 8004dca:	4b76      	ldr	r3, [pc, #472]	; (8004fa4 <HAL_RCC_OscConfig+0x240>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a75      	ldr	r2, [pc, #468]	; (8004fa4 <HAL_RCC_OscConfig+0x240>)
 8004dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dd4:	6013      	str	r3, [r2, #0]
 8004dd6:	e01d      	b.n	8004e14 <HAL_RCC_OscConfig+0xb0>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004de0:	d10c      	bne.n	8004dfc <HAL_RCC_OscConfig+0x98>
 8004de2:	4b70      	ldr	r3, [pc, #448]	; (8004fa4 <HAL_RCC_OscConfig+0x240>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a6f      	ldr	r2, [pc, #444]	; (8004fa4 <HAL_RCC_OscConfig+0x240>)
 8004de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dec:	6013      	str	r3, [r2, #0]
 8004dee:	4b6d      	ldr	r3, [pc, #436]	; (8004fa4 <HAL_RCC_OscConfig+0x240>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a6c      	ldr	r2, [pc, #432]	; (8004fa4 <HAL_RCC_OscConfig+0x240>)
 8004df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004df8:	6013      	str	r3, [r2, #0]
 8004dfa:	e00b      	b.n	8004e14 <HAL_RCC_OscConfig+0xb0>
 8004dfc:	4b69      	ldr	r3, [pc, #420]	; (8004fa4 <HAL_RCC_OscConfig+0x240>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a68      	ldr	r2, [pc, #416]	; (8004fa4 <HAL_RCC_OscConfig+0x240>)
 8004e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e06:	6013      	str	r3, [r2, #0]
 8004e08:	4b66      	ldr	r3, [pc, #408]	; (8004fa4 <HAL_RCC_OscConfig+0x240>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a65      	ldr	r2, [pc, #404]	; (8004fa4 <HAL_RCC_OscConfig+0x240>)
 8004e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d013      	beq.n	8004e44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e1c:	f7fe fbdc 	bl	80035d8 <HAL_GetTick>
 8004e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e22:	e008      	b.n	8004e36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e24:	f7fe fbd8 	bl	80035d8 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b64      	cmp	r3, #100	; 0x64
 8004e30:	d901      	bls.n	8004e36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e207      	b.n	8005246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e36:	4b5b      	ldr	r3, [pc, #364]	; (8004fa4 <HAL_RCC_OscConfig+0x240>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d0f0      	beq.n	8004e24 <HAL_RCC_OscConfig+0xc0>
 8004e42:	e014      	b.n	8004e6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e44:	f7fe fbc8 	bl	80035d8 <HAL_GetTick>
 8004e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e4a:	e008      	b.n	8004e5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e4c:	f7fe fbc4 	bl	80035d8 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b64      	cmp	r3, #100	; 0x64
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e1f3      	b.n	8005246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e5e:	4b51      	ldr	r3, [pc, #324]	; (8004fa4 <HAL_RCC_OscConfig+0x240>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1f0      	bne.n	8004e4c <HAL_RCC_OscConfig+0xe8>
 8004e6a:	e000      	b.n	8004e6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d063      	beq.n	8004f42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e7a:	4b4a      	ldr	r3, [pc, #296]	; (8004fa4 <HAL_RCC_OscConfig+0x240>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f003 030c 	and.w	r3, r3, #12
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00b      	beq.n	8004e9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e86:	4b47      	ldr	r3, [pc, #284]	; (8004fa4 <HAL_RCC_OscConfig+0x240>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e8e:	2b08      	cmp	r3, #8
 8004e90:	d11c      	bne.n	8004ecc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e92:	4b44      	ldr	r3, [pc, #272]	; (8004fa4 <HAL_RCC_OscConfig+0x240>)
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d116      	bne.n	8004ecc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e9e:	4b41      	ldr	r3, [pc, #260]	; (8004fa4 <HAL_RCC_OscConfig+0x240>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d005      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x152>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d001      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e1c7      	b.n	8005246 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eb6:	4b3b      	ldr	r3, [pc, #236]	; (8004fa4 <HAL_RCC_OscConfig+0x240>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	4937      	ldr	r1, [pc, #220]	; (8004fa4 <HAL_RCC_OscConfig+0x240>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eca:	e03a      	b.n	8004f42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d020      	beq.n	8004f16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ed4:	4b34      	ldr	r3, [pc, #208]	; (8004fa8 <HAL_RCC_OscConfig+0x244>)
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eda:	f7fe fb7d 	bl	80035d8 <HAL_GetTick>
 8004ede:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ee0:	e008      	b.n	8004ef4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ee2:	f7fe fb79 	bl	80035d8 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e1a8      	b.n	8005246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ef4:	4b2b      	ldr	r3, [pc, #172]	; (8004fa4 <HAL_RCC_OscConfig+0x240>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d0f0      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f00:	4b28      	ldr	r3, [pc, #160]	; (8004fa4 <HAL_RCC_OscConfig+0x240>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	00db      	lsls	r3, r3, #3
 8004f0e:	4925      	ldr	r1, [pc, #148]	; (8004fa4 <HAL_RCC_OscConfig+0x240>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	600b      	str	r3, [r1, #0]
 8004f14:	e015      	b.n	8004f42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f16:	4b24      	ldr	r3, [pc, #144]	; (8004fa8 <HAL_RCC_OscConfig+0x244>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f1c:	f7fe fb5c 	bl	80035d8 <HAL_GetTick>
 8004f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f22:	e008      	b.n	8004f36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f24:	f7fe fb58 	bl	80035d8 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e187      	b.n	8005246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f36:	4b1b      	ldr	r3, [pc, #108]	; (8004fa4 <HAL_RCC_OscConfig+0x240>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1f0      	bne.n	8004f24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0308 	and.w	r3, r3, #8
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d036      	beq.n	8004fbc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d016      	beq.n	8004f84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f56:	4b15      	ldr	r3, [pc, #84]	; (8004fac <HAL_RCC_OscConfig+0x248>)
 8004f58:	2201      	movs	r2, #1
 8004f5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f5c:	f7fe fb3c 	bl	80035d8 <HAL_GetTick>
 8004f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f62:	e008      	b.n	8004f76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f64:	f7fe fb38 	bl	80035d8 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e167      	b.n	8005246 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f76:	4b0b      	ldr	r3, [pc, #44]	; (8004fa4 <HAL_RCC_OscConfig+0x240>)
 8004f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d0f0      	beq.n	8004f64 <HAL_RCC_OscConfig+0x200>
 8004f82:	e01b      	b.n	8004fbc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f84:	4b09      	ldr	r3, [pc, #36]	; (8004fac <HAL_RCC_OscConfig+0x248>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f8a:	f7fe fb25 	bl	80035d8 <HAL_GetTick>
 8004f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f90:	e00e      	b.n	8004fb0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f92:	f7fe fb21 	bl	80035d8 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d907      	bls.n	8004fb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e150      	b.n	8005246 <HAL_RCC_OscConfig+0x4e2>
 8004fa4:	40023800 	.word	0x40023800
 8004fa8:	42470000 	.word	0x42470000
 8004fac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fb0:	4b88      	ldr	r3, [pc, #544]	; (80051d4 <HAL_RCC_OscConfig+0x470>)
 8004fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1ea      	bne.n	8004f92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0304 	and.w	r3, r3, #4
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 8097 	beq.w	80050f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fce:	4b81      	ldr	r3, [pc, #516]	; (80051d4 <HAL_RCC_OscConfig+0x470>)
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10f      	bne.n	8004ffa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60bb      	str	r3, [r7, #8]
 8004fde:	4b7d      	ldr	r3, [pc, #500]	; (80051d4 <HAL_RCC_OscConfig+0x470>)
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe2:	4a7c      	ldr	r2, [pc, #496]	; (80051d4 <HAL_RCC_OscConfig+0x470>)
 8004fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8004fea:	4b7a      	ldr	r3, [pc, #488]	; (80051d4 <HAL_RCC_OscConfig+0x470>)
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff2:	60bb      	str	r3, [r7, #8]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ffa:	4b77      	ldr	r3, [pc, #476]	; (80051d8 <HAL_RCC_OscConfig+0x474>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005002:	2b00      	cmp	r3, #0
 8005004:	d118      	bne.n	8005038 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005006:	4b74      	ldr	r3, [pc, #464]	; (80051d8 <HAL_RCC_OscConfig+0x474>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a73      	ldr	r2, [pc, #460]	; (80051d8 <HAL_RCC_OscConfig+0x474>)
 800500c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005010:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005012:	f7fe fae1 	bl	80035d8 <HAL_GetTick>
 8005016:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005018:	e008      	b.n	800502c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800501a:	f7fe fadd 	bl	80035d8 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e10c      	b.n	8005246 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800502c:	4b6a      	ldr	r3, [pc, #424]	; (80051d8 <HAL_RCC_OscConfig+0x474>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0f0      	beq.n	800501a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d106      	bne.n	800504e <HAL_RCC_OscConfig+0x2ea>
 8005040:	4b64      	ldr	r3, [pc, #400]	; (80051d4 <HAL_RCC_OscConfig+0x470>)
 8005042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005044:	4a63      	ldr	r2, [pc, #396]	; (80051d4 <HAL_RCC_OscConfig+0x470>)
 8005046:	f043 0301 	orr.w	r3, r3, #1
 800504a:	6713      	str	r3, [r2, #112]	; 0x70
 800504c:	e01c      	b.n	8005088 <HAL_RCC_OscConfig+0x324>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	2b05      	cmp	r3, #5
 8005054:	d10c      	bne.n	8005070 <HAL_RCC_OscConfig+0x30c>
 8005056:	4b5f      	ldr	r3, [pc, #380]	; (80051d4 <HAL_RCC_OscConfig+0x470>)
 8005058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505a:	4a5e      	ldr	r2, [pc, #376]	; (80051d4 <HAL_RCC_OscConfig+0x470>)
 800505c:	f043 0304 	orr.w	r3, r3, #4
 8005060:	6713      	str	r3, [r2, #112]	; 0x70
 8005062:	4b5c      	ldr	r3, [pc, #368]	; (80051d4 <HAL_RCC_OscConfig+0x470>)
 8005064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005066:	4a5b      	ldr	r2, [pc, #364]	; (80051d4 <HAL_RCC_OscConfig+0x470>)
 8005068:	f043 0301 	orr.w	r3, r3, #1
 800506c:	6713      	str	r3, [r2, #112]	; 0x70
 800506e:	e00b      	b.n	8005088 <HAL_RCC_OscConfig+0x324>
 8005070:	4b58      	ldr	r3, [pc, #352]	; (80051d4 <HAL_RCC_OscConfig+0x470>)
 8005072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005074:	4a57      	ldr	r2, [pc, #348]	; (80051d4 <HAL_RCC_OscConfig+0x470>)
 8005076:	f023 0301 	bic.w	r3, r3, #1
 800507a:	6713      	str	r3, [r2, #112]	; 0x70
 800507c:	4b55      	ldr	r3, [pc, #340]	; (80051d4 <HAL_RCC_OscConfig+0x470>)
 800507e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005080:	4a54      	ldr	r2, [pc, #336]	; (80051d4 <HAL_RCC_OscConfig+0x470>)
 8005082:	f023 0304 	bic.w	r3, r3, #4
 8005086:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d015      	beq.n	80050bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005090:	f7fe faa2 	bl	80035d8 <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005096:	e00a      	b.n	80050ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005098:	f7fe fa9e 	bl	80035d8 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e0cb      	b.n	8005246 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ae:	4b49      	ldr	r3, [pc, #292]	; (80051d4 <HAL_RCC_OscConfig+0x470>)
 80050b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d0ee      	beq.n	8005098 <HAL_RCC_OscConfig+0x334>
 80050ba:	e014      	b.n	80050e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050bc:	f7fe fa8c 	bl	80035d8 <HAL_GetTick>
 80050c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050c2:	e00a      	b.n	80050da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050c4:	f7fe fa88 	bl	80035d8 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e0b5      	b.n	8005246 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050da:	4b3e      	ldr	r3, [pc, #248]	; (80051d4 <HAL_RCC_OscConfig+0x470>)
 80050dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1ee      	bne.n	80050c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050e6:	7dfb      	ldrb	r3, [r7, #23]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d105      	bne.n	80050f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050ec:	4b39      	ldr	r3, [pc, #228]	; (80051d4 <HAL_RCC_OscConfig+0x470>)
 80050ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f0:	4a38      	ldr	r2, [pc, #224]	; (80051d4 <HAL_RCC_OscConfig+0x470>)
 80050f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f000 80a1 	beq.w	8005244 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005102:	4b34      	ldr	r3, [pc, #208]	; (80051d4 <HAL_RCC_OscConfig+0x470>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 030c 	and.w	r3, r3, #12
 800510a:	2b08      	cmp	r3, #8
 800510c:	d05c      	beq.n	80051c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	2b02      	cmp	r3, #2
 8005114:	d141      	bne.n	800519a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005116:	4b31      	ldr	r3, [pc, #196]	; (80051dc <HAL_RCC_OscConfig+0x478>)
 8005118:	2200      	movs	r2, #0
 800511a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800511c:	f7fe fa5c 	bl	80035d8 <HAL_GetTick>
 8005120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005122:	e008      	b.n	8005136 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005124:	f7fe fa58 	bl	80035d8 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e087      	b.n	8005246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005136:	4b27      	ldr	r3, [pc, #156]	; (80051d4 <HAL_RCC_OscConfig+0x470>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1f0      	bne.n	8005124 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	69da      	ldr	r2, [r3, #28]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005150:	019b      	lsls	r3, r3, #6
 8005152:	431a      	orrs	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005158:	085b      	lsrs	r3, r3, #1
 800515a:	3b01      	subs	r3, #1
 800515c:	041b      	lsls	r3, r3, #16
 800515e:	431a      	orrs	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005164:	061b      	lsls	r3, r3, #24
 8005166:	491b      	ldr	r1, [pc, #108]	; (80051d4 <HAL_RCC_OscConfig+0x470>)
 8005168:	4313      	orrs	r3, r2
 800516a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800516c:	4b1b      	ldr	r3, [pc, #108]	; (80051dc <HAL_RCC_OscConfig+0x478>)
 800516e:	2201      	movs	r2, #1
 8005170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005172:	f7fe fa31 	bl	80035d8 <HAL_GetTick>
 8005176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005178:	e008      	b.n	800518c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800517a:	f7fe fa2d 	bl	80035d8 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e05c      	b.n	8005246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800518c:	4b11      	ldr	r3, [pc, #68]	; (80051d4 <HAL_RCC_OscConfig+0x470>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d0f0      	beq.n	800517a <HAL_RCC_OscConfig+0x416>
 8005198:	e054      	b.n	8005244 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800519a:	4b10      	ldr	r3, [pc, #64]	; (80051dc <HAL_RCC_OscConfig+0x478>)
 800519c:	2200      	movs	r2, #0
 800519e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a0:	f7fe fa1a 	bl	80035d8 <HAL_GetTick>
 80051a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051a6:	e008      	b.n	80051ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051a8:	f7fe fa16 	bl	80035d8 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e045      	b.n	8005246 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ba:	4b06      	ldr	r3, [pc, #24]	; (80051d4 <HAL_RCC_OscConfig+0x470>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1f0      	bne.n	80051a8 <HAL_RCC_OscConfig+0x444>
 80051c6:	e03d      	b.n	8005244 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d107      	bne.n	80051e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e038      	b.n	8005246 <HAL_RCC_OscConfig+0x4e2>
 80051d4:	40023800 	.word	0x40023800
 80051d8:	40007000 	.word	0x40007000
 80051dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051e0:	4b1b      	ldr	r3, [pc, #108]	; (8005250 <HAL_RCC_OscConfig+0x4ec>)
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d028      	beq.n	8005240 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d121      	bne.n	8005240 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005206:	429a      	cmp	r2, r3
 8005208:	d11a      	bne.n	8005240 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005210:	4013      	ands	r3, r2
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005216:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005218:	4293      	cmp	r3, r2
 800521a:	d111      	bne.n	8005240 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005226:	085b      	lsrs	r3, r3, #1
 8005228:	3b01      	subs	r3, #1
 800522a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800522c:	429a      	cmp	r2, r3
 800522e:	d107      	bne.n	8005240 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800523c:	429a      	cmp	r2, r3
 800523e:	d001      	beq.n	8005244 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e000      	b.n	8005246 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3718      	adds	r7, #24
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	40023800 	.word	0x40023800

08005254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e0cc      	b.n	8005402 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005268:	4b68      	ldr	r3, [pc, #416]	; (800540c <HAL_RCC_ClockConfig+0x1b8>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0307 	and.w	r3, r3, #7
 8005270:	683a      	ldr	r2, [r7, #0]
 8005272:	429a      	cmp	r2, r3
 8005274:	d90c      	bls.n	8005290 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005276:	4b65      	ldr	r3, [pc, #404]	; (800540c <HAL_RCC_ClockConfig+0x1b8>)
 8005278:	683a      	ldr	r2, [r7, #0]
 800527a:	b2d2      	uxtb	r2, r2
 800527c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800527e:	4b63      	ldr	r3, [pc, #396]	; (800540c <HAL_RCC_ClockConfig+0x1b8>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0307 	and.w	r3, r3, #7
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	429a      	cmp	r2, r3
 800528a:	d001      	beq.n	8005290 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e0b8      	b.n	8005402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0302 	and.w	r3, r3, #2
 8005298:	2b00      	cmp	r3, #0
 800529a:	d020      	beq.n	80052de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0304 	and.w	r3, r3, #4
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d005      	beq.n	80052b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052a8:	4b59      	ldr	r3, [pc, #356]	; (8005410 <HAL_RCC_ClockConfig+0x1bc>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	4a58      	ldr	r2, [pc, #352]	; (8005410 <HAL_RCC_ClockConfig+0x1bc>)
 80052ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80052b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0308 	and.w	r3, r3, #8
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d005      	beq.n	80052cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052c0:	4b53      	ldr	r3, [pc, #332]	; (8005410 <HAL_RCC_ClockConfig+0x1bc>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	4a52      	ldr	r2, [pc, #328]	; (8005410 <HAL_RCC_ClockConfig+0x1bc>)
 80052c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80052ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052cc:	4b50      	ldr	r3, [pc, #320]	; (8005410 <HAL_RCC_ClockConfig+0x1bc>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	494d      	ldr	r1, [pc, #308]	; (8005410 <HAL_RCC_ClockConfig+0x1bc>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d044      	beq.n	8005374 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d107      	bne.n	8005302 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052f2:	4b47      	ldr	r3, [pc, #284]	; (8005410 <HAL_RCC_ClockConfig+0x1bc>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d119      	bne.n	8005332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e07f      	b.n	8005402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	2b02      	cmp	r3, #2
 8005308:	d003      	beq.n	8005312 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800530e:	2b03      	cmp	r3, #3
 8005310:	d107      	bne.n	8005322 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005312:	4b3f      	ldr	r3, [pc, #252]	; (8005410 <HAL_RCC_ClockConfig+0x1bc>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d109      	bne.n	8005332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e06f      	b.n	8005402 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005322:	4b3b      	ldr	r3, [pc, #236]	; (8005410 <HAL_RCC_ClockConfig+0x1bc>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e067      	b.n	8005402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005332:	4b37      	ldr	r3, [pc, #220]	; (8005410 <HAL_RCC_ClockConfig+0x1bc>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f023 0203 	bic.w	r2, r3, #3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	4934      	ldr	r1, [pc, #208]	; (8005410 <HAL_RCC_ClockConfig+0x1bc>)
 8005340:	4313      	orrs	r3, r2
 8005342:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005344:	f7fe f948 	bl	80035d8 <HAL_GetTick>
 8005348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800534a:	e00a      	b.n	8005362 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800534c:	f7fe f944 	bl	80035d8 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	f241 3288 	movw	r2, #5000	; 0x1388
 800535a:	4293      	cmp	r3, r2
 800535c:	d901      	bls.n	8005362 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e04f      	b.n	8005402 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005362:	4b2b      	ldr	r3, [pc, #172]	; (8005410 <HAL_RCC_ClockConfig+0x1bc>)
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f003 020c 	and.w	r2, r3, #12
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	429a      	cmp	r2, r3
 8005372:	d1eb      	bne.n	800534c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005374:	4b25      	ldr	r3, [pc, #148]	; (800540c <HAL_RCC_ClockConfig+0x1b8>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0307 	and.w	r3, r3, #7
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	429a      	cmp	r2, r3
 8005380:	d20c      	bcs.n	800539c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005382:	4b22      	ldr	r3, [pc, #136]	; (800540c <HAL_RCC_ClockConfig+0x1b8>)
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	b2d2      	uxtb	r2, r2
 8005388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800538a:	4b20      	ldr	r3, [pc, #128]	; (800540c <HAL_RCC_ClockConfig+0x1b8>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0307 	and.w	r3, r3, #7
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	429a      	cmp	r2, r3
 8005396:	d001      	beq.n	800539c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e032      	b.n	8005402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0304 	and.w	r3, r3, #4
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d008      	beq.n	80053ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053a8:	4b19      	ldr	r3, [pc, #100]	; (8005410 <HAL_RCC_ClockConfig+0x1bc>)
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	4916      	ldr	r1, [pc, #88]	; (8005410 <HAL_RCC_ClockConfig+0x1bc>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0308 	and.w	r3, r3, #8
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d009      	beq.n	80053da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053c6:	4b12      	ldr	r3, [pc, #72]	; (8005410 <HAL_RCC_ClockConfig+0x1bc>)
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	00db      	lsls	r3, r3, #3
 80053d4:	490e      	ldr	r1, [pc, #56]	; (8005410 <HAL_RCC_ClockConfig+0x1bc>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053da:	f000 f821 	bl	8005420 <HAL_RCC_GetSysClockFreq>
 80053de:	4602      	mov	r2, r0
 80053e0:	4b0b      	ldr	r3, [pc, #44]	; (8005410 <HAL_RCC_ClockConfig+0x1bc>)
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	091b      	lsrs	r3, r3, #4
 80053e6:	f003 030f 	and.w	r3, r3, #15
 80053ea:	490a      	ldr	r1, [pc, #40]	; (8005414 <HAL_RCC_ClockConfig+0x1c0>)
 80053ec:	5ccb      	ldrb	r3, [r1, r3]
 80053ee:	fa22 f303 	lsr.w	r3, r2, r3
 80053f2:	4a09      	ldr	r2, [pc, #36]	; (8005418 <HAL_RCC_ClockConfig+0x1c4>)
 80053f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80053f6:	4b09      	ldr	r3, [pc, #36]	; (800541c <HAL_RCC_ClockConfig+0x1c8>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fe f8a8 	bl	8003550 <HAL_InitTick>

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	40023c00 	.word	0x40023c00
 8005410:	40023800 	.word	0x40023800
 8005414:	0800bcb0 	.word	0x0800bcb0
 8005418:	20000014 	.word	0x20000014
 800541c:	20000018 	.word	0x20000018

08005420 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005424:	b090      	sub	sp, #64	; 0x40
 8005426:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005428:	2300      	movs	r3, #0
 800542a:	637b      	str	r3, [r7, #52]	; 0x34
 800542c:	2300      	movs	r3, #0
 800542e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005430:	2300      	movs	r3, #0
 8005432:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005434:	2300      	movs	r3, #0
 8005436:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005438:	4b59      	ldr	r3, [pc, #356]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f003 030c 	and.w	r3, r3, #12
 8005440:	2b08      	cmp	r3, #8
 8005442:	d00d      	beq.n	8005460 <HAL_RCC_GetSysClockFreq+0x40>
 8005444:	2b08      	cmp	r3, #8
 8005446:	f200 80a1 	bhi.w	800558c <HAL_RCC_GetSysClockFreq+0x16c>
 800544a:	2b00      	cmp	r3, #0
 800544c:	d002      	beq.n	8005454 <HAL_RCC_GetSysClockFreq+0x34>
 800544e:	2b04      	cmp	r3, #4
 8005450:	d003      	beq.n	800545a <HAL_RCC_GetSysClockFreq+0x3a>
 8005452:	e09b      	b.n	800558c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005454:	4b53      	ldr	r3, [pc, #332]	; (80055a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005456:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005458:	e09b      	b.n	8005592 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800545a:	4b53      	ldr	r3, [pc, #332]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800545c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800545e:	e098      	b.n	8005592 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005460:	4b4f      	ldr	r3, [pc, #316]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005468:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800546a:	4b4d      	ldr	r3, [pc, #308]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d028      	beq.n	80054c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005476:	4b4a      	ldr	r3, [pc, #296]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	099b      	lsrs	r3, r3, #6
 800547c:	2200      	movs	r2, #0
 800547e:	623b      	str	r3, [r7, #32]
 8005480:	627a      	str	r2, [r7, #36]	; 0x24
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005488:	2100      	movs	r1, #0
 800548a:	4b47      	ldr	r3, [pc, #284]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800548c:	fb03 f201 	mul.w	r2, r3, r1
 8005490:	2300      	movs	r3, #0
 8005492:	fb00 f303 	mul.w	r3, r0, r3
 8005496:	4413      	add	r3, r2
 8005498:	4a43      	ldr	r2, [pc, #268]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800549a:	fba0 1202 	umull	r1, r2, r0, r2
 800549e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054a0:	460a      	mov	r2, r1
 80054a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80054a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054a6:	4413      	add	r3, r2
 80054a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ac:	2200      	movs	r2, #0
 80054ae:	61bb      	str	r3, [r7, #24]
 80054b0:	61fa      	str	r2, [r7, #28]
 80054b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80054ba:	f7fb fb77 	bl	8000bac <__aeabi_uldivmod>
 80054be:	4602      	mov	r2, r0
 80054c0:	460b      	mov	r3, r1
 80054c2:	4613      	mov	r3, r2
 80054c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054c6:	e053      	b.n	8005570 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054c8:	4b35      	ldr	r3, [pc, #212]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	099b      	lsrs	r3, r3, #6
 80054ce:	2200      	movs	r2, #0
 80054d0:	613b      	str	r3, [r7, #16]
 80054d2:	617a      	str	r2, [r7, #20]
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80054da:	f04f 0b00 	mov.w	fp, #0
 80054de:	4652      	mov	r2, sl
 80054e0:	465b      	mov	r3, fp
 80054e2:	f04f 0000 	mov.w	r0, #0
 80054e6:	f04f 0100 	mov.w	r1, #0
 80054ea:	0159      	lsls	r1, r3, #5
 80054ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054f0:	0150      	lsls	r0, r2, #5
 80054f2:	4602      	mov	r2, r0
 80054f4:	460b      	mov	r3, r1
 80054f6:	ebb2 080a 	subs.w	r8, r2, sl
 80054fa:	eb63 090b 	sbc.w	r9, r3, fp
 80054fe:	f04f 0200 	mov.w	r2, #0
 8005502:	f04f 0300 	mov.w	r3, #0
 8005506:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800550a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800550e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005512:	ebb2 0408 	subs.w	r4, r2, r8
 8005516:	eb63 0509 	sbc.w	r5, r3, r9
 800551a:	f04f 0200 	mov.w	r2, #0
 800551e:	f04f 0300 	mov.w	r3, #0
 8005522:	00eb      	lsls	r3, r5, #3
 8005524:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005528:	00e2      	lsls	r2, r4, #3
 800552a:	4614      	mov	r4, r2
 800552c:	461d      	mov	r5, r3
 800552e:	eb14 030a 	adds.w	r3, r4, sl
 8005532:	603b      	str	r3, [r7, #0]
 8005534:	eb45 030b 	adc.w	r3, r5, fp
 8005538:	607b      	str	r3, [r7, #4]
 800553a:	f04f 0200 	mov.w	r2, #0
 800553e:	f04f 0300 	mov.w	r3, #0
 8005542:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005546:	4629      	mov	r1, r5
 8005548:	028b      	lsls	r3, r1, #10
 800554a:	4621      	mov	r1, r4
 800554c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005550:	4621      	mov	r1, r4
 8005552:	028a      	lsls	r2, r1, #10
 8005554:	4610      	mov	r0, r2
 8005556:	4619      	mov	r1, r3
 8005558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800555a:	2200      	movs	r2, #0
 800555c:	60bb      	str	r3, [r7, #8]
 800555e:	60fa      	str	r2, [r7, #12]
 8005560:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005564:	f7fb fb22 	bl	8000bac <__aeabi_uldivmod>
 8005568:	4602      	mov	r2, r0
 800556a:	460b      	mov	r3, r1
 800556c:	4613      	mov	r3, r2
 800556e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005570:	4b0b      	ldr	r3, [pc, #44]	; (80055a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	0c1b      	lsrs	r3, r3, #16
 8005576:	f003 0303 	and.w	r3, r3, #3
 800557a:	3301      	adds	r3, #1
 800557c:	005b      	lsls	r3, r3, #1
 800557e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005580:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005584:	fbb2 f3f3 	udiv	r3, r2, r3
 8005588:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800558a:	e002      	b.n	8005592 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800558c:	4b05      	ldr	r3, [pc, #20]	; (80055a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800558e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005590:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005594:	4618      	mov	r0, r3
 8005596:	3740      	adds	r7, #64	; 0x40
 8005598:	46bd      	mov	sp, r7
 800559a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800559e:	bf00      	nop
 80055a0:	40023800 	.word	0x40023800
 80055a4:	00f42400 	.word	0x00f42400
 80055a8:	017d7840 	.word	0x017d7840

080055ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055ac:	b480      	push	{r7}
 80055ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055b0:	4b03      	ldr	r3, [pc, #12]	; (80055c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80055b2:	681b      	ldr	r3, [r3, #0]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	20000014 	.word	0x20000014

080055c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80055c8:	f7ff fff0 	bl	80055ac <HAL_RCC_GetHCLKFreq>
 80055cc:	4602      	mov	r2, r0
 80055ce:	4b05      	ldr	r3, [pc, #20]	; (80055e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	0a9b      	lsrs	r3, r3, #10
 80055d4:	f003 0307 	and.w	r3, r3, #7
 80055d8:	4903      	ldr	r1, [pc, #12]	; (80055e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055da:	5ccb      	ldrb	r3, [r1, r3]
 80055dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	40023800 	.word	0x40023800
 80055e8:	0800bcc0 	.word	0x0800bcc0

080055ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80055f0:	f7ff ffdc 	bl	80055ac <HAL_RCC_GetHCLKFreq>
 80055f4:	4602      	mov	r2, r0
 80055f6:	4b05      	ldr	r3, [pc, #20]	; (800560c <HAL_RCC_GetPCLK2Freq+0x20>)
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	0b5b      	lsrs	r3, r3, #13
 80055fc:	f003 0307 	and.w	r3, r3, #7
 8005600:	4903      	ldr	r1, [pc, #12]	; (8005610 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005602:	5ccb      	ldrb	r3, [r1, r3]
 8005604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005608:	4618      	mov	r0, r3
 800560a:	bd80      	pop	{r7, pc}
 800560c:	40023800 	.word	0x40023800
 8005610:	0800bcc0 	.word	0x0800bcc0

08005614 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e041      	b.n	80056aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d106      	bne.n	8005640 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7fd fcea 	bl	8003014 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	3304      	adds	r3, #4
 8005650:	4619      	mov	r1, r3
 8005652:	4610      	mov	r0, r2
 8005654:	f000 ff42 	bl	80064dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b082      	sub	sp, #8
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e041      	b.n	8005748 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d106      	bne.n	80056de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f839 	bl	8005750 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2202      	movs	r2, #2
 80056e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	3304      	adds	r3, #4
 80056ee:	4619      	mov	r1, r3
 80056f0:	4610      	mov	r0, r2
 80056f2:	f000 fef3 	bl	80064dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3708      	adds	r7, #8
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d109      	bne.n	8005788 <HAL_TIM_PWM_Start+0x24>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b01      	cmp	r3, #1
 800577e:	bf14      	ite	ne
 8005780:	2301      	movne	r3, #1
 8005782:	2300      	moveq	r3, #0
 8005784:	b2db      	uxtb	r3, r3
 8005786:	e022      	b.n	80057ce <HAL_TIM_PWM_Start+0x6a>
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	2b04      	cmp	r3, #4
 800578c:	d109      	bne.n	80057a2 <HAL_TIM_PWM_Start+0x3e>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b01      	cmp	r3, #1
 8005798:	bf14      	ite	ne
 800579a:	2301      	movne	r3, #1
 800579c:	2300      	moveq	r3, #0
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	e015      	b.n	80057ce <HAL_TIM_PWM_Start+0x6a>
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d109      	bne.n	80057bc <HAL_TIM_PWM_Start+0x58>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	bf14      	ite	ne
 80057b4:	2301      	movne	r3, #1
 80057b6:	2300      	moveq	r3, #0
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	e008      	b.n	80057ce <HAL_TIM_PWM_Start+0x6a>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	bf14      	ite	ne
 80057c8:	2301      	movne	r3, #1
 80057ca:	2300      	moveq	r3, #0
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e07c      	b.n	80058d0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d104      	bne.n	80057e6 <HAL_TIM_PWM_Start+0x82>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057e4:	e013      	b.n	800580e <HAL_TIM_PWM_Start+0xaa>
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b04      	cmp	r3, #4
 80057ea:	d104      	bne.n	80057f6 <HAL_TIM_PWM_Start+0x92>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057f4:	e00b      	b.n	800580e <HAL_TIM_PWM_Start+0xaa>
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2b08      	cmp	r3, #8
 80057fa:	d104      	bne.n	8005806 <HAL_TIM_PWM_Start+0xa2>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005804:	e003      	b.n	800580e <HAL_TIM_PWM_Start+0xaa>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2202      	movs	r2, #2
 800580a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2201      	movs	r2, #1
 8005814:	6839      	ldr	r1, [r7, #0]
 8005816:	4618      	mov	r0, r3
 8005818:	f001 fa80 	bl	8006d1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a2d      	ldr	r2, [pc, #180]	; (80058d8 <HAL_TIM_PWM_Start+0x174>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d004      	beq.n	8005830 <HAL_TIM_PWM_Start+0xcc>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a2c      	ldr	r2, [pc, #176]	; (80058dc <HAL_TIM_PWM_Start+0x178>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d101      	bne.n	8005834 <HAL_TIM_PWM_Start+0xd0>
 8005830:	2301      	movs	r3, #1
 8005832:	e000      	b.n	8005836 <HAL_TIM_PWM_Start+0xd2>
 8005834:	2300      	movs	r3, #0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d007      	beq.n	800584a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005848:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a22      	ldr	r2, [pc, #136]	; (80058d8 <HAL_TIM_PWM_Start+0x174>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d022      	beq.n	800589a <HAL_TIM_PWM_Start+0x136>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800585c:	d01d      	beq.n	800589a <HAL_TIM_PWM_Start+0x136>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a1f      	ldr	r2, [pc, #124]	; (80058e0 <HAL_TIM_PWM_Start+0x17c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d018      	beq.n	800589a <HAL_TIM_PWM_Start+0x136>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a1d      	ldr	r2, [pc, #116]	; (80058e4 <HAL_TIM_PWM_Start+0x180>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d013      	beq.n	800589a <HAL_TIM_PWM_Start+0x136>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a1c      	ldr	r2, [pc, #112]	; (80058e8 <HAL_TIM_PWM_Start+0x184>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d00e      	beq.n	800589a <HAL_TIM_PWM_Start+0x136>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a16      	ldr	r2, [pc, #88]	; (80058dc <HAL_TIM_PWM_Start+0x178>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d009      	beq.n	800589a <HAL_TIM_PWM_Start+0x136>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a18      	ldr	r2, [pc, #96]	; (80058ec <HAL_TIM_PWM_Start+0x188>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d004      	beq.n	800589a <HAL_TIM_PWM_Start+0x136>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a16      	ldr	r2, [pc, #88]	; (80058f0 <HAL_TIM_PWM_Start+0x18c>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d111      	bne.n	80058be <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f003 0307 	and.w	r3, r3, #7
 80058a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2b06      	cmp	r3, #6
 80058aa:	d010      	beq.n	80058ce <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f042 0201 	orr.w	r2, r2, #1
 80058ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058bc:	e007      	b.n	80058ce <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f042 0201 	orr.w	r2, r2, #1
 80058cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	40010000 	.word	0x40010000
 80058dc:	40010400 	.word	0x40010400
 80058e0:	40000400 	.word	0x40000400
 80058e4:	40000800 	.word	0x40000800
 80058e8:	40000c00 	.word	0x40000c00
 80058ec:	40014000 	.word	0x40014000
 80058f0:	40001800 	.word	0x40001800

080058f4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e041      	b.n	800598a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d106      	bne.n	8005920 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7fd fc72 	bl	8003204 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2202      	movs	r2, #2
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	3304      	adds	r3, #4
 8005930:	4619      	mov	r1, r3
 8005932:	4610      	mov	r0, r2
 8005934:	f000 fdd2 	bl	80064dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
	...

08005994 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800599e:	2300      	movs	r3, #0
 80059a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d104      	bne.n	80059b2 <HAL_TIM_IC_Start_IT+0x1e>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	e013      	b.n	80059da <HAL_TIM_IC_Start_IT+0x46>
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2b04      	cmp	r3, #4
 80059b6:	d104      	bne.n	80059c2 <HAL_TIM_IC_Start_IT+0x2e>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	e00b      	b.n	80059da <HAL_TIM_IC_Start_IT+0x46>
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2b08      	cmp	r3, #8
 80059c6:	d104      	bne.n	80059d2 <HAL_TIM_IC_Start_IT+0x3e>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	e003      	b.n	80059da <HAL_TIM_IC_Start_IT+0x46>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d104      	bne.n	80059ec <HAL_TIM_IC_Start_IT+0x58>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	e013      	b.n	8005a14 <HAL_TIM_IC_Start_IT+0x80>
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	2b04      	cmp	r3, #4
 80059f0:	d104      	bne.n	80059fc <HAL_TIM_IC_Start_IT+0x68>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	e00b      	b.n	8005a14 <HAL_TIM_IC_Start_IT+0x80>
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	2b08      	cmp	r3, #8
 8005a00:	d104      	bne.n	8005a0c <HAL_TIM_IC_Start_IT+0x78>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	e003      	b.n	8005a14 <HAL_TIM_IC_Start_IT+0x80>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a16:	7bbb      	ldrb	r3, [r7, #14]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d102      	bne.n	8005a22 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a1c:	7b7b      	ldrb	r3, [r7, #13]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d001      	beq.n	8005a26 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e0cc      	b.n	8005bc0 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d104      	bne.n	8005a36 <HAL_TIM_IC_Start_IT+0xa2>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a34:	e013      	b.n	8005a5e <HAL_TIM_IC_Start_IT+0xca>
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	2b04      	cmp	r3, #4
 8005a3a:	d104      	bne.n	8005a46 <HAL_TIM_IC_Start_IT+0xb2>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2202      	movs	r2, #2
 8005a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a44:	e00b      	b.n	8005a5e <HAL_TIM_IC_Start_IT+0xca>
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b08      	cmp	r3, #8
 8005a4a:	d104      	bne.n	8005a56 <HAL_TIM_IC_Start_IT+0xc2>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a54:	e003      	b.n	8005a5e <HAL_TIM_IC_Start_IT+0xca>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2202      	movs	r2, #2
 8005a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d104      	bne.n	8005a6e <HAL_TIM_IC_Start_IT+0xda>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2202      	movs	r2, #2
 8005a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a6c:	e013      	b.n	8005a96 <HAL_TIM_IC_Start_IT+0x102>
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	2b04      	cmp	r3, #4
 8005a72:	d104      	bne.n	8005a7e <HAL_TIM_IC_Start_IT+0xea>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2202      	movs	r2, #2
 8005a78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a7c:	e00b      	b.n	8005a96 <HAL_TIM_IC_Start_IT+0x102>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b08      	cmp	r3, #8
 8005a82:	d104      	bne.n	8005a8e <HAL_TIM_IC_Start_IT+0xfa>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2202      	movs	r2, #2
 8005a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a8c:	e003      	b.n	8005a96 <HAL_TIM_IC_Start_IT+0x102>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2202      	movs	r2, #2
 8005a92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2b0c      	cmp	r3, #12
 8005a9a:	d841      	bhi.n	8005b20 <HAL_TIM_IC_Start_IT+0x18c>
 8005a9c:	a201      	add	r2, pc, #4	; (adr r2, 8005aa4 <HAL_TIM_IC_Start_IT+0x110>)
 8005a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa2:	bf00      	nop
 8005aa4:	08005ad9 	.word	0x08005ad9
 8005aa8:	08005b21 	.word	0x08005b21
 8005aac:	08005b21 	.word	0x08005b21
 8005ab0:	08005b21 	.word	0x08005b21
 8005ab4:	08005aeb 	.word	0x08005aeb
 8005ab8:	08005b21 	.word	0x08005b21
 8005abc:	08005b21 	.word	0x08005b21
 8005ac0:	08005b21 	.word	0x08005b21
 8005ac4:	08005afd 	.word	0x08005afd
 8005ac8:	08005b21 	.word	0x08005b21
 8005acc:	08005b21 	.word	0x08005b21
 8005ad0:	08005b21 	.word	0x08005b21
 8005ad4:	08005b0f 	.word	0x08005b0f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68da      	ldr	r2, [r3, #12]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f042 0202 	orr.w	r2, r2, #2
 8005ae6:	60da      	str	r2, [r3, #12]
      break;
 8005ae8:	e01d      	b.n	8005b26 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68da      	ldr	r2, [r3, #12]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f042 0204 	orr.w	r2, r2, #4
 8005af8:	60da      	str	r2, [r3, #12]
      break;
 8005afa:	e014      	b.n	8005b26 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68da      	ldr	r2, [r3, #12]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f042 0208 	orr.w	r2, r2, #8
 8005b0a:	60da      	str	r2, [r3, #12]
      break;
 8005b0c:	e00b      	b.n	8005b26 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68da      	ldr	r2, [r3, #12]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f042 0210 	orr.w	r2, r2, #16
 8005b1c:	60da      	str	r2, [r3, #12]
      break;
 8005b1e:	e002      	b.n	8005b26 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	73fb      	strb	r3, [r7, #15]
      break;
 8005b24:	bf00      	nop
  }

  if (status == HAL_OK)
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d148      	bne.n	8005bbe <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2201      	movs	r2, #1
 8005b32:	6839      	ldr	r1, [r7, #0]
 8005b34:	4618      	mov	r0, r3
 8005b36:	f001 f8f1 	bl	8006d1c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a22      	ldr	r2, [pc, #136]	; (8005bc8 <HAL_TIM_IC_Start_IT+0x234>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d022      	beq.n	8005b8a <HAL_TIM_IC_Start_IT+0x1f6>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b4c:	d01d      	beq.n	8005b8a <HAL_TIM_IC_Start_IT+0x1f6>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a1e      	ldr	r2, [pc, #120]	; (8005bcc <HAL_TIM_IC_Start_IT+0x238>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d018      	beq.n	8005b8a <HAL_TIM_IC_Start_IT+0x1f6>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a1c      	ldr	r2, [pc, #112]	; (8005bd0 <HAL_TIM_IC_Start_IT+0x23c>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d013      	beq.n	8005b8a <HAL_TIM_IC_Start_IT+0x1f6>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a1b      	ldr	r2, [pc, #108]	; (8005bd4 <HAL_TIM_IC_Start_IT+0x240>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d00e      	beq.n	8005b8a <HAL_TIM_IC_Start_IT+0x1f6>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a19      	ldr	r2, [pc, #100]	; (8005bd8 <HAL_TIM_IC_Start_IT+0x244>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d009      	beq.n	8005b8a <HAL_TIM_IC_Start_IT+0x1f6>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a18      	ldr	r2, [pc, #96]	; (8005bdc <HAL_TIM_IC_Start_IT+0x248>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d004      	beq.n	8005b8a <HAL_TIM_IC_Start_IT+0x1f6>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a16      	ldr	r2, [pc, #88]	; (8005be0 <HAL_TIM_IC_Start_IT+0x24c>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d111      	bne.n	8005bae <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f003 0307 	and.w	r3, r3, #7
 8005b94:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	2b06      	cmp	r3, #6
 8005b9a:	d010      	beq.n	8005bbe <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f042 0201 	orr.w	r2, r2, #1
 8005baa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bac:	e007      	b.n	8005bbe <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f042 0201 	orr.w	r2, r2, #1
 8005bbc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	40010000 	.word	0x40010000
 8005bcc:	40000400 	.word	0x40000400
 8005bd0:	40000800 	.word	0x40000800
 8005bd4:	40000c00 	.word	0x40000c00
 8005bd8:	40010400 	.word	0x40010400
 8005bdc:	40014000 	.word	0x40014000
 8005be0:	40001800 	.word	0x40001800

08005be4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e097      	b.n	8005d28 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d106      	bne.n	8005c12 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f7fd fa5f 	bl	80030d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2202      	movs	r2, #2
 8005c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6812      	ldr	r2, [r2, #0]
 8005c24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c28:	f023 0307 	bic.w	r3, r3, #7
 8005c2c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	3304      	adds	r3, #4
 8005c36:	4619      	mov	r1, r3
 8005c38:	4610      	mov	r0, r2
 8005c3a:	f000 fc4f 	bl	80064dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c66:	f023 0303 	bic.w	r3, r3, #3
 8005c6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	021b      	lsls	r3, r3, #8
 8005c76:	4313      	orrs	r3, r2
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005c84:	f023 030c 	bic.w	r3, r3, #12
 8005c88:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	68da      	ldr	r2, [r3, #12]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	021b      	lsls	r3, r3, #8
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	011a      	lsls	r2, r3, #4
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	031b      	lsls	r3, r3, #12
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005cc2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005cca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685a      	ldr	r2, [r3, #4]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	011b      	lsls	r3, r3, #4
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3718      	adds	r7, #24
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d40:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d48:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d50:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005d58:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d110      	bne.n	8005d82 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d102      	bne.n	8005d6c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d66:	7b7b      	ldrb	r3, [r7, #13]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d001      	beq.n	8005d70 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e069      	b.n	8005e44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2202      	movs	r2, #2
 8005d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d80:	e031      	b.n	8005de6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	2b04      	cmp	r3, #4
 8005d86:	d110      	bne.n	8005daa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d88:	7bbb      	ldrb	r3, [r7, #14]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d102      	bne.n	8005d94 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d8e:	7b3b      	ldrb	r3, [r7, #12]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d001      	beq.n	8005d98 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e055      	b.n	8005e44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2202      	movs	r2, #2
 8005da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005da8:	e01d      	b.n	8005de6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005daa:	7bfb      	ldrb	r3, [r7, #15]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d108      	bne.n	8005dc2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005db0:	7bbb      	ldrb	r3, [r7, #14]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d105      	bne.n	8005dc2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005db6:	7b7b      	ldrb	r3, [r7, #13]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d102      	bne.n	8005dc2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005dbc:	7b3b      	ldrb	r3, [r7, #12]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d001      	beq.n	8005dc6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e03e      	b.n	8005e44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2202      	movs	r2, #2
 8005dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2202      	movs	r2, #2
 8005dd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2202      	movs	r2, #2
 8005dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2202      	movs	r2, #2
 8005de2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d003      	beq.n	8005df4 <HAL_TIM_Encoder_Start+0xc4>
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	2b04      	cmp	r3, #4
 8005df0:	d008      	beq.n	8005e04 <HAL_TIM_Encoder_Start+0xd4>
 8005df2:	e00f      	b.n	8005e14 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f000 ff8d 	bl	8006d1c <TIM_CCxChannelCmd>
      break;
 8005e02:	e016      	b.n	8005e32 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	2104      	movs	r1, #4
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f000 ff85 	bl	8006d1c <TIM_CCxChannelCmd>
      break;
 8005e12:	e00e      	b.n	8005e32 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f000 ff7d 	bl	8006d1c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2201      	movs	r2, #1
 8005e28:	2104      	movs	r1, #4
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 ff76 	bl	8006d1c <TIM_CCxChannelCmd>
      break;
 8005e30:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f042 0201 	orr.w	r2, r2, #1
 8005e40:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d020      	beq.n	8005eb0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f003 0302 	and.w	r3, r3, #2
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d01b      	beq.n	8005eb0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f06f 0202 	mvn.w	r2, #2
 8005e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	f003 0303 	and.w	r3, r3, #3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 fb01 	bl	800649e <HAL_TIM_IC_CaptureCallback>
 8005e9c:	e005      	b.n	8005eaa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 faf3 	bl	800648a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 fb04 	bl	80064b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	f003 0304 	and.w	r3, r3, #4
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d020      	beq.n	8005efc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f003 0304 	and.w	r3, r3, #4
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d01b      	beq.n	8005efc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f06f 0204 	mvn.w	r2, #4
 8005ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fadb 	bl	800649e <HAL_TIM_IC_CaptureCallback>
 8005ee8:	e005      	b.n	8005ef6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 facd 	bl	800648a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 fade 	bl	80064b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	f003 0308 	and.w	r3, r3, #8
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d020      	beq.n	8005f48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f003 0308 	and.w	r3, r3, #8
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d01b      	beq.n	8005f48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f06f 0208 	mvn.w	r2, #8
 8005f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2204      	movs	r2, #4
 8005f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	69db      	ldr	r3, [r3, #28]
 8005f26:	f003 0303 	and.w	r3, r3, #3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d003      	beq.n	8005f36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fab5 	bl	800649e <HAL_TIM_IC_CaptureCallback>
 8005f34:	e005      	b.n	8005f42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 faa7 	bl	800648a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 fab8 	bl	80064b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	f003 0310 	and.w	r3, r3, #16
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d020      	beq.n	8005f94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f003 0310 	and.w	r3, r3, #16
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d01b      	beq.n	8005f94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f06f 0210 	mvn.w	r2, #16
 8005f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2208      	movs	r2, #8
 8005f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d003      	beq.n	8005f82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 fa8f 	bl	800649e <HAL_TIM_IC_CaptureCallback>
 8005f80:	e005      	b.n	8005f8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 fa81 	bl	800648a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 fa92 	bl	80064b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00c      	beq.n	8005fb8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f003 0301 	and.w	r3, r3, #1
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d007      	beq.n	8005fb8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f06f 0201 	mvn.w	r2, #1
 8005fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 fa5f 	bl	8006476 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00c      	beq.n	8005fdc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d007      	beq.n	8005fdc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 ff9e 	bl	8006f18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00c      	beq.n	8006000 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d007      	beq.n	8006000 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fa63 	bl	80064c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	f003 0320 	and.w	r3, r3, #32
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00c      	beq.n	8006024 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f003 0320 	and.w	r3, r3, #32
 8006010:	2b00      	cmp	r3, #0
 8006012:	d007      	beq.n	8006024 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f06f 0220 	mvn.w	r2, #32
 800601c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 ff70 	bl	8006f04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006024:	bf00      	nop
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006038:	2300      	movs	r3, #0
 800603a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006042:	2b01      	cmp	r3, #1
 8006044:	d101      	bne.n	800604a <HAL_TIM_IC_ConfigChannel+0x1e>
 8006046:	2302      	movs	r3, #2
 8006048:	e088      	b.n	800615c <HAL_TIM_IC_ConfigChannel+0x130>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d11b      	bne.n	8006090 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006068:	f000 fc94 	bl	8006994 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	699a      	ldr	r2, [r3, #24]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f022 020c 	bic.w	r2, r2, #12
 800607a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6999      	ldr	r1, [r3, #24]
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	689a      	ldr	r2, [r3, #8]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	430a      	orrs	r2, r1
 800608c:	619a      	str	r2, [r3, #24]
 800608e:	e060      	b.n	8006152 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2b04      	cmp	r3, #4
 8006094:	d11c      	bne.n	80060d0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80060a6:	f000 fd18 	bl	8006ada <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	699a      	ldr	r2, [r3, #24]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80060b8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	6999      	ldr	r1, [r3, #24]
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	021a      	lsls	r2, r3, #8
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	619a      	str	r2, [r3, #24]
 80060ce:	e040      	b.n	8006152 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2b08      	cmp	r3, #8
 80060d4:	d11b      	bne.n	800610e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80060e6:	f000 fd65 	bl	8006bb4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	69da      	ldr	r2, [r3, #28]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 020c 	bic.w	r2, r2, #12
 80060f8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	69d9      	ldr	r1, [r3, #28]
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	689a      	ldr	r2, [r3, #8]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	430a      	orrs	r2, r1
 800610a:	61da      	str	r2, [r3, #28]
 800610c:	e021      	b.n	8006152 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2b0c      	cmp	r3, #12
 8006112:	d11c      	bne.n	800614e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006124:	f000 fd82 	bl	8006c2c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	69da      	ldr	r2, [r3, #28]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006136:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	69d9      	ldr	r1, [r3, #28]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	021a      	lsls	r2, r3, #8
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	430a      	orrs	r2, r1
 800614a:	61da      	str	r2, [r3, #28]
 800614c:	e001      	b.n	8006152 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800615a:	7dfb      	ldrb	r3, [r7, #23]
}
 800615c:	4618      	mov	r0, r3
 800615e:	3718      	adds	r7, #24
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006170:	2300      	movs	r3, #0
 8006172:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800617a:	2b01      	cmp	r3, #1
 800617c:	d101      	bne.n	8006182 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800617e:	2302      	movs	r3, #2
 8006180:	e0ae      	b.n	80062e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b0c      	cmp	r3, #12
 800618e:	f200 809f 	bhi.w	80062d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006192:	a201      	add	r2, pc, #4	; (adr r2, 8006198 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006198:	080061cd 	.word	0x080061cd
 800619c:	080062d1 	.word	0x080062d1
 80061a0:	080062d1 	.word	0x080062d1
 80061a4:	080062d1 	.word	0x080062d1
 80061a8:	0800620d 	.word	0x0800620d
 80061ac:	080062d1 	.word	0x080062d1
 80061b0:	080062d1 	.word	0x080062d1
 80061b4:	080062d1 	.word	0x080062d1
 80061b8:	0800624f 	.word	0x0800624f
 80061bc:	080062d1 	.word	0x080062d1
 80061c0:	080062d1 	.word	0x080062d1
 80061c4:	080062d1 	.word	0x080062d1
 80061c8:	0800628f 	.word	0x0800628f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68b9      	ldr	r1, [r7, #8]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 fa2e 	bl	8006634 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	699a      	ldr	r2, [r3, #24]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f042 0208 	orr.w	r2, r2, #8
 80061e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	699a      	ldr	r2, [r3, #24]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f022 0204 	bic.w	r2, r2, #4
 80061f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6999      	ldr	r1, [r3, #24]
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	691a      	ldr	r2, [r3, #16]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	619a      	str	r2, [r3, #24]
      break;
 800620a:	e064      	b.n	80062d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68b9      	ldr	r1, [r7, #8]
 8006212:	4618      	mov	r0, r3
 8006214:	f000 fa7e 	bl	8006714 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	699a      	ldr	r2, [r3, #24]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	699a      	ldr	r2, [r3, #24]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6999      	ldr	r1, [r3, #24]
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	021a      	lsls	r2, r3, #8
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	430a      	orrs	r2, r1
 800624a:	619a      	str	r2, [r3, #24]
      break;
 800624c:	e043      	b.n	80062d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68b9      	ldr	r1, [r7, #8]
 8006254:	4618      	mov	r0, r3
 8006256:	f000 fad3 	bl	8006800 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	69da      	ldr	r2, [r3, #28]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f042 0208 	orr.w	r2, r2, #8
 8006268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	69da      	ldr	r2, [r3, #28]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 0204 	bic.w	r2, r2, #4
 8006278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	69d9      	ldr	r1, [r3, #28]
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	691a      	ldr	r2, [r3, #16]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	430a      	orrs	r2, r1
 800628a:	61da      	str	r2, [r3, #28]
      break;
 800628c:	e023      	b.n	80062d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68b9      	ldr	r1, [r7, #8]
 8006294:	4618      	mov	r0, r3
 8006296:	f000 fb27 	bl	80068e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	69da      	ldr	r2, [r3, #28]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	69da      	ldr	r2, [r3, #28]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	69d9      	ldr	r1, [r3, #28]
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	021a      	lsls	r2, r3, #8
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	430a      	orrs	r2, r1
 80062cc:	61da      	str	r2, [r3, #28]
      break;
 80062ce:	e002      	b.n	80062d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	75fb      	strb	r3, [r7, #23]
      break;
 80062d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062de:	7dfb      	ldrb	r3, [r7, #23]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3718      	adds	r7, #24
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062f2:	2300      	movs	r3, #0
 80062f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d101      	bne.n	8006304 <HAL_TIM_ConfigClockSource+0x1c>
 8006300:	2302      	movs	r3, #2
 8006302:	e0b4      	b.n	800646e <HAL_TIM_ConfigClockSource+0x186>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2202      	movs	r2, #2
 8006310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800632a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800633c:	d03e      	beq.n	80063bc <HAL_TIM_ConfigClockSource+0xd4>
 800633e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006342:	f200 8087 	bhi.w	8006454 <HAL_TIM_ConfigClockSource+0x16c>
 8006346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800634a:	f000 8086 	beq.w	800645a <HAL_TIM_ConfigClockSource+0x172>
 800634e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006352:	d87f      	bhi.n	8006454 <HAL_TIM_ConfigClockSource+0x16c>
 8006354:	2b70      	cmp	r3, #112	; 0x70
 8006356:	d01a      	beq.n	800638e <HAL_TIM_ConfigClockSource+0xa6>
 8006358:	2b70      	cmp	r3, #112	; 0x70
 800635a:	d87b      	bhi.n	8006454 <HAL_TIM_ConfigClockSource+0x16c>
 800635c:	2b60      	cmp	r3, #96	; 0x60
 800635e:	d050      	beq.n	8006402 <HAL_TIM_ConfigClockSource+0x11a>
 8006360:	2b60      	cmp	r3, #96	; 0x60
 8006362:	d877      	bhi.n	8006454 <HAL_TIM_ConfigClockSource+0x16c>
 8006364:	2b50      	cmp	r3, #80	; 0x50
 8006366:	d03c      	beq.n	80063e2 <HAL_TIM_ConfigClockSource+0xfa>
 8006368:	2b50      	cmp	r3, #80	; 0x50
 800636a:	d873      	bhi.n	8006454 <HAL_TIM_ConfigClockSource+0x16c>
 800636c:	2b40      	cmp	r3, #64	; 0x40
 800636e:	d058      	beq.n	8006422 <HAL_TIM_ConfigClockSource+0x13a>
 8006370:	2b40      	cmp	r3, #64	; 0x40
 8006372:	d86f      	bhi.n	8006454 <HAL_TIM_ConfigClockSource+0x16c>
 8006374:	2b30      	cmp	r3, #48	; 0x30
 8006376:	d064      	beq.n	8006442 <HAL_TIM_ConfigClockSource+0x15a>
 8006378:	2b30      	cmp	r3, #48	; 0x30
 800637a:	d86b      	bhi.n	8006454 <HAL_TIM_ConfigClockSource+0x16c>
 800637c:	2b20      	cmp	r3, #32
 800637e:	d060      	beq.n	8006442 <HAL_TIM_ConfigClockSource+0x15a>
 8006380:	2b20      	cmp	r3, #32
 8006382:	d867      	bhi.n	8006454 <HAL_TIM_ConfigClockSource+0x16c>
 8006384:	2b00      	cmp	r3, #0
 8006386:	d05c      	beq.n	8006442 <HAL_TIM_ConfigClockSource+0x15a>
 8006388:	2b10      	cmp	r3, #16
 800638a:	d05a      	beq.n	8006442 <HAL_TIM_ConfigClockSource+0x15a>
 800638c:	e062      	b.n	8006454 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800639e:	f000 fc9d 	bl	8006cdc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	609a      	str	r2, [r3, #8]
      break;
 80063ba:	e04f      	b.n	800645c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063cc:	f000 fc86 	bl	8006cdc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	689a      	ldr	r2, [r3, #8]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063de:	609a      	str	r2, [r3, #8]
      break;
 80063e0:	e03c      	b.n	800645c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ee:	461a      	mov	r2, r3
 80063f0:	f000 fb44 	bl	8006a7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2150      	movs	r1, #80	; 0x50
 80063fa:	4618      	mov	r0, r3
 80063fc:	f000 fc53 	bl	8006ca6 <TIM_ITRx_SetConfig>
      break;
 8006400:	e02c      	b.n	800645c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800640e:	461a      	mov	r2, r3
 8006410:	f000 fba0 	bl	8006b54 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2160      	movs	r1, #96	; 0x60
 800641a:	4618      	mov	r0, r3
 800641c:	f000 fc43 	bl	8006ca6 <TIM_ITRx_SetConfig>
      break;
 8006420:	e01c      	b.n	800645c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800642e:	461a      	mov	r2, r3
 8006430:	f000 fb24 	bl	8006a7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2140      	movs	r1, #64	; 0x40
 800643a:	4618      	mov	r0, r3
 800643c:	f000 fc33 	bl	8006ca6 <TIM_ITRx_SetConfig>
      break;
 8006440:	e00c      	b.n	800645c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4619      	mov	r1, r3
 800644c:	4610      	mov	r0, r2
 800644e:	f000 fc2a 	bl	8006ca6 <TIM_ITRx_SetConfig>
      break;
 8006452:	e003      	b.n	800645c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	73fb      	strb	r3, [r7, #15]
      break;
 8006458:	e000      	b.n	800645c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800645a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800646c:	7bfb      	ldrb	r3, [r7, #15]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006476:	b480      	push	{r7}
 8006478:	b083      	sub	sp, #12
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800647e:	bf00      	nop
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800648a:	b480      	push	{r7}
 800648c:	b083      	sub	sp, #12
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006492:	bf00      	nop
 8006494:	370c      	adds	r7, #12
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800649e:	b480      	push	{r7}
 80064a0:	b083      	sub	sp, #12
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064a6:	bf00      	nop
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b083      	sub	sp, #12
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064ba:	bf00      	nop
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b083      	sub	sp, #12
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064ce:	bf00      	nop
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
	...

080064dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a46      	ldr	r2, [pc, #280]	; (8006608 <TIM_Base_SetConfig+0x12c>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d013      	beq.n	800651c <TIM_Base_SetConfig+0x40>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064fa:	d00f      	beq.n	800651c <TIM_Base_SetConfig+0x40>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a43      	ldr	r2, [pc, #268]	; (800660c <TIM_Base_SetConfig+0x130>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d00b      	beq.n	800651c <TIM_Base_SetConfig+0x40>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a42      	ldr	r2, [pc, #264]	; (8006610 <TIM_Base_SetConfig+0x134>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d007      	beq.n	800651c <TIM_Base_SetConfig+0x40>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a41      	ldr	r2, [pc, #260]	; (8006614 <TIM_Base_SetConfig+0x138>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d003      	beq.n	800651c <TIM_Base_SetConfig+0x40>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a40      	ldr	r2, [pc, #256]	; (8006618 <TIM_Base_SetConfig+0x13c>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d108      	bne.n	800652e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	4313      	orrs	r3, r2
 800652c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a35      	ldr	r2, [pc, #212]	; (8006608 <TIM_Base_SetConfig+0x12c>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d02b      	beq.n	800658e <TIM_Base_SetConfig+0xb2>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800653c:	d027      	beq.n	800658e <TIM_Base_SetConfig+0xb2>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a32      	ldr	r2, [pc, #200]	; (800660c <TIM_Base_SetConfig+0x130>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d023      	beq.n	800658e <TIM_Base_SetConfig+0xb2>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a31      	ldr	r2, [pc, #196]	; (8006610 <TIM_Base_SetConfig+0x134>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d01f      	beq.n	800658e <TIM_Base_SetConfig+0xb2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a30      	ldr	r2, [pc, #192]	; (8006614 <TIM_Base_SetConfig+0x138>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d01b      	beq.n	800658e <TIM_Base_SetConfig+0xb2>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a2f      	ldr	r2, [pc, #188]	; (8006618 <TIM_Base_SetConfig+0x13c>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d017      	beq.n	800658e <TIM_Base_SetConfig+0xb2>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a2e      	ldr	r2, [pc, #184]	; (800661c <TIM_Base_SetConfig+0x140>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d013      	beq.n	800658e <TIM_Base_SetConfig+0xb2>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a2d      	ldr	r2, [pc, #180]	; (8006620 <TIM_Base_SetConfig+0x144>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d00f      	beq.n	800658e <TIM_Base_SetConfig+0xb2>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a2c      	ldr	r2, [pc, #176]	; (8006624 <TIM_Base_SetConfig+0x148>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d00b      	beq.n	800658e <TIM_Base_SetConfig+0xb2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a2b      	ldr	r2, [pc, #172]	; (8006628 <TIM_Base_SetConfig+0x14c>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d007      	beq.n	800658e <TIM_Base_SetConfig+0xb2>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a2a      	ldr	r2, [pc, #168]	; (800662c <TIM_Base_SetConfig+0x150>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d003      	beq.n	800658e <TIM_Base_SetConfig+0xb2>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a29      	ldr	r2, [pc, #164]	; (8006630 <TIM_Base_SetConfig+0x154>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d108      	bne.n	80065a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	4313      	orrs	r3, r2
 800659e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	689a      	ldr	r2, [r3, #8]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a10      	ldr	r2, [pc, #64]	; (8006608 <TIM_Base_SetConfig+0x12c>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d003      	beq.n	80065d4 <TIM_Base_SetConfig+0xf8>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a12      	ldr	r2, [pc, #72]	; (8006618 <TIM_Base_SetConfig+0x13c>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d103      	bne.n	80065dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	691a      	ldr	r2, [r3, #16]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d105      	bne.n	80065fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	f023 0201 	bic.w	r2, r3, #1
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	611a      	str	r2, [r3, #16]
  }
}
 80065fa:	bf00      	nop
 80065fc:	3714      	adds	r7, #20
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	40010000 	.word	0x40010000
 800660c:	40000400 	.word	0x40000400
 8006610:	40000800 	.word	0x40000800
 8006614:	40000c00 	.word	0x40000c00
 8006618:	40010400 	.word	0x40010400
 800661c:	40014000 	.word	0x40014000
 8006620:	40014400 	.word	0x40014400
 8006624:	40014800 	.word	0x40014800
 8006628:	40001800 	.word	0x40001800
 800662c:	40001c00 	.word	0x40001c00
 8006630:	40002000 	.word	0x40002000

08006634 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006634:	b480      	push	{r7}
 8006636:	b087      	sub	sp, #28
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a1b      	ldr	r3, [r3, #32]
 8006648:	f023 0201 	bic.w	r2, r3, #1
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f023 0303 	bic.w	r3, r3, #3
 800666a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	4313      	orrs	r3, r2
 8006674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f023 0302 	bic.w	r3, r3, #2
 800667c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	4313      	orrs	r3, r2
 8006686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a20      	ldr	r2, [pc, #128]	; (800670c <TIM_OC1_SetConfig+0xd8>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d003      	beq.n	8006698 <TIM_OC1_SetConfig+0x64>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a1f      	ldr	r2, [pc, #124]	; (8006710 <TIM_OC1_SetConfig+0xdc>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d10c      	bne.n	80066b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f023 0308 	bic.w	r3, r3, #8
 800669e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f023 0304 	bic.w	r3, r3, #4
 80066b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a15      	ldr	r2, [pc, #84]	; (800670c <TIM_OC1_SetConfig+0xd8>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d003      	beq.n	80066c2 <TIM_OC1_SetConfig+0x8e>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a14      	ldr	r2, [pc, #80]	; (8006710 <TIM_OC1_SetConfig+0xdc>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d111      	bne.n	80066e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	4313      	orrs	r3, r2
 80066da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	621a      	str	r2, [r3, #32]
}
 8006700:	bf00      	nop
 8006702:	371c      	adds	r7, #28
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	40010000 	.word	0x40010000
 8006710:	40010400 	.word	0x40010400

08006714 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006714:	b480      	push	{r7}
 8006716:	b087      	sub	sp, #28
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a1b      	ldr	r3, [r3, #32]
 8006728:	f023 0210 	bic.w	r2, r3, #16
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800674a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	021b      	lsls	r3, r3, #8
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	4313      	orrs	r3, r2
 8006756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	f023 0320 	bic.w	r3, r3, #32
 800675e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	011b      	lsls	r3, r3, #4
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	4313      	orrs	r3, r2
 800676a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a22      	ldr	r2, [pc, #136]	; (80067f8 <TIM_OC2_SetConfig+0xe4>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d003      	beq.n	800677c <TIM_OC2_SetConfig+0x68>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a21      	ldr	r2, [pc, #132]	; (80067fc <TIM_OC2_SetConfig+0xe8>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d10d      	bne.n	8006798 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	011b      	lsls	r3, r3, #4
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	4313      	orrs	r3, r2
 800678e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006796:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a17      	ldr	r2, [pc, #92]	; (80067f8 <TIM_OC2_SetConfig+0xe4>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d003      	beq.n	80067a8 <TIM_OC2_SetConfig+0x94>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a16      	ldr	r2, [pc, #88]	; (80067fc <TIM_OC2_SetConfig+0xe8>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d113      	bne.n	80067d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	695b      	ldr	r3, [r3, #20]
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	621a      	str	r2, [r3, #32]
}
 80067ea:	bf00      	nop
 80067ec:	371c      	adds	r7, #28
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	40010000 	.word	0x40010000
 80067fc:	40010400 	.word	0x40010400

08006800 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006800:	b480      	push	{r7}
 8006802:	b087      	sub	sp, #28
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a1b      	ldr	r3, [r3, #32]
 8006814:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	69db      	ldr	r3, [r3, #28]
 8006826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800682e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f023 0303 	bic.w	r3, r3, #3
 8006836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	4313      	orrs	r3, r2
 8006840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	021b      	lsls	r3, r3, #8
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	4313      	orrs	r3, r2
 8006854:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a21      	ldr	r2, [pc, #132]	; (80068e0 <TIM_OC3_SetConfig+0xe0>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d003      	beq.n	8006866 <TIM_OC3_SetConfig+0x66>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a20      	ldr	r2, [pc, #128]	; (80068e4 <TIM_OC3_SetConfig+0xe4>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d10d      	bne.n	8006882 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800686c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	021b      	lsls	r3, r3, #8
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	4313      	orrs	r3, r2
 8006878:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006880:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a16      	ldr	r2, [pc, #88]	; (80068e0 <TIM_OC3_SetConfig+0xe0>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d003      	beq.n	8006892 <TIM_OC3_SetConfig+0x92>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a15      	ldr	r2, [pc, #84]	; (80068e4 <TIM_OC3_SetConfig+0xe4>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d113      	bne.n	80068ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006898:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	011b      	lsls	r3, r3, #4
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	011b      	lsls	r3, r3, #4
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	685a      	ldr	r2, [r3, #4]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	621a      	str	r2, [r3, #32]
}
 80068d4:	bf00      	nop
 80068d6:	371c      	adds	r7, #28
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr
 80068e0:	40010000 	.word	0x40010000
 80068e4:	40010400 	.word	0x40010400

080068e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b087      	sub	sp, #28
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a1b      	ldr	r3, [r3, #32]
 80068f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a1b      	ldr	r3, [r3, #32]
 80068fc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800691e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	021b      	lsls	r3, r3, #8
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	4313      	orrs	r3, r2
 800692a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006932:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	031b      	lsls	r3, r3, #12
 800693a:	693a      	ldr	r2, [r7, #16]
 800693c:	4313      	orrs	r3, r2
 800693e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a12      	ldr	r2, [pc, #72]	; (800698c <TIM_OC4_SetConfig+0xa4>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d003      	beq.n	8006950 <TIM_OC4_SetConfig+0x68>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a11      	ldr	r2, [pc, #68]	; (8006990 <TIM_OC4_SetConfig+0xa8>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d109      	bne.n	8006964 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006956:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	695b      	ldr	r3, [r3, #20]
 800695c:	019b      	lsls	r3, r3, #6
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	4313      	orrs	r3, r2
 8006962:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	621a      	str	r2, [r3, #32]
}
 800697e:	bf00      	nop
 8006980:	371c      	adds	r7, #28
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	40010000 	.word	0x40010000
 8006990:	40010400 	.word	0x40010400

08006994 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006994:	b480      	push	{r7}
 8006996:	b087      	sub	sp, #28
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
 80069a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6a1b      	ldr	r3, [r3, #32]
 80069ac:	f023 0201 	bic.w	r2, r3, #1
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	4a28      	ldr	r2, [pc, #160]	; (8006a60 <TIM_TI1_SetConfig+0xcc>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d01b      	beq.n	80069fa <TIM_TI1_SetConfig+0x66>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069c8:	d017      	beq.n	80069fa <TIM_TI1_SetConfig+0x66>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	4a25      	ldr	r2, [pc, #148]	; (8006a64 <TIM_TI1_SetConfig+0xd0>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d013      	beq.n	80069fa <TIM_TI1_SetConfig+0x66>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	4a24      	ldr	r2, [pc, #144]	; (8006a68 <TIM_TI1_SetConfig+0xd4>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d00f      	beq.n	80069fa <TIM_TI1_SetConfig+0x66>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	4a23      	ldr	r2, [pc, #140]	; (8006a6c <TIM_TI1_SetConfig+0xd8>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d00b      	beq.n	80069fa <TIM_TI1_SetConfig+0x66>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	4a22      	ldr	r2, [pc, #136]	; (8006a70 <TIM_TI1_SetConfig+0xdc>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d007      	beq.n	80069fa <TIM_TI1_SetConfig+0x66>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	4a21      	ldr	r2, [pc, #132]	; (8006a74 <TIM_TI1_SetConfig+0xe0>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d003      	beq.n	80069fa <TIM_TI1_SetConfig+0x66>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	4a20      	ldr	r2, [pc, #128]	; (8006a78 <TIM_TI1_SetConfig+0xe4>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d101      	bne.n	80069fe <TIM_TI1_SetConfig+0x6a>
 80069fa:	2301      	movs	r3, #1
 80069fc:	e000      	b.n	8006a00 <TIM_TI1_SetConfig+0x6c>
 80069fe:	2300      	movs	r3, #0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d008      	beq.n	8006a16 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	f023 0303 	bic.w	r3, r3, #3
 8006a0a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006a0c:	697a      	ldr	r2, [r7, #20]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	617b      	str	r3, [r7, #20]
 8006a14:	e003      	b.n	8006a1e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f043 0301 	orr.w	r3, r3, #1
 8006a1c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	011b      	lsls	r3, r3, #4
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	f023 030a 	bic.w	r3, r3, #10
 8006a38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	f003 030a 	and.w	r3, r3, #10
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	621a      	str	r2, [r3, #32]
}
 8006a52:	bf00      	nop
 8006a54:	371c      	adds	r7, #28
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	40010000 	.word	0x40010000
 8006a64:	40000400 	.word	0x40000400
 8006a68:	40000800 	.word	0x40000800
 8006a6c:	40000c00 	.word	0x40000c00
 8006a70:	40010400 	.word	0x40010400
 8006a74:	40014000 	.word	0x40014000
 8006a78:	40001800 	.word	0x40001800

08006a7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b087      	sub	sp, #28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6a1b      	ldr	r3, [r3, #32]
 8006a8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	f023 0201 	bic.w	r2, r3, #1
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006aa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	011b      	lsls	r3, r3, #4
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f023 030a 	bic.w	r3, r3, #10
 8006ab8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	621a      	str	r2, [r3, #32]
}
 8006ace:	bf00      	nop
 8006ad0:	371c      	adds	r7, #28
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ada:	b480      	push	{r7}
 8006adc:	b087      	sub	sp, #28
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	60f8      	str	r0, [r7, #12]
 8006ae2:	60b9      	str	r1, [r7, #8]
 8006ae4:	607a      	str	r2, [r7, #4]
 8006ae6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6a1b      	ldr	r3, [r3, #32]
 8006aec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	f023 0210 	bic.w	r2, r3, #16
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	021b      	lsls	r3, r3, #8
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	031b      	lsls	r3, r3, #12
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	693a      	ldr	r2, [r7, #16]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b2c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	011b      	lsls	r3, r3, #4
 8006b32:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	693a      	ldr	r2, [r7, #16]
 8006b40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	697a      	ldr	r2, [r7, #20]
 8006b46:	621a      	str	r2, [r3, #32]
}
 8006b48:	bf00      	nop
 8006b4a:	371c      	adds	r7, #28
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b087      	sub	sp, #28
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6a1b      	ldr	r3, [r3, #32]
 8006b64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	f023 0210 	bic.w	r2, r3, #16
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	031b      	lsls	r3, r3, #12
 8006b84:	693a      	ldr	r2, [r7, #16]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b90:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	011b      	lsls	r3, r3, #4
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	621a      	str	r2, [r3, #32]
}
 8006ba8:	bf00      	nop
 8006baa:	371c      	adds	r7, #28
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]
 8006bc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6a1b      	ldr	r3, [r3, #32]
 8006bcc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	69db      	ldr	r3, [r3, #28]
 8006bd8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	f023 0303 	bic.w	r3, r3, #3
 8006be0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006be2:	693a      	ldr	r2, [r7, #16]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bf0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	011b      	lsls	r3, r3, #4
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006c04:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	021b      	lsls	r3, r3, #8
 8006c0a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	697a      	ldr	r2, [r7, #20]
 8006c1e:	621a      	str	r2, [r3, #32]
}
 8006c20:	bf00      	nop
 8006c22:	371c      	adds	r7, #28
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b087      	sub	sp, #28
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
 8006c38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6a1b      	ldr	r3, [r3, #32]
 8006c44:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	69db      	ldr	r3, [r3, #28]
 8006c50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c58:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	021b      	lsls	r3, r3, #8
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c6a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	031b      	lsls	r3, r3, #12
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	693a      	ldr	r2, [r7, #16]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006c7e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	031b      	lsls	r3, r3, #12
 8006c84:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	621a      	str	r2, [r3, #32]
}
 8006c9a:	bf00      	nop
 8006c9c:	371c      	adds	r7, #28
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b085      	sub	sp, #20
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
 8006cae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cbe:	683a      	ldr	r2, [r7, #0]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	f043 0307 	orr.w	r3, r3, #7
 8006cc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	609a      	str	r2, [r3, #8]
}
 8006cd0:	bf00      	nop
 8006cd2:	3714      	adds	r7, #20
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
 8006ce8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	021a      	lsls	r2, r3, #8
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	431a      	orrs	r2, r3
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	697a      	ldr	r2, [r7, #20]
 8006d0e:	609a      	str	r2, [r3, #8]
}
 8006d10:	bf00      	nop
 8006d12:	371c      	adds	r7, #28
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b087      	sub	sp, #28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	f003 031f 	and.w	r3, r3, #31
 8006d2e:	2201      	movs	r2, #1
 8006d30:	fa02 f303 	lsl.w	r3, r2, r3
 8006d34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6a1a      	ldr	r2, [r3, #32]
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	43db      	mvns	r3, r3
 8006d3e:	401a      	ands	r2, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6a1a      	ldr	r2, [r3, #32]
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	f003 031f 	and.w	r3, r3, #31
 8006d4e:	6879      	ldr	r1, [r7, #4]
 8006d50:	fa01 f303 	lsl.w	r3, r1, r3
 8006d54:	431a      	orrs	r2, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	621a      	str	r2, [r3, #32]
}
 8006d5a:	bf00      	nop
 8006d5c:	371c      	adds	r7, #28
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
	...

08006d68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d101      	bne.n	8006d80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	e05a      	b.n	8006e36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a21      	ldr	r2, [pc, #132]	; (8006e44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d022      	beq.n	8006e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dcc:	d01d      	beq.n	8006e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a1d      	ldr	r2, [pc, #116]	; (8006e48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d018      	beq.n	8006e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a1b      	ldr	r2, [pc, #108]	; (8006e4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d013      	beq.n	8006e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a1a      	ldr	r2, [pc, #104]	; (8006e50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d00e      	beq.n	8006e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a18      	ldr	r2, [pc, #96]	; (8006e54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d009      	beq.n	8006e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a17      	ldr	r2, [pc, #92]	; (8006e58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d004      	beq.n	8006e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a15      	ldr	r2, [pc, #84]	; (8006e5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d10c      	bne.n	8006e24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3714      	adds	r7, #20
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	40010000 	.word	0x40010000
 8006e48:	40000400 	.word	0x40000400
 8006e4c:	40000800 	.word	0x40000800
 8006e50:	40000c00 	.word	0x40000c00
 8006e54:	40010400 	.word	0x40010400
 8006e58:	40014000 	.word	0x40014000
 8006e5c:	40001800 	.word	0x40001800

08006e60 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d101      	bne.n	8006e7c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e78:	2302      	movs	r3, #2
 8006e7a:	e03d      	b.n	8006ef8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	695b      	ldr	r3, [r3, #20]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	69db      	ldr	r3, [r3, #28]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3714      	adds	r7, #20
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d101      	bne.n	8006f3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e042      	b.n	8006fc4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d106      	bne.n	8006f58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7fc f9e0 	bl	8003318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2224      	movs	r2, #36	; 0x24
 8006f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68da      	ldr	r2, [r3, #12]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 fdbd 	bl	8007af0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	691a      	ldr	r2, [r3, #16]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	695a      	ldr	r2, [r3, #20]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68da      	ldr	r2, [r3, #12]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2220      	movs	r2, #32
 8006fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3708      	adds	r7, #8
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b08a      	sub	sp, #40	; 0x28
 8006fd0:	af02      	add	r7, sp, #8
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	603b      	str	r3, [r7, #0]
 8006fd8:	4613      	mov	r3, r2
 8006fda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b20      	cmp	r3, #32
 8006fea:	d175      	bne.n	80070d8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d002      	beq.n	8006ff8 <HAL_UART_Transmit+0x2c>
 8006ff2:	88fb      	ldrh	r3, [r7, #6]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d101      	bne.n	8006ffc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e06e      	b.n	80070da <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2200      	movs	r2, #0
 8007000:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2221      	movs	r2, #33	; 0x21
 8007006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800700a:	f7fc fae5 	bl	80035d8 <HAL_GetTick>
 800700e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	88fa      	ldrh	r2, [r7, #6]
 8007014:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	88fa      	ldrh	r2, [r7, #6]
 800701a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007024:	d108      	bne.n	8007038 <HAL_UART_Transmit+0x6c>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d104      	bne.n	8007038 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800702e:	2300      	movs	r3, #0
 8007030:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	61bb      	str	r3, [r7, #24]
 8007036:	e003      	b.n	8007040 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800703c:	2300      	movs	r3, #0
 800703e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007040:	e02e      	b.n	80070a0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	9300      	str	r3, [sp, #0]
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	2200      	movs	r2, #0
 800704a:	2180      	movs	r1, #128	; 0x80
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f000 fb1f 	bl	8007690 <UART_WaitOnFlagUntilTimeout>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d005      	beq.n	8007064 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2220      	movs	r2, #32
 800705c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8007060:	2303      	movs	r3, #3
 8007062:	e03a      	b.n	80070da <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10b      	bne.n	8007082 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	881b      	ldrh	r3, [r3, #0]
 800706e:	461a      	mov	r2, r3
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007078:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	3302      	adds	r3, #2
 800707e:	61bb      	str	r3, [r7, #24]
 8007080:	e007      	b.n	8007092 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	781a      	ldrb	r2, [r3, #0]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	3301      	adds	r3, #1
 8007090:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007096:	b29b      	uxth	r3, r3
 8007098:	3b01      	subs	r3, #1
 800709a:	b29a      	uxth	r2, r3
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d1cb      	bne.n	8007042 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	2200      	movs	r2, #0
 80070b2:	2140      	movs	r1, #64	; 0x40
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f000 faeb 	bl	8007690 <UART_WaitOnFlagUntilTimeout>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d005      	beq.n	80070cc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2220      	movs	r2, #32
 80070c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80070c8:	2303      	movs	r3, #3
 80070ca:	e006      	b.n	80070da <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2220      	movs	r2, #32
 80070d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80070d4:	2300      	movs	r3, #0
 80070d6:	e000      	b.n	80070da <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80070d8:	2302      	movs	r3, #2
  }
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3720      	adds	r7, #32
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b084      	sub	sp, #16
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	60f8      	str	r0, [r7, #12]
 80070ea:	60b9      	str	r1, [r7, #8]
 80070ec:	4613      	mov	r3, r2
 80070ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b20      	cmp	r3, #32
 80070fa:	d112      	bne.n	8007122 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d002      	beq.n	8007108 <HAL_UART_Receive_IT+0x26>
 8007102:	88fb      	ldrh	r3, [r7, #6]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d101      	bne.n	800710c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e00b      	b.n	8007124 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007112:	88fb      	ldrh	r3, [r7, #6]
 8007114:	461a      	mov	r2, r3
 8007116:	68b9      	ldr	r1, [r7, #8]
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f000 fb12 	bl	8007742 <UART_Start_Receive_IT>
 800711e:	4603      	mov	r3, r0
 8007120:	e000      	b.n	8007124 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007122:	2302      	movs	r3, #2
  }
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b0ba      	sub	sp, #232	; 0xe8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007152:	2300      	movs	r3, #0
 8007154:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007158:	2300      	movs	r3, #0
 800715a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800715e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007162:	f003 030f 	and.w	r3, r3, #15
 8007166:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800716a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10f      	bne.n	8007192 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007176:	f003 0320 	and.w	r3, r3, #32
 800717a:	2b00      	cmp	r3, #0
 800717c:	d009      	beq.n	8007192 <HAL_UART_IRQHandler+0x66>
 800717e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007182:	f003 0320 	and.w	r3, r3, #32
 8007186:	2b00      	cmp	r3, #0
 8007188:	d003      	beq.n	8007192 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 fbf2 	bl	8007974 <UART_Receive_IT>
      return;
 8007190:	e25b      	b.n	800764a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007192:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007196:	2b00      	cmp	r3, #0
 8007198:	f000 80de 	beq.w	8007358 <HAL_UART_IRQHandler+0x22c>
 800719c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071a0:	f003 0301 	and.w	r3, r3, #1
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d106      	bne.n	80071b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80071a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 80d1 	beq.w	8007358 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80071b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ba:	f003 0301 	and.w	r3, r3, #1
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00b      	beq.n	80071da <HAL_UART_IRQHandler+0xae>
 80071c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d005      	beq.n	80071da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d2:	f043 0201 	orr.w	r2, r3, #1
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071de:	f003 0304 	and.w	r3, r3, #4
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00b      	beq.n	80071fe <HAL_UART_IRQHandler+0xd2>
 80071e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d005      	beq.n	80071fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f6:	f043 0202 	orr.w	r2, r3, #2
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007202:	f003 0302 	and.w	r3, r3, #2
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00b      	beq.n	8007222 <HAL_UART_IRQHandler+0xf6>
 800720a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800720e:	f003 0301 	and.w	r3, r3, #1
 8007212:	2b00      	cmp	r3, #0
 8007214:	d005      	beq.n	8007222 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800721a:	f043 0204 	orr.w	r2, r3, #4
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007226:	f003 0308 	and.w	r3, r3, #8
 800722a:	2b00      	cmp	r3, #0
 800722c:	d011      	beq.n	8007252 <HAL_UART_IRQHandler+0x126>
 800722e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007232:	f003 0320 	and.w	r3, r3, #32
 8007236:	2b00      	cmp	r3, #0
 8007238:	d105      	bne.n	8007246 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800723a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	2b00      	cmp	r3, #0
 8007244:	d005      	beq.n	8007252 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800724a:	f043 0208 	orr.w	r2, r3, #8
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007256:	2b00      	cmp	r3, #0
 8007258:	f000 81f2 	beq.w	8007640 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800725c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007260:	f003 0320 	and.w	r3, r3, #32
 8007264:	2b00      	cmp	r3, #0
 8007266:	d008      	beq.n	800727a <HAL_UART_IRQHandler+0x14e>
 8007268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800726c:	f003 0320 	and.w	r3, r3, #32
 8007270:	2b00      	cmp	r3, #0
 8007272:	d002      	beq.n	800727a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fb7d 	bl	8007974 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	695b      	ldr	r3, [r3, #20]
 8007280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007284:	2b40      	cmp	r3, #64	; 0x40
 8007286:	bf0c      	ite	eq
 8007288:	2301      	moveq	r3, #1
 800728a:	2300      	movne	r3, #0
 800728c:	b2db      	uxtb	r3, r3
 800728e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007296:	f003 0308 	and.w	r3, r3, #8
 800729a:	2b00      	cmp	r3, #0
 800729c:	d103      	bne.n	80072a6 <HAL_UART_IRQHandler+0x17a>
 800729e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d04f      	beq.n	8007346 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 fa85 	bl	80077b6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	695b      	ldr	r3, [r3, #20]
 80072b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b6:	2b40      	cmp	r3, #64	; 0x40
 80072b8:	d141      	bne.n	800733e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	3314      	adds	r3, #20
 80072c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80072c8:	e853 3f00 	ldrex	r3, [r3]
 80072cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80072d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80072d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	3314      	adds	r3, #20
 80072e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80072e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80072ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80072f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80072f6:	e841 2300 	strex	r3, r2, [r1]
 80072fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80072fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1d9      	bne.n	80072ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800730a:	2b00      	cmp	r3, #0
 800730c:	d013      	beq.n	8007336 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007312:	4a7e      	ldr	r2, [pc, #504]	; (800750c <HAL_UART_IRQHandler+0x3e0>)
 8007314:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800731a:	4618      	mov	r0, r3
 800731c:	f7fc fb0d 	bl	800393a <HAL_DMA_Abort_IT>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d016      	beq.n	8007354 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800732a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007330:	4610      	mov	r0, r2
 8007332:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007334:	e00e      	b.n	8007354 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f994 	bl	8007664 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800733c:	e00a      	b.n	8007354 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f990 	bl	8007664 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007344:	e006      	b.n	8007354 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f98c 	bl	8007664 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007352:	e175      	b.n	8007640 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007354:	bf00      	nop
    return;
 8007356:	e173      	b.n	8007640 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800735c:	2b01      	cmp	r3, #1
 800735e:	f040 814f 	bne.w	8007600 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007366:	f003 0310 	and.w	r3, r3, #16
 800736a:	2b00      	cmp	r3, #0
 800736c:	f000 8148 	beq.w	8007600 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007374:	f003 0310 	and.w	r3, r3, #16
 8007378:	2b00      	cmp	r3, #0
 800737a:	f000 8141 	beq.w	8007600 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800737e:	2300      	movs	r3, #0
 8007380:	60bb      	str	r3, [r7, #8]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	60bb      	str	r3, [r7, #8]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	60bb      	str	r3, [r7, #8]
 8007392:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800739e:	2b40      	cmp	r3, #64	; 0x40
 80073a0:	f040 80b6 	bne.w	8007510 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80073b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f000 8145 	beq.w	8007644 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80073be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073c2:	429a      	cmp	r2, r3
 80073c4:	f080 813e 	bcs.w	8007644 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80073ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073d4:	69db      	ldr	r3, [r3, #28]
 80073d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073da:	f000 8088 	beq.w	80074ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	330c      	adds	r3, #12
 80073e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073ec:	e853 3f00 	ldrex	r3, [r3]
 80073f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80073f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	330c      	adds	r3, #12
 8007406:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800740a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800740e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007412:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007416:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800741a:	e841 2300 	strex	r3, r2, [r1]
 800741e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007422:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007426:	2b00      	cmp	r3, #0
 8007428:	d1d9      	bne.n	80073de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	3314      	adds	r3, #20
 8007430:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007432:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007434:	e853 3f00 	ldrex	r3, [r3]
 8007438:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800743a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800743c:	f023 0301 	bic.w	r3, r3, #1
 8007440:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	3314      	adds	r3, #20
 800744a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800744e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007452:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007454:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007456:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800745a:	e841 2300 	strex	r3, r2, [r1]
 800745e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007460:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1e1      	bne.n	800742a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	3314      	adds	r3, #20
 800746c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007470:	e853 3f00 	ldrex	r3, [r3]
 8007474:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007478:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800747c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	3314      	adds	r3, #20
 8007486:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800748a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800748c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007490:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007492:	e841 2300 	strex	r3, r2, [r1]
 8007496:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007498:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800749a:	2b00      	cmp	r3, #0
 800749c:	d1e3      	bne.n	8007466 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2220      	movs	r2, #32
 80074a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	330c      	adds	r3, #12
 80074b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074b6:	e853 3f00 	ldrex	r3, [r3]
 80074ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80074bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074be:	f023 0310 	bic.w	r3, r3, #16
 80074c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	330c      	adds	r3, #12
 80074cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80074d0:	65ba      	str	r2, [r7, #88]	; 0x58
 80074d2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80074d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80074d8:	e841 2300 	strex	r3, r2, [r1]
 80074dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80074de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1e3      	bne.n	80074ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7fc f9b6 	bl	800385a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2202      	movs	r2, #2
 80074f2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	b29b      	uxth	r3, r3
 8007502:	4619      	mov	r1, r3
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f8b7 	bl	8007678 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800750a:	e09b      	b.n	8007644 <HAL_UART_IRQHandler+0x518>
 800750c:	0800787d 	.word	0x0800787d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007518:	b29b      	uxth	r3, r3
 800751a:	1ad3      	subs	r3, r2, r3
 800751c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007524:	b29b      	uxth	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	f000 808e 	beq.w	8007648 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800752c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007530:	2b00      	cmp	r3, #0
 8007532:	f000 8089 	beq.w	8007648 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	330c      	adds	r3, #12
 800753c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007540:	e853 3f00 	ldrex	r3, [r3]
 8007544:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007548:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800754c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	330c      	adds	r3, #12
 8007556:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800755a:	647a      	str	r2, [r7, #68]	; 0x44
 800755c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007560:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007562:	e841 2300 	strex	r3, r2, [r1]
 8007566:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1e3      	bne.n	8007536 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	3314      	adds	r3, #20
 8007574:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007578:	e853 3f00 	ldrex	r3, [r3]
 800757c:	623b      	str	r3, [r7, #32]
   return(result);
 800757e:	6a3b      	ldr	r3, [r7, #32]
 8007580:	f023 0301 	bic.w	r3, r3, #1
 8007584:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	3314      	adds	r3, #20
 800758e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007592:	633a      	str	r2, [r7, #48]	; 0x30
 8007594:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007596:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800759a:	e841 2300 	strex	r3, r2, [r1]
 800759e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1e3      	bne.n	800756e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2220      	movs	r2, #32
 80075aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	330c      	adds	r3, #12
 80075ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	e853 3f00 	ldrex	r3, [r3]
 80075c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f023 0310 	bic.w	r3, r3, #16
 80075ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	330c      	adds	r3, #12
 80075d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80075d8:	61fa      	str	r2, [r7, #28]
 80075da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075dc:	69b9      	ldr	r1, [r7, #24]
 80075de:	69fa      	ldr	r2, [r7, #28]
 80075e0:	e841 2300 	strex	r3, r2, [r1]
 80075e4:	617b      	str	r3, [r7, #20]
   return(result);
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1e3      	bne.n	80075b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2202      	movs	r2, #2
 80075f0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075f6:	4619      	mov	r1, r3
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 f83d 	bl	8007678 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80075fe:	e023      	b.n	8007648 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007608:	2b00      	cmp	r3, #0
 800760a:	d009      	beq.n	8007620 <HAL_UART_IRQHandler+0x4f4>
 800760c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007614:	2b00      	cmp	r3, #0
 8007616:	d003      	beq.n	8007620 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 f943 	bl	80078a4 <UART_Transmit_IT>
    return;
 800761e:	e014      	b.n	800764a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00e      	beq.n	800764a <HAL_UART_IRQHandler+0x51e>
 800762c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007634:	2b00      	cmp	r3, #0
 8007636:	d008      	beq.n	800764a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 f983 	bl	8007944 <UART_EndTransmit_IT>
    return;
 800763e:	e004      	b.n	800764a <HAL_UART_IRQHandler+0x51e>
    return;
 8007640:	bf00      	nop
 8007642:	e002      	b.n	800764a <HAL_UART_IRQHandler+0x51e>
      return;
 8007644:	bf00      	nop
 8007646:	e000      	b.n	800764a <HAL_UART_IRQHandler+0x51e>
      return;
 8007648:	bf00      	nop
  }
}
 800764a:	37e8      	adds	r7, #232	; 0xe8
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007658:	bf00      	nop
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800766c:	bf00      	nop
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	460b      	mov	r3, r1
 8007682:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007684:	bf00      	nop
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b086      	sub	sp, #24
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	603b      	str	r3, [r7, #0]
 800769c:	4613      	mov	r3, r2
 800769e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076a0:	e03b      	b.n	800771a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076a2:	6a3b      	ldr	r3, [r7, #32]
 80076a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a8:	d037      	beq.n	800771a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076aa:	f7fb ff95 	bl	80035d8 <HAL_GetTick>
 80076ae:	4602      	mov	r2, r0
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	6a3a      	ldr	r2, [r7, #32]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d302      	bcc.n	80076c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80076ba:	6a3b      	ldr	r3, [r7, #32]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d101      	bne.n	80076c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80076c0:	2303      	movs	r3, #3
 80076c2:	e03a      	b.n	800773a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	f003 0304 	and.w	r3, r3, #4
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d023      	beq.n	800771a <UART_WaitOnFlagUntilTimeout+0x8a>
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	2b80      	cmp	r3, #128	; 0x80
 80076d6:	d020      	beq.n	800771a <UART_WaitOnFlagUntilTimeout+0x8a>
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	2b40      	cmp	r3, #64	; 0x40
 80076dc:	d01d      	beq.n	800771a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 0308 	and.w	r3, r3, #8
 80076e8:	2b08      	cmp	r3, #8
 80076ea:	d116      	bne.n	800771a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80076ec:	2300      	movs	r3, #0
 80076ee:	617b      	str	r3, [r7, #20]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	617b      	str	r3, [r7, #20]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	617b      	str	r3, [r7, #20]
 8007700:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f000 f857 	bl	80077b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2208      	movs	r2, #8
 800770c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2200      	movs	r2, #0
 8007712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e00f      	b.n	800773a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	4013      	ands	r3, r2
 8007724:	68ba      	ldr	r2, [r7, #8]
 8007726:	429a      	cmp	r2, r3
 8007728:	bf0c      	ite	eq
 800772a:	2301      	moveq	r3, #1
 800772c:	2300      	movne	r3, #0
 800772e:	b2db      	uxtb	r3, r3
 8007730:	461a      	mov	r2, r3
 8007732:	79fb      	ldrb	r3, [r7, #7]
 8007734:	429a      	cmp	r2, r3
 8007736:	d0b4      	beq.n	80076a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3718      	adds	r7, #24
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007742:	b480      	push	{r7}
 8007744:	b085      	sub	sp, #20
 8007746:	af00      	add	r7, sp, #0
 8007748:	60f8      	str	r0, [r7, #12]
 800774a:	60b9      	str	r1, [r7, #8]
 800774c:	4613      	mov	r3, r2
 800774e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	68ba      	ldr	r2, [r7, #8]
 8007754:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	88fa      	ldrh	r2, [r7, #6]
 800775a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	88fa      	ldrh	r2, [r7, #6]
 8007760:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2200      	movs	r2, #0
 8007766:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2222      	movs	r2, #34	; 0x22
 800776c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d007      	beq.n	8007788 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68da      	ldr	r2, [r3, #12]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007786:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	695a      	ldr	r2, [r3, #20]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f042 0201 	orr.w	r2, r2, #1
 8007796:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68da      	ldr	r2, [r3, #12]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f042 0220 	orr.w	r2, r2, #32
 80077a6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3714      	adds	r7, #20
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr

080077b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077b6:	b480      	push	{r7}
 80077b8:	b095      	sub	sp, #84	; 0x54
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	330c      	adds	r3, #12
 80077c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c8:	e853 3f00 	ldrex	r3, [r3]
 80077cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	330c      	adds	r3, #12
 80077dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077de:	643a      	str	r2, [r7, #64]	; 0x40
 80077e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077e6:	e841 2300 	strex	r3, r2, [r1]
 80077ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1e5      	bne.n	80077be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3314      	adds	r3, #20
 80077f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fa:	6a3b      	ldr	r3, [r7, #32]
 80077fc:	e853 3f00 	ldrex	r3, [r3]
 8007800:	61fb      	str	r3, [r7, #28]
   return(result);
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	f023 0301 	bic.w	r3, r3, #1
 8007808:	64bb      	str	r3, [r7, #72]	; 0x48
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	3314      	adds	r3, #20
 8007810:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007812:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007814:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007816:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800781a:	e841 2300 	strex	r3, r2, [r1]
 800781e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1e5      	bne.n	80077f2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782a:	2b01      	cmp	r3, #1
 800782c:	d119      	bne.n	8007862 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	330c      	adds	r3, #12
 8007834:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	e853 3f00 	ldrex	r3, [r3]
 800783c:	60bb      	str	r3, [r7, #8]
   return(result);
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	f023 0310 	bic.w	r3, r3, #16
 8007844:	647b      	str	r3, [r7, #68]	; 0x44
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	330c      	adds	r3, #12
 800784c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800784e:	61ba      	str	r2, [r7, #24]
 8007850:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007852:	6979      	ldr	r1, [r7, #20]
 8007854:	69ba      	ldr	r2, [r7, #24]
 8007856:	e841 2300 	strex	r3, r2, [r1]
 800785a:	613b      	str	r3, [r7, #16]
   return(result);
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1e5      	bne.n	800782e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2220      	movs	r2, #32
 8007866:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007870:	bf00      	nop
 8007872:	3754      	adds	r7, #84	; 0x54
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007888:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f7ff fee4 	bl	8007664 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800789c:	bf00      	nop
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	2b21      	cmp	r3, #33	; 0x21
 80078b6:	d13e      	bne.n	8007936 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078c0:	d114      	bne.n	80078ec <UART_Transmit_IT+0x48>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	691b      	ldr	r3, [r3, #16]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d110      	bne.n	80078ec <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a1b      	ldr	r3, [r3, #32]
 80078ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	881b      	ldrh	r3, [r3, #0]
 80078d4:	461a      	mov	r2, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078de:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6a1b      	ldr	r3, [r3, #32]
 80078e4:	1c9a      	adds	r2, r3, #2
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	621a      	str	r2, [r3, #32]
 80078ea:	e008      	b.n	80078fe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a1b      	ldr	r3, [r3, #32]
 80078f0:	1c59      	adds	r1, r3, #1
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	6211      	str	r1, [r2, #32]
 80078f6:	781a      	ldrb	r2, [r3, #0]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007902:	b29b      	uxth	r3, r3
 8007904:	3b01      	subs	r3, #1
 8007906:	b29b      	uxth	r3, r3
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	4619      	mov	r1, r3
 800790c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800790e:	2b00      	cmp	r3, #0
 8007910:	d10f      	bne.n	8007932 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68da      	ldr	r2, [r3, #12]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007920:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68da      	ldr	r2, [r3, #12]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007930:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007932:	2300      	movs	r3, #0
 8007934:	e000      	b.n	8007938 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007936:	2302      	movs	r3, #2
  }
}
 8007938:	4618      	mov	r0, r3
 800793a:	3714      	adds	r7, #20
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68da      	ldr	r2, [r3, #12]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800795a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2220      	movs	r2, #32
 8007960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f7ff fe73 	bl	8007650 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800796a:	2300      	movs	r3, #0
}
 800796c:	4618      	mov	r0, r3
 800796e:	3708      	adds	r7, #8
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b08c      	sub	sp, #48	; 0x30
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007982:	b2db      	uxtb	r3, r3
 8007984:	2b22      	cmp	r3, #34	; 0x22
 8007986:	f040 80ae 	bne.w	8007ae6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007992:	d117      	bne.n	80079c4 <UART_Receive_IT+0x50>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d113      	bne.n	80079c4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800799c:	2300      	movs	r3, #0
 800799e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079bc:	1c9a      	adds	r2, r3, #2
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	629a      	str	r2, [r3, #40]	; 0x28
 80079c2:	e026      	b.n	8007a12 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80079ca:	2300      	movs	r3, #0
 80079cc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079d6:	d007      	beq.n	80079e8 <UART_Receive_IT+0x74>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d10a      	bne.n	80079f6 <UART_Receive_IT+0x82>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d106      	bne.n	80079f6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	b2da      	uxtb	r2, r3
 80079f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f2:	701a      	strb	r2, [r3, #0]
 80079f4:	e008      	b.n	8007a08 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a02:	b2da      	uxtb	r2, r3
 8007a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a06:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a0c:	1c5a      	adds	r2, r3, #1
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	4619      	mov	r1, r3
 8007a20:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d15d      	bne.n	8007ae2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68da      	ldr	r2, [r3, #12]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f022 0220 	bic.w	r2, r2, #32
 8007a34:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	68da      	ldr	r2, [r3, #12]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a44:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	695a      	ldr	r2, [r3, #20]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f022 0201 	bic.w	r2, r2, #1
 8007a54:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2220      	movs	r2, #32
 8007a5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d135      	bne.n	8007ad8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	330c      	adds	r3, #12
 8007a78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	e853 3f00 	ldrex	r3, [r3]
 8007a80:	613b      	str	r3, [r7, #16]
   return(result);
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	f023 0310 	bic.w	r3, r3, #16
 8007a88:	627b      	str	r3, [r7, #36]	; 0x24
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	330c      	adds	r3, #12
 8007a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a92:	623a      	str	r2, [r7, #32]
 8007a94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a96:	69f9      	ldr	r1, [r7, #28]
 8007a98:	6a3a      	ldr	r2, [r7, #32]
 8007a9a:	e841 2300 	strex	r3, r2, [r1]
 8007a9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1e5      	bne.n	8007a72 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 0310 	and.w	r3, r3, #16
 8007ab0:	2b10      	cmp	r3, #16
 8007ab2:	d10a      	bne.n	8007aca <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	60fb      	str	r3, [r7, #12]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	60fb      	str	r3, [r7, #12]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	60fb      	str	r3, [r7, #12]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ace:	4619      	mov	r1, r3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f7ff fdd1 	bl	8007678 <HAL_UARTEx_RxEventCallback>
 8007ad6:	e002      	b.n	8007ade <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f7f9 fe27 	bl	800172c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	e002      	b.n	8007ae8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	e000      	b.n	8007ae8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007ae6:	2302      	movs	r3, #2
  }
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3730      	adds	r7, #48	; 0x30
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007af4:	b0c0      	sub	sp, #256	; 0x100
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	691b      	ldr	r3, [r3, #16]
 8007b04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b0c:	68d9      	ldr	r1, [r3, #12]
 8007b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	ea40 0301 	orr.w	r3, r0, r1
 8007b18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b1e:	689a      	ldr	r2, [r3, #8]
 8007b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	431a      	orrs	r2, r3
 8007b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	431a      	orrs	r2, r3
 8007b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b34:	69db      	ldr	r3, [r3, #28]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007b48:	f021 010c 	bic.w	r1, r1, #12
 8007b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b56:	430b      	orrs	r3, r1
 8007b58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	695b      	ldr	r3, [r3, #20]
 8007b62:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b6a:	6999      	ldr	r1, [r3, #24]
 8007b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	ea40 0301 	orr.w	r3, r0, r1
 8007b76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	4b8f      	ldr	r3, [pc, #572]	; (8007dbc <UART_SetConfig+0x2cc>)
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d005      	beq.n	8007b90 <UART_SetConfig+0xa0>
 8007b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	4b8d      	ldr	r3, [pc, #564]	; (8007dc0 <UART_SetConfig+0x2d0>)
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d104      	bne.n	8007b9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b90:	f7fd fd2c 	bl	80055ec <HAL_RCC_GetPCLK2Freq>
 8007b94:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007b98:	e003      	b.n	8007ba2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b9a:	f7fd fd13 	bl	80055c4 <HAL_RCC_GetPCLK1Freq>
 8007b9e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ba6:	69db      	ldr	r3, [r3, #28]
 8007ba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bac:	f040 810c 	bne.w	8007dc8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007bb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007bba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007bbe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007bc2:	4622      	mov	r2, r4
 8007bc4:	462b      	mov	r3, r5
 8007bc6:	1891      	adds	r1, r2, r2
 8007bc8:	65b9      	str	r1, [r7, #88]	; 0x58
 8007bca:	415b      	adcs	r3, r3
 8007bcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007bd2:	4621      	mov	r1, r4
 8007bd4:	eb12 0801 	adds.w	r8, r2, r1
 8007bd8:	4629      	mov	r1, r5
 8007bda:	eb43 0901 	adc.w	r9, r3, r1
 8007bde:	f04f 0200 	mov.w	r2, #0
 8007be2:	f04f 0300 	mov.w	r3, #0
 8007be6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007bea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007bee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007bf2:	4690      	mov	r8, r2
 8007bf4:	4699      	mov	r9, r3
 8007bf6:	4623      	mov	r3, r4
 8007bf8:	eb18 0303 	adds.w	r3, r8, r3
 8007bfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c00:	462b      	mov	r3, r5
 8007c02:	eb49 0303 	adc.w	r3, r9, r3
 8007c06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007c16:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007c1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007c1e:	460b      	mov	r3, r1
 8007c20:	18db      	adds	r3, r3, r3
 8007c22:	653b      	str	r3, [r7, #80]	; 0x50
 8007c24:	4613      	mov	r3, r2
 8007c26:	eb42 0303 	adc.w	r3, r2, r3
 8007c2a:	657b      	str	r3, [r7, #84]	; 0x54
 8007c2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007c30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007c34:	f7f8 ffba 	bl	8000bac <__aeabi_uldivmod>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	4b61      	ldr	r3, [pc, #388]	; (8007dc4 <UART_SetConfig+0x2d4>)
 8007c3e:	fba3 2302 	umull	r2, r3, r3, r2
 8007c42:	095b      	lsrs	r3, r3, #5
 8007c44:	011c      	lsls	r4, r3, #4
 8007c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c50:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007c54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007c58:	4642      	mov	r2, r8
 8007c5a:	464b      	mov	r3, r9
 8007c5c:	1891      	adds	r1, r2, r2
 8007c5e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007c60:	415b      	adcs	r3, r3
 8007c62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007c68:	4641      	mov	r1, r8
 8007c6a:	eb12 0a01 	adds.w	sl, r2, r1
 8007c6e:	4649      	mov	r1, r9
 8007c70:	eb43 0b01 	adc.w	fp, r3, r1
 8007c74:	f04f 0200 	mov.w	r2, #0
 8007c78:	f04f 0300 	mov.w	r3, #0
 8007c7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007c80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007c84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c88:	4692      	mov	sl, r2
 8007c8a:	469b      	mov	fp, r3
 8007c8c:	4643      	mov	r3, r8
 8007c8e:	eb1a 0303 	adds.w	r3, sl, r3
 8007c92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c96:	464b      	mov	r3, r9
 8007c98:	eb4b 0303 	adc.w	r3, fp, r3
 8007c9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007cac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007cb0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	18db      	adds	r3, r3, r3
 8007cb8:	643b      	str	r3, [r7, #64]	; 0x40
 8007cba:	4613      	mov	r3, r2
 8007cbc:	eb42 0303 	adc.w	r3, r2, r3
 8007cc0:	647b      	str	r3, [r7, #68]	; 0x44
 8007cc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007cc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007cca:	f7f8 ff6f 	bl	8000bac <__aeabi_uldivmod>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	4611      	mov	r1, r2
 8007cd4:	4b3b      	ldr	r3, [pc, #236]	; (8007dc4 <UART_SetConfig+0x2d4>)
 8007cd6:	fba3 2301 	umull	r2, r3, r3, r1
 8007cda:	095b      	lsrs	r3, r3, #5
 8007cdc:	2264      	movs	r2, #100	; 0x64
 8007cde:	fb02 f303 	mul.w	r3, r2, r3
 8007ce2:	1acb      	subs	r3, r1, r3
 8007ce4:	00db      	lsls	r3, r3, #3
 8007ce6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007cea:	4b36      	ldr	r3, [pc, #216]	; (8007dc4 <UART_SetConfig+0x2d4>)
 8007cec:	fba3 2302 	umull	r2, r3, r3, r2
 8007cf0:	095b      	lsrs	r3, r3, #5
 8007cf2:	005b      	lsls	r3, r3, #1
 8007cf4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007cf8:	441c      	add	r4, r3
 8007cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d04:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007d08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007d0c:	4642      	mov	r2, r8
 8007d0e:	464b      	mov	r3, r9
 8007d10:	1891      	adds	r1, r2, r2
 8007d12:	63b9      	str	r1, [r7, #56]	; 0x38
 8007d14:	415b      	adcs	r3, r3
 8007d16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007d1c:	4641      	mov	r1, r8
 8007d1e:	1851      	adds	r1, r2, r1
 8007d20:	6339      	str	r1, [r7, #48]	; 0x30
 8007d22:	4649      	mov	r1, r9
 8007d24:	414b      	adcs	r3, r1
 8007d26:	637b      	str	r3, [r7, #52]	; 0x34
 8007d28:	f04f 0200 	mov.w	r2, #0
 8007d2c:	f04f 0300 	mov.w	r3, #0
 8007d30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007d34:	4659      	mov	r1, fp
 8007d36:	00cb      	lsls	r3, r1, #3
 8007d38:	4651      	mov	r1, sl
 8007d3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d3e:	4651      	mov	r1, sl
 8007d40:	00ca      	lsls	r2, r1, #3
 8007d42:	4610      	mov	r0, r2
 8007d44:	4619      	mov	r1, r3
 8007d46:	4603      	mov	r3, r0
 8007d48:	4642      	mov	r2, r8
 8007d4a:	189b      	adds	r3, r3, r2
 8007d4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d50:	464b      	mov	r3, r9
 8007d52:	460a      	mov	r2, r1
 8007d54:	eb42 0303 	adc.w	r3, r2, r3
 8007d58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007d68:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007d6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007d70:	460b      	mov	r3, r1
 8007d72:	18db      	adds	r3, r3, r3
 8007d74:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d76:	4613      	mov	r3, r2
 8007d78:	eb42 0303 	adc.w	r3, r2, r3
 8007d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007d86:	f7f8 ff11 	bl	8000bac <__aeabi_uldivmod>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	4b0d      	ldr	r3, [pc, #52]	; (8007dc4 <UART_SetConfig+0x2d4>)
 8007d90:	fba3 1302 	umull	r1, r3, r3, r2
 8007d94:	095b      	lsrs	r3, r3, #5
 8007d96:	2164      	movs	r1, #100	; 0x64
 8007d98:	fb01 f303 	mul.w	r3, r1, r3
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	00db      	lsls	r3, r3, #3
 8007da0:	3332      	adds	r3, #50	; 0x32
 8007da2:	4a08      	ldr	r2, [pc, #32]	; (8007dc4 <UART_SetConfig+0x2d4>)
 8007da4:	fba2 2303 	umull	r2, r3, r2, r3
 8007da8:	095b      	lsrs	r3, r3, #5
 8007daa:	f003 0207 	and.w	r2, r3, #7
 8007dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4422      	add	r2, r4
 8007db6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007db8:	e106      	b.n	8007fc8 <UART_SetConfig+0x4d8>
 8007dba:	bf00      	nop
 8007dbc:	40011000 	.word	0x40011000
 8007dc0:	40011400 	.word	0x40011400
 8007dc4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007dc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007dd2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007dd6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007dda:	4642      	mov	r2, r8
 8007ddc:	464b      	mov	r3, r9
 8007dde:	1891      	adds	r1, r2, r2
 8007de0:	6239      	str	r1, [r7, #32]
 8007de2:	415b      	adcs	r3, r3
 8007de4:	627b      	str	r3, [r7, #36]	; 0x24
 8007de6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007dea:	4641      	mov	r1, r8
 8007dec:	1854      	adds	r4, r2, r1
 8007dee:	4649      	mov	r1, r9
 8007df0:	eb43 0501 	adc.w	r5, r3, r1
 8007df4:	f04f 0200 	mov.w	r2, #0
 8007df8:	f04f 0300 	mov.w	r3, #0
 8007dfc:	00eb      	lsls	r3, r5, #3
 8007dfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e02:	00e2      	lsls	r2, r4, #3
 8007e04:	4614      	mov	r4, r2
 8007e06:	461d      	mov	r5, r3
 8007e08:	4643      	mov	r3, r8
 8007e0a:	18e3      	adds	r3, r4, r3
 8007e0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007e10:	464b      	mov	r3, r9
 8007e12:	eb45 0303 	adc.w	r3, r5, r3
 8007e16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007e26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007e2a:	f04f 0200 	mov.w	r2, #0
 8007e2e:	f04f 0300 	mov.w	r3, #0
 8007e32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007e36:	4629      	mov	r1, r5
 8007e38:	008b      	lsls	r3, r1, #2
 8007e3a:	4621      	mov	r1, r4
 8007e3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e40:	4621      	mov	r1, r4
 8007e42:	008a      	lsls	r2, r1, #2
 8007e44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007e48:	f7f8 feb0 	bl	8000bac <__aeabi_uldivmod>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	460b      	mov	r3, r1
 8007e50:	4b60      	ldr	r3, [pc, #384]	; (8007fd4 <UART_SetConfig+0x4e4>)
 8007e52:	fba3 2302 	umull	r2, r3, r3, r2
 8007e56:	095b      	lsrs	r3, r3, #5
 8007e58:	011c      	lsls	r4, r3, #4
 8007e5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007e64:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007e68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007e6c:	4642      	mov	r2, r8
 8007e6e:	464b      	mov	r3, r9
 8007e70:	1891      	adds	r1, r2, r2
 8007e72:	61b9      	str	r1, [r7, #24]
 8007e74:	415b      	adcs	r3, r3
 8007e76:	61fb      	str	r3, [r7, #28]
 8007e78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e7c:	4641      	mov	r1, r8
 8007e7e:	1851      	adds	r1, r2, r1
 8007e80:	6139      	str	r1, [r7, #16]
 8007e82:	4649      	mov	r1, r9
 8007e84:	414b      	adcs	r3, r1
 8007e86:	617b      	str	r3, [r7, #20]
 8007e88:	f04f 0200 	mov.w	r2, #0
 8007e8c:	f04f 0300 	mov.w	r3, #0
 8007e90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e94:	4659      	mov	r1, fp
 8007e96:	00cb      	lsls	r3, r1, #3
 8007e98:	4651      	mov	r1, sl
 8007e9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e9e:	4651      	mov	r1, sl
 8007ea0:	00ca      	lsls	r2, r1, #3
 8007ea2:	4610      	mov	r0, r2
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	4642      	mov	r2, r8
 8007eaa:	189b      	adds	r3, r3, r2
 8007eac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007eb0:	464b      	mov	r3, r9
 8007eb2:	460a      	mov	r2, r1
 8007eb4:	eb42 0303 	adc.w	r3, r2, r3
 8007eb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ec6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007ec8:	f04f 0200 	mov.w	r2, #0
 8007ecc:	f04f 0300 	mov.w	r3, #0
 8007ed0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007ed4:	4649      	mov	r1, r9
 8007ed6:	008b      	lsls	r3, r1, #2
 8007ed8:	4641      	mov	r1, r8
 8007eda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ede:	4641      	mov	r1, r8
 8007ee0:	008a      	lsls	r2, r1, #2
 8007ee2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007ee6:	f7f8 fe61 	bl	8000bac <__aeabi_uldivmod>
 8007eea:	4602      	mov	r2, r0
 8007eec:	460b      	mov	r3, r1
 8007eee:	4611      	mov	r1, r2
 8007ef0:	4b38      	ldr	r3, [pc, #224]	; (8007fd4 <UART_SetConfig+0x4e4>)
 8007ef2:	fba3 2301 	umull	r2, r3, r3, r1
 8007ef6:	095b      	lsrs	r3, r3, #5
 8007ef8:	2264      	movs	r2, #100	; 0x64
 8007efa:	fb02 f303 	mul.w	r3, r2, r3
 8007efe:	1acb      	subs	r3, r1, r3
 8007f00:	011b      	lsls	r3, r3, #4
 8007f02:	3332      	adds	r3, #50	; 0x32
 8007f04:	4a33      	ldr	r2, [pc, #204]	; (8007fd4 <UART_SetConfig+0x4e4>)
 8007f06:	fba2 2303 	umull	r2, r3, r2, r3
 8007f0a:	095b      	lsrs	r3, r3, #5
 8007f0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f10:	441c      	add	r4, r3
 8007f12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f16:	2200      	movs	r2, #0
 8007f18:	673b      	str	r3, [r7, #112]	; 0x70
 8007f1a:	677a      	str	r2, [r7, #116]	; 0x74
 8007f1c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007f20:	4642      	mov	r2, r8
 8007f22:	464b      	mov	r3, r9
 8007f24:	1891      	adds	r1, r2, r2
 8007f26:	60b9      	str	r1, [r7, #8]
 8007f28:	415b      	adcs	r3, r3
 8007f2a:	60fb      	str	r3, [r7, #12]
 8007f2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f30:	4641      	mov	r1, r8
 8007f32:	1851      	adds	r1, r2, r1
 8007f34:	6039      	str	r1, [r7, #0]
 8007f36:	4649      	mov	r1, r9
 8007f38:	414b      	adcs	r3, r1
 8007f3a:	607b      	str	r3, [r7, #4]
 8007f3c:	f04f 0200 	mov.w	r2, #0
 8007f40:	f04f 0300 	mov.w	r3, #0
 8007f44:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007f48:	4659      	mov	r1, fp
 8007f4a:	00cb      	lsls	r3, r1, #3
 8007f4c:	4651      	mov	r1, sl
 8007f4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f52:	4651      	mov	r1, sl
 8007f54:	00ca      	lsls	r2, r1, #3
 8007f56:	4610      	mov	r0, r2
 8007f58:	4619      	mov	r1, r3
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	4642      	mov	r2, r8
 8007f5e:	189b      	adds	r3, r3, r2
 8007f60:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f62:	464b      	mov	r3, r9
 8007f64:	460a      	mov	r2, r1
 8007f66:	eb42 0303 	adc.w	r3, r2, r3
 8007f6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	663b      	str	r3, [r7, #96]	; 0x60
 8007f76:	667a      	str	r2, [r7, #100]	; 0x64
 8007f78:	f04f 0200 	mov.w	r2, #0
 8007f7c:	f04f 0300 	mov.w	r3, #0
 8007f80:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007f84:	4649      	mov	r1, r9
 8007f86:	008b      	lsls	r3, r1, #2
 8007f88:	4641      	mov	r1, r8
 8007f8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f8e:	4641      	mov	r1, r8
 8007f90:	008a      	lsls	r2, r1, #2
 8007f92:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007f96:	f7f8 fe09 	bl	8000bac <__aeabi_uldivmod>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	4b0d      	ldr	r3, [pc, #52]	; (8007fd4 <UART_SetConfig+0x4e4>)
 8007fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8007fa4:	095b      	lsrs	r3, r3, #5
 8007fa6:	2164      	movs	r1, #100	; 0x64
 8007fa8:	fb01 f303 	mul.w	r3, r1, r3
 8007fac:	1ad3      	subs	r3, r2, r3
 8007fae:	011b      	lsls	r3, r3, #4
 8007fb0:	3332      	adds	r3, #50	; 0x32
 8007fb2:	4a08      	ldr	r2, [pc, #32]	; (8007fd4 <UART_SetConfig+0x4e4>)
 8007fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8007fb8:	095b      	lsrs	r3, r3, #5
 8007fba:	f003 020f 	and.w	r2, r3, #15
 8007fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4422      	add	r2, r4
 8007fc6:	609a      	str	r2, [r3, #8]
}
 8007fc8:	bf00      	nop
 8007fca:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fd4:	51eb851f 	.word	0x51eb851f

08007fd8 <__NVIC_SetPriority>:
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	4603      	mov	r3, r0
 8007fe0:	6039      	str	r1, [r7, #0]
 8007fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	db0a      	blt.n	8008002 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	b2da      	uxtb	r2, r3
 8007ff0:	490c      	ldr	r1, [pc, #48]	; (8008024 <__NVIC_SetPriority+0x4c>)
 8007ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ff6:	0112      	lsls	r2, r2, #4
 8007ff8:	b2d2      	uxtb	r2, r2
 8007ffa:	440b      	add	r3, r1
 8007ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008000:	e00a      	b.n	8008018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	b2da      	uxtb	r2, r3
 8008006:	4908      	ldr	r1, [pc, #32]	; (8008028 <__NVIC_SetPriority+0x50>)
 8008008:	79fb      	ldrb	r3, [r7, #7]
 800800a:	f003 030f 	and.w	r3, r3, #15
 800800e:	3b04      	subs	r3, #4
 8008010:	0112      	lsls	r2, r2, #4
 8008012:	b2d2      	uxtb	r2, r2
 8008014:	440b      	add	r3, r1
 8008016:	761a      	strb	r2, [r3, #24]
}
 8008018:	bf00      	nop
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr
 8008024:	e000e100 	.word	0xe000e100
 8008028:	e000ed00 	.word	0xe000ed00

0800802c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800802c:	b580      	push	{r7, lr}
 800802e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008030:	2100      	movs	r1, #0
 8008032:	f06f 0004 	mvn.w	r0, #4
 8008036:	f7ff ffcf 	bl	8007fd8 <__NVIC_SetPriority>
#endif
}
 800803a:	bf00      	nop
 800803c:	bd80      	pop	{r7, pc}
	...

08008040 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008046:	f3ef 8305 	mrs	r3, IPSR
 800804a:	603b      	str	r3, [r7, #0]
  return(result);
 800804c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800804e:	2b00      	cmp	r3, #0
 8008050:	d003      	beq.n	800805a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008052:	f06f 0305 	mvn.w	r3, #5
 8008056:	607b      	str	r3, [r7, #4]
 8008058:	e00c      	b.n	8008074 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800805a:	4b0a      	ldr	r3, [pc, #40]	; (8008084 <osKernelInitialize+0x44>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d105      	bne.n	800806e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008062:	4b08      	ldr	r3, [pc, #32]	; (8008084 <osKernelInitialize+0x44>)
 8008064:	2201      	movs	r2, #1
 8008066:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008068:	2300      	movs	r3, #0
 800806a:	607b      	str	r3, [r7, #4]
 800806c:	e002      	b.n	8008074 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800806e:	f04f 33ff 	mov.w	r3, #4294967295
 8008072:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008074:	687b      	ldr	r3, [r7, #4]
}
 8008076:	4618      	mov	r0, r3
 8008078:	370c      	adds	r7, #12
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	200002fc 	.word	0x200002fc

08008088 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800808e:	f3ef 8305 	mrs	r3, IPSR
 8008092:	603b      	str	r3, [r7, #0]
  return(result);
 8008094:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008096:	2b00      	cmp	r3, #0
 8008098:	d003      	beq.n	80080a2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800809a:	f06f 0305 	mvn.w	r3, #5
 800809e:	607b      	str	r3, [r7, #4]
 80080a0:	e010      	b.n	80080c4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80080a2:	4b0b      	ldr	r3, [pc, #44]	; (80080d0 <osKernelStart+0x48>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d109      	bne.n	80080be <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80080aa:	f7ff ffbf 	bl	800802c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80080ae:	4b08      	ldr	r3, [pc, #32]	; (80080d0 <osKernelStart+0x48>)
 80080b0:	2202      	movs	r2, #2
 80080b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80080b4:	f001 f910 	bl	80092d8 <vTaskStartScheduler>
      stat = osOK;
 80080b8:	2300      	movs	r3, #0
 80080ba:	607b      	str	r3, [r7, #4]
 80080bc:	e002      	b.n	80080c4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80080be:	f04f 33ff 	mov.w	r3, #4294967295
 80080c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80080c4:	687b      	ldr	r3, [r7, #4]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3708      	adds	r7, #8
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	200002fc 	.word	0x200002fc

080080d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b08e      	sub	sp, #56	; 0x38
 80080d8:	af04      	add	r7, sp, #16
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80080e0:	2300      	movs	r3, #0
 80080e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080e4:	f3ef 8305 	mrs	r3, IPSR
 80080e8:	617b      	str	r3, [r7, #20]
  return(result);
 80080ea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d17e      	bne.n	80081ee <osThreadNew+0x11a>
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d07b      	beq.n	80081ee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80080f6:	2380      	movs	r3, #128	; 0x80
 80080f8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80080fa:	2318      	movs	r3, #24
 80080fc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80080fe:	2300      	movs	r3, #0
 8008100:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008102:	f04f 33ff 	mov.w	r3, #4294967295
 8008106:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d045      	beq.n	800819a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d002      	beq.n	800811c <osThreadNew+0x48>
        name = attr->name;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	699b      	ldr	r3, [r3, #24]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d002      	beq.n	800812a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	699b      	ldr	r3, [r3, #24]
 8008128:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d008      	beq.n	8008142 <osThreadNew+0x6e>
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	2b38      	cmp	r3, #56	; 0x38
 8008134:	d805      	bhi.n	8008142 <osThreadNew+0x6e>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	f003 0301 	and.w	r3, r3, #1
 800813e:	2b00      	cmp	r3, #0
 8008140:	d001      	beq.n	8008146 <osThreadNew+0x72>
        return (NULL);
 8008142:	2300      	movs	r3, #0
 8008144:	e054      	b.n	80081f0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	695b      	ldr	r3, [r3, #20]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d003      	beq.n	8008156 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	695b      	ldr	r3, [r3, #20]
 8008152:	089b      	lsrs	r3, r3, #2
 8008154:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00e      	beq.n	800817c <osThreadNew+0xa8>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	2b5b      	cmp	r3, #91	; 0x5b
 8008164:	d90a      	bls.n	800817c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800816a:	2b00      	cmp	r3, #0
 800816c:	d006      	beq.n	800817c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	695b      	ldr	r3, [r3, #20]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d002      	beq.n	800817c <osThreadNew+0xa8>
        mem = 1;
 8008176:	2301      	movs	r3, #1
 8008178:	61bb      	str	r3, [r7, #24]
 800817a:	e010      	b.n	800819e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d10c      	bne.n	800819e <osThreadNew+0xca>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d108      	bne.n	800819e <osThreadNew+0xca>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d104      	bne.n	800819e <osThreadNew+0xca>
          mem = 0;
 8008194:	2300      	movs	r3, #0
 8008196:	61bb      	str	r3, [r7, #24]
 8008198:	e001      	b.n	800819e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800819a:	2300      	movs	r3, #0
 800819c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d110      	bne.n	80081c6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80081a8:	687a      	ldr	r2, [r7, #4]
 80081aa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80081ac:	9202      	str	r2, [sp, #8]
 80081ae:	9301      	str	r3, [sp, #4]
 80081b0:	69fb      	ldr	r3, [r7, #28]
 80081b2:	9300      	str	r3, [sp, #0]
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	6a3a      	ldr	r2, [r7, #32]
 80081b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081ba:	68f8      	ldr	r0, [r7, #12]
 80081bc:	f000 fe38 	bl	8008e30 <xTaskCreateStatic>
 80081c0:	4603      	mov	r3, r0
 80081c2:	613b      	str	r3, [r7, #16]
 80081c4:	e013      	b.n	80081ee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d110      	bne.n	80081ee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80081cc:	6a3b      	ldr	r3, [r7, #32]
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	f107 0310 	add.w	r3, r7, #16
 80081d4:	9301      	str	r3, [sp, #4]
 80081d6:	69fb      	ldr	r3, [r7, #28]
 80081d8:	9300      	str	r3, [sp, #0]
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f000 fe83 	bl	8008eea <xTaskCreate>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d001      	beq.n	80081ee <osThreadNew+0x11a>
            hTask = NULL;
 80081ea:	2300      	movs	r3, #0
 80081ec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80081ee:	693b      	ldr	r3, [r7, #16]
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3728      	adds	r7, #40	; 0x28
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008200:	f3ef 8305 	mrs	r3, IPSR
 8008204:	60bb      	str	r3, [r7, #8]
  return(result);
 8008206:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008208:	2b00      	cmp	r3, #0
 800820a:	d003      	beq.n	8008214 <osDelay+0x1c>
    stat = osErrorISR;
 800820c:	f06f 0305 	mvn.w	r3, #5
 8008210:	60fb      	str	r3, [r7, #12]
 8008212:	e007      	b.n	8008224 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008214:	2300      	movs	r3, #0
 8008216:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d002      	beq.n	8008224 <osDelay+0x2c>
      vTaskDelay(ticks);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f001 f826 	bl	8009270 <vTaskDelay>
    }
  }

  return (stat);
 8008224:	68fb      	ldr	r3, [r7, #12]
}
 8008226:	4618      	mov	r0, r3
 8008228:	3710      	adds	r7, #16
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800822e:	b580      	push	{r7, lr}
 8008230:	b086      	sub	sp, #24
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008236:	f3ef 8305 	mrs	r3, IPSR
 800823a:	60fb      	str	r3, [r7, #12]
  return(result);
 800823c:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800823e:	2b00      	cmp	r3, #0
 8008240:	d003      	beq.n	800824a <osDelayUntil+0x1c>
    stat = osErrorISR;
 8008242:	f06f 0305 	mvn.w	r3, #5
 8008246:	617b      	str	r3, [r7, #20]
 8008248:	e019      	b.n	800827e <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800824a:	2300      	movs	r3, #0
 800824c:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800824e:	f001 f955 	bl	80094fc <xTaskGetTickCount>
 8008252:	4603      	mov	r3, r0
 8008254:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	1ad3      	subs	r3, r2, r3
 800825c:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d009      	beq.n	8008278 <osDelayUntil+0x4a>
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	2b00      	cmp	r3, #0
 8008268:	db06      	blt.n	8008278 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800826a:	f107 0308 	add.w	r3, r7, #8
 800826e:	6939      	ldr	r1, [r7, #16]
 8008270:	4618      	mov	r0, r3
 8008272:	f000 ff7f 	bl	8009174 <vTaskDelayUntil>
 8008276:	e002      	b.n	800827e <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8008278:	f06f 0303 	mvn.w	r3, #3
 800827c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800827e:	697b      	ldr	r3, [r7, #20]
}
 8008280:	4618      	mov	r0, r3
 8008282:	3718      	adds	r7, #24
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	4a07      	ldr	r2, [pc, #28]	; (80082b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8008298:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	4a06      	ldr	r2, [pc, #24]	; (80082b8 <vApplicationGetIdleTaskMemory+0x30>)
 800829e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2280      	movs	r2, #128	; 0x80
 80082a4:	601a      	str	r2, [r3, #0]
}
 80082a6:	bf00      	nop
 80082a8:	3714      	adds	r7, #20
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	20000300 	.word	0x20000300
 80082b8:	2000035c 	.word	0x2000035c

080082bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80082bc:	b480      	push	{r7}
 80082be:	b085      	sub	sp, #20
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	4a07      	ldr	r2, [pc, #28]	; (80082e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80082cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	4a06      	ldr	r2, [pc, #24]	; (80082ec <vApplicationGetTimerTaskMemory+0x30>)
 80082d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082da:	601a      	str	r2, [r3, #0]
}
 80082dc:	bf00      	nop
 80082de:	3714      	adds	r7, #20
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr
 80082e8:	2000055c 	.word	0x2000055c
 80082ec:	200005b8 	.word	0x200005b8

080082f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f103 0208 	add.w	r2, r3, #8
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f04f 32ff 	mov.w	r2, #4294967295
 8008308:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f103 0208 	add.w	r2, r3, #8
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f103 0208 	add.w	r2, r3, #8
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008324:	bf00      	nop
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800833e:	bf00      	nop
 8008340:	370c      	adds	r7, #12
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr

0800834a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800834a:	b480      	push	{r7}
 800834c:	b085      	sub	sp, #20
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
 8008352:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	68fa      	ldr	r2, [r7, #12]
 800835e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	689a      	ldr	r2, [r3, #8]
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	683a      	ldr	r2, [r7, #0]
 800836e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	683a      	ldr	r2, [r7, #0]
 8008374:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	1c5a      	adds	r2, r3, #1
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	601a      	str	r2, [r3, #0]
}
 8008386:	bf00      	nop
 8008388:	3714      	adds	r7, #20
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr

08008392 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008392:	b480      	push	{r7}
 8008394:	b085      	sub	sp, #20
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
 800839a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083a8:	d103      	bne.n	80083b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	60fb      	str	r3, [r7, #12]
 80083b0:	e00c      	b.n	80083cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	3308      	adds	r3, #8
 80083b6:	60fb      	str	r3, [r7, #12]
 80083b8:	e002      	b.n	80083c0 <vListInsert+0x2e>
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	60fb      	str	r3, [r7, #12]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	68ba      	ldr	r2, [r7, #8]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d2f6      	bcs.n	80083ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	685a      	ldr	r2, [r3, #4]
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	683a      	ldr	r2, [r7, #0]
 80083da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	683a      	ldr	r2, [r7, #0]
 80083e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	1c5a      	adds	r2, r3, #1
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	601a      	str	r2, [r3, #0]
}
 80083f8:	bf00      	nop
 80083fa:	3714      	adds	r7, #20
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008404:	b480      	push	{r7}
 8008406:	b085      	sub	sp, #20
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	691b      	ldr	r3, [r3, #16]
 8008410:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	6892      	ldr	r2, [r2, #8]
 800841a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	6852      	ldr	r2, [r2, #4]
 8008424:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	429a      	cmp	r2, r3
 800842e:	d103      	bne.n	8008438 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	689a      	ldr	r2, [r3, #8]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	1e5a      	subs	r2, r3, #1
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
}
 800844c:	4618      	mov	r0, r3
 800844e:	3714      	adds	r7, #20
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d10a      	bne.n	8008482 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800846c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008470:	f383 8811 	msr	BASEPRI, r3
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	f3bf 8f4f 	dsb	sy
 800847c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800847e:	bf00      	nop
 8008480:	e7fe      	b.n	8008480 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008482:	f002 f8cf 	bl	800a624 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800848e:	68f9      	ldr	r1, [r7, #12]
 8008490:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008492:	fb01 f303 	mul.w	r3, r1, r3
 8008496:	441a      	add	r2, r3
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2200      	movs	r2, #0
 80084a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084b2:	3b01      	subs	r3, #1
 80084b4:	68f9      	ldr	r1, [r7, #12]
 80084b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80084b8:	fb01 f303 	mul.w	r3, r1, r3
 80084bc:	441a      	add	r2, r3
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	22ff      	movs	r2, #255	; 0xff
 80084c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	22ff      	movs	r2, #255	; 0xff
 80084ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d114      	bne.n	8008502 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d01a      	beq.n	8008516 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	3310      	adds	r3, #16
 80084e4:	4618      	mov	r0, r3
 80084e6:	f001 f981 	bl	80097ec <xTaskRemoveFromEventList>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d012      	beq.n	8008516 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80084f0:	4b0c      	ldr	r3, [pc, #48]	; (8008524 <xQueueGenericReset+0xcc>)
 80084f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084f6:	601a      	str	r2, [r3, #0]
 80084f8:	f3bf 8f4f 	dsb	sy
 80084fc:	f3bf 8f6f 	isb	sy
 8008500:	e009      	b.n	8008516 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	3310      	adds	r3, #16
 8008506:	4618      	mov	r0, r3
 8008508:	f7ff fef2 	bl	80082f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	3324      	adds	r3, #36	; 0x24
 8008510:	4618      	mov	r0, r3
 8008512:	f7ff feed 	bl	80082f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008516:	f002 f8b5 	bl	800a684 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800851a:	2301      	movs	r3, #1
}
 800851c:	4618      	mov	r0, r3
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}
 8008524:	e000ed04 	.word	0xe000ed04

08008528 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008528:	b580      	push	{r7, lr}
 800852a:	b08e      	sub	sp, #56	; 0x38
 800852c:	af02      	add	r7, sp, #8
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	607a      	str	r2, [r7, #4]
 8008534:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d10a      	bne.n	8008552 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800853c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008540:	f383 8811 	msr	BASEPRI, r3
 8008544:	f3bf 8f6f 	isb	sy
 8008548:	f3bf 8f4f 	dsb	sy
 800854c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800854e:	bf00      	nop
 8008550:	e7fe      	b.n	8008550 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d10a      	bne.n	800856e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855c:	f383 8811 	msr	BASEPRI, r3
 8008560:	f3bf 8f6f 	isb	sy
 8008564:	f3bf 8f4f 	dsb	sy
 8008568:	627b      	str	r3, [r7, #36]	; 0x24
}
 800856a:	bf00      	nop
 800856c:	e7fe      	b.n	800856c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d002      	beq.n	800857a <xQueueGenericCreateStatic+0x52>
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d001      	beq.n	800857e <xQueueGenericCreateStatic+0x56>
 800857a:	2301      	movs	r3, #1
 800857c:	e000      	b.n	8008580 <xQueueGenericCreateStatic+0x58>
 800857e:	2300      	movs	r3, #0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d10a      	bne.n	800859a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008588:	f383 8811 	msr	BASEPRI, r3
 800858c:	f3bf 8f6f 	isb	sy
 8008590:	f3bf 8f4f 	dsb	sy
 8008594:	623b      	str	r3, [r7, #32]
}
 8008596:	bf00      	nop
 8008598:	e7fe      	b.n	8008598 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d102      	bne.n	80085a6 <xQueueGenericCreateStatic+0x7e>
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d101      	bne.n	80085aa <xQueueGenericCreateStatic+0x82>
 80085a6:	2301      	movs	r3, #1
 80085a8:	e000      	b.n	80085ac <xQueueGenericCreateStatic+0x84>
 80085aa:	2300      	movs	r3, #0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d10a      	bne.n	80085c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80085b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b4:	f383 8811 	msr	BASEPRI, r3
 80085b8:	f3bf 8f6f 	isb	sy
 80085bc:	f3bf 8f4f 	dsb	sy
 80085c0:	61fb      	str	r3, [r7, #28]
}
 80085c2:	bf00      	nop
 80085c4:	e7fe      	b.n	80085c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80085c6:	2350      	movs	r3, #80	; 0x50
 80085c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	2b50      	cmp	r3, #80	; 0x50
 80085ce:	d00a      	beq.n	80085e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80085d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d4:	f383 8811 	msr	BASEPRI, r3
 80085d8:	f3bf 8f6f 	isb	sy
 80085dc:	f3bf 8f4f 	dsb	sy
 80085e0:	61bb      	str	r3, [r7, #24]
}
 80085e2:	bf00      	nop
 80085e4:	e7fe      	b.n	80085e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80085e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80085ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00d      	beq.n	800860e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80085f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f4:	2201      	movs	r2, #1
 80085f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80085fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80085fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008600:	9300      	str	r3, [sp, #0]
 8008602:	4613      	mov	r3, r2
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	68b9      	ldr	r1, [r7, #8]
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f000 f805 	bl	8008618 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800860e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008610:	4618      	mov	r0, r3
 8008612:	3730      	adds	r7, #48	; 0x30
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
 8008624:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d103      	bne.n	8008634 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	69ba      	ldr	r2, [r7, #24]
 8008630:	601a      	str	r2, [r3, #0]
 8008632:	e002      	b.n	800863a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	687a      	ldr	r2, [r7, #4]
 8008638:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800863a:	69bb      	ldr	r3, [r7, #24]
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008640:	69bb      	ldr	r3, [r7, #24]
 8008642:	68ba      	ldr	r2, [r7, #8]
 8008644:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008646:	2101      	movs	r1, #1
 8008648:	69b8      	ldr	r0, [r7, #24]
 800864a:	f7ff ff05 	bl	8008458 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	78fa      	ldrb	r2, [r7, #3]
 8008652:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008656:	bf00      	nop
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
	...

08008660 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b08e      	sub	sp, #56	; 0x38
 8008664:	af00      	add	r7, sp, #0
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	60b9      	str	r1, [r7, #8]
 800866a:	607a      	str	r2, [r7, #4]
 800866c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800866e:	2300      	movs	r3, #0
 8008670:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008678:	2b00      	cmp	r3, #0
 800867a:	d10a      	bne.n	8008692 <xQueueGenericSend+0x32>
	__asm volatile
 800867c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008680:	f383 8811 	msr	BASEPRI, r3
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800868e:	bf00      	nop
 8008690:	e7fe      	b.n	8008690 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d103      	bne.n	80086a0 <xQueueGenericSend+0x40>
 8008698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869c:	2b00      	cmp	r3, #0
 800869e:	d101      	bne.n	80086a4 <xQueueGenericSend+0x44>
 80086a0:	2301      	movs	r3, #1
 80086a2:	e000      	b.n	80086a6 <xQueueGenericSend+0x46>
 80086a4:	2300      	movs	r3, #0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d10a      	bne.n	80086c0 <xQueueGenericSend+0x60>
	__asm volatile
 80086aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ae:	f383 8811 	msr	BASEPRI, r3
 80086b2:	f3bf 8f6f 	isb	sy
 80086b6:	f3bf 8f4f 	dsb	sy
 80086ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80086bc:	bf00      	nop
 80086be:	e7fe      	b.n	80086be <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	2b02      	cmp	r3, #2
 80086c4:	d103      	bne.n	80086ce <xQueueGenericSend+0x6e>
 80086c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d101      	bne.n	80086d2 <xQueueGenericSend+0x72>
 80086ce:	2301      	movs	r3, #1
 80086d0:	e000      	b.n	80086d4 <xQueueGenericSend+0x74>
 80086d2:	2300      	movs	r3, #0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d10a      	bne.n	80086ee <xQueueGenericSend+0x8e>
	__asm volatile
 80086d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086dc:	f383 8811 	msr	BASEPRI, r3
 80086e0:	f3bf 8f6f 	isb	sy
 80086e4:	f3bf 8f4f 	dsb	sy
 80086e8:	623b      	str	r3, [r7, #32]
}
 80086ea:	bf00      	nop
 80086ec:	e7fe      	b.n	80086ec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086ee:	f001 fa3b 	bl	8009b68 <xTaskGetSchedulerState>
 80086f2:	4603      	mov	r3, r0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d102      	bne.n	80086fe <xQueueGenericSend+0x9e>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d101      	bne.n	8008702 <xQueueGenericSend+0xa2>
 80086fe:	2301      	movs	r3, #1
 8008700:	e000      	b.n	8008704 <xQueueGenericSend+0xa4>
 8008702:	2300      	movs	r3, #0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d10a      	bne.n	800871e <xQueueGenericSend+0xbe>
	__asm volatile
 8008708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870c:	f383 8811 	msr	BASEPRI, r3
 8008710:	f3bf 8f6f 	isb	sy
 8008714:	f3bf 8f4f 	dsb	sy
 8008718:	61fb      	str	r3, [r7, #28]
}
 800871a:	bf00      	nop
 800871c:	e7fe      	b.n	800871c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800871e:	f001 ff81 	bl	800a624 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800872a:	429a      	cmp	r2, r3
 800872c:	d302      	bcc.n	8008734 <xQueueGenericSend+0xd4>
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	2b02      	cmp	r3, #2
 8008732:	d129      	bne.n	8008788 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008734:	683a      	ldr	r2, [r7, #0]
 8008736:	68b9      	ldr	r1, [r7, #8]
 8008738:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800873a:	f000 fa0b 	bl	8008b54 <prvCopyDataToQueue>
 800873e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008744:	2b00      	cmp	r3, #0
 8008746:	d010      	beq.n	800876a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874a:	3324      	adds	r3, #36	; 0x24
 800874c:	4618      	mov	r0, r3
 800874e:	f001 f84d 	bl	80097ec <xTaskRemoveFromEventList>
 8008752:	4603      	mov	r3, r0
 8008754:	2b00      	cmp	r3, #0
 8008756:	d013      	beq.n	8008780 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008758:	4b3f      	ldr	r3, [pc, #252]	; (8008858 <xQueueGenericSend+0x1f8>)
 800875a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800875e:	601a      	str	r2, [r3, #0]
 8008760:	f3bf 8f4f 	dsb	sy
 8008764:	f3bf 8f6f 	isb	sy
 8008768:	e00a      	b.n	8008780 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800876a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876c:	2b00      	cmp	r3, #0
 800876e:	d007      	beq.n	8008780 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008770:	4b39      	ldr	r3, [pc, #228]	; (8008858 <xQueueGenericSend+0x1f8>)
 8008772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008776:	601a      	str	r2, [r3, #0]
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008780:	f001 ff80 	bl	800a684 <vPortExitCritical>
				return pdPASS;
 8008784:	2301      	movs	r3, #1
 8008786:	e063      	b.n	8008850 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d103      	bne.n	8008796 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800878e:	f001 ff79 	bl	800a684 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008792:	2300      	movs	r3, #0
 8008794:	e05c      	b.n	8008850 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008798:	2b00      	cmp	r3, #0
 800879a:	d106      	bne.n	80087aa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800879c:	f107 0314 	add.w	r3, r7, #20
 80087a0:	4618      	mov	r0, r3
 80087a2:	f001 f887 	bl	80098b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80087a6:	2301      	movs	r3, #1
 80087a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80087aa:	f001 ff6b 	bl	800a684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80087ae:	f000 fdf9 	bl	80093a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087b2:	f001 ff37 	bl	800a624 <vPortEnterCritical>
 80087b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087bc:	b25b      	sxtb	r3, r3
 80087be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087c2:	d103      	bne.n	80087cc <xQueueGenericSend+0x16c>
 80087c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c6:	2200      	movs	r2, #0
 80087c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087d2:	b25b      	sxtb	r3, r3
 80087d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087d8:	d103      	bne.n	80087e2 <xQueueGenericSend+0x182>
 80087da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087dc:	2200      	movs	r2, #0
 80087de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087e2:	f001 ff4f 	bl	800a684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087e6:	1d3a      	adds	r2, r7, #4
 80087e8:	f107 0314 	add.w	r3, r7, #20
 80087ec:	4611      	mov	r1, r2
 80087ee:	4618      	mov	r0, r3
 80087f0:	f001 f876 	bl	80098e0 <xTaskCheckForTimeOut>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d124      	bne.n	8008844 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80087fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087fc:	f000 faa2 	bl	8008d44 <prvIsQueueFull>
 8008800:	4603      	mov	r3, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d018      	beq.n	8008838 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008808:	3310      	adds	r3, #16
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	4611      	mov	r1, r2
 800880e:	4618      	mov	r0, r3
 8008810:	f000 ff9c 	bl	800974c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008816:	f000 fa2d 	bl	8008c74 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800881a:	f000 fdd1 	bl	80093c0 <xTaskResumeAll>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	f47f af7c 	bne.w	800871e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008826:	4b0c      	ldr	r3, [pc, #48]	; (8008858 <xQueueGenericSend+0x1f8>)
 8008828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800882c:	601a      	str	r2, [r3, #0]
 800882e:	f3bf 8f4f 	dsb	sy
 8008832:	f3bf 8f6f 	isb	sy
 8008836:	e772      	b.n	800871e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008838:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800883a:	f000 fa1b 	bl	8008c74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800883e:	f000 fdbf 	bl	80093c0 <xTaskResumeAll>
 8008842:	e76c      	b.n	800871e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008844:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008846:	f000 fa15 	bl	8008c74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800884a:	f000 fdb9 	bl	80093c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800884e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008850:	4618      	mov	r0, r3
 8008852:	3738      	adds	r7, #56	; 0x38
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	e000ed04 	.word	0xe000ed04

0800885c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b090      	sub	sp, #64	; 0x40
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
 8008868:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800886e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008870:	2b00      	cmp	r3, #0
 8008872:	d10a      	bne.n	800888a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008878:	f383 8811 	msr	BASEPRI, r3
 800887c:	f3bf 8f6f 	isb	sy
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008886:	bf00      	nop
 8008888:	e7fe      	b.n	8008888 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d103      	bne.n	8008898 <xQueueGenericSendFromISR+0x3c>
 8008890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008894:	2b00      	cmp	r3, #0
 8008896:	d101      	bne.n	800889c <xQueueGenericSendFromISR+0x40>
 8008898:	2301      	movs	r3, #1
 800889a:	e000      	b.n	800889e <xQueueGenericSendFromISR+0x42>
 800889c:	2300      	movs	r3, #0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d10a      	bne.n	80088b8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80088a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a6:	f383 8811 	msr	BASEPRI, r3
 80088aa:	f3bf 8f6f 	isb	sy
 80088ae:	f3bf 8f4f 	dsb	sy
 80088b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80088b4:	bf00      	nop
 80088b6:	e7fe      	b.n	80088b6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	2b02      	cmp	r3, #2
 80088bc:	d103      	bne.n	80088c6 <xQueueGenericSendFromISR+0x6a>
 80088be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d101      	bne.n	80088ca <xQueueGenericSendFromISR+0x6e>
 80088c6:	2301      	movs	r3, #1
 80088c8:	e000      	b.n	80088cc <xQueueGenericSendFromISR+0x70>
 80088ca:	2300      	movs	r3, #0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d10a      	bne.n	80088e6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80088d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d4:	f383 8811 	msr	BASEPRI, r3
 80088d8:	f3bf 8f6f 	isb	sy
 80088dc:	f3bf 8f4f 	dsb	sy
 80088e0:	623b      	str	r3, [r7, #32]
}
 80088e2:	bf00      	nop
 80088e4:	e7fe      	b.n	80088e4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80088e6:	f001 ff7f 	bl	800a7e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80088ea:	f3ef 8211 	mrs	r2, BASEPRI
 80088ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f2:	f383 8811 	msr	BASEPRI, r3
 80088f6:	f3bf 8f6f 	isb	sy
 80088fa:	f3bf 8f4f 	dsb	sy
 80088fe:	61fa      	str	r2, [r7, #28]
 8008900:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008902:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008904:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800890a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800890e:	429a      	cmp	r2, r3
 8008910:	d302      	bcc.n	8008918 <xQueueGenericSendFromISR+0xbc>
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	2b02      	cmp	r3, #2
 8008916:	d12f      	bne.n	8008978 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800891a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800891e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008926:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008928:	683a      	ldr	r2, [r7, #0]
 800892a:	68b9      	ldr	r1, [r7, #8]
 800892c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800892e:	f000 f911 	bl	8008b54 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008932:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800893a:	d112      	bne.n	8008962 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800893c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008940:	2b00      	cmp	r3, #0
 8008942:	d016      	beq.n	8008972 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008946:	3324      	adds	r3, #36	; 0x24
 8008948:	4618      	mov	r0, r3
 800894a:	f000 ff4f 	bl	80097ec <xTaskRemoveFromEventList>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d00e      	beq.n	8008972 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00b      	beq.n	8008972 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2201      	movs	r2, #1
 800895e:	601a      	str	r2, [r3, #0]
 8008960:	e007      	b.n	8008972 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008962:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008966:	3301      	adds	r3, #1
 8008968:	b2db      	uxtb	r3, r3
 800896a:	b25a      	sxtb	r2, r3
 800896c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800896e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008972:	2301      	movs	r3, #1
 8008974:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008976:	e001      	b.n	800897c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008978:	2300      	movs	r3, #0
 800897a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800897c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800897e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008986:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800898a:	4618      	mov	r0, r3
 800898c:	3740      	adds	r7, #64	; 0x40
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
	...

08008994 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b08c      	sub	sp, #48	; 0x30
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80089a0:	2300      	movs	r3, #0
 80089a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80089a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d10a      	bne.n	80089c4 <xQueueReceive+0x30>
	__asm volatile
 80089ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b2:	f383 8811 	msr	BASEPRI, r3
 80089b6:	f3bf 8f6f 	isb	sy
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	623b      	str	r3, [r7, #32]
}
 80089c0:	bf00      	nop
 80089c2:	e7fe      	b.n	80089c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d103      	bne.n	80089d2 <xQueueReceive+0x3e>
 80089ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d101      	bne.n	80089d6 <xQueueReceive+0x42>
 80089d2:	2301      	movs	r3, #1
 80089d4:	e000      	b.n	80089d8 <xQueueReceive+0x44>
 80089d6:	2300      	movs	r3, #0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d10a      	bne.n	80089f2 <xQueueReceive+0x5e>
	__asm volatile
 80089dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e0:	f383 8811 	msr	BASEPRI, r3
 80089e4:	f3bf 8f6f 	isb	sy
 80089e8:	f3bf 8f4f 	dsb	sy
 80089ec:	61fb      	str	r3, [r7, #28]
}
 80089ee:	bf00      	nop
 80089f0:	e7fe      	b.n	80089f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089f2:	f001 f8b9 	bl	8009b68 <xTaskGetSchedulerState>
 80089f6:	4603      	mov	r3, r0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d102      	bne.n	8008a02 <xQueueReceive+0x6e>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d101      	bne.n	8008a06 <xQueueReceive+0x72>
 8008a02:	2301      	movs	r3, #1
 8008a04:	e000      	b.n	8008a08 <xQueueReceive+0x74>
 8008a06:	2300      	movs	r3, #0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d10a      	bne.n	8008a22 <xQueueReceive+0x8e>
	__asm volatile
 8008a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a10:	f383 8811 	msr	BASEPRI, r3
 8008a14:	f3bf 8f6f 	isb	sy
 8008a18:	f3bf 8f4f 	dsb	sy
 8008a1c:	61bb      	str	r3, [r7, #24]
}
 8008a1e:	bf00      	nop
 8008a20:	e7fe      	b.n	8008a20 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a22:	f001 fdff 	bl	800a624 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a2a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d01f      	beq.n	8008a72 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a32:	68b9      	ldr	r1, [r7, #8]
 8008a34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a36:	f000 f8f7 	bl	8008c28 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3c:	1e5a      	subs	r2, r3, #1
 8008a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a40:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00f      	beq.n	8008a6a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4c:	3310      	adds	r3, #16
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f000 fecc 	bl	80097ec <xTaskRemoveFromEventList>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d007      	beq.n	8008a6a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008a5a:	4b3d      	ldr	r3, [pc, #244]	; (8008b50 <xQueueReceive+0x1bc>)
 8008a5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a60:	601a      	str	r2, [r3, #0]
 8008a62:	f3bf 8f4f 	dsb	sy
 8008a66:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008a6a:	f001 fe0b 	bl	800a684 <vPortExitCritical>
				return pdPASS;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e069      	b.n	8008b46 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d103      	bne.n	8008a80 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a78:	f001 fe04 	bl	800a684 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	e062      	b.n	8008b46 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d106      	bne.n	8008a94 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a86:	f107 0310 	add.w	r3, r7, #16
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f000 ff12 	bl	80098b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a90:	2301      	movs	r3, #1
 8008a92:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a94:	f001 fdf6 	bl	800a684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a98:	f000 fc84 	bl	80093a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a9c:	f001 fdc2 	bl	800a624 <vPortEnterCritical>
 8008aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008aa6:	b25b      	sxtb	r3, r3
 8008aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aac:	d103      	bne.n	8008ab6 <xQueueReceive+0x122>
 8008aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008abc:	b25b      	sxtb	r3, r3
 8008abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac2:	d103      	bne.n	8008acc <xQueueReceive+0x138>
 8008ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008acc:	f001 fdda 	bl	800a684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ad0:	1d3a      	adds	r2, r7, #4
 8008ad2:	f107 0310 	add.w	r3, r7, #16
 8008ad6:	4611      	mov	r1, r2
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f000 ff01 	bl	80098e0 <xTaskCheckForTimeOut>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d123      	bne.n	8008b2c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ae4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ae6:	f000 f917 	bl	8008d18 <prvIsQueueEmpty>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d017      	beq.n	8008b20 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af2:	3324      	adds	r3, #36	; 0x24
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	4611      	mov	r1, r2
 8008af8:	4618      	mov	r0, r3
 8008afa:	f000 fe27 	bl	800974c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008afe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b00:	f000 f8b8 	bl	8008c74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008b04:	f000 fc5c 	bl	80093c0 <xTaskResumeAll>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d189      	bne.n	8008a22 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008b0e:	4b10      	ldr	r3, [pc, #64]	; (8008b50 <xQueueReceive+0x1bc>)
 8008b10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b14:	601a      	str	r2, [r3, #0]
 8008b16:	f3bf 8f4f 	dsb	sy
 8008b1a:	f3bf 8f6f 	isb	sy
 8008b1e:	e780      	b.n	8008a22 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008b20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b22:	f000 f8a7 	bl	8008c74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b26:	f000 fc4b 	bl	80093c0 <xTaskResumeAll>
 8008b2a:	e77a      	b.n	8008a22 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008b2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b2e:	f000 f8a1 	bl	8008c74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b32:	f000 fc45 	bl	80093c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b38:	f000 f8ee 	bl	8008d18 <prvIsQueueEmpty>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	f43f af6f 	beq.w	8008a22 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3730      	adds	r7, #48	; 0x30
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	e000ed04 	.word	0xe000ed04

08008b54 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b086      	sub	sp, #24
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	60f8      	str	r0, [r7, #12]
 8008b5c:	60b9      	str	r1, [r7, #8]
 8008b5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008b60:	2300      	movs	r3, #0
 8008b62:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b68:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d10d      	bne.n	8008b8e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d14d      	bne.n	8008c16 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f001 f810 	bl	8009ba4 <xTaskPriorityDisinherit>
 8008b84:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	609a      	str	r2, [r3, #8]
 8008b8c:	e043      	b.n	8008c16 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d119      	bne.n	8008bc8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6858      	ldr	r0, [r3, #4]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	68b9      	ldr	r1, [r7, #8]
 8008ba0:	f002 fc44 	bl	800b42c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	685a      	ldr	r2, [r3, #4]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bac:	441a      	add	r2, r3
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	685a      	ldr	r2, [r3, #4]
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d32b      	bcc.n	8008c16 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	605a      	str	r2, [r3, #4]
 8008bc6:	e026      	b.n	8008c16 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	68d8      	ldr	r0, [r3, #12]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	68b9      	ldr	r1, [r7, #8]
 8008bd4:	f002 fc2a 	bl	800b42c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	68da      	ldr	r2, [r3, #12]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be0:	425b      	negs	r3, r3
 8008be2:	441a      	add	r2, r3
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	68da      	ldr	r2, [r3, #12]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d207      	bcs.n	8008c04 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	689a      	ldr	r2, [r3, #8]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bfc:	425b      	negs	r3, r3
 8008bfe:	441a      	add	r2, r3
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	d105      	bne.n	8008c16 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d002      	beq.n	8008c16 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	3b01      	subs	r3, #1
 8008c14:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	1c5a      	adds	r2, r3, #1
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008c1e:	697b      	ldr	r3, [r7, #20]
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3718      	adds	r7, #24
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d018      	beq.n	8008c6c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	68da      	ldr	r2, [r3, #12]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c42:	441a      	add	r2, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	68da      	ldr	r2, [r3, #12]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d303      	bcc.n	8008c5c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	68d9      	ldr	r1, [r3, #12]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c64:	461a      	mov	r2, r3
 8008c66:	6838      	ldr	r0, [r7, #0]
 8008c68:	f002 fbe0 	bl	800b42c <memcpy>
	}
}
 8008c6c:	bf00      	nop
 8008c6e:	3708      	adds	r7, #8
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008c7c:	f001 fcd2 	bl	800a624 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c86:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c88:	e011      	b.n	8008cae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d012      	beq.n	8008cb8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	3324      	adds	r3, #36	; 0x24
 8008c96:	4618      	mov	r0, r3
 8008c98:	f000 fda8 	bl	80097ec <xTaskRemoveFromEventList>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d001      	beq.n	8008ca6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008ca2:	f000 fe7f 	bl	80099a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008ca6:	7bfb      	ldrb	r3, [r7, #15]
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	dce9      	bgt.n	8008c8a <prvUnlockQueue+0x16>
 8008cb6:	e000      	b.n	8008cba <prvUnlockQueue+0x46>
					break;
 8008cb8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	22ff      	movs	r2, #255	; 0xff
 8008cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008cc2:	f001 fcdf 	bl	800a684 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008cc6:	f001 fcad 	bl	800a624 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cd0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008cd2:	e011      	b.n	8008cf8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	691b      	ldr	r3, [r3, #16]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d012      	beq.n	8008d02 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	3310      	adds	r3, #16
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f000 fd83 	bl	80097ec <xTaskRemoveFromEventList>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d001      	beq.n	8008cf0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008cec:	f000 fe5a 	bl	80099a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008cf0:	7bbb      	ldrb	r3, [r7, #14]
 8008cf2:	3b01      	subs	r3, #1
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008cf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	dce9      	bgt.n	8008cd4 <prvUnlockQueue+0x60>
 8008d00:	e000      	b.n	8008d04 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008d02:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	22ff      	movs	r2, #255	; 0xff
 8008d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008d0c:	f001 fcba 	bl	800a684 <vPortExitCritical>
}
 8008d10:	bf00      	nop
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d20:	f001 fc80 	bl	800a624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d102      	bne.n	8008d32 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	60fb      	str	r3, [r7, #12]
 8008d30:	e001      	b.n	8008d36 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008d32:	2300      	movs	r3, #0
 8008d34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d36:	f001 fca5 	bl	800a684 <vPortExitCritical>

	return xReturn;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3710      	adds	r7, #16
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d4c:	f001 fc6a 	bl	800a624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d102      	bne.n	8008d62 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	60fb      	str	r3, [r7, #12]
 8008d60:	e001      	b.n	8008d66 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008d62:	2300      	movs	r3, #0
 8008d64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d66:	f001 fc8d 	bl	800a684 <vPortExitCritical>

	return xReturn;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3710      	adds	r7, #16
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d7e:	2300      	movs	r3, #0
 8008d80:	60fb      	str	r3, [r7, #12]
 8008d82:	e014      	b.n	8008dae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008d84:	4a0f      	ldr	r2, [pc, #60]	; (8008dc4 <vQueueAddToRegistry+0x50>)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d10b      	bne.n	8008da8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008d90:	490c      	ldr	r1, [pc, #48]	; (8008dc4 <vQueueAddToRegistry+0x50>)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	683a      	ldr	r2, [r7, #0]
 8008d96:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008d9a:	4a0a      	ldr	r2, [pc, #40]	; (8008dc4 <vQueueAddToRegistry+0x50>)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	00db      	lsls	r3, r3, #3
 8008da0:	4413      	add	r3, r2
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008da6:	e006      	b.n	8008db6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	3301      	adds	r3, #1
 8008dac:	60fb      	str	r3, [r7, #12]
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2b07      	cmp	r3, #7
 8008db2:	d9e7      	bls.n	8008d84 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008db4:	bf00      	nop
 8008db6:	bf00      	nop
 8008db8:	3714      	adds	r7, #20
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop
 8008dc4:	200009b8 	.word	0x200009b8

08008dc8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b086      	sub	sp, #24
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	60f8      	str	r0, [r7, #12]
 8008dd0:	60b9      	str	r1, [r7, #8]
 8008dd2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008dd8:	f001 fc24 	bl	800a624 <vPortEnterCritical>
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008de2:	b25b      	sxtb	r3, r3
 8008de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008de8:	d103      	bne.n	8008df2 <vQueueWaitForMessageRestricted+0x2a>
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008df8:	b25b      	sxtb	r3, r3
 8008dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dfe:	d103      	bne.n	8008e08 <vQueueWaitForMessageRestricted+0x40>
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e08:	f001 fc3c 	bl	800a684 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d106      	bne.n	8008e22 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	3324      	adds	r3, #36	; 0x24
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	68b9      	ldr	r1, [r7, #8]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f000 fcb9 	bl	8009794 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008e22:	6978      	ldr	r0, [r7, #20]
 8008e24:	f7ff ff26 	bl	8008c74 <prvUnlockQueue>
	}
 8008e28:	bf00      	nop
 8008e2a:	3718      	adds	r7, #24
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b08e      	sub	sp, #56	; 0x38
 8008e34:	af04      	add	r7, sp, #16
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	607a      	str	r2, [r7, #4]
 8008e3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d10a      	bne.n	8008e5a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e48:	f383 8811 	msr	BASEPRI, r3
 8008e4c:	f3bf 8f6f 	isb	sy
 8008e50:	f3bf 8f4f 	dsb	sy
 8008e54:	623b      	str	r3, [r7, #32]
}
 8008e56:	bf00      	nop
 8008e58:	e7fe      	b.n	8008e58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d10a      	bne.n	8008e76 <xTaskCreateStatic+0x46>
	__asm volatile
 8008e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e64:	f383 8811 	msr	BASEPRI, r3
 8008e68:	f3bf 8f6f 	isb	sy
 8008e6c:	f3bf 8f4f 	dsb	sy
 8008e70:	61fb      	str	r3, [r7, #28]
}
 8008e72:	bf00      	nop
 8008e74:	e7fe      	b.n	8008e74 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008e76:	235c      	movs	r3, #92	; 0x5c
 8008e78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	2b5c      	cmp	r3, #92	; 0x5c
 8008e7e:	d00a      	beq.n	8008e96 <xTaskCreateStatic+0x66>
	__asm volatile
 8008e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e84:	f383 8811 	msr	BASEPRI, r3
 8008e88:	f3bf 8f6f 	isb	sy
 8008e8c:	f3bf 8f4f 	dsb	sy
 8008e90:	61bb      	str	r3, [r7, #24]
}
 8008e92:	bf00      	nop
 8008e94:	e7fe      	b.n	8008e94 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008e96:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d01e      	beq.n	8008edc <xTaskCreateStatic+0xac>
 8008e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d01b      	beq.n	8008edc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008eac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb0:	2202      	movs	r2, #2
 8008eb2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	9303      	str	r3, [sp, #12]
 8008eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebc:	9302      	str	r3, [sp, #8]
 8008ebe:	f107 0314 	add.w	r3, r7, #20
 8008ec2:	9301      	str	r3, [sp, #4]
 8008ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec6:	9300      	str	r3, [sp, #0]
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	68b9      	ldr	r1, [r7, #8]
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	f000 f850 	bl	8008f74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ed4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ed6:	f000 f8dd 	bl	8009094 <prvAddNewTaskToReadyList>
 8008eda:	e001      	b.n	8008ee0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008edc:	2300      	movs	r3, #0
 8008ede:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008ee0:	697b      	ldr	r3, [r7, #20]
	}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3728      	adds	r7, #40	; 0x28
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b08c      	sub	sp, #48	; 0x30
 8008eee:	af04      	add	r7, sp, #16
 8008ef0:	60f8      	str	r0, [r7, #12]
 8008ef2:	60b9      	str	r1, [r7, #8]
 8008ef4:	603b      	str	r3, [r7, #0]
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008efa:	88fb      	ldrh	r3, [r7, #6]
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	4618      	mov	r0, r3
 8008f00:	f001 fcb2 	bl	800a868 <pvPortMalloc>
 8008f04:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d00e      	beq.n	8008f2a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008f0c:	205c      	movs	r0, #92	; 0x5c
 8008f0e:	f001 fcab 	bl	800a868 <pvPortMalloc>
 8008f12:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d003      	beq.n	8008f22 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	697a      	ldr	r2, [r7, #20]
 8008f1e:	631a      	str	r2, [r3, #48]	; 0x30
 8008f20:	e005      	b.n	8008f2e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008f22:	6978      	ldr	r0, [r7, #20]
 8008f24:	f001 fd6c 	bl	800aa00 <vPortFree>
 8008f28:	e001      	b.n	8008f2e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d017      	beq.n	8008f64 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008f3c:	88fa      	ldrh	r2, [r7, #6]
 8008f3e:	2300      	movs	r3, #0
 8008f40:	9303      	str	r3, [sp, #12]
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	9302      	str	r3, [sp, #8]
 8008f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f48:	9301      	str	r3, [sp, #4]
 8008f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4c:	9300      	str	r3, [sp, #0]
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	68b9      	ldr	r1, [r7, #8]
 8008f52:	68f8      	ldr	r0, [r7, #12]
 8008f54:	f000 f80e 	bl	8008f74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f58:	69f8      	ldr	r0, [r7, #28]
 8008f5a:	f000 f89b 	bl	8009094 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	61bb      	str	r3, [r7, #24]
 8008f62:	e002      	b.n	8008f6a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008f64:	f04f 33ff 	mov.w	r3, #4294967295
 8008f68:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008f6a:	69bb      	ldr	r3, [r7, #24]
	}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3720      	adds	r7, #32
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b088      	sub	sp, #32
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	607a      	str	r2, [r7, #4]
 8008f80:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f84:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	21a5      	movs	r1, #165	; 0xa5
 8008f8e:	f002 fa09 	bl	800b3a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	4413      	add	r3, r2
 8008fa2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008fa4:	69bb      	ldr	r3, [r7, #24]
 8008fa6:	f023 0307 	bic.w	r3, r3, #7
 8008faa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008fac:	69bb      	ldr	r3, [r7, #24]
 8008fae:	f003 0307 	and.w	r3, r3, #7
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00a      	beq.n	8008fcc <prvInitialiseNewTask+0x58>
	__asm volatile
 8008fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fba:	f383 8811 	msr	BASEPRI, r3
 8008fbe:	f3bf 8f6f 	isb	sy
 8008fc2:	f3bf 8f4f 	dsb	sy
 8008fc6:	617b      	str	r3, [r7, #20]
}
 8008fc8:	bf00      	nop
 8008fca:	e7fe      	b.n	8008fca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d01f      	beq.n	8009012 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	61fb      	str	r3, [r7, #28]
 8008fd6:	e012      	b.n	8008ffe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008fd8:	68ba      	ldr	r2, [r7, #8]
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	4413      	add	r3, r2
 8008fde:	7819      	ldrb	r1, [r3, #0]
 8008fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	4413      	add	r3, r2
 8008fe6:	3334      	adds	r3, #52	; 0x34
 8008fe8:	460a      	mov	r2, r1
 8008fea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d006      	beq.n	8009006 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	61fb      	str	r3, [r7, #28]
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	2b0f      	cmp	r3, #15
 8009002:	d9e9      	bls.n	8008fd8 <prvInitialiseNewTask+0x64>
 8009004:	e000      	b.n	8009008 <prvInitialiseNewTask+0x94>
			{
				break;
 8009006:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900a:	2200      	movs	r2, #0
 800900c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009010:	e003      	b.n	800901a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009014:	2200      	movs	r2, #0
 8009016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800901a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901c:	2b37      	cmp	r3, #55	; 0x37
 800901e:	d901      	bls.n	8009024 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009020:	2337      	movs	r3, #55	; 0x37
 8009022:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009026:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009028:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800902a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800902e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009032:	2200      	movs	r2, #0
 8009034:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009038:	3304      	adds	r3, #4
 800903a:	4618      	mov	r0, r3
 800903c:	f7ff f978 	bl	8008330 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009042:	3318      	adds	r3, #24
 8009044:	4618      	mov	r0, r3
 8009046:	f7ff f973 	bl	8008330 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800904a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800904e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009052:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009058:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800905a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800905e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009062:	2200      	movs	r2, #0
 8009064:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009068:	2200      	movs	r2, #0
 800906a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800906e:	683a      	ldr	r2, [r7, #0]
 8009070:	68f9      	ldr	r1, [r7, #12]
 8009072:	69b8      	ldr	r0, [r7, #24]
 8009074:	f001 f9a6 	bl	800a3c4 <pxPortInitialiseStack>
 8009078:	4602      	mov	r2, r0
 800907a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800907e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009080:	2b00      	cmp	r3, #0
 8009082:	d002      	beq.n	800908a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009088:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800908a:	bf00      	nop
 800908c:	3720      	adds	r7, #32
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
	...

08009094 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800909c:	f001 fac2 	bl	800a624 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80090a0:	4b2d      	ldr	r3, [pc, #180]	; (8009158 <prvAddNewTaskToReadyList+0xc4>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	3301      	adds	r3, #1
 80090a6:	4a2c      	ldr	r2, [pc, #176]	; (8009158 <prvAddNewTaskToReadyList+0xc4>)
 80090a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80090aa:	4b2c      	ldr	r3, [pc, #176]	; (800915c <prvAddNewTaskToReadyList+0xc8>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d109      	bne.n	80090c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80090b2:	4a2a      	ldr	r2, [pc, #168]	; (800915c <prvAddNewTaskToReadyList+0xc8>)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80090b8:	4b27      	ldr	r3, [pc, #156]	; (8009158 <prvAddNewTaskToReadyList+0xc4>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d110      	bne.n	80090e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80090c0:	f000 fc94 	bl	80099ec <prvInitialiseTaskLists>
 80090c4:	e00d      	b.n	80090e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80090c6:	4b26      	ldr	r3, [pc, #152]	; (8009160 <prvAddNewTaskToReadyList+0xcc>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d109      	bne.n	80090e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80090ce:	4b23      	ldr	r3, [pc, #140]	; (800915c <prvAddNewTaskToReadyList+0xc8>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d8:	429a      	cmp	r2, r3
 80090da:	d802      	bhi.n	80090e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80090dc:	4a1f      	ldr	r2, [pc, #124]	; (800915c <prvAddNewTaskToReadyList+0xc8>)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80090e2:	4b20      	ldr	r3, [pc, #128]	; (8009164 <prvAddNewTaskToReadyList+0xd0>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	3301      	adds	r3, #1
 80090e8:	4a1e      	ldr	r2, [pc, #120]	; (8009164 <prvAddNewTaskToReadyList+0xd0>)
 80090ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80090ec:	4b1d      	ldr	r3, [pc, #116]	; (8009164 <prvAddNewTaskToReadyList+0xd0>)
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090f8:	4b1b      	ldr	r3, [pc, #108]	; (8009168 <prvAddNewTaskToReadyList+0xd4>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d903      	bls.n	8009108 <prvAddNewTaskToReadyList+0x74>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009104:	4a18      	ldr	r2, [pc, #96]	; (8009168 <prvAddNewTaskToReadyList+0xd4>)
 8009106:	6013      	str	r3, [r2, #0]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800910c:	4613      	mov	r3, r2
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	4413      	add	r3, r2
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	4a15      	ldr	r2, [pc, #84]	; (800916c <prvAddNewTaskToReadyList+0xd8>)
 8009116:	441a      	add	r2, r3
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	3304      	adds	r3, #4
 800911c:	4619      	mov	r1, r3
 800911e:	4610      	mov	r0, r2
 8009120:	f7ff f913 	bl	800834a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009124:	f001 faae 	bl	800a684 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009128:	4b0d      	ldr	r3, [pc, #52]	; (8009160 <prvAddNewTaskToReadyList+0xcc>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d00e      	beq.n	800914e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009130:	4b0a      	ldr	r3, [pc, #40]	; (800915c <prvAddNewTaskToReadyList+0xc8>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800913a:	429a      	cmp	r2, r3
 800913c:	d207      	bcs.n	800914e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800913e:	4b0c      	ldr	r3, [pc, #48]	; (8009170 <prvAddNewTaskToReadyList+0xdc>)
 8009140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009144:	601a      	str	r2, [r3, #0]
 8009146:	f3bf 8f4f 	dsb	sy
 800914a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800914e:	bf00      	nop
 8009150:	3708      	adds	r7, #8
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	20000ecc 	.word	0x20000ecc
 800915c:	200009f8 	.word	0x200009f8
 8009160:	20000ed8 	.word	0x20000ed8
 8009164:	20000ee8 	.word	0x20000ee8
 8009168:	20000ed4 	.word	0x20000ed4
 800916c:	200009fc 	.word	0x200009fc
 8009170:	e000ed04 	.word	0xe000ed04

08009174 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8009174:	b580      	push	{r7, lr}
 8009176:	b08a      	sub	sp, #40	; 0x28
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800917e:	2300      	movs	r3, #0
 8009180:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d10a      	bne.n	800919e <vTaskDelayUntil+0x2a>
	__asm volatile
 8009188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918c:	f383 8811 	msr	BASEPRI, r3
 8009190:	f3bf 8f6f 	isb	sy
 8009194:	f3bf 8f4f 	dsb	sy
 8009198:	617b      	str	r3, [r7, #20]
}
 800919a:	bf00      	nop
 800919c:	e7fe      	b.n	800919c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d10a      	bne.n	80091ba <vTaskDelayUntil+0x46>
	__asm volatile
 80091a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a8:	f383 8811 	msr	BASEPRI, r3
 80091ac:	f3bf 8f6f 	isb	sy
 80091b0:	f3bf 8f4f 	dsb	sy
 80091b4:	613b      	str	r3, [r7, #16]
}
 80091b6:	bf00      	nop
 80091b8:	e7fe      	b.n	80091b8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80091ba:	4b2a      	ldr	r3, [pc, #168]	; (8009264 <vTaskDelayUntil+0xf0>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d00a      	beq.n	80091d8 <vTaskDelayUntil+0x64>
	__asm volatile
 80091c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c6:	f383 8811 	msr	BASEPRI, r3
 80091ca:	f3bf 8f6f 	isb	sy
 80091ce:	f3bf 8f4f 	dsb	sy
 80091d2:	60fb      	str	r3, [r7, #12]
}
 80091d4:	bf00      	nop
 80091d6:	e7fe      	b.n	80091d6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80091d8:	f000 f8e4 	bl	80093a4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80091dc:	4b22      	ldr	r3, [pc, #136]	; (8009268 <vTaskDelayUntil+0xf4>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	683a      	ldr	r2, [r7, #0]
 80091e8:	4413      	add	r3, r2
 80091ea:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	6a3a      	ldr	r2, [r7, #32]
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d20b      	bcs.n	800920e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	69fa      	ldr	r2, [r7, #28]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d211      	bcs.n	8009224 <vTaskDelayUntil+0xb0>
 8009200:	69fa      	ldr	r2, [r7, #28]
 8009202:	6a3b      	ldr	r3, [r7, #32]
 8009204:	429a      	cmp	r2, r3
 8009206:	d90d      	bls.n	8009224 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009208:	2301      	movs	r3, #1
 800920a:	627b      	str	r3, [r7, #36]	; 0x24
 800920c:	e00a      	b.n	8009224 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	69fa      	ldr	r2, [r7, #28]
 8009214:	429a      	cmp	r2, r3
 8009216:	d303      	bcc.n	8009220 <vTaskDelayUntil+0xac>
 8009218:	69fa      	ldr	r2, [r7, #28]
 800921a:	6a3b      	ldr	r3, [r7, #32]
 800921c:	429a      	cmp	r2, r3
 800921e:	d901      	bls.n	8009224 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009220:	2301      	movs	r3, #1
 8009222:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	69fa      	ldr	r2, [r7, #28]
 8009228:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800922a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922c:	2b00      	cmp	r3, #0
 800922e:	d006      	beq.n	800923e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8009230:	69fa      	ldr	r2, [r7, #28]
 8009232:	6a3b      	ldr	r3, [r7, #32]
 8009234:	1ad3      	subs	r3, r2, r3
 8009236:	2100      	movs	r1, #0
 8009238:	4618      	mov	r0, r3
 800923a:	f000 fd21 	bl	8009c80 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800923e:	f000 f8bf 	bl	80093c0 <xTaskResumeAll>
 8009242:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d107      	bne.n	800925a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800924a:	4b08      	ldr	r3, [pc, #32]	; (800926c <vTaskDelayUntil+0xf8>)
 800924c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009250:	601a      	str	r2, [r3, #0]
 8009252:	f3bf 8f4f 	dsb	sy
 8009256:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800925a:	bf00      	nop
 800925c:	3728      	adds	r7, #40	; 0x28
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	20000ef4 	.word	0x20000ef4
 8009268:	20000ed0 	.word	0x20000ed0
 800926c:	e000ed04 	.word	0xe000ed04

08009270 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009278:	2300      	movs	r3, #0
 800927a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d017      	beq.n	80092b2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009282:	4b13      	ldr	r3, [pc, #76]	; (80092d0 <vTaskDelay+0x60>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00a      	beq.n	80092a0 <vTaskDelay+0x30>
	__asm volatile
 800928a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800928e:	f383 8811 	msr	BASEPRI, r3
 8009292:	f3bf 8f6f 	isb	sy
 8009296:	f3bf 8f4f 	dsb	sy
 800929a:	60bb      	str	r3, [r7, #8]
}
 800929c:	bf00      	nop
 800929e:	e7fe      	b.n	800929e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80092a0:	f000 f880 	bl	80093a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80092a4:	2100      	movs	r1, #0
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 fcea 	bl	8009c80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80092ac:	f000 f888 	bl	80093c0 <xTaskResumeAll>
 80092b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d107      	bne.n	80092c8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80092b8:	4b06      	ldr	r3, [pc, #24]	; (80092d4 <vTaskDelay+0x64>)
 80092ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092be:	601a      	str	r2, [r3, #0]
 80092c0:	f3bf 8f4f 	dsb	sy
 80092c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80092c8:	bf00      	nop
 80092ca:	3710      	adds	r7, #16
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}
 80092d0:	20000ef4 	.word	0x20000ef4
 80092d4:	e000ed04 	.word	0xe000ed04

080092d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b08a      	sub	sp, #40	; 0x28
 80092dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80092de:	2300      	movs	r3, #0
 80092e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80092e2:	2300      	movs	r3, #0
 80092e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80092e6:	463a      	mov	r2, r7
 80092e8:	1d39      	adds	r1, r7, #4
 80092ea:	f107 0308 	add.w	r3, r7, #8
 80092ee:	4618      	mov	r0, r3
 80092f0:	f7fe ffca 	bl	8008288 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80092f4:	6839      	ldr	r1, [r7, #0]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	68ba      	ldr	r2, [r7, #8]
 80092fa:	9202      	str	r2, [sp, #8]
 80092fc:	9301      	str	r3, [sp, #4]
 80092fe:	2300      	movs	r3, #0
 8009300:	9300      	str	r3, [sp, #0]
 8009302:	2300      	movs	r3, #0
 8009304:	460a      	mov	r2, r1
 8009306:	4921      	ldr	r1, [pc, #132]	; (800938c <vTaskStartScheduler+0xb4>)
 8009308:	4821      	ldr	r0, [pc, #132]	; (8009390 <vTaskStartScheduler+0xb8>)
 800930a:	f7ff fd91 	bl	8008e30 <xTaskCreateStatic>
 800930e:	4603      	mov	r3, r0
 8009310:	4a20      	ldr	r2, [pc, #128]	; (8009394 <vTaskStartScheduler+0xbc>)
 8009312:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009314:	4b1f      	ldr	r3, [pc, #124]	; (8009394 <vTaskStartScheduler+0xbc>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d002      	beq.n	8009322 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800931c:	2301      	movs	r3, #1
 800931e:	617b      	str	r3, [r7, #20]
 8009320:	e001      	b.n	8009326 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009322:	2300      	movs	r3, #0
 8009324:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	2b01      	cmp	r3, #1
 800932a:	d102      	bne.n	8009332 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800932c:	f000 fcfc 	bl	8009d28 <xTimerCreateTimerTask>
 8009330:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	2b01      	cmp	r3, #1
 8009336:	d116      	bne.n	8009366 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800933c:	f383 8811 	msr	BASEPRI, r3
 8009340:	f3bf 8f6f 	isb	sy
 8009344:	f3bf 8f4f 	dsb	sy
 8009348:	613b      	str	r3, [r7, #16]
}
 800934a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800934c:	4b12      	ldr	r3, [pc, #72]	; (8009398 <vTaskStartScheduler+0xc0>)
 800934e:	f04f 32ff 	mov.w	r2, #4294967295
 8009352:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009354:	4b11      	ldr	r3, [pc, #68]	; (800939c <vTaskStartScheduler+0xc4>)
 8009356:	2201      	movs	r2, #1
 8009358:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800935a:	4b11      	ldr	r3, [pc, #68]	; (80093a0 <vTaskStartScheduler+0xc8>)
 800935c:	2200      	movs	r2, #0
 800935e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009360:	f001 f8be 	bl	800a4e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009364:	e00e      	b.n	8009384 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800936c:	d10a      	bne.n	8009384 <vTaskStartScheduler+0xac>
	__asm volatile
 800936e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009372:	f383 8811 	msr	BASEPRI, r3
 8009376:	f3bf 8f6f 	isb	sy
 800937a:	f3bf 8f4f 	dsb	sy
 800937e:	60fb      	str	r3, [r7, #12]
}
 8009380:	bf00      	nop
 8009382:	e7fe      	b.n	8009382 <vTaskStartScheduler+0xaa>
}
 8009384:	bf00      	nop
 8009386:	3718      	adds	r7, #24
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}
 800938c:	0800bbe4 	.word	0x0800bbe4
 8009390:	080099bd 	.word	0x080099bd
 8009394:	20000ef0 	.word	0x20000ef0
 8009398:	20000eec 	.word	0x20000eec
 800939c:	20000ed8 	.word	0x20000ed8
 80093a0:	20000ed0 	.word	0x20000ed0

080093a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80093a4:	b480      	push	{r7}
 80093a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80093a8:	4b04      	ldr	r3, [pc, #16]	; (80093bc <vTaskSuspendAll+0x18>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	3301      	adds	r3, #1
 80093ae:	4a03      	ldr	r2, [pc, #12]	; (80093bc <vTaskSuspendAll+0x18>)
 80093b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80093b2:	bf00      	nop
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr
 80093bc:	20000ef4 	.word	0x20000ef4

080093c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80093c6:	2300      	movs	r3, #0
 80093c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80093ca:	2300      	movs	r3, #0
 80093cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80093ce:	4b42      	ldr	r3, [pc, #264]	; (80094d8 <xTaskResumeAll+0x118>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d10a      	bne.n	80093ec <xTaskResumeAll+0x2c>
	__asm volatile
 80093d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093da:	f383 8811 	msr	BASEPRI, r3
 80093de:	f3bf 8f6f 	isb	sy
 80093e2:	f3bf 8f4f 	dsb	sy
 80093e6:	603b      	str	r3, [r7, #0]
}
 80093e8:	bf00      	nop
 80093ea:	e7fe      	b.n	80093ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80093ec:	f001 f91a 	bl	800a624 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80093f0:	4b39      	ldr	r3, [pc, #228]	; (80094d8 <xTaskResumeAll+0x118>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	3b01      	subs	r3, #1
 80093f6:	4a38      	ldr	r2, [pc, #224]	; (80094d8 <xTaskResumeAll+0x118>)
 80093f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093fa:	4b37      	ldr	r3, [pc, #220]	; (80094d8 <xTaskResumeAll+0x118>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d162      	bne.n	80094c8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009402:	4b36      	ldr	r3, [pc, #216]	; (80094dc <xTaskResumeAll+0x11c>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d05e      	beq.n	80094c8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800940a:	e02f      	b.n	800946c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800940c:	4b34      	ldr	r3, [pc, #208]	; (80094e0 <xTaskResumeAll+0x120>)
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	3318      	adds	r3, #24
 8009418:	4618      	mov	r0, r3
 800941a:	f7fe fff3 	bl	8008404 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	3304      	adds	r3, #4
 8009422:	4618      	mov	r0, r3
 8009424:	f7fe ffee 	bl	8008404 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800942c:	4b2d      	ldr	r3, [pc, #180]	; (80094e4 <xTaskResumeAll+0x124>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	429a      	cmp	r2, r3
 8009432:	d903      	bls.n	800943c <xTaskResumeAll+0x7c>
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009438:	4a2a      	ldr	r2, [pc, #168]	; (80094e4 <xTaskResumeAll+0x124>)
 800943a:	6013      	str	r3, [r2, #0]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009440:	4613      	mov	r3, r2
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	4413      	add	r3, r2
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	4a27      	ldr	r2, [pc, #156]	; (80094e8 <xTaskResumeAll+0x128>)
 800944a:	441a      	add	r2, r3
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	3304      	adds	r3, #4
 8009450:	4619      	mov	r1, r3
 8009452:	4610      	mov	r0, r2
 8009454:	f7fe ff79 	bl	800834a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800945c:	4b23      	ldr	r3, [pc, #140]	; (80094ec <xTaskResumeAll+0x12c>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009462:	429a      	cmp	r2, r3
 8009464:	d302      	bcc.n	800946c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009466:	4b22      	ldr	r3, [pc, #136]	; (80094f0 <xTaskResumeAll+0x130>)
 8009468:	2201      	movs	r2, #1
 800946a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800946c:	4b1c      	ldr	r3, [pc, #112]	; (80094e0 <xTaskResumeAll+0x120>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d1cb      	bne.n	800940c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d001      	beq.n	800947e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800947a:	f000 fb55 	bl	8009b28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800947e:	4b1d      	ldr	r3, [pc, #116]	; (80094f4 <xTaskResumeAll+0x134>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d010      	beq.n	80094ac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800948a:	f000 f847 	bl	800951c <xTaskIncrementTick>
 800948e:	4603      	mov	r3, r0
 8009490:	2b00      	cmp	r3, #0
 8009492:	d002      	beq.n	800949a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009494:	4b16      	ldr	r3, [pc, #88]	; (80094f0 <xTaskResumeAll+0x130>)
 8009496:	2201      	movs	r2, #1
 8009498:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	3b01      	subs	r3, #1
 800949e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d1f1      	bne.n	800948a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80094a6:	4b13      	ldr	r3, [pc, #76]	; (80094f4 <xTaskResumeAll+0x134>)
 80094a8:	2200      	movs	r2, #0
 80094aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80094ac:	4b10      	ldr	r3, [pc, #64]	; (80094f0 <xTaskResumeAll+0x130>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d009      	beq.n	80094c8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80094b4:	2301      	movs	r3, #1
 80094b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80094b8:	4b0f      	ldr	r3, [pc, #60]	; (80094f8 <xTaskResumeAll+0x138>)
 80094ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094be:	601a      	str	r2, [r3, #0]
 80094c0:	f3bf 8f4f 	dsb	sy
 80094c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80094c8:	f001 f8dc 	bl	800a684 <vPortExitCritical>

	return xAlreadyYielded;
 80094cc:	68bb      	ldr	r3, [r7, #8]
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	20000ef4 	.word	0x20000ef4
 80094dc:	20000ecc 	.word	0x20000ecc
 80094e0:	20000e8c 	.word	0x20000e8c
 80094e4:	20000ed4 	.word	0x20000ed4
 80094e8:	200009fc 	.word	0x200009fc
 80094ec:	200009f8 	.word	0x200009f8
 80094f0:	20000ee0 	.word	0x20000ee0
 80094f4:	20000edc 	.word	0x20000edc
 80094f8:	e000ed04 	.word	0xe000ed04

080094fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009502:	4b05      	ldr	r3, [pc, #20]	; (8009518 <xTaskGetTickCount+0x1c>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009508:	687b      	ldr	r3, [r7, #4]
}
 800950a:	4618      	mov	r0, r3
 800950c:	370c      	adds	r7, #12
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr
 8009516:	bf00      	nop
 8009518:	20000ed0 	.word	0x20000ed0

0800951c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b086      	sub	sp, #24
 8009520:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009522:	2300      	movs	r3, #0
 8009524:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009526:	4b4f      	ldr	r3, [pc, #316]	; (8009664 <xTaskIncrementTick+0x148>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	f040 808f 	bne.w	800964e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009530:	4b4d      	ldr	r3, [pc, #308]	; (8009668 <xTaskIncrementTick+0x14c>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	3301      	adds	r3, #1
 8009536:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009538:	4a4b      	ldr	r2, [pc, #300]	; (8009668 <xTaskIncrementTick+0x14c>)
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d120      	bne.n	8009586 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009544:	4b49      	ldr	r3, [pc, #292]	; (800966c <xTaskIncrementTick+0x150>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d00a      	beq.n	8009564 <xTaskIncrementTick+0x48>
	__asm volatile
 800954e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009552:	f383 8811 	msr	BASEPRI, r3
 8009556:	f3bf 8f6f 	isb	sy
 800955a:	f3bf 8f4f 	dsb	sy
 800955e:	603b      	str	r3, [r7, #0]
}
 8009560:	bf00      	nop
 8009562:	e7fe      	b.n	8009562 <xTaskIncrementTick+0x46>
 8009564:	4b41      	ldr	r3, [pc, #260]	; (800966c <xTaskIncrementTick+0x150>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	60fb      	str	r3, [r7, #12]
 800956a:	4b41      	ldr	r3, [pc, #260]	; (8009670 <xTaskIncrementTick+0x154>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a3f      	ldr	r2, [pc, #252]	; (800966c <xTaskIncrementTick+0x150>)
 8009570:	6013      	str	r3, [r2, #0]
 8009572:	4a3f      	ldr	r2, [pc, #252]	; (8009670 <xTaskIncrementTick+0x154>)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6013      	str	r3, [r2, #0]
 8009578:	4b3e      	ldr	r3, [pc, #248]	; (8009674 <xTaskIncrementTick+0x158>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	3301      	adds	r3, #1
 800957e:	4a3d      	ldr	r2, [pc, #244]	; (8009674 <xTaskIncrementTick+0x158>)
 8009580:	6013      	str	r3, [r2, #0]
 8009582:	f000 fad1 	bl	8009b28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009586:	4b3c      	ldr	r3, [pc, #240]	; (8009678 <xTaskIncrementTick+0x15c>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	693a      	ldr	r2, [r7, #16]
 800958c:	429a      	cmp	r2, r3
 800958e:	d349      	bcc.n	8009624 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009590:	4b36      	ldr	r3, [pc, #216]	; (800966c <xTaskIncrementTick+0x150>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d104      	bne.n	80095a4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800959a:	4b37      	ldr	r3, [pc, #220]	; (8009678 <xTaskIncrementTick+0x15c>)
 800959c:	f04f 32ff 	mov.w	r2, #4294967295
 80095a0:	601a      	str	r2, [r3, #0]
					break;
 80095a2:	e03f      	b.n	8009624 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095a4:	4b31      	ldr	r3, [pc, #196]	; (800966c <xTaskIncrementTick+0x150>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80095b4:	693a      	ldr	r2, [r7, #16]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d203      	bcs.n	80095c4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80095bc:	4a2e      	ldr	r2, [pc, #184]	; (8009678 <xTaskIncrementTick+0x15c>)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80095c2:	e02f      	b.n	8009624 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	3304      	adds	r3, #4
 80095c8:	4618      	mov	r0, r3
 80095ca:	f7fe ff1b 	bl	8008404 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d004      	beq.n	80095e0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	3318      	adds	r3, #24
 80095da:	4618      	mov	r0, r3
 80095dc:	f7fe ff12 	bl	8008404 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095e4:	4b25      	ldr	r3, [pc, #148]	; (800967c <xTaskIncrementTick+0x160>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d903      	bls.n	80095f4 <xTaskIncrementTick+0xd8>
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f0:	4a22      	ldr	r2, [pc, #136]	; (800967c <xTaskIncrementTick+0x160>)
 80095f2:	6013      	str	r3, [r2, #0]
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095f8:	4613      	mov	r3, r2
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	4413      	add	r3, r2
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	4a1f      	ldr	r2, [pc, #124]	; (8009680 <xTaskIncrementTick+0x164>)
 8009602:	441a      	add	r2, r3
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	3304      	adds	r3, #4
 8009608:	4619      	mov	r1, r3
 800960a:	4610      	mov	r0, r2
 800960c:	f7fe fe9d 	bl	800834a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009614:	4b1b      	ldr	r3, [pc, #108]	; (8009684 <xTaskIncrementTick+0x168>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800961a:	429a      	cmp	r2, r3
 800961c:	d3b8      	bcc.n	8009590 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800961e:	2301      	movs	r3, #1
 8009620:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009622:	e7b5      	b.n	8009590 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009624:	4b17      	ldr	r3, [pc, #92]	; (8009684 <xTaskIncrementTick+0x168>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800962a:	4915      	ldr	r1, [pc, #84]	; (8009680 <xTaskIncrementTick+0x164>)
 800962c:	4613      	mov	r3, r2
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	4413      	add	r3, r2
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	440b      	add	r3, r1
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2b01      	cmp	r3, #1
 800963a:	d901      	bls.n	8009640 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800963c:	2301      	movs	r3, #1
 800963e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009640:	4b11      	ldr	r3, [pc, #68]	; (8009688 <xTaskIncrementTick+0x16c>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d007      	beq.n	8009658 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009648:	2301      	movs	r3, #1
 800964a:	617b      	str	r3, [r7, #20]
 800964c:	e004      	b.n	8009658 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800964e:	4b0f      	ldr	r3, [pc, #60]	; (800968c <xTaskIncrementTick+0x170>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	3301      	adds	r3, #1
 8009654:	4a0d      	ldr	r2, [pc, #52]	; (800968c <xTaskIncrementTick+0x170>)
 8009656:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009658:	697b      	ldr	r3, [r7, #20]
}
 800965a:	4618      	mov	r0, r3
 800965c:	3718      	adds	r7, #24
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop
 8009664:	20000ef4 	.word	0x20000ef4
 8009668:	20000ed0 	.word	0x20000ed0
 800966c:	20000e84 	.word	0x20000e84
 8009670:	20000e88 	.word	0x20000e88
 8009674:	20000ee4 	.word	0x20000ee4
 8009678:	20000eec 	.word	0x20000eec
 800967c:	20000ed4 	.word	0x20000ed4
 8009680:	200009fc 	.word	0x200009fc
 8009684:	200009f8 	.word	0x200009f8
 8009688:	20000ee0 	.word	0x20000ee0
 800968c:	20000edc 	.word	0x20000edc

08009690 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009690:	b480      	push	{r7}
 8009692:	b085      	sub	sp, #20
 8009694:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009696:	4b28      	ldr	r3, [pc, #160]	; (8009738 <vTaskSwitchContext+0xa8>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d003      	beq.n	80096a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800969e:	4b27      	ldr	r3, [pc, #156]	; (800973c <vTaskSwitchContext+0xac>)
 80096a0:	2201      	movs	r2, #1
 80096a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80096a4:	e041      	b.n	800972a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80096a6:	4b25      	ldr	r3, [pc, #148]	; (800973c <vTaskSwitchContext+0xac>)
 80096a8:	2200      	movs	r2, #0
 80096aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096ac:	4b24      	ldr	r3, [pc, #144]	; (8009740 <vTaskSwitchContext+0xb0>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	60fb      	str	r3, [r7, #12]
 80096b2:	e010      	b.n	80096d6 <vTaskSwitchContext+0x46>
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d10a      	bne.n	80096d0 <vTaskSwitchContext+0x40>
	__asm volatile
 80096ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096be:	f383 8811 	msr	BASEPRI, r3
 80096c2:	f3bf 8f6f 	isb	sy
 80096c6:	f3bf 8f4f 	dsb	sy
 80096ca:	607b      	str	r3, [r7, #4]
}
 80096cc:	bf00      	nop
 80096ce:	e7fe      	b.n	80096ce <vTaskSwitchContext+0x3e>
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	3b01      	subs	r3, #1
 80096d4:	60fb      	str	r3, [r7, #12]
 80096d6:	491b      	ldr	r1, [pc, #108]	; (8009744 <vTaskSwitchContext+0xb4>)
 80096d8:	68fa      	ldr	r2, [r7, #12]
 80096da:	4613      	mov	r3, r2
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	4413      	add	r3, r2
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	440b      	add	r3, r1
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d0e4      	beq.n	80096b4 <vTaskSwitchContext+0x24>
 80096ea:	68fa      	ldr	r2, [r7, #12]
 80096ec:	4613      	mov	r3, r2
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	4413      	add	r3, r2
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	4a13      	ldr	r2, [pc, #76]	; (8009744 <vTaskSwitchContext+0xb4>)
 80096f6:	4413      	add	r3, r2
 80096f8:	60bb      	str	r3, [r7, #8]
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	685a      	ldr	r2, [r3, #4]
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	605a      	str	r2, [r3, #4]
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	685a      	ldr	r2, [r3, #4]
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	3308      	adds	r3, #8
 800970c:	429a      	cmp	r2, r3
 800970e:	d104      	bne.n	800971a <vTaskSwitchContext+0x8a>
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	685a      	ldr	r2, [r3, #4]
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	605a      	str	r2, [r3, #4]
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	4a09      	ldr	r2, [pc, #36]	; (8009748 <vTaskSwitchContext+0xb8>)
 8009722:	6013      	str	r3, [r2, #0]
 8009724:	4a06      	ldr	r2, [pc, #24]	; (8009740 <vTaskSwitchContext+0xb0>)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	6013      	str	r3, [r2, #0]
}
 800972a:	bf00      	nop
 800972c:	3714      	adds	r7, #20
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	20000ef4 	.word	0x20000ef4
 800973c:	20000ee0 	.word	0x20000ee0
 8009740:	20000ed4 	.word	0x20000ed4
 8009744:	200009fc 	.word	0x200009fc
 8009748:	200009f8 	.word	0x200009f8

0800974c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d10a      	bne.n	8009772 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800975c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009760:	f383 8811 	msr	BASEPRI, r3
 8009764:	f3bf 8f6f 	isb	sy
 8009768:	f3bf 8f4f 	dsb	sy
 800976c:	60fb      	str	r3, [r7, #12]
}
 800976e:	bf00      	nop
 8009770:	e7fe      	b.n	8009770 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009772:	4b07      	ldr	r3, [pc, #28]	; (8009790 <vTaskPlaceOnEventList+0x44>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	3318      	adds	r3, #24
 8009778:	4619      	mov	r1, r3
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f7fe fe09 	bl	8008392 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009780:	2101      	movs	r1, #1
 8009782:	6838      	ldr	r0, [r7, #0]
 8009784:	f000 fa7c 	bl	8009c80 <prvAddCurrentTaskToDelayedList>
}
 8009788:	bf00      	nop
 800978a:	3710      	adds	r7, #16
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	200009f8 	.word	0x200009f8

08009794 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009794:	b580      	push	{r7, lr}
 8009796:	b086      	sub	sp, #24
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d10a      	bne.n	80097bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80097a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097aa:	f383 8811 	msr	BASEPRI, r3
 80097ae:	f3bf 8f6f 	isb	sy
 80097b2:	f3bf 8f4f 	dsb	sy
 80097b6:	617b      	str	r3, [r7, #20]
}
 80097b8:	bf00      	nop
 80097ba:	e7fe      	b.n	80097ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80097bc:	4b0a      	ldr	r3, [pc, #40]	; (80097e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	3318      	adds	r3, #24
 80097c2:	4619      	mov	r1, r3
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	f7fe fdc0 	bl	800834a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d002      	beq.n	80097d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80097d0:	f04f 33ff 	mov.w	r3, #4294967295
 80097d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80097d6:	6879      	ldr	r1, [r7, #4]
 80097d8:	68b8      	ldr	r0, [r7, #8]
 80097da:	f000 fa51 	bl	8009c80 <prvAddCurrentTaskToDelayedList>
	}
 80097de:	bf00      	nop
 80097e0:	3718      	adds	r7, #24
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	200009f8 	.word	0x200009f8

080097ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b086      	sub	sp, #24
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d10a      	bne.n	8009818 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009806:	f383 8811 	msr	BASEPRI, r3
 800980a:	f3bf 8f6f 	isb	sy
 800980e:	f3bf 8f4f 	dsb	sy
 8009812:	60fb      	str	r3, [r7, #12]
}
 8009814:	bf00      	nop
 8009816:	e7fe      	b.n	8009816 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	3318      	adds	r3, #24
 800981c:	4618      	mov	r0, r3
 800981e:	f7fe fdf1 	bl	8008404 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009822:	4b1e      	ldr	r3, [pc, #120]	; (800989c <xTaskRemoveFromEventList+0xb0>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d11d      	bne.n	8009866 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	3304      	adds	r3, #4
 800982e:	4618      	mov	r0, r3
 8009830:	f7fe fde8 	bl	8008404 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009838:	4b19      	ldr	r3, [pc, #100]	; (80098a0 <xTaskRemoveFromEventList+0xb4>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	429a      	cmp	r2, r3
 800983e:	d903      	bls.n	8009848 <xTaskRemoveFromEventList+0x5c>
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009844:	4a16      	ldr	r2, [pc, #88]	; (80098a0 <xTaskRemoveFromEventList+0xb4>)
 8009846:	6013      	str	r3, [r2, #0]
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800984c:	4613      	mov	r3, r2
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	4413      	add	r3, r2
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	4a13      	ldr	r2, [pc, #76]	; (80098a4 <xTaskRemoveFromEventList+0xb8>)
 8009856:	441a      	add	r2, r3
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	3304      	adds	r3, #4
 800985c:	4619      	mov	r1, r3
 800985e:	4610      	mov	r0, r2
 8009860:	f7fe fd73 	bl	800834a <vListInsertEnd>
 8009864:	e005      	b.n	8009872 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	3318      	adds	r3, #24
 800986a:	4619      	mov	r1, r3
 800986c:	480e      	ldr	r0, [pc, #56]	; (80098a8 <xTaskRemoveFromEventList+0xbc>)
 800986e:	f7fe fd6c 	bl	800834a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009876:	4b0d      	ldr	r3, [pc, #52]	; (80098ac <xTaskRemoveFromEventList+0xc0>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987c:	429a      	cmp	r2, r3
 800987e:	d905      	bls.n	800988c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009880:	2301      	movs	r3, #1
 8009882:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009884:	4b0a      	ldr	r3, [pc, #40]	; (80098b0 <xTaskRemoveFromEventList+0xc4>)
 8009886:	2201      	movs	r2, #1
 8009888:	601a      	str	r2, [r3, #0]
 800988a:	e001      	b.n	8009890 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800988c:	2300      	movs	r3, #0
 800988e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009890:	697b      	ldr	r3, [r7, #20]
}
 8009892:	4618      	mov	r0, r3
 8009894:	3718      	adds	r7, #24
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	20000ef4 	.word	0x20000ef4
 80098a0:	20000ed4 	.word	0x20000ed4
 80098a4:	200009fc 	.word	0x200009fc
 80098a8:	20000e8c 	.word	0x20000e8c
 80098ac:	200009f8 	.word	0x200009f8
 80098b0:	20000ee0 	.word	0x20000ee0

080098b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80098bc:	4b06      	ldr	r3, [pc, #24]	; (80098d8 <vTaskInternalSetTimeOutState+0x24>)
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80098c4:	4b05      	ldr	r3, [pc, #20]	; (80098dc <vTaskInternalSetTimeOutState+0x28>)
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	605a      	str	r2, [r3, #4]
}
 80098cc:	bf00      	nop
 80098ce:	370c      	adds	r7, #12
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr
 80098d8:	20000ee4 	.word	0x20000ee4
 80098dc:	20000ed0 	.word	0x20000ed0

080098e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b088      	sub	sp, #32
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d10a      	bne.n	8009906 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80098f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f4:	f383 8811 	msr	BASEPRI, r3
 80098f8:	f3bf 8f6f 	isb	sy
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	613b      	str	r3, [r7, #16]
}
 8009902:	bf00      	nop
 8009904:	e7fe      	b.n	8009904 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d10a      	bne.n	8009922 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800990c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009910:	f383 8811 	msr	BASEPRI, r3
 8009914:	f3bf 8f6f 	isb	sy
 8009918:	f3bf 8f4f 	dsb	sy
 800991c:	60fb      	str	r3, [r7, #12]
}
 800991e:	bf00      	nop
 8009920:	e7fe      	b.n	8009920 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009922:	f000 fe7f 	bl	800a624 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009926:	4b1d      	ldr	r3, [pc, #116]	; (800999c <xTaskCheckForTimeOut+0xbc>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	69ba      	ldr	r2, [r7, #24]
 8009932:	1ad3      	subs	r3, r2, r3
 8009934:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800993e:	d102      	bne.n	8009946 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009940:	2300      	movs	r3, #0
 8009942:	61fb      	str	r3, [r7, #28]
 8009944:	e023      	b.n	800998e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681a      	ldr	r2, [r3, #0]
 800994a:	4b15      	ldr	r3, [pc, #84]	; (80099a0 <xTaskCheckForTimeOut+0xc0>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	429a      	cmp	r2, r3
 8009950:	d007      	beq.n	8009962 <xTaskCheckForTimeOut+0x82>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	69ba      	ldr	r2, [r7, #24]
 8009958:	429a      	cmp	r2, r3
 800995a:	d302      	bcc.n	8009962 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800995c:	2301      	movs	r3, #1
 800995e:	61fb      	str	r3, [r7, #28]
 8009960:	e015      	b.n	800998e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	697a      	ldr	r2, [r7, #20]
 8009968:	429a      	cmp	r2, r3
 800996a:	d20b      	bcs.n	8009984 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	1ad2      	subs	r2, r2, r3
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f7ff ff9b 	bl	80098b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800997e:	2300      	movs	r3, #0
 8009980:	61fb      	str	r3, [r7, #28]
 8009982:	e004      	b.n	800998e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	2200      	movs	r2, #0
 8009988:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800998a:	2301      	movs	r3, #1
 800998c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800998e:	f000 fe79 	bl	800a684 <vPortExitCritical>

	return xReturn;
 8009992:	69fb      	ldr	r3, [r7, #28]
}
 8009994:	4618      	mov	r0, r3
 8009996:	3720      	adds	r7, #32
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}
 800999c:	20000ed0 	.word	0x20000ed0
 80099a0:	20000ee4 	.word	0x20000ee4

080099a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80099a4:	b480      	push	{r7}
 80099a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80099a8:	4b03      	ldr	r3, [pc, #12]	; (80099b8 <vTaskMissedYield+0x14>)
 80099aa:	2201      	movs	r2, #1
 80099ac:	601a      	str	r2, [r3, #0]
}
 80099ae:	bf00      	nop
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr
 80099b8:	20000ee0 	.word	0x20000ee0

080099bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80099c4:	f000 f852 	bl	8009a6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80099c8:	4b06      	ldr	r3, [pc, #24]	; (80099e4 <prvIdleTask+0x28>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d9f9      	bls.n	80099c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80099d0:	4b05      	ldr	r3, [pc, #20]	; (80099e8 <prvIdleTask+0x2c>)
 80099d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099d6:	601a      	str	r2, [r3, #0]
 80099d8:	f3bf 8f4f 	dsb	sy
 80099dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80099e0:	e7f0      	b.n	80099c4 <prvIdleTask+0x8>
 80099e2:	bf00      	nop
 80099e4:	200009fc 	.word	0x200009fc
 80099e8:	e000ed04 	.word	0xe000ed04

080099ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b082      	sub	sp, #8
 80099f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099f2:	2300      	movs	r3, #0
 80099f4:	607b      	str	r3, [r7, #4]
 80099f6:	e00c      	b.n	8009a12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	4613      	mov	r3, r2
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4413      	add	r3, r2
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	4a12      	ldr	r2, [pc, #72]	; (8009a4c <prvInitialiseTaskLists+0x60>)
 8009a04:	4413      	add	r3, r2
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7fe fc72 	bl	80082f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	607b      	str	r3, [r7, #4]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2b37      	cmp	r3, #55	; 0x37
 8009a16:	d9ef      	bls.n	80099f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009a18:	480d      	ldr	r0, [pc, #52]	; (8009a50 <prvInitialiseTaskLists+0x64>)
 8009a1a:	f7fe fc69 	bl	80082f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009a1e:	480d      	ldr	r0, [pc, #52]	; (8009a54 <prvInitialiseTaskLists+0x68>)
 8009a20:	f7fe fc66 	bl	80082f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009a24:	480c      	ldr	r0, [pc, #48]	; (8009a58 <prvInitialiseTaskLists+0x6c>)
 8009a26:	f7fe fc63 	bl	80082f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009a2a:	480c      	ldr	r0, [pc, #48]	; (8009a5c <prvInitialiseTaskLists+0x70>)
 8009a2c:	f7fe fc60 	bl	80082f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009a30:	480b      	ldr	r0, [pc, #44]	; (8009a60 <prvInitialiseTaskLists+0x74>)
 8009a32:	f7fe fc5d 	bl	80082f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009a36:	4b0b      	ldr	r3, [pc, #44]	; (8009a64 <prvInitialiseTaskLists+0x78>)
 8009a38:	4a05      	ldr	r2, [pc, #20]	; (8009a50 <prvInitialiseTaskLists+0x64>)
 8009a3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009a3c:	4b0a      	ldr	r3, [pc, #40]	; (8009a68 <prvInitialiseTaskLists+0x7c>)
 8009a3e:	4a05      	ldr	r2, [pc, #20]	; (8009a54 <prvInitialiseTaskLists+0x68>)
 8009a40:	601a      	str	r2, [r3, #0]
}
 8009a42:	bf00      	nop
 8009a44:	3708      	adds	r7, #8
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	200009fc 	.word	0x200009fc
 8009a50:	20000e5c 	.word	0x20000e5c
 8009a54:	20000e70 	.word	0x20000e70
 8009a58:	20000e8c 	.word	0x20000e8c
 8009a5c:	20000ea0 	.word	0x20000ea0
 8009a60:	20000eb8 	.word	0x20000eb8
 8009a64:	20000e84 	.word	0x20000e84
 8009a68:	20000e88 	.word	0x20000e88

08009a6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a72:	e019      	b.n	8009aa8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009a74:	f000 fdd6 	bl	800a624 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a78:	4b10      	ldr	r3, [pc, #64]	; (8009abc <prvCheckTasksWaitingTermination+0x50>)
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	68db      	ldr	r3, [r3, #12]
 8009a7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	3304      	adds	r3, #4
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7fe fcbd 	bl	8008404 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009a8a:	4b0d      	ldr	r3, [pc, #52]	; (8009ac0 <prvCheckTasksWaitingTermination+0x54>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	3b01      	subs	r3, #1
 8009a90:	4a0b      	ldr	r2, [pc, #44]	; (8009ac0 <prvCheckTasksWaitingTermination+0x54>)
 8009a92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009a94:	4b0b      	ldr	r3, [pc, #44]	; (8009ac4 <prvCheckTasksWaitingTermination+0x58>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	4a0a      	ldr	r2, [pc, #40]	; (8009ac4 <prvCheckTasksWaitingTermination+0x58>)
 8009a9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009a9e:	f000 fdf1 	bl	800a684 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 f810 	bl	8009ac8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009aa8:	4b06      	ldr	r3, [pc, #24]	; (8009ac4 <prvCheckTasksWaitingTermination+0x58>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d1e1      	bne.n	8009a74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009ab0:	bf00      	nop
 8009ab2:	bf00      	nop
 8009ab4:	3708      	adds	r7, #8
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	20000ea0 	.word	0x20000ea0
 8009ac0:	20000ecc 	.word	0x20000ecc
 8009ac4:	20000eb4 	.word	0x20000eb4

08009ac8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b084      	sub	sp, #16
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d108      	bne.n	8009aec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f000 ff8e 	bl	800aa00 <vPortFree>
				vPortFree( pxTCB );
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 ff8b 	bl	800aa00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009aea:	e018      	b.n	8009b1e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d103      	bne.n	8009afe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 ff82 	bl	800aa00 <vPortFree>
	}
 8009afc:	e00f      	b.n	8009b1e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009b04:	2b02      	cmp	r3, #2
 8009b06:	d00a      	beq.n	8009b1e <prvDeleteTCB+0x56>
	__asm volatile
 8009b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b0c:	f383 8811 	msr	BASEPRI, r3
 8009b10:	f3bf 8f6f 	isb	sy
 8009b14:	f3bf 8f4f 	dsb	sy
 8009b18:	60fb      	str	r3, [r7, #12]
}
 8009b1a:	bf00      	nop
 8009b1c:	e7fe      	b.n	8009b1c <prvDeleteTCB+0x54>
	}
 8009b1e:	bf00      	nop
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
	...

08009b28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b2e:	4b0c      	ldr	r3, [pc, #48]	; (8009b60 <prvResetNextTaskUnblockTime+0x38>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d104      	bne.n	8009b42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009b38:	4b0a      	ldr	r3, [pc, #40]	; (8009b64 <prvResetNextTaskUnblockTime+0x3c>)
 8009b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009b40:	e008      	b.n	8009b54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b42:	4b07      	ldr	r3, [pc, #28]	; (8009b60 <prvResetNextTaskUnblockTime+0x38>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	68db      	ldr	r3, [r3, #12]
 8009b4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	4a04      	ldr	r2, [pc, #16]	; (8009b64 <prvResetNextTaskUnblockTime+0x3c>)
 8009b52:	6013      	str	r3, [r2, #0]
}
 8009b54:	bf00      	nop
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr
 8009b60:	20000e84 	.word	0x20000e84
 8009b64:	20000eec 	.word	0x20000eec

08009b68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009b6e:	4b0b      	ldr	r3, [pc, #44]	; (8009b9c <xTaskGetSchedulerState+0x34>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d102      	bne.n	8009b7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009b76:	2301      	movs	r3, #1
 8009b78:	607b      	str	r3, [r7, #4]
 8009b7a:	e008      	b.n	8009b8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b7c:	4b08      	ldr	r3, [pc, #32]	; (8009ba0 <xTaskGetSchedulerState+0x38>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d102      	bne.n	8009b8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009b84:	2302      	movs	r3, #2
 8009b86:	607b      	str	r3, [r7, #4]
 8009b88:	e001      	b.n	8009b8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009b8e:	687b      	ldr	r3, [r7, #4]
	}
 8009b90:	4618      	mov	r0, r3
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr
 8009b9c:	20000ed8 	.word	0x20000ed8
 8009ba0:	20000ef4 	.word	0x20000ef4

08009ba4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b086      	sub	sp, #24
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d056      	beq.n	8009c68 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009bba:	4b2e      	ldr	r3, [pc, #184]	; (8009c74 <xTaskPriorityDisinherit+0xd0>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	693a      	ldr	r2, [r7, #16]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d00a      	beq.n	8009bda <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc8:	f383 8811 	msr	BASEPRI, r3
 8009bcc:	f3bf 8f6f 	isb	sy
 8009bd0:	f3bf 8f4f 	dsb	sy
 8009bd4:	60fb      	str	r3, [r7, #12]
}
 8009bd6:	bf00      	nop
 8009bd8:	e7fe      	b.n	8009bd8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d10a      	bne.n	8009bf8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be6:	f383 8811 	msr	BASEPRI, r3
 8009bea:	f3bf 8f6f 	isb	sy
 8009bee:	f3bf 8f4f 	dsb	sy
 8009bf2:	60bb      	str	r3, [r7, #8]
}
 8009bf4:	bf00      	nop
 8009bf6:	e7fe      	b.n	8009bf6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bfc:	1e5a      	subs	r2, r3, #1
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d02c      	beq.n	8009c68 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d128      	bne.n	8009c68 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	3304      	adds	r3, #4
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7fe fbf2 	bl	8008404 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c2c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c38:	4b0f      	ldr	r3, [pc, #60]	; (8009c78 <xTaskPriorityDisinherit+0xd4>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d903      	bls.n	8009c48 <xTaskPriorityDisinherit+0xa4>
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c44:	4a0c      	ldr	r2, [pc, #48]	; (8009c78 <xTaskPriorityDisinherit+0xd4>)
 8009c46:	6013      	str	r3, [r2, #0]
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	4413      	add	r3, r2
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	4a09      	ldr	r2, [pc, #36]	; (8009c7c <xTaskPriorityDisinherit+0xd8>)
 8009c56:	441a      	add	r2, r3
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	3304      	adds	r3, #4
 8009c5c:	4619      	mov	r1, r3
 8009c5e:	4610      	mov	r0, r2
 8009c60:	f7fe fb73 	bl	800834a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009c64:	2301      	movs	r3, #1
 8009c66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009c68:	697b      	ldr	r3, [r7, #20]
	}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3718      	adds	r7, #24
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	200009f8 	.word	0x200009f8
 8009c78:	20000ed4 	.word	0x20000ed4
 8009c7c:	200009fc 	.word	0x200009fc

08009c80 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009c8a:	4b21      	ldr	r3, [pc, #132]	; (8009d10 <prvAddCurrentTaskToDelayedList+0x90>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c90:	4b20      	ldr	r3, [pc, #128]	; (8009d14 <prvAddCurrentTaskToDelayedList+0x94>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	3304      	adds	r3, #4
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7fe fbb4 	bl	8008404 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca2:	d10a      	bne.n	8009cba <prvAddCurrentTaskToDelayedList+0x3a>
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d007      	beq.n	8009cba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009caa:	4b1a      	ldr	r3, [pc, #104]	; (8009d14 <prvAddCurrentTaskToDelayedList+0x94>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	3304      	adds	r3, #4
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	4819      	ldr	r0, [pc, #100]	; (8009d18 <prvAddCurrentTaskToDelayedList+0x98>)
 8009cb4:	f7fe fb49 	bl	800834a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009cb8:	e026      	b.n	8009d08 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	4413      	add	r3, r2
 8009cc0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009cc2:	4b14      	ldr	r3, [pc, #80]	; (8009d14 <prvAddCurrentTaskToDelayedList+0x94>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	68ba      	ldr	r2, [r7, #8]
 8009cc8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009cca:	68ba      	ldr	r2, [r7, #8]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d209      	bcs.n	8009ce6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cd2:	4b12      	ldr	r3, [pc, #72]	; (8009d1c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	4b0f      	ldr	r3, [pc, #60]	; (8009d14 <prvAddCurrentTaskToDelayedList+0x94>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	3304      	adds	r3, #4
 8009cdc:	4619      	mov	r1, r3
 8009cde:	4610      	mov	r0, r2
 8009ce0:	f7fe fb57 	bl	8008392 <vListInsert>
}
 8009ce4:	e010      	b.n	8009d08 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ce6:	4b0e      	ldr	r3, [pc, #56]	; (8009d20 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	4b0a      	ldr	r3, [pc, #40]	; (8009d14 <prvAddCurrentTaskToDelayedList+0x94>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	3304      	adds	r3, #4
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	4610      	mov	r0, r2
 8009cf4:	f7fe fb4d 	bl	8008392 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009cf8:	4b0a      	ldr	r3, [pc, #40]	; (8009d24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	68ba      	ldr	r2, [r7, #8]
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d202      	bcs.n	8009d08 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009d02:	4a08      	ldr	r2, [pc, #32]	; (8009d24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	6013      	str	r3, [r2, #0]
}
 8009d08:	bf00      	nop
 8009d0a:	3710      	adds	r7, #16
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}
 8009d10:	20000ed0 	.word	0x20000ed0
 8009d14:	200009f8 	.word	0x200009f8
 8009d18:	20000eb8 	.word	0x20000eb8
 8009d1c:	20000e88 	.word	0x20000e88
 8009d20:	20000e84 	.word	0x20000e84
 8009d24:	20000eec 	.word	0x20000eec

08009d28 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b08a      	sub	sp, #40	; 0x28
 8009d2c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009d32:	f000 fb07 	bl	800a344 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009d36:	4b1c      	ldr	r3, [pc, #112]	; (8009da8 <xTimerCreateTimerTask+0x80>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d021      	beq.n	8009d82 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009d42:	2300      	movs	r3, #0
 8009d44:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009d46:	1d3a      	adds	r2, r7, #4
 8009d48:	f107 0108 	add.w	r1, r7, #8
 8009d4c:	f107 030c 	add.w	r3, r7, #12
 8009d50:	4618      	mov	r0, r3
 8009d52:	f7fe fab3 	bl	80082bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009d56:	6879      	ldr	r1, [r7, #4]
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	68fa      	ldr	r2, [r7, #12]
 8009d5c:	9202      	str	r2, [sp, #8]
 8009d5e:	9301      	str	r3, [sp, #4]
 8009d60:	2302      	movs	r3, #2
 8009d62:	9300      	str	r3, [sp, #0]
 8009d64:	2300      	movs	r3, #0
 8009d66:	460a      	mov	r2, r1
 8009d68:	4910      	ldr	r1, [pc, #64]	; (8009dac <xTimerCreateTimerTask+0x84>)
 8009d6a:	4811      	ldr	r0, [pc, #68]	; (8009db0 <xTimerCreateTimerTask+0x88>)
 8009d6c:	f7ff f860 	bl	8008e30 <xTaskCreateStatic>
 8009d70:	4603      	mov	r3, r0
 8009d72:	4a10      	ldr	r2, [pc, #64]	; (8009db4 <xTimerCreateTimerTask+0x8c>)
 8009d74:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009d76:	4b0f      	ldr	r3, [pc, #60]	; (8009db4 <xTimerCreateTimerTask+0x8c>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d001      	beq.n	8009d82 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d10a      	bne.n	8009d9e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8c:	f383 8811 	msr	BASEPRI, r3
 8009d90:	f3bf 8f6f 	isb	sy
 8009d94:	f3bf 8f4f 	dsb	sy
 8009d98:	613b      	str	r3, [r7, #16]
}
 8009d9a:	bf00      	nop
 8009d9c:	e7fe      	b.n	8009d9c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009d9e:	697b      	ldr	r3, [r7, #20]
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3718      	adds	r7, #24
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	20000f28 	.word	0x20000f28
 8009dac:	0800bbec 	.word	0x0800bbec
 8009db0:	08009eed 	.word	0x08009eed
 8009db4:	20000f2c 	.word	0x20000f2c

08009db8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b08a      	sub	sp, #40	; 0x28
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	607a      	str	r2, [r7, #4]
 8009dc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d10a      	bne.n	8009de6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8009dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd4:	f383 8811 	msr	BASEPRI, r3
 8009dd8:	f3bf 8f6f 	isb	sy
 8009ddc:	f3bf 8f4f 	dsb	sy
 8009de0:	623b      	str	r3, [r7, #32]
}
 8009de2:	bf00      	nop
 8009de4:	e7fe      	b.n	8009de4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009de6:	4b1a      	ldr	r3, [pc, #104]	; (8009e50 <xTimerGenericCommand+0x98>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d02a      	beq.n	8009e44 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	2b05      	cmp	r3, #5
 8009dfe:	dc18      	bgt.n	8009e32 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009e00:	f7ff feb2 	bl	8009b68 <xTaskGetSchedulerState>
 8009e04:	4603      	mov	r3, r0
 8009e06:	2b02      	cmp	r3, #2
 8009e08:	d109      	bne.n	8009e1e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009e0a:	4b11      	ldr	r3, [pc, #68]	; (8009e50 <xTimerGenericCommand+0x98>)
 8009e0c:	6818      	ldr	r0, [r3, #0]
 8009e0e:	f107 0110 	add.w	r1, r7, #16
 8009e12:	2300      	movs	r3, #0
 8009e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e16:	f7fe fc23 	bl	8008660 <xQueueGenericSend>
 8009e1a:	6278      	str	r0, [r7, #36]	; 0x24
 8009e1c:	e012      	b.n	8009e44 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009e1e:	4b0c      	ldr	r3, [pc, #48]	; (8009e50 <xTimerGenericCommand+0x98>)
 8009e20:	6818      	ldr	r0, [r3, #0]
 8009e22:	f107 0110 	add.w	r1, r7, #16
 8009e26:	2300      	movs	r3, #0
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f7fe fc19 	bl	8008660 <xQueueGenericSend>
 8009e2e:	6278      	str	r0, [r7, #36]	; 0x24
 8009e30:	e008      	b.n	8009e44 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009e32:	4b07      	ldr	r3, [pc, #28]	; (8009e50 <xTimerGenericCommand+0x98>)
 8009e34:	6818      	ldr	r0, [r3, #0]
 8009e36:	f107 0110 	add.w	r1, r7, #16
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	683a      	ldr	r2, [r7, #0]
 8009e3e:	f7fe fd0d 	bl	800885c <xQueueGenericSendFromISR>
 8009e42:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3728      	adds	r7, #40	; 0x28
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	20000f28 	.word	0x20000f28

08009e54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b088      	sub	sp, #32
 8009e58:	af02      	add	r7, sp, #8
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e5e:	4b22      	ldr	r3, [pc, #136]	; (8009ee8 <prvProcessExpiredTimer+0x94>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	68db      	ldr	r3, [r3, #12]
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	3304      	adds	r3, #4
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7fe fac9 	bl	8008404 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e78:	f003 0304 	and.w	r3, r3, #4
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d022      	beq.n	8009ec6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	699a      	ldr	r2, [r3, #24]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	18d1      	adds	r1, r2, r3
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	683a      	ldr	r2, [r7, #0]
 8009e8c:	6978      	ldr	r0, [r7, #20]
 8009e8e:	f000 f8d1 	bl	800a034 <prvInsertTimerInActiveList>
 8009e92:	4603      	mov	r3, r0
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d01f      	beq.n	8009ed8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e98:	2300      	movs	r3, #0
 8009e9a:	9300      	str	r3, [sp, #0]
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	2100      	movs	r1, #0
 8009ea2:	6978      	ldr	r0, [r7, #20]
 8009ea4:	f7ff ff88 	bl	8009db8 <xTimerGenericCommand>
 8009ea8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d113      	bne.n	8009ed8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb4:	f383 8811 	msr	BASEPRI, r3
 8009eb8:	f3bf 8f6f 	isb	sy
 8009ebc:	f3bf 8f4f 	dsb	sy
 8009ec0:	60fb      	str	r3, [r7, #12]
}
 8009ec2:	bf00      	nop
 8009ec4:	e7fe      	b.n	8009ec4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ecc:	f023 0301 	bic.w	r3, r3, #1
 8009ed0:	b2da      	uxtb	r2, r3
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	6a1b      	ldr	r3, [r3, #32]
 8009edc:	6978      	ldr	r0, [r7, #20]
 8009ede:	4798      	blx	r3
}
 8009ee0:	bf00      	nop
 8009ee2:	3718      	adds	r7, #24
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	20000f20 	.word	0x20000f20

08009eec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009ef4:	f107 0308 	add.w	r3, r7, #8
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f000 f857 	bl	8009fac <prvGetNextExpireTime>
 8009efe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	4619      	mov	r1, r3
 8009f04:	68f8      	ldr	r0, [r7, #12]
 8009f06:	f000 f803 	bl	8009f10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009f0a:	f000 f8d5 	bl	800a0b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009f0e:	e7f1      	b.n	8009ef4 <prvTimerTask+0x8>

08009f10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009f1a:	f7ff fa43 	bl	80093a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f1e:	f107 0308 	add.w	r3, r7, #8
 8009f22:	4618      	mov	r0, r3
 8009f24:	f000 f866 	bl	8009ff4 <prvSampleTimeNow>
 8009f28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d130      	bne.n	8009f92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d10a      	bne.n	8009f4c <prvProcessTimerOrBlockTask+0x3c>
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d806      	bhi.n	8009f4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009f3e:	f7ff fa3f 	bl	80093c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009f42:	68f9      	ldr	r1, [r7, #12]
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f7ff ff85 	bl	8009e54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009f4a:	e024      	b.n	8009f96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d008      	beq.n	8009f64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009f52:	4b13      	ldr	r3, [pc, #76]	; (8009fa0 <prvProcessTimerOrBlockTask+0x90>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d101      	bne.n	8009f60 <prvProcessTimerOrBlockTask+0x50>
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	e000      	b.n	8009f62 <prvProcessTimerOrBlockTask+0x52>
 8009f60:	2300      	movs	r3, #0
 8009f62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009f64:	4b0f      	ldr	r3, [pc, #60]	; (8009fa4 <prvProcessTimerOrBlockTask+0x94>)
 8009f66:	6818      	ldr	r0, [r3, #0]
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	1ad3      	subs	r3, r2, r3
 8009f6e:	683a      	ldr	r2, [r7, #0]
 8009f70:	4619      	mov	r1, r3
 8009f72:	f7fe ff29 	bl	8008dc8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009f76:	f7ff fa23 	bl	80093c0 <xTaskResumeAll>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d10a      	bne.n	8009f96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009f80:	4b09      	ldr	r3, [pc, #36]	; (8009fa8 <prvProcessTimerOrBlockTask+0x98>)
 8009f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f86:	601a      	str	r2, [r3, #0]
 8009f88:	f3bf 8f4f 	dsb	sy
 8009f8c:	f3bf 8f6f 	isb	sy
}
 8009f90:	e001      	b.n	8009f96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009f92:	f7ff fa15 	bl	80093c0 <xTaskResumeAll>
}
 8009f96:	bf00      	nop
 8009f98:	3710      	adds	r7, #16
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	20000f24 	.word	0x20000f24
 8009fa4:	20000f28 	.word	0x20000f28
 8009fa8:	e000ed04 	.word	0xe000ed04

08009fac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009fac:	b480      	push	{r7}
 8009fae:	b085      	sub	sp, #20
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009fb4:	4b0e      	ldr	r3, [pc, #56]	; (8009ff0 <prvGetNextExpireTime+0x44>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d101      	bne.n	8009fc2 <prvGetNextExpireTime+0x16>
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	e000      	b.n	8009fc4 <prvGetNextExpireTime+0x18>
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d105      	bne.n	8009fdc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009fd0:	4b07      	ldr	r3, [pc, #28]	; (8009ff0 <prvGetNextExpireTime+0x44>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	68db      	ldr	r3, [r3, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	60fb      	str	r3, [r7, #12]
 8009fda:	e001      	b.n	8009fe0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3714      	adds	r7, #20
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr
 8009fee:	bf00      	nop
 8009ff0:	20000f20 	.word	0x20000f20

08009ff4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009ffc:	f7ff fa7e 	bl	80094fc <xTaskGetTickCount>
 800a000:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a002:	4b0b      	ldr	r3, [pc, #44]	; (800a030 <prvSampleTimeNow+0x3c>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	68fa      	ldr	r2, [r7, #12]
 800a008:	429a      	cmp	r2, r3
 800a00a:	d205      	bcs.n	800a018 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a00c:	f000 f936 	bl	800a27c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2201      	movs	r2, #1
 800a014:	601a      	str	r2, [r3, #0]
 800a016:	e002      	b.n	800a01e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2200      	movs	r2, #0
 800a01c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a01e:	4a04      	ldr	r2, [pc, #16]	; (800a030 <prvSampleTimeNow+0x3c>)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a024:	68fb      	ldr	r3, [r7, #12]
}
 800a026:	4618      	mov	r0, r3
 800a028:	3710      	adds	r7, #16
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop
 800a030:	20000f30 	.word	0x20000f30

0800a034 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b086      	sub	sp, #24
 800a038:	af00      	add	r7, sp, #0
 800a03a:	60f8      	str	r0, [r7, #12]
 800a03c:	60b9      	str	r1, [r7, #8]
 800a03e:	607a      	str	r2, [r7, #4]
 800a040:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a042:	2300      	movs	r3, #0
 800a044:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	68ba      	ldr	r2, [r7, #8]
 800a04a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	68fa      	ldr	r2, [r7, #12]
 800a050:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a052:	68ba      	ldr	r2, [r7, #8]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	429a      	cmp	r2, r3
 800a058:	d812      	bhi.n	800a080 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	1ad2      	subs	r2, r2, r3
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	699b      	ldr	r3, [r3, #24]
 800a064:	429a      	cmp	r2, r3
 800a066:	d302      	bcc.n	800a06e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a068:	2301      	movs	r3, #1
 800a06a:	617b      	str	r3, [r7, #20]
 800a06c:	e01b      	b.n	800a0a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a06e:	4b10      	ldr	r3, [pc, #64]	; (800a0b0 <prvInsertTimerInActiveList+0x7c>)
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	3304      	adds	r3, #4
 800a076:	4619      	mov	r1, r3
 800a078:	4610      	mov	r0, r2
 800a07a:	f7fe f98a 	bl	8008392 <vListInsert>
 800a07e:	e012      	b.n	800a0a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	429a      	cmp	r2, r3
 800a086:	d206      	bcs.n	800a096 <prvInsertTimerInActiveList+0x62>
 800a088:	68ba      	ldr	r2, [r7, #8]
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d302      	bcc.n	800a096 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a090:	2301      	movs	r3, #1
 800a092:	617b      	str	r3, [r7, #20]
 800a094:	e007      	b.n	800a0a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a096:	4b07      	ldr	r3, [pc, #28]	; (800a0b4 <prvInsertTimerInActiveList+0x80>)
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	3304      	adds	r3, #4
 800a09e:	4619      	mov	r1, r3
 800a0a0:	4610      	mov	r0, r2
 800a0a2:	f7fe f976 	bl	8008392 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a0a6:	697b      	ldr	r3, [r7, #20]
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3718      	adds	r7, #24
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	20000f24 	.word	0x20000f24
 800a0b4:	20000f20 	.word	0x20000f20

0800a0b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b08e      	sub	sp, #56	; 0x38
 800a0bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a0be:	e0ca      	b.n	800a256 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	da18      	bge.n	800a0f8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a0c6:	1d3b      	adds	r3, r7, #4
 800a0c8:	3304      	adds	r3, #4
 800a0ca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d10a      	bne.n	800a0e8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d6:	f383 8811 	msr	BASEPRI, r3
 800a0da:	f3bf 8f6f 	isb	sy
 800a0de:	f3bf 8f4f 	dsb	sy
 800a0e2:	61fb      	str	r3, [r7, #28]
}
 800a0e4:	bf00      	nop
 800a0e6:	e7fe      	b.n	800a0e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0ee:	6850      	ldr	r0, [r2, #4]
 800a0f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0f2:	6892      	ldr	r2, [r2, #8]
 800a0f4:	4611      	mov	r1, r2
 800a0f6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	f2c0 80ab 	blt.w	800a256 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a106:	695b      	ldr	r3, [r3, #20]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d004      	beq.n	800a116 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10e:	3304      	adds	r3, #4
 800a110:	4618      	mov	r0, r3
 800a112:	f7fe f977 	bl	8008404 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a116:	463b      	mov	r3, r7
 800a118:	4618      	mov	r0, r3
 800a11a:	f7ff ff6b 	bl	8009ff4 <prvSampleTimeNow>
 800a11e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2b09      	cmp	r3, #9
 800a124:	f200 8096 	bhi.w	800a254 <prvProcessReceivedCommands+0x19c>
 800a128:	a201      	add	r2, pc, #4	; (adr r2, 800a130 <prvProcessReceivedCommands+0x78>)
 800a12a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a12e:	bf00      	nop
 800a130:	0800a159 	.word	0x0800a159
 800a134:	0800a159 	.word	0x0800a159
 800a138:	0800a159 	.word	0x0800a159
 800a13c:	0800a1cd 	.word	0x0800a1cd
 800a140:	0800a1e1 	.word	0x0800a1e1
 800a144:	0800a22b 	.word	0x0800a22b
 800a148:	0800a159 	.word	0x0800a159
 800a14c:	0800a159 	.word	0x0800a159
 800a150:	0800a1cd 	.word	0x0800a1cd
 800a154:	0800a1e1 	.word	0x0800a1e1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a15e:	f043 0301 	orr.w	r3, r3, #1
 800a162:	b2da      	uxtb	r2, r3
 800a164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a166:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a16a:	68ba      	ldr	r2, [r7, #8]
 800a16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a16e:	699b      	ldr	r3, [r3, #24]
 800a170:	18d1      	adds	r1, r2, r3
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a176:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a178:	f7ff ff5c 	bl	800a034 <prvInsertTimerInActiveList>
 800a17c:	4603      	mov	r3, r0
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d069      	beq.n	800a256 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a184:	6a1b      	ldr	r3, [r3, #32]
 800a186:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a188:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a190:	f003 0304 	and.w	r3, r3, #4
 800a194:	2b00      	cmp	r3, #0
 800a196:	d05e      	beq.n	800a256 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a198:	68ba      	ldr	r2, [r7, #8]
 800a19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19c:	699b      	ldr	r3, [r3, #24]
 800a19e:	441a      	add	r2, r3
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	9300      	str	r3, [sp, #0]
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	2100      	movs	r1, #0
 800a1a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1aa:	f7ff fe05 	bl	8009db8 <xTimerGenericCommand>
 800a1ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a1b0:	6a3b      	ldr	r3, [r7, #32]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d14f      	bne.n	800a256 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ba:	f383 8811 	msr	BASEPRI, r3
 800a1be:	f3bf 8f6f 	isb	sy
 800a1c2:	f3bf 8f4f 	dsb	sy
 800a1c6:	61bb      	str	r3, [r7, #24]
}
 800a1c8:	bf00      	nop
 800a1ca:	e7fe      	b.n	800a1ca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1d2:	f023 0301 	bic.w	r3, r3, #1
 800a1d6:	b2da      	uxtb	r2, r3
 800a1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a1de:	e03a      	b.n	800a256 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1e6:	f043 0301 	orr.w	r3, r3, #1
 800a1ea:	b2da      	uxtb	r2, r3
 800a1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a1f2:	68ba      	ldr	r2, [r7, #8]
 800a1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1fa:	699b      	ldr	r3, [r3, #24]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d10a      	bne.n	800a216 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a204:	f383 8811 	msr	BASEPRI, r3
 800a208:	f3bf 8f6f 	isb	sy
 800a20c:	f3bf 8f4f 	dsb	sy
 800a210:	617b      	str	r3, [r7, #20]
}
 800a212:	bf00      	nop
 800a214:	e7fe      	b.n	800a214 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a218:	699a      	ldr	r2, [r3, #24]
 800a21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21c:	18d1      	adds	r1, r2, r3
 800a21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a222:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a224:	f7ff ff06 	bl	800a034 <prvInsertTimerInActiveList>
					break;
 800a228:	e015      	b.n	800a256 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a22c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a230:	f003 0302 	and.w	r3, r3, #2
 800a234:	2b00      	cmp	r3, #0
 800a236:	d103      	bne.n	800a240 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a23a:	f000 fbe1 	bl	800aa00 <vPortFree>
 800a23e:	e00a      	b.n	800a256 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a242:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a246:	f023 0301 	bic.w	r3, r3, #1
 800a24a:	b2da      	uxtb	r2, r3
 800a24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a24e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a252:	e000      	b.n	800a256 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800a254:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a256:	4b08      	ldr	r3, [pc, #32]	; (800a278 <prvProcessReceivedCommands+0x1c0>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	1d39      	adds	r1, r7, #4
 800a25c:	2200      	movs	r2, #0
 800a25e:	4618      	mov	r0, r3
 800a260:	f7fe fb98 	bl	8008994 <xQueueReceive>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	f47f af2a 	bne.w	800a0c0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a26c:	bf00      	nop
 800a26e:	bf00      	nop
 800a270:	3730      	adds	r7, #48	; 0x30
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
 800a276:	bf00      	nop
 800a278:	20000f28 	.word	0x20000f28

0800a27c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b088      	sub	sp, #32
 800a280:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a282:	e048      	b.n	800a316 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a284:	4b2d      	ldr	r3, [pc, #180]	; (800a33c <prvSwitchTimerLists+0xc0>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a28e:	4b2b      	ldr	r3, [pc, #172]	; (800a33c <prvSwitchTimerLists+0xc0>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	68db      	ldr	r3, [r3, #12]
 800a296:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	3304      	adds	r3, #4
 800a29c:	4618      	mov	r0, r3
 800a29e:	f7fe f8b1 	bl	8008404 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	6a1b      	ldr	r3, [r3, #32]
 800a2a6:	68f8      	ldr	r0, [r7, #12]
 800a2a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2b0:	f003 0304 	and.w	r3, r3, #4
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d02e      	beq.n	800a316 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	699b      	ldr	r3, [r3, #24]
 800a2bc:	693a      	ldr	r2, [r7, #16]
 800a2be:	4413      	add	r3, r2
 800a2c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a2c2:	68ba      	ldr	r2, [r7, #8]
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d90e      	bls.n	800a2e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	68ba      	ldr	r2, [r7, #8]
 800a2ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	68fa      	ldr	r2, [r7, #12]
 800a2d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a2d6:	4b19      	ldr	r3, [pc, #100]	; (800a33c <prvSwitchTimerLists+0xc0>)
 800a2d8:	681a      	ldr	r2, [r3, #0]
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	3304      	adds	r3, #4
 800a2de:	4619      	mov	r1, r3
 800a2e0:	4610      	mov	r0, r2
 800a2e2:	f7fe f856 	bl	8008392 <vListInsert>
 800a2e6:	e016      	b.n	800a316 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	9300      	str	r3, [sp, #0]
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	693a      	ldr	r2, [r7, #16]
 800a2f0:	2100      	movs	r1, #0
 800a2f2:	68f8      	ldr	r0, [r7, #12]
 800a2f4:	f7ff fd60 	bl	8009db8 <xTimerGenericCommand>
 800a2f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d10a      	bne.n	800a316 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a304:	f383 8811 	msr	BASEPRI, r3
 800a308:	f3bf 8f6f 	isb	sy
 800a30c:	f3bf 8f4f 	dsb	sy
 800a310:	603b      	str	r3, [r7, #0]
}
 800a312:	bf00      	nop
 800a314:	e7fe      	b.n	800a314 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a316:	4b09      	ldr	r3, [pc, #36]	; (800a33c <prvSwitchTimerLists+0xc0>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d1b1      	bne.n	800a284 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a320:	4b06      	ldr	r3, [pc, #24]	; (800a33c <prvSwitchTimerLists+0xc0>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a326:	4b06      	ldr	r3, [pc, #24]	; (800a340 <prvSwitchTimerLists+0xc4>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4a04      	ldr	r2, [pc, #16]	; (800a33c <prvSwitchTimerLists+0xc0>)
 800a32c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a32e:	4a04      	ldr	r2, [pc, #16]	; (800a340 <prvSwitchTimerLists+0xc4>)
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	6013      	str	r3, [r2, #0]
}
 800a334:	bf00      	nop
 800a336:	3718      	adds	r7, #24
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	20000f20 	.word	0x20000f20
 800a340:	20000f24 	.word	0x20000f24

0800a344 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a34a:	f000 f96b 	bl	800a624 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a34e:	4b15      	ldr	r3, [pc, #84]	; (800a3a4 <prvCheckForValidListAndQueue+0x60>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d120      	bne.n	800a398 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a356:	4814      	ldr	r0, [pc, #80]	; (800a3a8 <prvCheckForValidListAndQueue+0x64>)
 800a358:	f7fd ffca 	bl	80082f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a35c:	4813      	ldr	r0, [pc, #76]	; (800a3ac <prvCheckForValidListAndQueue+0x68>)
 800a35e:	f7fd ffc7 	bl	80082f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a362:	4b13      	ldr	r3, [pc, #76]	; (800a3b0 <prvCheckForValidListAndQueue+0x6c>)
 800a364:	4a10      	ldr	r2, [pc, #64]	; (800a3a8 <prvCheckForValidListAndQueue+0x64>)
 800a366:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a368:	4b12      	ldr	r3, [pc, #72]	; (800a3b4 <prvCheckForValidListAndQueue+0x70>)
 800a36a:	4a10      	ldr	r2, [pc, #64]	; (800a3ac <prvCheckForValidListAndQueue+0x68>)
 800a36c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a36e:	2300      	movs	r3, #0
 800a370:	9300      	str	r3, [sp, #0]
 800a372:	4b11      	ldr	r3, [pc, #68]	; (800a3b8 <prvCheckForValidListAndQueue+0x74>)
 800a374:	4a11      	ldr	r2, [pc, #68]	; (800a3bc <prvCheckForValidListAndQueue+0x78>)
 800a376:	2110      	movs	r1, #16
 800a378:	200a      	movs	r0, #10
 800a37a:	f7fe f8d5 	bl	8008528 <xQueueGenericCreateStatic>
 800a37e:	4603      	mov	r3, r0
 800a380:	4a08      	ldr	r2, [pc, #32]	; (800a3a4 <prvCheckForValidListAndQueue+0x60>)
 800a382:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a384:	4b07      	ldr	r3, [pc, #28]	; (800a3a4 <prvCheckForValidListAndQueue+0x60>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d005      	beq.n	800a398 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a38c:	4b05      	ldr	r3, [pc, #20]	; (800a3a4 <prvCheckForValidListAndQueue+0x60>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	490b      	ldr	r1, [pc, #44]	; (800a3c0 <prvCheckForValidListAndQueue+0x7c>)
 800a392:	4618      	mov	r0, r3
 800a394:	f7fe fcee 	bl	8008d74 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a398:	f000 f974 	bl	800a684 <vPortExitCritical>
}
 800a39c:	bf00      	nop
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	20000f28 	.word	0x20000f28
 800a3a8:	20000ef8 	.word	0x20000ef8
 800a3ac:	20000f0c 	.word	0x20000f0c
 800a3b0:	20000f20 	.word	0x20000f20
 800a3b4:	20000f24 	.word	0x20000f24
 800a3b8:	20000fd4 	.word	0x20000fd4
 800a3bc:	20000f34 	.word	0x20000f34
 800a3c0:	0800bbf4 	.word	0x0800bbf4

0800a3c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b085      	sub	sp, #20
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	60f8      	str	r0, [r7, #12]
 800a3cc:	60b9      	str	r1, [r7, #8]
 800a3ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	3b04      	subs	r3, #4
 800a3d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a3dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	3b04      	subs	r3, #4
 800a3e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	f023 0201 	bic.w	r2, r3, #1
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	3b04      	subs	r3, #4
 800a3f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a3f4:	4a0c      	ldr	r2, [pc, #48]	; (800a428 <pxPortInitialiseStack+0x64>)
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	3b14      	subs	r3, #20
 800a3fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a400:	687a      	ldr	r2, [r7, #4]
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	3b04      	subs	r3, #4
 800a40a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f06f 0202 	mvn.w	r2, #2
 800a412:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	3b20      	subs	r3, #32
 800a418:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a41a:	68fb      	ldr	r3, [r7, #12]
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3714      	adds	r7, #20
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr
 800a428:	0800a42d 	.word	0x0800a42d

0800a42c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a42c:	b480      	push	{r7}
 800a42e:	b085      	sub	sp, #20
 800a430:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a432:	2300      	movs	r3, #0
 800a434:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a436:	4b12      	ldr	r3, [pc, #72]	; (800a480 <prvTaskExitError+0x54>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a43e:	d00a      	beq.n	800a456 <prvTaskExitError+0x2a>
	__asm volatile
 800a440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a444:	f383 8811 	msr	BASEPRI, r3
 800a448:	f3bf 8f6f 	isb	sy
 800a44c:	f3bf 8f4f 	dsb	sy
 800a450:	60fb      	str	r3, [r7, #12]
}
 800a452:	bf00      	nop
 800a454:	e7fe      	b.n	800a454 <prvTaskExitError+0x28>
	__asm volatile
 800a456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a45a:	f383 8811 	msr	BASEPRI, r3
 800a45e:	f3bf 8f6f 	isb	sy
 800a462:	f3bf 8f4f 	dsb	sy
 800a466:	60bb      	str	r3, [r7, #8]
}
 800a468:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a46a:	bf00      	nop
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d0fc      	beq.n	800a46c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a472:	bf00      	nop
 800a474:	bf00      	nop
 800a476:	3714      	adds	r7, #20
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr
 800a480:	20000020 	.word	0x20000020
	...

0800a490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a490:	4b07      	ldr	r3, [pc, #28]	; (800a4b0 <pxCurrentTCBConst2>)
 800a492:	6819      	ldr	r1, [r3, #0]
 800a494:	6808      	ldr	r0, [r1, #0]
 800a496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a49a:	f380 8809 	msr	PSP, r0
 800a49e:	f3bf 8f6f 	isb	sy
 800a4a2:	f04f 0000 	mov.w	r0, #0
 800a4a6:	f380 8811 	msr	BASEPRI, r0
 800a4aa:	4770      	bx	lr
 800a4ac:	f3af 8000 	nop.w

0800a4b0 <pxCurrentTCBConst2>:
 800a4b0:	200009f8 	.word	0x200009f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a4b4:	bf00      	nop
 800a4b6:	bf00      	nop

0800a4b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a4b8:	4808      	ldr	r0, [pc, #32]	; (800a4dc <prvPortStartFirstTask+0x24>)
 800a4ba:	6800      	ldr	r0, [r0, #0]
 800a4bc:	6800      	ldr	r0, [r0, #0]
 800a4be:	f380 8808 	msr	MSP, r0
 800a4c2:	f04f 0000 	mov.w	r0, #0
 800a4c6:	f380 8814 	msr	CONTROL, r0
 800a4ca:	b662      	cpsie	i
 800a4cc:	b661      	cpsie	f
 800a4ce:	f3bf 8f4f 	dsb	sy
 800a4d2:	f3bf 8f6f 	isb	sy
 800a4d6:	df00      	svc	0
 800a4d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a4da:	bf00      	nop
 800a4dc:	e000ed08 	.word	0xe000ed08

0800a4e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b086      	sub	sp, #24
 800a4e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a4e6:	4b46      	ldr	r3, [pc, #280]	; (800a600 <xPortStartScheduler+0x120>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4a46      	ldr	r2, [pc, #280]	; (800a604 <xPortStartScheduler+0x124>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d10a      	bne.n	800a506 <xPortStartScheduler+0x26>
	__asm volatile
 800a4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f4:	f383 8811 	msr	BASEPRI, r3
 800a4f8:	f3bf 8f6f 	isb	sy
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	613b      	str	r3, [r7, #16]
}
 800a502:	bf00      	nop
 800a504:	e7fe      	b.n	800a504 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a506:	4b3e      	ldr	r3, [pc, #248]	; (800a600 <xPortStartScheduler+0x120>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4a3f      	ldr	r2, [pc, #252]	; (800a608 <xPortStartScheduler+0x128>)
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d10a      	bne.n	800a526 <xPortStartScheduler+0x46>
	__asm volatile
 800a510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a514:	f383 8811 	msr	BASEPRI, r3
 800a518:	f3bf 8f6f 	isb	sy
 800a51c:	f3bf 8f4f 	dsb	sy
 800a520:	60fb      	str	r3, [r7, #12]
}
 800a522:	bf00      	nop
 800a524:	e7fe      	b.n	800a524 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a526:	4b39      	ldr	r3, [pc, #228]	; (800a60c <xPortStartScheduler+0x12c>)
 800a528:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	b2db      	uxtb	r3, r3
 800a530:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	22ff      	movs	r2, #255	; 0xff
 800a536:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	b2db      	uxtb	r3, r3
 800a53e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a540:	78fb      	ldrb	r3, [r7, #3]
 800a542:	b2db      	uxtb	r3, r3
 800a544:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a548:	b2da      	uxtb	r2, r3
 800a54a:	4b31      	ldr	r3, [pc, #196]	; (800a610 <xPortStartScheduler+0x130>)
 800a54c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a54e:	4b31      	ldr	r3, [pc, #196]	; (800a614 <xPortStartScheduler+0x134>)
 800a550:	2207      	movs	r2, #7
 800a552:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a554:	e009      	b.n	800a56a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a556:	4b2f      	ldr	r3, [pc, #188]	; (800a614 <xPortStartScheduler+0x134>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	3b01      	subs	r3, #1
 800a55c:	4a2d      	ldr	r2, [pc, #180]	; (800a614 <xPortStartScheduler+0x134>)
 800a55e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a560:	78fb      	ldrb	r3, [r7, #3]
 800a562:	b2db      	uxtb	r3, r3
 800a564:	005b      	lsls	r3, r3, #1
 800a566:	b2db      	uxtb	r3, r3
 800a568:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a56a:	78fb      	ldrb	r3, [r7, #3]
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a572:	2b80      	cmp	r3, #128	; 0x80
 800a574:	d0ef      	beq.n	800a556 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a576:	4b27      	ldr	r3, [pc, #156]	; (800a614 <xPortStartScheduler+0x134>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f1c3 0307 	rsb	r3, r3, #7
 800a57e:	2b04      	cmp	r3, #4
 800a580:	d00a      	beq.n	800a598 <xPortStartScheduler+0xb8>
	__asm volatile
 800a582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a586:	f383 8811 	msr	BASEPRI, r3
 800a58a:	f3bf 8f6f 	isb	sy
 800a58e:	f3bf 8f4f 	dsb	sy
 800a592:	60bb      	str	r3, [r7, #8]
}
 800a594:	bf00      	nop
 800a596:	e7fe      	b.n	800a596 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a598:	4b1e      	ldr	r3, [pc, #120]	; (800a614 <xPortStartScheduler+0x134>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	021b      	lsls	r3, r3, #8
 800a59e:	4a1d      	ldr	r2, [pc, #116]	; (800a614 <xPortStartScheduler+0x134>)
 800a5a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a5a2:	4b1c      	ldr	r3, [pc, #112]	; (800a614 <xPortStartScheduler+0x134>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a5aa:	4a1a      	ldr	r2, [pc, #104]	; (800a614 <xPortStartScheduler+0x134>)
 800a5ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	b2da      	uxtb	r2, r3
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a5b6:	4b18      	ldr	r3, [pc, #96]	; (800a618 <xPortStartScheduler+0x138>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a17      	ldr	r2, [pc, #92]	; (800a618 <xPortStartScheduler+0x138>)
 800a5bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a5c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a5c2:	4b15      	ldr	r3, [pc, #84]	; (800a618 <xPortStartScheduler+0x138>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4a14      	ldr	r2, [pc, #80]	; (800a618 <xPortStartScheduler+0x138>)
 800a5c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a5cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a5ce:	f000 f8dd 	bl	800a78c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a5d2:	4b12      	ldr	r3, [pc, #72]	; (800a61c <xPortStartScheduler+0x13c>)
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a5d8:	f000 f8fc 	bl	800a7d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a5dc:	4b10      	ldr	r3, [pc, #64]	; (800a620 <xPortStartScheduler+0x140>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a0f      	ldr	r2, [pc, #60]	; (800a620 <xPortStartScheduler+0x140>)
 800a5e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a5e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a5e8:	f7ff ff66 	bl	800a4b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a5ec:	f7ff f850 	bl	8009690 <vTaskSwitchContext>
	prvTaskExitError();
 800a5f0:	f7ff ff1c 	bl	800a42c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a5f4:	2300      	movs	r3, #0
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3718      	adds	r7, #24
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
 800a5fe:	bf00      	nop
 800a600:	e000ed00 	.word	0xe000ed00
 800a604:	410fc271 	.word	0x410fc271
 800a608:	410fc270 	.word	0x410fc270
 800a60c:	e000e400 	.word	0xe000e400
 800a610:	20001024 	.word	0x20001024
 800a614:	20001028 	.word	0x20001028
 800a618:	e000ed20 	.word	0xe000ed20
 800a61c:	20000020 	.word	0x20000020
 800a620:	e000ef34 	.word	0xe000ef34

0800a624 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a624:	b480      	push	{r7}
 800a626:	b083      	sub	sp, #12
 800a628:	af00      	add	r7, sp, #0
	__asm volatile
 800a62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62e:	f383 8811 	msr	BASEPRI, r3
 800a632:	f3bf 8f6f 	isb	sy
 800a636:	f3bf 8f4f 	dsb	sy
 800a63a:	607b      	str	r3, [r7, #4]
}
 800a63c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a63e:	4b0f      	ldr	r3, [pc, #60]	; (800a67c <vPortEnterCritical+0x58>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	3301      	adds	r3, #1
 800a644:	4a0d      	ldr	r2, [pc, #52]	; (800a67c <vPortEnterCritical+0x58>)
 800a646:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a648:	4b0c      	ldr	r3, [pc, #48]	; (800a67c <vPortEnterCritical+0x58>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d10f      	bne.n	800a670 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a650:	4b0b      	ldr	r3, [pc, #44]	; (800a680 <vPortEnterCritical+0x5c>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	b2db      	uxtb	r3, r3
 800a656:	2b00      	cmp	r3, #0
 800a658:	d00a      	beq.n	800a670 <vPortEnterCritical+0x4c>
	__asm volatile
 800a65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65e:	f383 8811 	msr	BASEPRI, r3
 800a662:	f3bf 8f6f 	isb	sy
 800a666:	f3bf 8f4f 	dsb	sy
 800a66a:	603b      	str	r3, [r7, #0]
}
 800a66c:	bf00      	nop
 800a66e:	e7fe      	b.n	800a66e <vPortEnterCritical+0x4a>
	}
}
 800a670:	bf00      	nop
 800a672:	370c      	adds	r7, #12
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr
 800a67c:	20000020 	.word	0x20000020
 800a680:	e000ed04 	.word	0xe000ed04

0800a684 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a684:	b480      	push	{r7}
 800a686:	b083      	sub	sp, #12
 800a688:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a68a:	4b12      	ldr	r3, [pc, #72]	; (800a6d4 <vPortExitCritical+0x50>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d10a      	bne.n	800a6a8 <vPortExitCritical+0x24>
	__asm volatile
 800a692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a696:	f383 8811 	msr	BASEPRI, r3
 800a69a:	f3bf 8f6f 	isb	sy
 800a69e:	f3bf 8f4f 	dsb	sy
 800a6a2:	607b      	str	r3, [r7, #4]
}
 800a6a4:	bf00      	nop
 800a6a6:	e7fe      	b.n	800a6a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a6a8:	4b0a      	ldr	r3, [pc, #40]	; (800a6d4 <vPortExitCritical+0x50>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	3b01      	subs	r3, #1
 800a6ae:	4a09      	ldr	r2, [pc, #36]	; (800a6d4 <vPortExitCritical+0x50>)
 800a6b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a6b2:	4b08      	ldr	r3, [pc, #32]	; (800a6d4 <vPortExitCritical+0x50>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d105      	bne.n	800a6c6 <vPortExitCritical+0x42>
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	f383 8811 	msr	BASEPRI, r3
}
 800a6c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a6c6:	bf00      	nop
 800a6c8:	370c      	adds	r7, #12
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr
 800a6d2:	bf00      	nop
 800a6d4:	20000020 	.word	0x20000020
	...

0800a6e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a6e0:	f3ef 8009 	mrs	r0, PSP
 800a6e4:	f3bf 8f6f 	isb	sy
 800a6e8:	4b15      	ldr	r3, [pc, #84]	; (800a740 <pxCurrentTCBConst>)
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	f01e 0f10 	tst.w	lr, #16
 800a6f0:	bf08      	it	eq
 800a6f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a6f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6fa:	6010      	str	r0, [r2, #0]
 800a6fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a700:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a704:	f380 8811 	msr	BASEPRI, r0
 800a708:	f3bf 8f4f 	dsb	sy
 800a70c:	f3bf 8f6f 	isb	sy
 800a710:	f7fe ffbe 	bl	8009690 <vTaskSwitchContext>
 800a714:	f04f 0000 	mov.w	r0, #0
 800a718:	f380 8811 	msr	BASEPRI, r0
 800a71c:	bc09      	pop	{r0, r3}
 800a71e:	6819      	ldr	r1, [r3, #0]
 800a720:	6808      	ldr	r0, [r1, #0]
 800a722:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a726:	f01e 0f10 	tst.w	lr, #16
 800a72a:	bf08      	it	eq
 800a72c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a730:	f380 8809 	msr	PSP, r0
 800a734:	f3bf 8f6f 	isb	sy
 800a738:	4770      	bx	lr
 800a73a:	bf00      	nop
 800a73c:	f3af 8000 	nop.w

0800a740 <pxCurrentTCBConst>:
 800a740:	200009f8 	.word	0x200009f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a744:	bf00      	nop
 800a746:	bf00      	nop

0800a748 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
	__asm volatile
 800a74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a752:	f383 8811 	msr	BASEPRI, r3
 800a756:	f3bf 8f6f 	isb	sy
 800a75a:	f3bf 8f4f 	dsb	sy
 800a75e:	607b      	str	r3, [r7, #4]
}
 800a760:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a762:	f7fe fedb 	bl	800951c <xTaskIncrementTick>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d003      	beq.n	800a774 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a76c:	4b06      	ldr	r3, [pc, #24]	; (800a788 <xPortSysTickHandler+0x40>)
 800a76e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a772:	601a      	str	r2, [r3, #0]
 800a774:	2300      	movs	r3, #0
 800a776:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	f383 8811 	msr	BASEPRI, r3
}
 800a77e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a780:	bf00      	nop
 800a782:	3708      	adds	r7, #8
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}
 800a788:	e000ed04 	.word	0xe000ed04

0800a78c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a78c:	b480      	push	{r7}
 800a78e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a790:	4b0b      	ldr	r3, [pc, #44]	; (800a7c0 <vPortSetupTimerInterrupt+0x34>)
 800a792:	2200      	movs	r2, #0
 800a794:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a796:	4b0b      	ldr	r3, [pc, #44]	; (800a7c4 <vPortSetupTimerInterrupt+0x38>)
 800a798:	2200      	movs	r2, #0
 800a79a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a79c:	4b0a      	ldr	r3, [pc, #40]	; (800a7c8 <vPortSetupTimerInterrupt+0x3c>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a0a      	ldr	r2, [pc, #40]	; (800a7cc <vPortSetupTimerInterrupt+0x40>)
 800a7a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a7a6:	099b      	lsrs	r3, r3, #6
 800a7a8:	4a09      	ldr	r2, [pc, #36]	; (800a7d0 <vPortSetupTimerInterrupt+0x44>)
 800a7aa:	3b01      	subs	r3, #1
 800a7ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a7ae:	4b04      	ldr	r3, [pc, #16]	; (800a7c0 <vPortSetupTimerInterrupt+0x34>)
 800a7b0:	2207      	movs	r2, #7
 800a7b2:	601a      	str	r2, [r3, #0]
}
 800a7b4:	bf00      	nop
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr
 800a7be:	bf00      	nop
 800a7c0:	e000e010 	.word	0xe000e010
 800a7c4:	e000e018 	.word	0xe000e018
 800a7c8:	20000014 	.word	0x20000014
 800a7cc:	10624dd3 	.word	0x10624dd3
 800a7d0:	e000e014 	.word	0xe000e014

0800a7d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a7d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a7e4 <vPortEnableVFP+0x10>
 800a7d8:	6801      	ldr	r1, [r0, #0]
 800a7da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a7de:	6001      	str	r1, [r0, #0]
 800a7e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a7e2:	bf00      	nop
 800a7e4:	e000ed88 	.word	0xe000ed88

0800a7e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b085      	sub	sp, #20
 800a7ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a7ee:	f3ef 8305 	mrs	r3, IPSR
 800a7f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2b0f      	cmp	r3, #15
 800a7f8:	d914      	bls.n	800a824 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a7fa:	4a17      	ldr	r2, [pc, #92]	; (800a858 <vPortValidateInterruptPriority+0x70>)
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	4413      	add	r3, r2
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a804:	4b15      	ldr	r3, [pc, #84]	; (800a85c <vPortValidateInterruptPriority+0x74>)
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	7afa      	ldrb	r2, [r7, #11]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d20a      	bcs.n	800a824 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a812:	f383 8811 	msr	BASEPRI, r3
 800a816:	f3bf 8f6f 	isb	sy
 800a81a:	f3bf 8f4f 	dsb	sy
 800a81e:	607b      	str	r3, [r7, #4]
}
 800a820:	bf00      	nop
 800a822:	e7fe      	b.n	800a822 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a824:	4b0e      	ldr	r3, [pc, #56]	; (800a860 <vPortValidateInterruptPriority+0x78>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a82c:	4b0d      	ldr	r3, [pc, #52]	; (800a864 <vPortValidateInterruptPriority+0x7c>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	429a      	cmp	r2, r3
 800a832:	d90a      	bls.n	800a84a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a838:	f383 8811 	msr	BASEPRI, r3
 800a83c:	f3bf 8f6f 	isb	sy
 800a840:	f3bf 8f4f 	dsb	sy
 800a844:	603b      	str	r3, [r7, #0]
}
 800a846:	bf00      	nop
 800a848:	e7fe      	b.n	800a848 <vPortValidateInterruptPriority+0x60>
	}
 800a84a:	bf00      	nop
 800a84c:	3714      	adds	r7, #20
 800a84e:	46bd      	mov	sp, r7
 800a850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a854:	4770      	bx	lr
 800a856:	bf00      	nop
 800a858:	e000e3f0 	.word	0xe000e3f0
 800a85c:	20001024 	.word	0x20001024
 800a860:	e000ed0c 	.word	0xe000ed0c
 800a864:	20001028 	.word	0x20001028

0800a868 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b08a      	sub	sp, #40	; 0x28
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a870:	2300      	movs	r3, #0
 800a872:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a874:	f7fe fd96 	bl	80093a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a878:	4b5b      	ldr	r3, [pc, #364]	; (800a9e8 <pvPortMalloc+0x180>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d101      	bne.n	800a884 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a880:	f000 f920 	bl	800aac4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a884:	4b59      	ldr	r3, [pc, #356]	; (800a9ec <pvPortMalloc+0x184>)
 800a886:	681a      	ldr	r2, [r3, #0]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	4013      	ands	r3, r2
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	f040 8093 	bne.w	800a9b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d01d      	beq.n	800a8d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a898:	2208      	movs	r2, #8
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	4413      	add	r3, r2
 800a89e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f003 0307 	and.w	r3, r3, #7
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d014      	beq.n	800a8d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f023 0307 	bic.w	r3, r3, #7
 800a8b0:	3308      	adds	r3, #8
 800a8b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f003 0307 	and.w	r3, r3, #7
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d00a      	beq.n	800a8d4 <pvPortMalloc+0x6c>
	__asm volatile
 800a8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c2:	f383 8811 	msr	BASEPRI, r3
 800a8c6:	f3bf 8f6f 	isb	sy
 800a8ca:	f3bf 8f4f 	dsb	sy
 800a8ce:	617b      	str	r3, [r7, #20]
}
 800a8d0:	bf00      	nop
 800a8d2:	e7fe      	b.n	800a8d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d06e      	beq.n	800a9b8 <pvPortMalloc+0x150>
 800a8da:	4b45      	ldr	r3, [pc, #276]	; (800a9f0 <pvPortMalloc+0x188>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d869      	bhi.n	800a9b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a8e4:	4b43      	ldr	r3, [pc, #268]	; (800a9f4 <pvPortMalloc+0x18c>)
 800a8e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a8e8:	4b42      	ldr	r3, [pc, #264]	; (800a9f4 <pvPortMalloc+0x18c>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a8ee:	e004      	b.n	800a8fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	429a      	cmp	r2, r3
 800a902:	d903      	bls.n	800a90c <pvPortMalloc+0xa4>
 800a904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d1f1      	bne.n	800a8f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a90c:	4b36      	ldr	r3, [pc, #216]	; (800a9e8 <pvPortMalloc+0x180>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a912:	429a      	cmp	r2, r3
 800a914:	d050      	beq.n	800a9b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a916:	6a3b      	ldr	r3, [r7, #32]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	2208      	movs	r2, #8
 800a91c:	4413      	add	r3, r2
 800a91e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	6a3b      	ldr	r3, [r7, #32]
 800a926:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92a:	685a      	ldr	r2, [r3, #4]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	1ad2      	subs	r2, r2, r3
 800a930:	2308      	movs	r3, #8
 800a932:	005b      	lsls	r3, r3, #1
 800a934:	429a      	cmp	r2, r3
 800a936:	d91f      	bls.n	800a978 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	4413      	add	r3, r2
 800a93e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a940:	69bb      	ldr	r3, [r7, #24]
 800a942:	f003 0307 	and.w	r3, r3, #7
 800a946:	2b00      	cmp	r3, #0
 800a948:	d00a      	beq.n	800a960 <pvPortMalloc+0xf8>
	__asm volatile
 800a94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a94e:	f383 8811 	msr	BASEPRI, r3
 800a952:	f3bf 8f6f 	isb	sy
 800a956:	f3bf 8f4f 	dsb	sy
 800a95a:	613b      	str	r3, [r7, #16]
}
 800a95c:	bf00      	nop
 800a95e:	e7fe      	b.n	800a95e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a962:	685a      	ldr	r2, [r3, #4]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	1ad2      	subs	r2, r2, r3
 800a968:	69bb      	ldr	r3, [r7, #24]
 800a96a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96e:	687a      	ldr	r2, [r7, #4]
 800a970:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a972:	69b8      	ldr	r0, [r7, #24]
 800a974:	f000 f908 	bl	800ab88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a978:	4b1d      	ldr	r3, [pc, #116]	; (800a9f0 <pvPortMalloc+0x188>)
 800a97a:	681a      	ldr	r2, [r3, #0]
 800a97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	1ad3      	subs	r3, r2, r3
 800a982:	4a1b      	ldr	r2, [pc, #108]	; (800a9f0 <pvPortMalloc+0x188>)
 800a984:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a986:	4b1a      	ldr	r3, [pc, #104]	; (800a9f0 <pvPortMalloc+0x188>)
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	4b1b      	ldr	r3, [pc, #108]	; (800a9f8 <pvPortMalloc+0x190>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	429a      	cmp	r2, r3
 800a990:	d203      	bcs.n	800a99a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a992:	4b17      	ldr	r3, [pc, #92]	; (800a9f0 <pvPortMalloc+0x188>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	4a18      	ldr	r2, [pc, #96]	; (800a9f8 <pvPortMalloc+0x190>)
 800a998:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a99c:	685a      	ldr	r2, [r3, #4]
 800a99e:	4b13      	ldr	r3, [pc, #76]	; (800a9ec <pvPortMalloc+0x184>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	431a      	orrs	r2, r3
 800a9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a9ae:	4b13      	ldr	r3, [pc, #76]	; (800a9fc <pvPortMalloc+0x194>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	4a11      	ldr	r2, [pc, #68]	; (800a9fc <pvPortMalloc+0x194>)
 800a9b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a9b8:	f7fe fd02 	bl	80093c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9bc:	69fb      	ldr	r3, [r7, #28]
 800a9be:	f003 0307 	and.w	r3, r3, #7
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d00a      	beq.n	800a9dc <pvPortMalloc+0x174>
	__asm volatile
 800a9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ca:	f383 8811 	msr	BASEPRI, r3
 800a9ce:	f3bf 8f6f 	isb	sy
 800a9d2:	f3bf 8f4f 	dsb	sy
 800a9d6:	60fb      	str	r3, [r7, #12]
}
 800a9d8:	bf00      	nop
 800a9da:	e7fe      	b.n	800a9da <pvPortMalloc+0x172>
	return pvReturn;
 800a9dc:	69fb      	ldr	r3, [r7, #28]
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3728      	adds	r7, #40	; 0x28
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	20004c34 	.word	0x20004c34
 800a9ec:	20004c48 	.word	0x20004c48
 800a9f0:	20004c38 	.word	0x20004c38
 800a9f4:	20004c2c 	.word	0x20004c2c
 800a9f8:	20004c3c 	.word	0x20004c3c
 800a9fc:	20004c40 	.word	0x20004c40

0800aa00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b086      	sub	sp, #24
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d04d      	beq.n	800aaae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aa12:	2308      	movs	r3, #8
 800aa14:	425b      	negs	r3, r3
 800aa16:	697a      	ldr	r2, [r7, #20]
 800aa18:	4413      	add	r3, r2
 800aa1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	685a      	ldr	r2, [r3, #4]
 800aa24:	4b24      	ldr	r3, [pc, #144]	; (800aab8 <vPortFree+0xb8>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4013      	ands	r3, r2
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d10a      	bne.n	800aa44 <vPortFree+0x44>
	__asm volatile
 800aa2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa32:	f383 8811 	msr	BASEPRI, r3
 800aa36:	f3bf 8f6f 	isb	sy
 800aa3a:	f3bf 8f4f 	dsb	sy
 800aa3e:	60fb      	str	r3, [r7, #12]
}
 800aa40:	bf00      	nop
 800aa42:	e7fe      	b.n	800aa42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d00a      	beq.n	800aa62 <vPortFree+0x62>
	__asm volatile
 800aa4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa50:	f383 8811 	msr	BASEPRI, r3
 800aa54:	f3bf 8f6f 	isb	sy
 800aa58:	f3bf 8f4f 	dsb	sy
 800aa5c:	60bb      	str	r3, [r7, #8]
}
 800aa5e:	bf00      	nop
 800aa60:	e7fe      	b.n	800aa60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	685a      	ldr	r2, [r3, #4]
 800aa66:	4b14      	ldr	r3, [pc, #80]	; (800aab8 <vPortFree+0xb8>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4013      	ands	r3, r2
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d01e      	beq.n	800aaae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d11a      	bne.n	800aaae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	685a      	ldr	r2, [r3, #4]
 800aa7c:	4b0e      	ldr	r3, [pc, #56]	; (800aab8 <vPortFree+0xb8>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	43db      	mvns	r3, r3
 800aa82:	401a      	ands	r2, r3
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aa88:	f7fe fc8c 	bl	80093a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	685a      	ldr	r2, [r3, #4]
 800aa90:	4b0a      	ldr	r3, [pc, #40]	; (800aabc <vPortFree+0xbc>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4413      	add	r3, r2
 800aa96:	4a09      	ldr	r2, [pc, #36]	; (800aabc <vPortFree+0xbc>)
 800aa98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aa9a:	6938      	ldr	r0, [r7, #16]
 800aa9c:	f000 f874 	bl	800ab88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800aaa0:	4b07      	ldr	r3, [pc, #28]	; (800aac0 <vPortFree+0xc0>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	4a06      	ldr	r2, [pc, #24]	; (800aac0 <vPortFree+0xc0>)
 800aaa8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800aaaa:	f7fe fc89 	bl	80093c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aaae:	bf00      	nop
 800aab0:	3718      	adds	r7, #24
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
 800aab6:	bf00      	nop
 800aab8:	20004c48 	.word	0x20004c48
 800aabc:	20004c38 	.word	0x20004c38
 800aac0:	20004c44 	.word	0x20004c44

0800aac4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aac4:	b480      	push	{r7}
 800aac6:	b085      	sub	sp, #20
 800aac8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aaca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800aace:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aad0:	4b27      	ldr	r3, [pc, #156]	; (800ab70 <prvHeapInit+0xac>)
 800aad2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f003 0307 	and.w	r3, r3, #7
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d00c      	beq.n	800aaf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	3307      	adds	r3, #7
 800aae2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f023 0307 	bic.w	r3, r3, #7
 800aaea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aaec:	68ba      	ldr	r2, [r7, #8]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	1ad3      	subs	r3, r2, r3
 800aaf2:	4a1f      	ldr	r2, [pc, #124]	; (800ab70 <prvHeapInit+0xac>)
 800aaf4:	4413      	add	r3, r2
 800aaf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aafc:	4a1d      	ldr	r2, [pc, #116]	; (800ab74 <prvHeapInit+0xb0>)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ab02:	4b1c      	ldr	r3, [pc, #112]	; (800ab74 <prvHeapInit+0xb0>)
 800ab04:	2200      	movs	r2, #0
 800ab06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	68ba      	ldr	r2, [r7, #8]
 800ab0c:	4413      	add	r3, r2
 800ab0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ab10:	2208      	movs	r2, #8
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	1a9b      	subs	r3, r3, r2
 800ab16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f023 0307 	bic.w	r3, r3, #7
 800ab1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	4a15      	ldr	r2, [pc, #84]	; (800ab78 <prvHeapInit+0xb4>)
 800ab24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ab26:	4b14      	ldr	r3, [pc, #80]	; (800ab78 <prvHeapInit+0xb4>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ab2e:	4b12      	ldr	r3, [pc, #72]	; (800ab78 <prvHeapInit+0xb4>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	2200      	movs	r2, #0
 800ab34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	68fa      	ldr	r2, [r7, #12]
 800ab3e:	1ad2      	subs	r2, r2, r3
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ab44:	4b0c      	ldr	r3, [pc, #48]	; (800ab78 <prvHeapInit+0xb4>)
 800ab46:	681a      	ldr	r2, [r3, #0]
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	4a0a      	ldr	r2, [pc, #40]	; (800ab7c <prvHeapInit+0xb8>)
 800ab52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	4a09      	ldr	r2, [pc, #36]	; (800ab80 <prvHeapInit+0xbc>)
 800ab5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ab5c:	4b09      	ldr	r3, [pc, #36]	; (800ab84 <prvHeapInit+0xc0>)
 800ab5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ab62:	601a      	str	r2, [r3, #0]
}
 800ab64:	bf00      	nop
 800ab66:	3714      	adds	r7, #20
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr
 800ab70:	2000102c 	.word	0x2000102c
 800ab74:	20004c2c 	.word	0x20004c2c
 800ab78:	20004c34 	.word	0x20004c34
 800ab7c:	20004c3c 	.word	0x20004c3c
 800ab80:	20004c38 	.word	0x20004c38
 800ab84:	20004c48 	.word	0x20004c48

0800ab88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b085      	sub	sp, #20
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ab90:	4b28      	ldr	r3, [pc, #160]	; (800ac34 <prvInsertBlockIntoFreeList+0xac>)
 800ab92:	60fb      	str	r3, [r7, #12]
 800ab94:	e002      	b.n	800ab9c <prvInsertBlockIntoFreeList+0x14>
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	60fb      	str	r3, [r7, #12]
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d8f7      	bhi.n	800ab96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	68ba      	ldr	r2, [r7, #8]
 800abb0:	4413      	add	r3, r2
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d108      	bne.n	800abca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	685a      	ldr	r2, [r3, #4]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	441a      	add	r2, r3
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	68ba      	ldr	r2, [r7, #8]
 800abd4:	441a      	add	r2, r3
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d118      	bne.n	800ac10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	4b15      	ldr	r3, [pc, #84]	; (800ac38 <prvInsertBlockIntoFreeList+0xb0>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d00d      	beq.n	800ac06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	685a      	ldr	r2, [r3, #4]
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	441a      	add	r2, r3
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	681a      	ldr	r2, [r3, #0]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	601a      	str	r2, [r3, #0]
 800ac04:	e008      	b.n	800ac18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ac06:	4b0c      	ldr	r3, [pc, #48]	; (800ac38 <prvInsertBlockIntoFreeList+0xb0>)
 800ac08:	681a      	ldr	r2, [r3, #0]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	601a      	str	r2, [r3, #0]
 800ac0e:	e003      	b.n	800ac18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681a      	ldr	r2, [r3, #0]
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ac18:	68fa      	ldr	r2, [r7, #12]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	d002      	beq.n	800ac26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac26:	bf00      	nop
 800ac28:	3714      	adds	r7, #20
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr
 800ac32:	bf00      	nop
 800ac34:	20004c2c 	.word	0x20004c2c
 800ac38:	20004c34 	.word	0x20004c34

0800ac3c <gyroStart>:
#include "i2c.h"


// Enable and configure ICM-20948 gyroscope
// -------------------------------------------------------------------
void gyroStart() {
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	af00      	add	r7, sp, #0
	writeByte(0x07, 0x07); // Write 8'b00000111 to ICM register 7 (PWR_MGMT_2), disable Gyroscope (all axes)
 800ac40:	2107      	movs	r1, #7
 800ac42:	2007      	movs	r0, #7
 800ac44:	f000 f87c 	bl	800ad40 <writeByte>
	osDelayUntil(10);
 800ac48:	200a      	movs	r0, #10
 800ac4a:	f7fd faf0 	bl	800822e <osDelayUntil>
	writeByte(0x07, 0x00); // Enable Accelerometer and Gyroscope (all axes)
 800ac4e:	2100      	movs	r1, #0
 800ac50:	2007      	movs	r0, #7
 800ac52:	f000 f875 	bl	800ad40 <writeByte>
	osDelayUntil(10);
 800ac56:	200a      	movs	r0, #10
 800ac58:	f7fd fae9 	bl	800822e <osDelayUntil>
}
 800ac5c:	bf00      	nop
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <gyroInit>:

void gyroInit() {
 800ac60:	b580      	push	{r7, lr}
 800ac62:	af00      	add	r7, sp, #0
	writeByte(0x06, 0x00);	// Write 0x00 to ICM register 6 (PWR_MGMT_1), wakes chip from sleep mode,
 800ac64:	2100      	movs	r1, #0
 800ac66:	2006      	movs	r0, #6
 800ac68:	f000 f86a 	bl	800ad40 <writeByte>
							//turn off low power, Internal 20MHz oscillator
	osDelayUntil(10);
 800ac6c:	200a      	movs	r0, #10
 800ac6e:	f7fd fade 	bl	800822e <osDelayUntil>
	writeByte(0x03, 0x80);	// Enables DMP (Digital Motion Processor) features
 800ac72:	2180      	movs	r1, #128	; 0x80
 800ac74:	2003      	movs	r0, #3
 800ac76:	f000 f863 	bl	800ad40 <writeByte>
	osDelayUntil(10);
 800ac7a:	200a      	movs	r0, #10
 800ac7c:	f7fd fad7 	bl	800822e <osDelayUntil>
	writeByte(0x07, 0x07);	// Disable Gyroscope (all axes)
 800ac80:	2107      	movs	r1, #7
 800ac82:	2007      	movs	r0, #7
 800ac84:	f000 f85c 	bl	800ad40 <writeByte>
	osDelayUntil(10);
 800ac88:	200a      	movs	r0, #10
 800ac8a:	f7fd fad0 	bl	800822e <osDelayUntil>
	writeByte(0x06, 0x01);	// Auto select best available clock source
 800ac8e:	2101      	movs	r1, #1
 800ac90:	2006      	movs	r0, #6
 800ac92:	f000 f855 	bl	800ad40 <writeByte>
	osDelayUntil(10);
 800ac96:	200a      	movs	r0, #10
 800ac98:	f7fd fac9 	bl	800822e <osDelayUntil>
	writeByte(0x7F, 0x20);	// Switch to USER BANK 2
 800ac9c:	2120      	movs	r1, #32
 800ac9e:	207f      	movs	r0, #127	; 0x7f
 800aca0:	f000 f84e 	bl	800ad40 <writeByte>
	osDelayUntil(10);
 800aca4:	200a      	movs	r0, #10
 800aca6:	f7fd fac2 	bl	800822e <osDelayUntil>
	writeByte(0x01, 0x2F);	// Config gyro, enable gyro DLPF, set gyro Full Scale to +-2000dps,
 800acaa:	212f      	movs	r1, #47	; 0x2f
 800acac:	2001      	movs	r0, #1
 800acae:	f000 f847 	bl	800ad40 <writeByte>
							// gyro low pass filter = 3'b101
	osDelayUntil(10);
 800acb2:	200a      	movs	r0, #10
 800acb4:	f7fd fabb 	bl	800822e <osDelayUntil>
	writeByte(0x0, 0x00);	// Set gyro sample rate divider = 1 + 0(GYRO_SMPLRT_DIV[7:0])
 800acb8:	2100      	movs	r1, #0
 800acba:	2000      	movs	r0, #0
 800acbc:	f000 f840 	bl	800ad40 <writeByte>
	osDelayUntil(10);
 800acc0:	200a      	movs	r0, #10
 800acc2:	f7fd fab4 	bl	800822e <osDelayUntil>
	writeByte(0x7F, 0x00);	// Switch to USER BANK 0
 800acc6:	2100      	movs	r1, #0
 800acc8:	207f      	movs	r0, #127	; 0x7f
 800acca:	f000 f839 	bl	800ad40 <writeByte>
	osDelayUntil(10);
 800acce:	200a      	movs	r0, #10
 800acd0:	f7fd faad 	bl	800822e <osDelayUntil>
	writeByte(0x07, 0x00);	// Enable Gyroscope and Accelerometer
 800acd4:	2100      	movs	r1, #0
 800acd6:	2007      	movs	r0, #7
 800acd8:	f000 f832 	bl	800ad40 <writeByte>
	osDelayUntil(10);
 800acdc:	200a      	movs	r0, #10
 800acde:	f7fd faa6 	bl	800822e <osDelayUntil>
}
 800ace2:	bf00      	nop
 800ace4:	bd80      	pop	{r7, pc}
	...

0800ace8 <readByte>:
uint8_t i2cBuffer[20];
uint8_t ICMAddr = 0x68;

// Helper functions to transmit and receive data from ICM using I2C
// -------------------------------------------------------------------
void readByte(uint8_t addr, uint8_t *data) {
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af02      	add	r7, sp, #8
 800acee:	4603      	mov	r3, r0
 800acf0:	6039      	str	r1, [r7, #0]
 800acf2:	71fb      	strb	r3, [r7, #7]
	i2cBuffer[0] = addr;
 800acf4:	4a0f      	ldr	r2, [pc, #60]	; (800ad34 <readByte+0x4c>)
 800acf6:	79fb      	ldrb	r3, [r7, #7]
 800acf8:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddr << 1, i2cBuffer, 1, 10);
 800acfa:	4b0f      	ldr	r3, [pc, #60]	; (800ad38 <readByte+0x50>)
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	005b      	lsls	r3, r3, #1
 800ad02:	b299      	uxth	r1, r3
 800ad04:	230a      	movs	r3, #10
 800ad06:	9300      	str	r3, [sp, #0]
 800ad08:	2301      	movs	r3, #1
 800ad0a:	4a0a      	ldr	r2, [pc, #40]	; (800ad34 <readByte+0x4c>)
 800ad0c:	480b      	ldr	r0, [pc, #44]	; (800ad3c <readByte+0x54>)
 800ad0e:	f7f9 f94b 	bl	8003fa8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ICMAddr << 1, data, 2, 20);
 800ad12:	4b09      	ldr	r3, [pc, #36]	; (800ad38 <readByte+0x50>)
 800ad14:	781b      	ldrb	r3, [r3, #0]
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	005b      	lsls	r3, r3, #1
 800ad1a:	b299      	uxth	r1, r3
 800ad1c:	2314      	movs	r3, #20
 800ad1e:	9300      	str	r3, [sp, #0]
 800ad20:	2302      	movs	r3, #2
 800ad22:	683a      	ldr	r2, [r7, #0]
 800ad24:	4805      	ldr	r0, [pc, #20]	; (800ad3c <readByte+0x54>)
 800ad26:	f7f9 fa3d 	bl	80041a4 <HAL_I2C_Master_Receive>
}
 800ad2a:	bf00      	nop
 800ad2c:	3708      	adds	r7, #8
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	20004c4c 	.word	0x20004c4c
 800ad38:	20000024 	.word	0x20000024
 800ad3c:	20000094 	.word	0x20000094

0800ad40 <writeByte>:

void writeByte(uint8_t addr, uint8_t data) {
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b084      	sub	sp, #16
 800ad44:	af02      	add	r7, sp, #8
 800ad46:	4603      	mov	r3, r0
 800ad48:	460a      	mov	r2, r1
 800ad4a:	71fb      	strb	r3, [r7, #7]
 800ad4c:	4613      	mov	r3, r2
 800ad4e:	71bb      	strb	r3, [r7, #6]
	i2cBuffer[0] = addr;
 800ad50:	4a0a      	ldr	r2, [pc, #40]	; (800ad7c <writeByte+0x3c>)
 800ad52:	79fb      	ldrb	r3, [r7, #7]
 800ad54:	7013      	strb	r3, [r2, #0]
	i2cBuffer[1] = data;
 800ad56:	4a09      	ldr	r2, [pc, #36]	; (800ad7c <writeByte+0x3c>)
 800ad58:	79bb      	ldrb	r3, [r7, #6]
 800ad5a:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddr << 1, i2cBuffer, 2, 20);
 800ad5c:	4b08      	ldr	r3, [pc, #32]	; (800ad80 <writeByte+0x40>)
 800ad5e:	781b      	ldrb	r3, [r3, #0]
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	005b      	lsls	r3, r3, #1
 800ad64:	b299      	uxth	r1, r3
 800ad66:	2314      	movs	r3, #20
 800ad68:	9300      	str	r3, [sp, #0]
 800ad6a:	2302      	movs	r3, #2
 800ad6c:	4a03      	ldr	r2, [pc, #12]	; (800ad7c <writeByte+0x3c>)
 800ad6e:	4805      	ldr	r0, [pc, #20]	; (800ad84 <writeByte+0x44>)
 800ad70:	f7f9 f91a 	bl	8003fa8 <HAL_I2C_Master_Transmit>
}
 800ad74:	bf00      	nop
 800ad76:	3708      	adds	r7, #8
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}
 800ad7c:	20004c4c 	.word	0x20004c4c
 800ad80:	20000024 	.word	0x20000024
 800ad84:	20000094 	.word	0x20000094

0800ad88 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b082      	sub	sp, #8
 800ad8c:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800ad8e:	2300      	movs	r3, #0
 800ad90:	71fb      	strb	r3, [r7, #7]
 800ad92:	e026      	b.n	800ade2 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 800ad94:	79fb      	ldrb	r3, [r7, #7]
 800ad96:	3b50      	subs	r3, #80	; 0x50
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	2100      	movs	r1, #0
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f000 f82b 	bl	800adf8 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800ada2:	2100      	movs	r1, #0
 800ada4:	2000      	movs	r0, #0
 800ada6:	f000 f827 	bl	800adf8 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800adaa:	2100      	movs	r1, #0
 800adac:	2010      	movs	r0, #16
 800adae:	f000 f823 	bl	800adf8 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800adb2:	2300      	movs	r3, #0
 800adb4:	71bb      	strb	r3, [r7, #6]
 800adb6:	e00d      	b.n	800add4 <OLED_Refresh_Gram+0x4c>
 800adb8:	79ba      	ldrb	r2, [r7, #6]
 800adba:	79fb      	ldrb	r3, [r7, #7]
 800adbc:	490d      	ldr	r1, [pc, #52]	; (800adf4 <OLED_Refresh_Gram+0x6c>)
 800adbe:	00d2      	lsls	r2, r2, #3
 800adc0:	440a      	add	r2, r1
 800adc2:	4413      	add	r3, r2
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	2101      	movs	r1, #1
 800adc8:	4618      	mov	r0, r3
 800adca:	f000 f815 	bl	800adf8 <OLED_WR_Byte>
 800adce:	79bb      	ldrb	r3, [r7, #6]
 800add0:	3301      	adds	r3, #1
 800add2:	71bb      	strb	r3, [r7, #6]
 800add4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800add8:	2b00      	cmp	r3, #0
 800adda:	daed      	bge.n	800adb8 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800addc:	79fb      	ldrb	r3, [r7, #7]
 800adde:	3301      	adds	r3, #1
 800ade0:	71fb      	strb	r3, [r7, #7]
 800ade2:	79fb      	ldrb	r3, [r7, #7]
 800ade4:	2b07      	cmp	r3, #7
 800ade6:	d9d5      	bls.n	800ad94 <OLED_Refresh_Gram+0xc>
	}   
}
 800ade8:	bf00      	nop
 800adea:	bf00      	nop
 800adec:	3708      	adds	r7, #8
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	20004c60 	.word	0x20004c60

0800adf8 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	4603      	mov	r3, r0
 800ae00:	460a      	mov	r2, r1
 800ae02:	71fb      	strb	r3, [r7, #7]
 800ae04:	4613      	mov	r3, r2
 800ae06:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800ae08:	79bb      	ldrb	r3, [r7, #6]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d006      	beq.n	800ae1c <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800ae0e:	2201      	movs	r2, #1
 800ae10:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ae14:	481c      	ldr	r0, [pc, #112]	; (800ae88 <OLED_WR_Byte+0x90>)
 800ae16:	f7f8 ff4f 	bl	8003cb8 <HAL_GPIO_WritePin>
 800ae1a:	e005      	b.n	800ae28 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ae22:	4819      	ldr	r0, [pc, #100]	; (800ae88 <OLED_WR_Byte+0x90>)
 800ae24:	f7f8 ff48 	bl	8003cb8 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800ae28:	2300      	movs	r3, #0
 800ae2a:	73fb      	strb	r3, [r7, #15]
 800ae2c:	e01e      	b.n	800ae6c <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800ae2e:	2200      	movs	r2, #0
 800ae30:	2120      	movs	r1, #32
 800ae32:	4815      	ldr	r0, [pc, #84]	; (800ae88 <OLED_WR_Byte+0x90>)
 800ae34:	f7f8 ff40 	bl	8003cb8 <HAL_GPIO_WritePin>
		if(dat&0x80)
 800ae38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	da05      	bge.n	800ae4c <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 800ae40:	2201      	movs	r2, #1
 800ae42:	2140      	movs	r1, #64	; 0x40
 800ae44:	4810      	ldr	r0, [pc, #64]	; (800ae88 <OLED_WR_Byte+0x90>)
 800ae46:	f7f8 ff37 	bl	8003cb8 <HAL_GPIO_WritePin>
 800ae4a:	e004      	b.n	800ae56 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	2140      	movs	r1, #64	; 0x40
 800ae50:	480d      	ldr	r0, [pc, #52]	; (800ae88 <OLED_WR_Byte+0x90>)
 800ae52:	f7f8 ff31 	bl	8003cb8 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800ae56:	2201      	movs	r2, #1
 800ae58:	2120      	movs	r1, #32
 800ae5a:	480b      	ldr	r0, [pc, #44]	; (800ae88 <OLED_WR_Byte+0x90>)
 800ae5c:	f7f8 ff2c 	bl	8003cb8 <HAL_GPIO_WritePin>
		dat<<=1;   
 800ae60:	79fb      	ldrb	r3, [r7, #7]
 800ae62:	005b      	lsls	r3, r3, #1
 800ae64:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800ae66:	7bfb      	ldrb	r3, [r7, #15]
 800ae68:	3301      	adds	r3, #1
 800ae6a:	73fb      	strb	r3, [r7, #15]
 800ae6c:	7bfb      	ldrb	r3, [r7, #15]
 800ae6e:	2b07      	cmp	r3, #7
 800ae70:	d9dd      	bls.n	800ae2e <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800ae72:	2201      	movs	r2, #1
 800ae74:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ae78:	4803      	ldr	r0, [pc, #12]	; (800ae88 <OLED_WR_Byte+0x90>)
 800ae7a:	f7f8 ff1d 	bl	8003cb8 <HAL_GPIO_WritePin>
} 
 800ae7e:	bf00      	nop
 800ae80:	3710      	adds	r7, #16
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	bf00      	nop
 800ae88:	40021000 	.word	0x40021000

0800ae8c <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b082      	sub	sp, #8
 800ae90:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800ae92:	2300      	movs	r3, #0
 800ae94:	71fb      	strb	r3, [r7, #7]
 800ae96:	e014      	b.n	800aec2 <OLED_Clear+0x36>
 800ae98:	2300      	movs	r3, #0
 800ae9a:	71bb      	strb	r3, [r7, #6]
 800ae9c:	e00a      	b.n	800aeb4 <OLED_Clear+0x28>
 800ae9e:	79ba      	ldrb	r2, [r7, #6]
 800aea0:	79fb      	ldrb	r3, [r7, #7]
 800aea2:	490c      	ldr	r1, [pc, #48]	; (800aed4 <OLED_Clear+0x48>)
 800aea4:	00d2      	lsls	r2, r2, #3
 800aea6:	440a      	add	r2, r1
 800aea8:	4413      	add	r3, r2
 800aeaa:	2200      	movs	r2, #0
 800aeac:	701a      	strb	r2, [r3, #0]
 800aeae:	79bb      	ldrb	r3, [r7, #6]
 800aeb0:	3301      	adds	r3, #1
 800aeb2:	71bb      	strb	r3, [r7, #6]
 800aeb4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	daf0      	bge.n	800ae9e <OLED_Clear+0x12>
 800aebc:	79fb      	ldrb	r3, [r7, #7]
 800aebe:	3301      	adds	r3, #1
 800aec0:	71fb      	strb	r3, [r7, #7]
 800aec2:	79fb      	ldrb	r3, [r7, #7]
 800aec4:	2b07      	cmp	r3, #7
 800aec6:	d9e7      	bls.n	800ae98 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800aec8:	f7ff ff5e 	bl	800ad88 <OLED_Refresh_Gram>
}
 800aecc:	bf00      	nop
 800aece:	3708      	adds	r7, #8
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	20004c60 	.word	0x20004c60

0800aed8 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b085      	sub	sp, #20
 800aedc:	af00      	add	r7, sp, #0
 800aede:	4603      	mov	r3, r0
 800aee0:	71fb      	strb	r3, [r7, #7]
 800aee2:	460b      	mov	r3, r1
 800aee4:	71bb      	strb	r3, [r7, #6]
 800aee6:	4613      	mov	r3, r2
 800aee8:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800aeea:	2300      	movs	r3, #0
 800aeec:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800aeee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	db41      	blt.n	800af7a <OLED_DrawPoint+0xa2>
 800aef6:	79bb      	ldrb	r3, [r7, #6]
 800aef8:	2b3f      	cmp	r3, #63	; 0x3f
 800aefa:	d83e      	bhi.n	800af7a <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800aefc:	79bb      	ldrb	r3, [r7, #6]
 800aefe:	08db      	lsrs	r3, r3, #3
 800af00:	b2db      	uxtb	r3, r3
 800af02:	f1c3 0307 	rsb	r3, r3, #7
 800af06:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800af08:	79bb      	ldrb	r3, [r7, #6]
 800af0a:	f003 0307 	and.w	r3, r3, #7
 800af0e:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800af10:	7b7b      	ldrb	r3, [r7, #13]
 800af12:	f1c3 0307 	rsb	r3, r3, #7
 800af16:	2201      	movs	r2, #1
 800af18:	fa02 f303 	lsl.w	r3, r2, r3
 800af1c:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800af1e:	797b      	ldrb	r3, [r7, #5]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d012      	beq.n	800af4a <OLED_DrawPoint+0x72>
 800af24:	79fa      	ldrb	r2, [r7, #7]
 800af26:	7bbb      	ldrb	r3, [r7, #14]
 800af28:	4917      	ldr	r1, [pc, #92]	; (800af88 <OLED_DrawPoint+0xb0>)
 800af2a:	00d2      	lsls	r2, r2, #3
 800af2c:	440a      	add	r2, r1
 800af2e:	4413      	add	r3, r2
 800af30:	7818      	ldrb	r0, [r3, #0]
 800af32:	79fa      	ldrb	r2, [r7, #7]
 800af34:	7bbb      	ldrb	r3, [r7, #14]
 800af36:	7bf9      	ldrb	r1, [r7, #15]
 800af38:	4301      	orrs	r1, r0
 800af3a:	b2c8      	uxtb	r0, r1
 800af3c:	4912      	ldr	r1, [pc, #72]	; (800af88 <OLED_DrawPoint+0xb0>)
 800af3e:	00d2      	lsls	r2, r2, #3
 800af40:	440a      	add	r2, r1
 800af42:	4413      	add	r3, r2
 800af44:	4602      	mov	r2, r0
 800af46:	701a      	strb	r2, [r3, #0]
 800af48:	e018      	b.n	800af7c <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800af4a:	79fa      	ldrb	r2, [r7, #7]
 800af4c:	7bbb      	ldrb	r3, [r7, #14]
 800af4e:	490e      	ldr	r1, [pc, #56]	; (800af88 <OLED_DrawPoint+0xb0>)
 800af50:	00d2      	lsls	r2, r2, #3
 800af52:	440a      	add	r2, r1
 800af54:	4413      	add	r3, r2
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	b25a      	sxtb	r2, r3
 800af5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af5e:	43db      	mvns	r3, r3
 800af60:	b25b      	sxtb	r3, r3
 800af62:	4013      	ands	r3, r2
 800af64:	b259      	sxtb	r1, r3
 800af66:	79fa      	ldrb	r2, [r7, #7]
 800af68:	7bbb      	ldrb	r3, [r7, #14]
 800af6a:	b2c8      	uxtb	r0, r1
 800af6c:	4906      	ldr	r1, [pc, #24]	; (800af88 <OLED_DrawPoint+0xb0>)
 800af6e:	00d2      	lsls	r2, r2, #3
 800af70:	440a      	add	r2, r1
 800af72:	4413      	add	r3, r2
 800af74:	4602      	mov	r2, r0
 800af76:	701a      	strb	r2, [r3, #0]
 800af78:	e000      	b.n	800af7c <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800af7a:	bf00      	nop
}
 800af7c:	3714      	adds	r7, #20
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr
 800af86:	bf00      	nop
 800af88:	20004c60 	.word	0x20004c60

0800af8c <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800af8c:	b590      	push	{r4, r7, lr}
 800af8e:	b085      	sub	sp, #20
 800af90:	af00      	add	r7, sp, #0
 800af92:	4604      	mov	r4, r0
 800af94:	4608      	mov	r0, r1
 800af96:	4611      	mov	r1, r2
 800af98:	461a      	mov	r2, r3
 800af9a:	4623      	mov	r3, r4
 800af9c:	71fb      	strb	r3, [r7, #7]
 800af9e:	4603      	mov	r3, r0
 800afa0:	71bb      	strb	r3, [r7, #6]
 800afa2:	460b      	mov	r3, r1
 800afa4:	717b      	strb	r3, [r7, #5]
 800afa6:	4613      	mov	r3, r2
 800afa8:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800afaa:	79bb      	ldrb	r3, [r7, #6]
 800afac:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800afae:	797b      	ldrb	r3, [r7, #5]
 800afb0:	3b20      	subs	r3, #32
 800afb2:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800afb4:	2300      	movs	r3, #0
 800afb6:	73bb      	strb	r3, [r7, #14]
 800afb8:	e04d      	b.n	800b056 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800afba:	793b      	ldrb	r3, [r7, #4]
 800afbc:	2b0c      	cmp	r3, #12
 800afbe:	d10b      	bne.n	800afd8 <OLED_ShowChar+0x4c>
 800afc0:	797a      	ldrb	r2, [r7, #5]
 800afc2:	7bb9      	ldrb	r1, [r7, #14]
 800afc4:	4828      	ldr	r0, [pc, #160]	; (800b068 <OLED_ShowChar+0xdc>)
 800afc6:	4613      	mov	r3, r2
 800afc8:	005b      	lsls	r3, r3, #1
 800afca:	4413      	add	r3, r2
 800afcc:	009b      	lsls	r3, r3, #2
 800afce:	4403      	add	r3, r0
 800afd0:	440b      	add	r3, r1
 800afd2:	781b      	ldrb	r3, [r3, #0]
 800afd4:	73fb      	strb	r3, [r7, #15]
 800afd6:	e007      	b.n	800afe8 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800afd8:	797a      	ldrb	r2, [r7, #5]
 800afda:	7bbb      	ldrb	r3, [r7, #14]
 800afdc:	4923      	ldr	r1, [pc, #140]	; (800b06c <OLED_ShowChar+0xe0>)
 800afde:	0112      	lsls	r2, r2, #4
 800afe0:	440a      	add	r2, r1
 800afe2:	4413      	add	r3, r2
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800afe8:	2300      	movs	r3, #0
 800afea:	737b      	strb	r3, [r7, #13]
 800afec:	e02d      	b.n	800b04a <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800afee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	da07      	bge.n	800b006 <OLED_ShowChar+0x7a>
 800aff6:	f897 2020 	ldrb.w	r2, [r7, #32]
 800affa:	79b9      	ldrb	r1, [r7, #6]
 800affc:	79fb      	ldrb	r3, [r7, #7]
 800affe:	4618      	mov	r0, r3
 800b000:	f7ff ff6a 	bl	800aed8 <OLED_DrawPoint>
 800b004:	e00c      	b.n	800b020 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800b006:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	bf0c      	ite	eq
 800b00e:	2301      	moveq	r3, #1
 800b010:	2300      	movne	r3, #0
 800b012:	b2db      	uxtb	r3, r3
 800b014:	461a      	mov	r2, r3
 800b016:	79b9      	ldrb	r1, [r7, #6]
 800b018:	79fb      	ldrb	r3, [r7, #7]
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7ff ff5c 	bl	800aed8 <OLED_DrawPoint>
			temp<<=1;
 800b020:	7bfb      	ldrb	r3, [r7, #15]
 800b022:	005b      	lsls	r3, r3, #1
 800b024:	73fb      	strb	r3, [r7, #15]
			y++;
 800b026:	79bb      	ldrb	r3, [r7, #6]
 800b028:	3301      	adds	r3, #1
 800b02a:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800b02c:	79ba      	ldrb	r2, [r7, #6]
 800b02e:	7b3b      	ldrb	r3, [r7, #12]
 800b030:	1ad2      	subs	r2, r2, r3
 800b032:	793b      	ldrb	r3, [r7, #4]
 800b034:	429a      	cmp	r2, r3
 800b036:	d105      	bne.n	800b044 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800b038:	7b3b      	ldrb	r3, [r7, #12]
 800b03a:	71bb      	strb	r3, [r7, #6]
				x++;
 800b03c:	79fb      	ldrb	r3, [r7, #7]
 800b03e:	3301      	adds	r3, #1
 800b040:	71fb      	strb	r3, [r7, #7]
				break;
 800b042:	e005      	b.n	800b050 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800b044:	7b7b      	ldrb	r3, [r7, #13]
 800b046:	3301      	adds	r3, #1
 800b048:	737b      	strb	r3, [r7, #13]
 800b04a:	7b7b      	ldrb	r3, [r7, #13]
 800b04c:	2b07      	cmp	r3, #7
 800b04e:	d9ce      	bls.n	800afee <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800b050:	7bbb      	ldrb	r3, [r7, #14]
 800b052:	3301      	adds	r3, #1
 800b054:	73bb      	strb	r3, [r7, #14]
 800b056:	7bba      	ldrb	r2, [r7, #14]
 800b058:	793b      	ldrb	r3, [r7, #4]
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d3ad      	bcc.n	800afba <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800b05e:	bf00      	nop
 800b060:	bf00      	nop
 800b062:	3714      	adds	r7, #20
 800b064:	46bd      	mov	sp, r7
 800b066:	bd90      	pop	{r4, r7, pc}
 800b068:	0800bcc8 	.word	0x0800bcc8
 800b06c:	0800c13c 	.word	0x0800c13c

0800b070 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b084      	sub	sp, #16
 800b074:	af02      	add	r7, sp, #8
 800b076:	4603      	mov	r3, r0
 800b078:	603a      	str	r2, [r7, #0]
 800b07a:	71fb      	strb	r3, [r7, #7]
 800b07c:	460b      	mov	r3, r1
 800b07e:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800b080:	e01f      	b.n	800b0c2 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800b082:	79fb      	ldrb	r3, [r7, #7]
 800b084:	2b7a      	cmp	r3, #122	; 0x7a
 800b086:	d904      	bls.n	800b092 <OLED_ShowString+0x22>
 800b088:	2300      	movs	r3, #0
 800b08a:	71fb      	strb	r3, [r7, #7]
 800b08c:	79bb      	ldrb	r3, [r7, #6]
 800b08e:	3310      	adds	r3, #16
 800b090:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800b092:	79bb      	ldrb	r3, [r7, #6]
 800b094:	2b3a      	cmp	r3, #58	; 0x3a
 800b096:	d905      	bls.n	800b0a4 <OLED_ShowString+0x34>
 800b098:	2300      	movs	r3, #0
 800b09a:	71fb      	strb	r3, [r7, #7]
 800b09c:	79fb      	ldrb	r3, [r7, #7]
 800b09e:	71bb      	strb	r3, [r7, #6]
 800b0a0:	f7ff fef4 	bl	800ae8c <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	781a      	ldrb	r2, [r3, #0]
 800b0a8:	79b9      	ldrb	r1, [r7, #6]
 800b0aa:	79f8      	ldrb	r0, [r7, #7]
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	9300      	str	r3, [sp, #0]
 800b0b0:	230c      	movs	r3, #12
 800b0b2:	f7ff ff6b 	bl	800af8c <OLED_ShowChar>
        x+=8;
 800b0b6:	79fb      	ldrb	r3, [r7, #7]
 800b0b8:	3308      	adds	r3, #8
 800b0ba:	71fb      	strb	r3, [r7, #7]
        p++;
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	3301      	adds	r3, #1
 800b0c0:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d1db      	bne.n	800b082 <OLED_ShowString+0x12>
    }  
}	 
 800b0ca:	bf00      	nop
 800b0cc:	bf00      	nop
 800b0ce:	3708      	adds	r7, #8
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <OLED_Init>:

void OLED_Init(void)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800b0d8:	f7f9 fe1c 	bl	8004d14 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800b0dc:	4b41      	ldr	r3, [pc, #260]	; (800b1e4 <OLED_Init+0x110>)
 800b0de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0e0:	4a40      	ldr	r2, [pc, #256]	; (800b1e4 <OLED_Init+0x110>)
 800b0e2:	f023 0301 	bic.w	r3, r3, #1
 800b0e6:	6713      	str	r3, [r2, #112]	; 0x70
 800b0e8:	4b3e      	ldr	r3, [pc, #248]	; (800b1e4 <OLED_Init+0x110>)
 800b0ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0ec:	4a3d      	ldr	r2, [pc, #244]	; (800b1e4 <OLED_Init+0x110>)
 800b0ee:	f023 0304 	bic.w	r3, r3, #4
 800b0f2:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800b0f4:	f7f9 fe22 	bl	8004d3c <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	2180      	movs	r1, #128	; 0x80
 800b0fc:	483a      	ldr	r0, [pc, #232]	; (800b1e8 <OLED_Init+0x114>)
 800b0fe:	f7f8 fddb 	bl	8003cb8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800b102:	2064      	movs	r0, #100	; 0x64
 800b104:	f7f8 fa74 	bl	80035f0 <HAL_Delay>
	OLED_RST_Set();
 800b108:	2201      	movs	r2, #1
 800b10a:	2180      	movs	r1, #128	; 0x80
 800b10c:	4836      	ldr	r0, [pc, #216]	; (800b1e8 <OLED_Init+0x114>)
 800b10e:	f7f8 fdd3 	bl	8003cb8 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800b112:	2100      	movs	r1, #0
 800b114:	20ae      	movs	r0, #174	; 0xae
 800b116:	f7ff fe6f 	bl	800adf8 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800b11a:	2100      	movs	r1, #0
 800b11c:	20d5      	movs	r0, #213	; 0xd5
 800b11e:	f7ff fe6b 	bl	800adf8 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800b122:	2100      	movs	r1, #0
 800b124:	2050      	movs	r0, #80	; 0x50
 800b126:	f7ff fe67 	bl	800adf8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800b12a:	2100      	movs	r1, #0
 800b12c:	20a8      	movs	r0, #168	; 0xa8
 800b12e:	f7ff fe63 	bl	800adf8 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800b132:	2100      	movs	r1, #0
 800b134:	203f      	movs	r0, #63	; 0x3f
 800b136:	f7ff fe5f 	bl	800adf8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800b13a:	2100      	movs	r1, #0
 800b13c:	20d3      	movs	r0, #211	; 0xd3
 800b13e:	f7ff fe5b 	bl	800adf8 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800b142:	2100      	movs	r1, #0
 800b144:	2000      	movs	r0, #0
 800b146:	f7ff fe57 	bl	800adf8 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800b14a:	2100      	movs	r1, #0
 800b14c:	2040      	movs	r0, #64	; 0x40
 800b14e:	f7ff fe53 	bl	800adf8 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800b152:	2100      	movs	r1, #0
 800b154:	208d      	movs	r0, #141	; 0x8d
 800b156:	f7ff fe4f 	bl	800adf8 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800b15a:	2100      	movs	r1, #0
 800b15c:	2014      	movs	r0, #20
 800b15e:	f7ff fe4b 	bl	800adf8 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800b162:	2100      	movs	r1, #0
 800b164:	2020      	movs	r0, #32
 800b166:	f7ff fe47 	bl	800adf8 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800b16a:	2100      	movs	r1, #0
 800b16c:	2002      	movs	r0, #2
 800b16e:	f7ff fe43 	bl	800adf8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800b172:	2100      	movs	r1, #0
 800b174:	20a1      	movs	r0, #161	; 0xa1
 800b176:	f7ff fe3f 	bl	800adf8 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800b17a:	2100      	movs	r1, #0
 800b17c:	20c0      	movs	r0, #192	; 0xc0
 800b17e:	f7ff fe3b 	bl	800adf8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800b182:	2100      	movs	r1, #0
 800b184:	20da      	movs	r0, #218	; 0xda
 800b186:	f7ff fe37 	bl	800adf8 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800b18a:	2100      	movs	r1, #0
 800b18c:	2012      	movs	r0, #18
 800b18e:	f7ff fe33 	bl	800adf8 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800b192:	2100      	movs	r1, #0
 800b194:	2081      	movs	r0, #129	; 0x81
 800b196:	f7ff fe2f 	bl	800adf8 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800b19a:	2100      	movs	r1, #0
 800b19c:	20ef      	movs	r0, #239	; 0xef
 800b19e:	f7ff fe2b 	bl	800adf8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800b1a2:	2100      	movs	r1, #0
 800b1a4:	20d9      	movs	r0, #217	; 0xd9
 800b1a6:	f7ff fe27 	bl	800adf8 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800b1aa:	2100      	movs	r1, #0
 800b1ac:	20f1      	movs	r0, #241	; 0xf1
 800b1ae:	f7ff fe23 	bl	800adf8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800b1b2:	2100      	movs	r1, #0
 800b1b4:	20db      	movs	r0, #219	; 0xdb
 800b1b6:	f7ff fe1f 	bl	800adf8 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800b1ba:	2100      	movs	r1, #0
 800b1bc:	2030      	movs	r0, #48	; 0x30
 800b1be:	f7ff fe1b 	bl	800adf8 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800b1c2:	2100      	movs	r1, #0
 800b1c4:	20a4      	movs	r0, #164	; 0xa4
 800b1c6:	f7ff fe17 	bl	800adf8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800b1ca:	2100      	movs	r1, #0
 800b1cc:	20a6      	movs	r0, #166	; 0xa6
 800b1ce:	f7ff fe13 	bl	800adf8 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800b1d2:	2100      	movs	r1, #0
 800b1d4:	20af      	movs	r0, #175	; 0xaf
 800b1d6:	f7ff fe0f 	bl	800adf8 <OLED_WR_Byte>
	OLED_Clear(); 
 800b1da:	f7ff fe57 	bl	800ae8c <OLED_Clear>
 800b1de:	bf00      	nop
 800b1e0:	bd80      	pop	{r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	40023800 	.word	0x40023800
 800b1e8:	40021000 	.word	0x40021000

0800b1ec <malloc>:
 800b1ec:	4b02      	ldr	r3, [pc, #8]	; (800b1f8 <malloc+0xc>)
 800b1ee:	4601      	mov	r1, r0
 800b1f0:	6818      	ldr	r0, [r3, #0]
 800b1f2:	f000 b82b 	b.w	800b24c <_malloc_r>
 800b1f6:	bf00      	nop
 800b1f8:	20000074 	.word	0x20000074

0800b1fc <free>:
 800b1fc:	4b02      	ldr	r3, [pc, #8]	; (800b208 <free+0xc>)
 800b1fe:	4601      	mov	r1, r0
 800b200:	6818      	ldr	r0, [r3, #0]
 800b202:	f000 b921 	b.w	800b448 <_free_r>
 800b206:	bf00      	nop
 800b208:	20000074 	.word	0x20000074

0800b20c <sbrk_aligned>:
 800b20c:	b570      	push	{r4, r5, r6, lr}
 800b20e:	4e0e      	ldr	r6, [pc, #56]	; (800b248 <sbrk_aligned+0x3c>)
 800b210:	460c      	mov	r4, r1
 800b212:	6831      	ldr	r1, [r6, #0]
 800b214:	4605      	mov	r5, r0
 800b216:	b911      	cbnz	r1, 800b21e <sbrk_aligned+0x12>
 800b218:	f000 f8cc 	bl	800b3b4 <_sbrk_r>
 800b21c:	6030      	str	r0, [r6, #0]
 800b21e:	4621      	mov	r1, r4
 800b220:	4628      	mov	r0, r5
 800b222:	f000 f8c7 	bl	800b3b4 <_sbrk_r>
 800b226:	1c43      	adds	r3, r0, #1
 800b228:	d00a      	beq.n	800b240 <sbrk_aligned+0x34>
 800b22a:	1cc4      	adds	r4, r0, #3
 800b22c:	f024 0403 	bic.w	r4, r4, #3
 800b230:	42a0      	cmp	r0, r4
 800b232:	d007      	beq.n	800b244 <sbrk_aligned+0x38>
 800b234:	1a21      	subs	r1, r4, r0
 800b236:	4628      	mov	r0, r5
 800b238:	f000 f8bc 	bl	800b3b4 <_sbrk_r>
 800b23c:	3001      	adds	r0, #1
 800b23e:	d101      	bne.n	800b244 <sbrk_aligned+0x38>
 800b240:	f04f 34ff 	mov.w	r4, #4294967295
 800b244:	4620      	mov	r0, r4
 800b246:	bd70      	pop	{r4, r5, r6, pc}
 800b248:	20005064 	.word	0x20005064

0800b24c <_malloc_r>:
 800b24c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b250:	1ccd      	adds	r5, r1, #3
 800b252:	f025 0503 	bic.w	r5, r5, #3
 800b256:	3508      	adds	r5, #8
 800b258:	2d0c      	cmp	r5, #12
 800b25a:	bf38      	it	cc
 800b25c:	250c      	movcc	r5, #12
 800b25e:	2d00      	cmp	r5, #0
 800b260:	4607      	mov	r7, r0
 800b262:	db01      	blt.n	800b268 <_malloc_r+0x1c>
 800b264:	42a9      	cmp	r1, r5
 800b266:	d905      	bls.n	800b274 <_malloc_r+0x28>
 800b268:	230c      	movs	r3, #12
 800b26a:	603b      	str	r3, [r7, #0]
 800b26c:	2600      	movs	r6, #0
 800b26e:	4630      	mov	r0, r6
 800b270:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b274:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b348 <_malloc_r+0xfc>
 800b278:	f000 f868 	bl	800b34c <__malloc_lock>
 800b27c:	f8d8 3000 	ldr.w	r3, [r8]
 800b280:	461c      	mov	r4, r3
 800b282:	bb5c      	cbnz	r4, 800b2dc <_malloc_r+0x90>
 800b284:	4629      	mov	r1, r5
 800b286:	4638      	mov	r0, r7
 800b288:	f7ff ffc0 	bl	800b20c <sbrk_aligned>
 800b28c:	1c43      	adds	r3, r0, #1
 800b28e:	4604      	mov	r4, r0
 800b290:	d155      	bne.n	800b33e <_malloc_r+0xf2>
 800b292:	f8d8 4000 	ldr.w	r4, [r8]
 800b296:	4626      	mov	r6, r4
 800b298:	2e00      	cmp	r6, #0
 800b29a:	d145      	bne.n	800b328 <_malloc_r+0xdc>
 800b29c:	2c00      	cmp	r4, #0
 800b29e:	d048      	beq.n	800b332 <_malloc_r+0xe6>
 800b2a0:	6823      	ldr	r3, [r4, #0]
 800b2a2:	4631      	mov	r1, r6
 800b2a4:	4638      	mov	r0, r7
 800b2a6:	eb04 0903 	add.w	r9, r4, r3
 800b2aa:	f000 f883 	bl	800b3b4 <_sbrk_r>
 800b2ae:	4581      	cmp	r9, r0
 800b2b0:	d13f      	bne.n	800b332 <_malloc_r+0xe6>
 800b2b2:	6821      	ldr	r1, [r4, #0]
 800b2b4:	1a6d      	subs	r5, r5, r1
 800b2b6:	4629      	mov	r1, r5
 800b2b8:	4638      	mov	r0, r7
 800b2ba:	f7ff ffa7 	bl	800b20c <sbrk_aligned>
 800b2be:	3001      	adds	r0, #1
 800b2c0:	d037      	beq.n	800b332 <_malloc_r+0xe6>
 800b2c2:	6823      	ldr	r3, [r4, #0]
 800b2c4:	442b      	add	r3, r5
 800b2c6:	6023      	str	r3, [r4, #0]
 800b2c8:	f8d8 3000 	ldr.w	r3, [r8]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d038      	beq.n	800b342 <_malloc_r+0xf6>
 800b2d0:	685a      	ldr	r2, [r3, #4]
 800b2d2:	42a2      	cmp	r2, r4
 800b2d4:	d12b      	bne.n	800b32e <_malloc_r+0xe2>
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	605a      	str	r2, [r3, #4]
 800b2da:	e00f      	b.n	800b2fc <_malloc_r+0xb0>
 800b2dc:	6822      	ldr	r2, [r4, #0]
 800b2de:	1b52      	subs	r2, r2, r5
 800b2e0:	d41f      	bmi.n	800b322 <_malloc_r+0xd6>
 800b2e2:	2a0b      	cmp	r2, #11
 800b2e4:	d917      	bls.n	800b316 <_malloc_r+0xca>
 800b2e6:	1961      	adds	r1, r4, r5
 800b2e8:	42a3      	cmp	r3, r4
 800b2ea:	6025      	str	r5, [r4, #0]
 800b2ec:	bf18      	it	ne
 800b2ee:	6059      	strne	r1, [r3, #4]
 800b2f0:	6863      	ldr	r3, [r4, #4]
 800b2f2:	bf08      	it	eq
 800b2f4:	f8c8 1000 	streq.w	r1, [r8]
 800b2f8:	5162      	str	r2, [r4, r5]
 800b2fa:	604b      	str	r3, [r1, #4]
 800b2fc:	4638      	mov	r0, r7
 800b2fe:	f104 060b 	add.w	r6, r4, #11
 800b302:	f000 f829 	bl	800b358 <__malloc_unlock>
 800b306:	f026 0607 	bic.w	r6, r6, #7
 800b30a:	1d23      	adds	r3, r4, #4
 800b30c:	1af2      	subs	r2, r6, r3
 800b30e:	d0ae      	beq.n	800b26e <_malloc_r+0x22>
 800b310:	1b9b      	subs	r3, r3, r6
 800b312:	50a3      	str	r3, [r4, r2]
 800b314:	e7ab      	b.n	800b26e <_malloc_r+0x22>
 800b316:	42a3      	cmp	r3, r4
 800b318:	6862      	ldr	r2, [r4, #4]
 800b31a:	d1dd      	bne.n	800b2d8 <_malloc_r+0x8c>
 800b31c:	f8c8 2000 	str.w	r2, [r8]
 800b320:	e7ec      	b.n	800b2fc <_malloc_r+0xb0>
 800b322:	4623      	mov	r3, r4
 800b324:	6864      	ldr	r4, [r4, #4]
 800b326:	e7ac      	b.n	800b282 <_malloc_r+0x36>
 800b328:	4634      	mov	r4, r6
 800b32a:	6876      	ldr	r6, [r6, #4]
 800b32c:	e7b4      	b.n	800b298 <_malloc_r+0x4c>
 800b32e:	4613      	mov	r3, r2
 800b330:	e7cc      	b.n	800b2cc <_malloc_r+0x80>
 800b332:	230c      	movs	r3, #12
 800b334:	603b      	str	r3, [r7, #0]
 800b336:	4638      	mov	r0, r7
 800b338:	f000 f80e 	bl	800b358 <__malloc_unlock>
 800b33c:	e797      	b.n	800b26e <_malloc_r+0x22>
 800b33e:	6025      	str	r5, [r4, #0]
 800b340:	e7dc      	b.n	800b2fc <_malloc_r+0xb0>
 800b342:	605b      	str	r3, [r3, #4]
 800b344:	deff      	udf	#255	; 0xff
 800b346:	bf00      	nop
 800b348:	20005060 	.word	0x20005060

0800b34c <__malloc_lock>:
 800b34c:	4801      	ldr	r0, [pc, #4]	; (800b354 <__malloc_lock+0x8>)
 800b34e:	f000 b86b 	b.w	800b428 <__retarget_lock_acquire_recursive>
 800b352:	bf00      	nop
 800b354:	200051a4 	.word	0x200051a4

0800b358 <__malloc_unlock>:
 800b358:	4801      	ldr	r0, [pc, #4]	; (800b360 <__malloc_unlock+0x8>)
 800b35a:	f000 b866 	b.w	800b42a <__retarget_lock_release_recursive>
 800b35e:	bf00      	nop
 800b360:	200051a4 	.word	0x200051a4

0800b364 <siprintf>:
 800b364:	b40e      	push	{r1, r2, r3}
 800b366:	b500      	push	{lr}
 800b368:	b09c      	sub	sp, #112	; 0x70
 800b36a:	ab1d      	add	r3, sp, #116	; 0x74
 800b36c:	9002      	str	r0, [sp, #8]
 800b36e:	9006      	str	r0, [sp, #24]
 800b370:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b374:	4809      	ldr	r0, [pc, #36]	; (800b39c <siprintf+0x38>)
 800b376:	9107      	str	r1, [sp, #28]
 800b378:	9104      	str	r1, [sp, #16]
 800b37a:	4909      	ldr	r1, [pc, #36]	; (800b3a0 <siprintf+0x3c>)
 800b37c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b380:	9105      	str	r1, [sp, #20]
 800b382:	6800      	ldr	r0, [r0, #0]
 800b384:	9301      	str	r3, [sp, #4]
 800b386:	a902      	add	r1, sp, #8
 800b388:	f000 f904 	bl	800b594 <_svfiprintf_r>
 800b38c:	9b02      	ldr	r3, [sp, #8]
 800b38e:	2200      	movs	r2, #0
 800b390:	701a      	strb	r2, [r3, #0]
 800b392:	b01c      	add	sp, #112	; 0x70
 800b394:	f85d eb04 	ldr.w	lr, [sp], #4
 800b398:	b003      	add	sp, #12
 800b39a:	4770      	bx	lr
 800b39c:	20000074 	.word	0x20000074
 800b3a0:	ffff0208 	.word	0xffff0208

0800b3a4 <memset>:
 800b3a4:	4402      	add	r2, r0
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d100      	bne.n	800b3ae <memset+0xa>
 800b3ac:	4770      	bx	lr
 800b3ae:	f803 1b01 	strb.w	r1, [r3], #1
 800b3b2:	e7f9      	b.n	800b3a8 <memset+0x4>

0800b3b4 <_sbrk_r>:
 800b3b4:	b538      	push	{r3, r4, r5, lr}
 800b3b6:	4d06      	ldr	r5, [pc, #24]	; (800b3d0 <_sbrk_r+0x1c>)
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	4604      	mov	r4, r0
 800b3bc:	4608      	mov	r0, r1
 800b3be:	602b      	str	r3, [r5, #0]
 800b3c0:	f7f8 f832 	bl	8003428 <_sbrk>
 800b3c4:	1c43      	adds	r3, r0, #1
 800b3c6:	d102      	bne.n	800b3ce <_sbrk_r+0x1a>
 800b3c8:	682b      	ldr	r3, [r5, #0]
 800b3ca:	b103      	cbz	r3, 800b3ce <_sbrk_r+0x1a>
 800b3cc:	6023      	str	r3, [r4, #0]
 800b3ce:	bd38      	pop	{r3, r4, r5, pc}
 800b3d0:	200051a0 	.word	0x200051a0

0800b3d4 <__errno>:
 800b3d4:	4b01      	ldr	r3, [pc, #4]	; (800b3dc <__errno+0x8>)
 800b3d6:	6818      	ldr	r0, [r3, #0]
 800b3d8:	4770      	bx	lr
 800b3da:	bf00      	nop
 800b3dc:	20000074 	.word	0x20000074

0800b3e0 <__libc_init_array>:
 800b3e0:	b570      	push	{r4, r5, r6, lr}
 800b3e2:	4d0d      	ldr	r5, [pc, #52]	; (800b418 <__libc_init_array+0x38>)
 800b3e4:	4c0d      	ldr	r4, [pc, #52]	; (800b41c <__libc_init_array+0x3c>)
 800b3e6:	1b64      	subs	r4, r4, r5
 800b3e8:	10a4      	asrs	r4, r4, #2
 800b3ea:	2600      	movs	r6, #0
 800b3ec:	42a6      	cmp	r6, r4
 800b3ee:	d109      	bne.n	800b404 <__libc_init_array+0x24>
 800b3f0:	4d0b      	ldr	r5, [pc, #44]	; (800b420 <__libc_init_array+0x40>)
 800b3f2:	4c0c      	ldr	r4, [pc, #48]	; (800b424 <__libc_init_array+0x44>)
 800b3f4:	f000 fbae 	bl	800bb54 <_init>
 800b3f8:	1b64      	subs	r4, r4, r5
 800b3fa:	10a4      	asrs	r4, r4, #2
 800b3fc:	2600      	movs	r6, #0
 800b3fe:	42a6      	cmp	r6, r4
 800b400:	d105      	bne.n	800b40e <__libc_init_array+0x2e>
 800b402:	bd70      	pop	{r4, r5, r6, pc}
 800b404:	f855 3b04 	ldr.w	r3, [r5], #4
 800b408:	4798      	blx	r3
 800b40a:	3601      	adds	r6, #1
 800b40c:	e7ee      	b.n	800b3ec <__libc_init_array+0xc>
 800b40e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b412:	4798      	blx	r3
 800b414:	3601      	adds	r6, #1
 800b416:	e7f2      	b.n	800b3fe <__libc_init_array+0x1e>
 800b418:	0800c768 	.word	0x0800c768
 800b41c:	0800c768 	.word	0x0800c768
 800b420:	0800c768 	.word	0x0800c768
 800b424:	0800c76c 	.word	0x0800c76c

0800b428 <__retarget_lock_acquire_recursive>:
 800b428:	4770      	bx	lr

0800b42a <__retarget_lock_release_recursive>:
 800b42a:	4770      	bx	lr

0800b42c <memcpy>:
 800b42c:	440a      	add	r2, r1
 800b42e:	4291      	cmp	r1, r2
 800b430:	f100 33ff 	add.w	r3, r0, #4294967295
 800b434:	d100      	bne.n	800b438 <memcpy+0xc>
 800b436:	4770      	bx	lr
 800b438:	b510      	push	{r4, lr}
 800b43a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b43e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b442:	4291      	cmp	r1, r2
 800b444:	d1f9      	bne.n	800b43a <memcpy+0xe>
 800b446:	bd10      	pop	{r4, pc}

0800b448 <_free_r>:
 800b448:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b44a:	2900      	cmp	r1, #0
 800b44c:	d044      	beq.n	800b4d8 <_free_r+0x90>
 800b44e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b452:	9001      	str	r0, [sp, #4]
 800b454:	2b00      	cmp	r3, #0
 800b456:	f1a1 0404 	sub.w	r4, r1, #4
 800b45a:	bfb8      	it	lt
 800b45c:	18e4      	addlt	r4, r4, r3
 800b45e:	f7ff ff75 	bl	800b34c <__malloc_lock>
 800b462:	4a1e      	ldr	r2, [pc, #120]	; (800b4dc <_free_r+0x94>)
 800b464:	9801      	ldr	r0, [sp, #4]
 800b466:	6813      	ldr	r3, [r2, #0]
 800b468:	b933      	cbnz	r3, 800b478 <_free_r+0x30>
 800b46a:	6063      	str	r3, [r4, #4]
 800b46c:	6014      	str	r4, [r2, #0]
 800b46e:	b003      	add	sp, #12
 800b470:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b474:	f7ff bf70 	b.w	800b358 <__malloc_unlock>
 800b478:	42a3      	cmp	r3, r4
 800b47a:	d908      	bls.n	800b48e <_free_r+0x46>
 800b47c:	6825      	ldr	r5, [r4, #0]
 800b47e:	1961      	adds	r1, r4, r5
 800b480:	428b      	cmp	r3, r1
 800b482:	bf01      	itttt	eq
 800b484:	6819      	ldreq	r1, [r3, #0]
 800b486:	685b      	ldreq	r3, [r3, #4]
 800b488:	1949      	addeq	r1, r1, r5
 800b48a:	6021      	streq	r1, [r4, #0]
 800b48c:	e7ed      	b.n	800b46a <_free_r+0x22>
 800b48e:	461a      	mov	r2, r3
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	b10b      	cbz	r3, 800b498 <_free_r+0x50>
 800b494:	42a3      	cmp	r3, r4
 800b496:	d9fa      	bls.n	800b48e <_free_r+0x46>
 800b498:	6811      	ldr	r1, [r2, #0]
 800b49a:	1855      	adds	r5, r2, r1
 800b49c:	42a5      	cmp	r5, r4
 800b49e:	d10b      	bne.n	800b4b8 <_free_r+0x70>
 800b4a0:	6824      	ldr	r4, [r4, #0]
 800b4a2:	4421      	add	r1, r4
 800b4a4:	1854      	adds	r4, r2, r1
 800b4a6:	42a3      	cmp	r3, r4
 800b4a8:	6011      	str	r1, [r2, #0]
 800b4aa:	d1e0      	bne.n	800b46e <_free_r+0x26>
 800b4ac:	681c      	ldr	r4, [r3, #0]
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	6053      	str	r3, [r2, #4]
 800b4b2:	440c      	add	r4, r1
 800b4b4:	6014      	str	r4, [r2, #0]
 800b4b6:	e7da      	b.n	800b46e <_free_r+0x26>
 800b4b8:	d902      	bls.n	800b4c0 <_free_r+0x78>
 800b4ba:	230c      	movs	r3, #12
 800b4bc:	6003      	str	r3, [r0, #0]
 800b4be:	e7d6      	b.n	800b46e <_free_r+0x26>
 800b4c0:	6825      	ldr	r5, [r4, #0]
 800b4c2:	1961      	adds	r1, r4, r5
 800b4c4:	428b      	cmp	r3, r1
 800b4c6:	bf04      	itt	eq
 800b4c8:	6819      	ldreq	r1, [r3, #0]
 800b4ca:	685b      	ldreq	r3, [r3, #4]
 800b4cc:	6063      	str	r3, [r4, #4]
 800b4ce:	bf04      	itt	eq
 800b4d0:	1949      	addeq	r1, r1, r5
 800b4d2:	6021      	streq	r1, [r4, #0]
 800b4d4:	6054      	str	r4, [r2, #4]
 800b4d6:	e7ca      	b.n	800b46e <_free_r+0x26>
 800b4d8:	b003      	add	sp, #12
 800b4da:	bd30      	pop	{r4, r5, pc}
 800b4dc:	20005060 	.word	0x20005060

0800b4e0 <__ssputs_r>:
 800b4e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4e4:	688e      	ldr	r6, [r1, #8]
 800b4e6:	461f      	mov	r7, r3
 800b4e8:	42be      	cmp	r6, r7
 800b4ea:	680b      	ldr	r3, [r1, #0]
 800b4ec:	4682      	mov	sl, r0
 800b4ee:	460c      	mov	r4, r1
 800b4f0:	4690      	mov	r8, r2
 800b4f2:	d82c      	bhi.n	800b54e <__ssputs_r+0x6e>
 800b4f4:	898a      	ldrh	r2, [r1, #12]
 800b4f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b4fa:	d026      	beq.n	800b54a <__ssputs_r+0x6a>
 800b4fc:	6965      	ldr	r5, [r4, #20]
 800b4fe:	6909      	ldr	r1, [r1, #16]
 800b500:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b504:	eba3 0901 	sub.w	r9, r3, r1
 800b508:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b50c:	1c7b      	adds	r3, r7, #1
 800b50e:	444b      	add	r3, r9
 800b510:	106d      	asrs	r5, r5, #1
 800b512:	429d      	cmp	r5, r3
 800b514:	bf38      	it	cc
 800b516:	461d      	movcc	r5, r3
 800b518:	0553      	lsls	r3, r2, #21
 800b51a:	d527      	bpl.n	800b56c <__ssputs_r+0x8c>
 800b51c:	4629      	mov	r1, r5
 800b51e:	f7ff fe95 	bl	800b24c <_malloc_r>
 800b522:	4606      	mov	r6, r0
 800b524:	b360      	cbz	r0, 800b580 <__ssputs_r+0xa0>
 800b526:	6921      	ldr	r1, [r4, #16]
 800b528:	464a      	mov	r2, r9
 800b52a:	f7ff ff7f 	bl	800b42c <memcpy>
 800b52e:	89a3      	ldrh	r3, [r4, #12]
 800b530:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b538:	81a3      	strh	r3, [r4, #12]
 800b53a:	6126      	str	r6, [r4, #16]
 800b53c:	6165      	str	r5, [r4, #20]
 800b53e:	444e      	add	r6, r9
 800b540:	eba5 0509 	sub.w	r5, r5, r9
 800b544:	6026      	str	r6, [r4, #0]
 800b546:	60a5      	str	r5, [r4, #8]
 800b548:	463e      	mov	r6, r7
 800b54a:	42be      	cmp	r6, r7
 800b54c:	d900      	bls.n	800b550 <__ssputs_r+0x70>
 800b54e:	463e      	mov	r6, r7
 800b550:	6820      	ldr	r0, [r4, #0]
 800b552:	4632      	mov	r2, r6
 800b554:	4641      	mov	r1, r8
 800b556:	f000 faab 	bl	800bab0 <memmove>
 800b55a:	68a3      	ldr	r3, [r4, #8]
 800b55c:	1b9b      	subs	r3, r3, r6
 800b55e:	60a3      	str	r3, [r4, #8]
 800b560:	6823      	ldr	r3, [r4, #0]
 800b562:	4433      	add	r3, r6
 800b564:	6023      	str	r3, [r4, #0]
 800b566:	2000      	movs	r0, #0
 800b568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b56c:	462a      	mov	r2, r5
 800b56e:	f000 fab9 	bl	800bae4 <_realloc_r>
 800b572:	4606      	mov	r6, r0
 800b574:	2800      	cmp	r0, #0
 800b576:	d1e0      	bne.n	800b53a <__ssputs_r+0x5a>
 800b578:	6921      	ldr	r1, [r4, #16]
 800b57a:	4650      	mov	r0, sl
 800b57c:	f7ff ff64 	bl	800b448 <_free_r>
 800b580:	230c      	movs	r3, #12
 800b582:	f8ca 3000 	str.w	r3, [sl]
 800b586:	89a3      	ldrh	r3, [r4, #12]
 800b588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b58c:	81a3      	strh	r3, [r4, #12]
 800b58e:	f04f 30ff 	mov.w	r0, #4294967295
 800b592:	e7e9      	b.n	800b568 <__ssputs_r+0x88>

0800b594 <_svfiprintf_r>:
 800b594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b598:	4698      	mov	r8, r3
 800b59a:	898b      	ldrh	r3, [r1, #12]
 800b59c:	061b      	lsls	r3, r3, #24
 800b59e:	b09d      	sub	sp, #116	; 0x74
 800b5a0:	4607      	mov	r7, r0
 800b5a2:	460d      	mov	r5, r1
 800b5a4:	4614      	mov	r4, r2
 800b5a6:	d50e      	bpl.n	800b5c6 <_svfiprintf_r+0x32>
 800b5a8:	690b      	ldr	r3, [r1, #16]
 800b5aa:	b963      	cbnz	r3, 800b5c6 <_svfiprintf_r+0x32>
 800b5ac:	2140      	movs	r1, #64	; 0x40
 800b5ae:	f7ff fe4d 	bl	800b24c <_malloc_r>
 800b5b2:	6028      	str	r0, [r5, #0]
 800b5b4:	6128      	str	r0, [r5, #16]
 800b5b6:	b920      	cbnz	r0, 800b5c2 <_svfiprintf_r+0x2e>
 800b5b8:	230c      	movs	r3, #12
 800b5ba:	603b      	str	r3, [r7, #0]
 800b5bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b5c0:	e0d0      	b.n	800b764 <_svfiprintf_r+0x1d0>
 800b5c2:	2340      	movs	r3, #64	; 0x40
 800b5c4:	616b      	str	r3, [r5, #20]
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	9309      	str	r3, [sp, #36]	; 0x24
 800b5ca:	2320      	movs	r3, #32
 800b5cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5d0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5d4:	2330      	movs	r3, #48	; 0x30
 800b5d6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b77c <_svfiprintf_r+0x1e8>
 800b5da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5de:	f04f 0901 	mov.w	r9, #1
 800b5e2:	4623      	mov	r3, r4
 800b5e4:	469a      	mov	sl, r3
 800b5e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5ea:	b10a      	cbz	r2, 800b5f0 <_svfiprintf_r+0x5c>
 800b5ec:	2a25      	cmp	r2, #37	; 0x25
 800b5ee:	d1f9      	bne.n	800b5e4 <_svfiprintf_r+0x50>
 800b5f0:	ebba 0b04 	subs.w	fp, sl, r4
 800b5f4:	d00b      	beq.n	800b60e <_svfiprintf_r+0x7a>
 800b5f6:	465b      	mov	r3, fp
 800b5f8:	4622      	mov	r2, r4
 800b5fa:	4629      	mov	r1, r5
 800b5fc:	4638      	mov	r0, r7
 800b5fe:	f7ff ff6f 	bl	800b4e0 <__ssputs_r>
 800b602:	3001      	adds	r0, #1
 800b604:	f000 80a9 	beq.w	800b75a <_svfiprintf_r+0x1c6>
 800b608:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b60a:	445a      	add	r2, fp
 800b60c:	9209      	str	r2, [sp, #36]	; 0x24
 800b60e:	f89a 3000 	ldrb.w	r3, [sl]
 800b612:	2b00      	cmp	r3, #0
 800b614:	f000 80a1 	beq.w	800b75a <_svfiprintf_r+0x1c6>
 800b618:	2300      	movs	r3, #0
 800b61a:	f04f 32ff 	mov.w	r2, #4294967295
 800b61e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b622:	f10a 0a01 	add.w	sl, sl, #1
 800b626:	9304      	str	r3, [sp, #16]
 800b628:	9307      	str	r3, [sp, #28]
 800b62a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b62e:	931a      	str	r3, [sp, #104]	; 0x68
 800b630:	4654      	mov	r4, sl
 800b632:	2205      	movs	r2, #5
 800b634:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b638:	4850      	ldr	r0, [pc, #320]	; (800b77c <_svfiprintf_r+0x1e8>)
 800b63a:	f7f4 fdc9 	bl	80001d0 <memchr>
 800b63e:	9a04      	ldr	r2, [sp, #16]
 800b640:	b9d8      	cbnz	r0, 800b67a <_svfiprintf_r+0xe6>
 800b642:	06d0      	lsls	r0, r2, #27
 800b644:	bf44      	itt	mi
 800b646:	2320      	movmi	r3, #32
 800b648:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b64c:	0711      	lsls	r1, r2, #28
 800b64e:	bf44      	itt	mi
 800b650:	232b      	movmi	r3, #43	; 0x2b
 800b652:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b656:	f89a 3000 	ldrb.w	r3, [sl]
 800b65a:	2b2a      	cmp	r3, #42	; 0x2a
 800b65c:	d015      	beq.n	800b68a <_svfiprintf_r+0xf6>
 800b65e:	9a07      	ldr	r2, [sp, #28]
 800b660:	4654      	mov	r4, sl
 800b662:	2000      	movs	r0, #0
 800b664:	f04f 0c0a 	mov.w	ip, #10
 800b668:	4621      	mov	r1, r4
 800b66a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b66e:	3b30      	subs	r3, #48	; 0x30
 800b670:	2b09      	cmp	r3, #9
 800b672:	d94d      	bls.n	800b710 <_svfiprintf_r+0x17c>
 800b674:	b1b0      	cbz	r0, 800b6a4 <_svfiprintf_r+0x110>
 800b676:	9207      	str	r2, [sp, #28]
 800b678:	e014      	b.n	800b6a4 <_svfiprintf_r+0x110>
 800b67a:	eba0 0308 	sub.w	r3, r0, r8
 800b67e:	fa09 f303 	lsl.w	r3, r9, r3
 800b682:	4313      	orrs	r3, r2
 800b684:	9304      	str	r3, [sp, #16]
 800b686:	46a2      	mov	sl, r4
 800b688:	e7d2      	b.n	800b630 <_svfiprintf_r+0x9c>
 800b68a:	9b03      	ldr	r3, [sp, #12]
 800b68c:	1d19      	adds	r1, r3, #4
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	9103      	str	r1, [sp, #12]
 800b692:	2b00      	cmp	r3, #0
 800b694:	bfbb      	ittet	lt
 800b696:	425b      	neglt	r3, r3
 800b698:	f042 0202 	orrlt.w	r2, r2, #2
 800b69c:	9307      	strge	r3, [sp, #28]
 800b69e:	9307      	strlt	r3, [sp, #28]
 800b6a0:	bfb8      	it	lt
 800b6a2:	9204      	strlt	r2, [sp, #16]
 800b6a4:	7823      	ldrb	r3, [r4, #0]
 800b6a6:	2b2e      	cmp	r3, #46	; 0x2e
 800b6a8:	d10c      	bne.n	800b6c4 <_svfiprintf_r+0x130>
 800b6aa:	7863      	ldrb	r3, [r4, #1]
 800b6ac:	2b2a      	cmp	r3, #42	; 0x2a
 800b6ae:	d134      	bne.n	800b71a <_svfiprintf_r+0x186>
 800b6b0:	9b03      	ldr	r3, [sp, #12]
 800b6b2:	1d1a      	adds	r2, r3, #4
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	9203      	str	r2, [sp, #12]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	bfb8      	it	lt
 800b6bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800b6c0:	3402      	adds	r4, #2
 800b6c2:	9305      	str	r3, [sp, #20]
 800b6c4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b78c <_svfiprintf_r+0x1f8>
 800b6c8:	7821      	ldrb	r1, [r4, #0]
 800b6ca:	2203      	movs	r2, #3
 800b6cc:	4650      	mov	r0, sl
 800b6ce:	f7f4 fd7f 	bl	80001d0 <memchr>
 800b6d2:	b138      	cbz	r0, 800b6e4 <_svfiprintf_r+0x150>
 800b6d4:	9b04      	ldr	r3, [sp, #16]
 800b6d6:	eba0 000a 	sub.w	r0, r0, sl
 800b6da:	2240      	movs	r2, #64	; 0x40
 800b6dc:	4082      	lsls	r2, r0
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	3401      	adds	r4, #1
 800b6e2:	9304      	str	r3, [sp, #16]
 800b6e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6e8:	4825      	ldr	r0, [pc, #148]	; (800b780 <_svfiprintf_r+0x1ec>)
 800b6ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6ee:	2206      	movs	r2, #6
 800b6f0:	f7f4 fd6e 	bl	80001d0 <memchr>
 800b6f4:	2800      	cmp	r0, #0
 800b6f6:	d038      	beq.n	800b76a <_svfiprintf_r+0x1d6>
 800b6f8:	4b22      	ldr	r3, [pc, #136]	; (800b784 <_svfiprintf_r+0x1f0>)
 800b6fa:	bb1b      	cbnz	r3, 800b744 <_svfiprintf_r+0x1b0>
 800b6fc:	9b03      	ldr	r3, [sp, #12]
 800b6fe:	3307      	adds	r3, #7
 800b700:	f023 0307 	bic.w	r3, r3, #7
 800b704:	3308      	adds	r3, #8
 800b706:	9303      	str	r3, [sp, #12]
 800b708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b70a:	4433      	add	r3, r6
 800b70c:	9309      	str	r3, [sp, #36]	; 0x24
 800b70e:	e768      	b.n	800b5e2 <_svfiprintf_r+0x4e>
 800b710:	fb0c 3202 	mla	r2, ip, r2, r3
 800b714:	460c      	mov	r4, r1
 800b716:	2001      	movs	r0, #1
 800b718:	e7a6      	b.n	800b668 <_svfiprintf_r+0xd4>
 800b71a:	2300      	movs	r3, #0
 800b71c:	3401      	adds	r4, #1
 800b71e:	9305      	str	r3, [sp, #20]
 800b720:	4619      	mov	r1, r3
 800b722:	f04f 0c0a 	mov.w	ip, #10
 800b726:	4620      	mov	r0, r4
 800b728:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b72c:	3a30      	subs	r2, #48	; 0x30
 800b72e:	2a09      	cmp	r2, #9
 800b730:	d903      	bls.n	800b73a <_svfiprintf_r+0x1a6>
 800b732:	2b00      	cmp	r3, #0
 800b734:	d0c6      	beq.n	800b6c4 <_svfiprintf_r+0x130>
 800b736:	9105      	str	r1, [sp, #20]
 800b738:	e7c4      	b.n	800b6c4 <_svfiprintf_r+0x130>
 800b73a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b73e:	4604      	mov	r4, r0
 800b740:	2301      	movs	r3, #1
 800b742:	e7f0      	b.n	800b726 <_svfiprintf_r+0x192>
 800b744:	ab03      	add	r3, sp, #12
 800b746:	9300      	str	r3, [sp, #0]
 800b748:	462a      	mov	r2, r5
 800b74a:	4b0f      	ldr	r3, [pc, #60]	; (800b788 <_svfiprintf_r+0x1f4>)
 800b74c:	a904      	add	r1, sp, #16
 800b74e:	4638      	mov	r0, r7
 800b750:	f3af 8000 	nop.w
 800b754:	1c42      	adds	r2, r0, #1
 800b756:	4606      	mov	r6, r0
 800b758:	d1d6      	bne.n	800b708 <_svfiprintf_r+0x174>
 800b75a:	89ab      	ldrh	r3, [r5, #12]
 800b75c:	065b      	lsls	r3, r3, #25
 800b75e:	f53f af2d 	bmi.w	800b5bc <_svfiprintf_r+0x28>
 800b762:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b764:	b01d      	add	sp, #116	; 0x74
 800b766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b76a:	ab03      	add	r3, sp, #12
 800b76c:	9300      	str	r3, [sp, #0]
 800b76e:	462a      	mov	r2, r5
 800b770:	4b05      	ldr	r3, [pc, #20]	; (800b788 <_svfiprintf_r+0x1f4>)
 800b772:	a904      	add	r1, sp, #16
 800b774:	4638      	mov	r0, r7
 800b776:	f000 f879 	bl	800b86c <_printf_i>
 800b77a:	e7eb      	b.n	800b754 <_svfiprintf_r+0x1c0>
 800b77c:	0800c72c 	.word	0x0800c72c
 800b780:	0800c736 	.word	0x0800c736
 800b784:	00000000 	.word	0x00000000
 800b788:	0800b4e1 	.word	0x0800b4e1
 800b78c:	0800c732 	.word	0x0800c732

0800b790 <_printf_common>:
 800b790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b794:	4616      	mov	r6, r2
 800b796:	4699      	mov	r9, r3
 800b798:	688a      	ldr	r2, [r1, #8]
 800b79a:	690b      	ldr	r3, [r1, #16]
 800b79c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	bfb8      	it	lt
 800b7a4:	4613      	movlt	r3, r2
 800b7a6:	6033      	str	r3, [r6, #0]
 800b7a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b7ac:	4607      	mov	r7, r0
 800b7ae:	460c      	mov	r4, r1
 800b7b0:	b10a      	cbz	r2, 800b7b6 <_printf_common+0x26>
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	6033      	str	r3, [r6, #0]
 800b7b6:	6823      	ldr	r3, [r4, #0]
 800b7b8:	0699      	lsls	r1, r3, #26
 800b7ba:	bf42      	ittt	mi
 800b7bc:	6833      	ldrmi	r3, [r6, #0]
 800b7be:	3302      	addmi	r3, #2
 800b7c0:	6033      	strmi	r3, [r6, #0]
 800b7c2:	6825      	ldr	r5, [r4, #0]
 800b7c4:	f015 0506 	ands.w	r5, r5, #6
 800b7c8:	d106      	bne.n	800b7d8 <_printf_common+0x48>
 800b7ca:	f104 0a19 	add.w	sl, r4, #25
 800b7ce:	68e3      	ldr	r3, [r4, #12]
 800b7d0:	6832      	ldr	r2, [r6, #0]
 800b7d2:	1a9b      	subs	r3, r3, r2
 800b7d4:	42ab      	cmp	r3, r5
 800b7d6:	dc26      	bgt.n	800b826 <_printf_common+0x96>
 800b7d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b7dc:	1e13      	subs	r3, r2, #0
 800b7de:	6822      	ldr	r2, [r4, #0]
 800b7e0:	bf18      	it	ne
 800b7e2:	2301      	movne	r3, #1
 800b7e4:	0692      	lsls	r2, r2, #26
 800b7e6:	d42b      	bmi.n	800b840 <_printf_common+0xb0>
 800b7e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b7ec:	4649      	mov	r1, r9
 800b7ee:	4638      	mov	r0, r7
 800b7f0:	47c0      	blx	r8
 800b7f2:	3001      	adds	r0, #1
 800b7f4:	d01e      	beq.n	800b834 <_printf_common+0xa4>
 800b7f6:	6823      	ldr	r3, [r4, #0]
 800b7f8:	6922      	ldr	r2, [r4, #16]
 800b7fa:	f003 0306 	and.w	r3, r3, #6
 800b7fe:	2b04      	cmp	r3, #4
 800b800:	bf02      	ittt	eq
 800b802:	68e5      	ldreq	r5, [r4, #12]
 800b804:	6833      	ldreq	r3, [r6, #0]
 800b806:	1aed      	subeq	r5, r5, r3
 800b808:	68a3      	ldr	r3, [r4, #8]
 800b80a:	bf0c      	ite	eq
 800b80c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b810:	2500      	movne	r5, #0
 800b812:	4293      	cmp	r3, r2
 800b814:	bfc4      	itt	gt
 800b816:	1a9b      	subgt	r3, r3, r2
 800b818:	18ed      	addgt	r5, r5, r3
 800b81a:	2600      	movs	r6, #0
 800b81c:	341a      	adds	r4, #26
 800b81e:	42b5      	cmp	r5, r6
 800b820:	d11a      	bne.n	800b858 <_printf_common+0xc8>
 800b822:	2000      	movs	r0, #0
 800b824:	e008      	b.n	800b838 <_printf_common+0xa8>
 800b826:	2301      	movs	r3, #1
 800b828:	4652      	mov	r2, sl
 800b82a:	4649      	mov	r1, r9
 800b82c:	4638      	mov	r0, r7
 800b82e:	47c0      	blx	r8
 800b830:	3001      	adds	r0, #1
 800b832:	d103      	bne.n	800b83c <_printf_common+0xac>
 800b834:	f04f 30ff 	mov.w	r0, #4294967295
 800b838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b83c:	3501      	adds	r5, #1
 800b83e:	e7c6      	b.n	800b7ce <_printf_common+0x3e>
 800b840:	18e1      	adds	r1, r4, r3
 800b842:	1c5a      	adds	r2, r3, #1
 800b844:	2030      	movs	r0, #48	; 0x30
 800b846:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b84a:	4422      	add	r2, r4
 800b84c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b850:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b854:	3302      	adds	r3, #2
 800b856:	e7c7      	b.n	800b7e8 <_printf_common+0x58>
 800b858:	2301      	movs	r3, #1
 800b85a:	4622      	mov	r2, r4
 800b85c:	4649      	mov	r1, r9
 800b85e:	4638      	mov	r0, r7
 800b860:	47c0      	blx	r8
 800b862:	3001      	adds	r0, #1
 800b864:	d0e6      	beq.n	800b834 <_printf_common+0xa4>
 800b866:	3601      	adds	r6, #1
 800b868:	e7d9      	b.n	800b81e <_printf_common+0x8e>
	...

0800b86c <_printf_i>:
 800b86c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b870:	7e0f      	ldrb	r7, [r1, #24]
 800b872:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b874:	2f78      	cmp	r7, #120	; 0x78
 800b876:	4691      	mov	r9, r2
 800b878:	4680      	mov	r8, r0
 800b87a:	460c      	mov	r4, r1
 800b87c:	469a      	mov	sl, r3
 800b87e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b882:	d807      	bhi.n	800b894 <_printf_i+0x28>
 800b884:	2f62      	cmp	r7, #98	; 0x62
 800b886:	d80a      	bhi.n	800b89e <_printf_i+0x32>
 800b888:	2f00      	cmp	r7, #0
 800b88a:	f000 80d4 	beq.w	800ba36 <_printf_i+0x1ca>
 800b88e:	2f58      	cmp	r7, #88	; 0x58
 800b890:	f000 80c0 	beq.w	800ba14 <_printf_i+0x1a8>
 800b894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b898:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b89c:	e03a      	b.n	800b914 <_printf_i+0xa8>
 800b89e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b8a2:	2b15      	cmp	r3, #21
 800b8a4:	d8f6      	bhi.n	800b894 <_printf_i+0x28>
 800b8a6:	a101      	add	r1, pc, #4	; (adr r1, 800b8ac <_printf_i+0x40>)
 800b8a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b8ac:	0800b905 	.word	0x0800b905
 800b8b0:	0800b919 	.word	0x0800b919
 800b8b4:	0800b895 	.word	0x0800b895
 800b8b8:	0800b895 	.word	0x0800b895
 800b8bc:	0800b895 	.word	0x0800b895
 800b8c0:	0800b895 	.word	0x0800b895
 800b8c4:	0800b919 	.word	0x0800b919
 800b8c8:	0800b895 	.word	0x0800b895
 800b8cc:	0800b895 	.word	0x0800b895
 800b8d0:	0800b895 	.word	0x0800b895
 800b8d4:	0800b895 	.word	0x0800b895
 800b8d8:	0800ba1d 	.word	0x0800ba1d
 800b8dc:	0800b945 	.word	0x0800b945
 800b8e0:	0800b9d7 	.word	0x0800b9d7
 800b8e4:	0800b895 	.word	0x0800b895
 800b8e8:	0800b895 	.word	0x0800b895
 800b8ec:	0800ba3f 	.word	0x0800ba3f
 800b8f0:	0800b895 	.word	0x0800b895
 800b8f4:	0800b945 	.word	0x0800b945
 800b8f8:	0800b895 	.word	0x0800b895
 800b8fc:	0800b895 	.word	0x0800b895
 800b900:	0800b9df 	.word	0x0800b9df
 800b904:	682b      	ldr	r3, [r5, #0]
 800b906:	1d1a      	adds	r2, r3, #4
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	602a      	str	r2, [r5, #0]
 800b90c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b910:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b914:	2301      	movs	r3, #1
 800b916:	e09f      	b.n	800ba58 <_printf_i+0x1ec>
 800b918:	6820      	ldr	r0, [r4, #0]
 800b91a:	682b      	ldr	r3, [r5, #0]
 800b91c:	0607      	lsls	r7, r0, #24
 800b91e:	f103 0104 	add.w	r1, r3, #4
 800b922:	6029      	str	r1, [r5, #0]
 800b924:	d501      	bpl.n	800b92a <_printf_i+0xbe>
 800b926:	681e      	ldr	r6, [r3, #0]
 800b928:	e003      	b.n	800b932 <_printf_i+0xc6>
 800b92a:	0646      	lsls	r6, r0, #25
 800b92c:	d5fb      	bpl.n	800b926 <_printf_i+0xba>
 800b92e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b932:	2e00      	cmp	r6, #0
 800b934:	da03      	bge.n	800b93e <_printf_i+0xd2>
 800b936:	232d      	movs	r3, #45	; 0x2d
 800b938:	4276      	negs	r6, r6
 800b93a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b93e:	485a      	ldr	r0, [pc, #360]	; (800baa8 <_printf_i+0x23c>)
 800b940:	230a      	movs	r3, #10
 800b942:	e012      	b.n	800b96a <_printf_i+0xfe>
 800b944:	682b      	ldr	r3, [r5, #0]
 800b946:	6820      	ldr	r0, [r4, #0]
 800b948:	1d19      	adds	r1, r3, #4
 800b94a:	6029      	str	r1, [r5, #0]
 800b94c:	0605      	lsls	r5, r0, #24
 800b94e:	d501      	bpl.n	800b954 <_printf_i+0xe8>
 800b950:	681e      	ldr	r6, [r3, #0]
 800b952:	e002      	b.n	800b95a <_printf_i+0xee>
 800b954:	0641      	lsls	r1, r0, #25
 800b956:	d5fb      	bpl.n	800b950 <_printf_i+0xe4>
 800b958:	881e      	ldrh	r6, [r3, #0]
 800b95a:	4853      	ldr	r0, [pc, #332]	; (800baa8 <_printf_i+0x23c>)
 800b95c:	2f6f      	cmp	r7, #111	; 0x6f
 800b95e:	bf0c      	ite	eq
 800b960:	2308      	moveq	r3, #8
 800b962:	230a      	movne	r3, #10
 800b964:	2100      	movs	r1, #0
 800b966:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b96a:	6865      	ldr	r5, [r4, #4]
 800b96c:	60a5      	str	r5, [r4, #8]
 800b96e:	2d00      	cmp	r5, #0
 800b970:	bfa2      	ittt	ge
 800b972:	6821      	ldrge	r1, [r4, #0]
 800b974:	f021 0104 	bicge.w	r1, r1, #4
 800b978:	6021      	strge	r1, [r4, #0]
 800b97a:	b90e      	cbnz	r6, 800b980 <_printf_i+0x114>
 800b97c:	2d00      	cmp	r5, #0
 800b97e:	d04b      	beq.n	800ba18 <_printf_i+0x1ac>
 800b980:	4615      	mov	r5, r2
 800b982:	fbb6 f1f3 	udiv	r1, r6, r3
 800b986:	fb03 6711 	mls	r7, r3, r1, r6
 800b98a:	5dc7      	ldrb	r7, [r0, r7]
 800b98c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b990:	4637      	mov	r7, r6
 800b992:	42bb      	cmp	r3, r7
 800b994:	460e      	mov	r6, r1
 800b996:	d9f4      	bls.n	800b982 <_printf_i+0x116>
 800b998:	2b08      	cmp	r3, #8
 800b99a:	d10b      	bne.n	800b9b4 <_printf_i+0x148>
 800b99c:	6823      	ldr	r3, [r4, #0]
 800b99e:	07de      	lsls	r6, r3, #31
 800b9a0:	d508      	bpl.n	800b9b4 <_printf_i+0x148>
 800b9a2:	6923      	ldr	r3, [r4, #16]
 800b9a4:	6861      	ldr	r1, [r4, #4]
 800b9a6:	4299      	cmp	r1, r3
 800b9a8:	bfde      	ittt	le
 800b9aa:	2330      	movle	r3, #48	; 0x30
 800b9ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b9b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b9b4:	1b52      	subs	r2, r2, r5
 800b9b6:	6122      	str	r2, [r4, #16]
 800b9b8:	f8cd a000 	str.w	sl, [sp]
 800b9bc:	464b      	mov	r3, r9
 800b9be:	aa03      	add	r2, sp, #12
 800b9c0:	4621      	mov	r1, r4
 800b9c2:	4640      	mov	r0, r8
 800b9c4:	f7ff fee4 	bl	800b790 <_printf_common>
 800b9c8:	3001      	adds	r0, #1
 800b9ca:	d14a      	bne.n	800ba62 <_printf_i+0x1f6>
 800b9cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b9d0:	b004      	add	sp, #16
 800b9d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9d6:	6823      	ldr	r3, [r4, #0]
 800b9d8:	f043 0320 	orr.w	r3, r3, #32
 800b9dc:	6023      	str	r3, [r4, #0]
 800b9de:	4833      	ldr	r0, [pc, #204]	; (800baac <_printf_i+0x240>)
 800b9e0:	2778      	movs	r7, #120	; 0x78
 800b9e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b9e6:	6823      	ldr	r3, [r4, #0]
 800b9e8:	6829      	ldr	r1, [r5, #0]
 800b9ea:	061f      	lsls	r7, r3, #24
 800b9ec:	f851 6b04 	ldr.w	r6, [r1], #4
 800b9f0:	d402      	bmi.n	800b9f8 <_printf_i+0x18c>
 800b9f2:	065f      	lsls	r7, r3, #25
 800b9f4:	bf48      	it	mi
 800b9f6:	b2b6      	uxthmi	r6, r6
 800b9f8:	07df      	lsls	r7, r3, #31
 800b9fa:	bf48      	it	mi
 800b9fc:	f043 0320 	orrmi.w	r3, r3, #32
 800ba00:	6029      	str	r1, [r5, #0]
 800ba02:	bf48      	it	mi
 800ba04:	6023      	strmi	r3, [r4, #0]
 800ba06:	b91e      	cbnz	r6, 800ba10 <_printf_i+0x1a4>
 800ba08:	6823      	ldr	r3, [r4, #0]
 800ba0a:	f023 0320 	bic.w	r3, r3, #32
 800ba0e:	6023      	str	r3, [r4, #0]
 800ba10:	2310      	movs	r3, #16
 800ba12:	e7a7      	b.n	800b964 <_printf_i+0xf8>
 800ba14:	4824      	ldr	r0, [pc, #144]	; (800baa8 <_printf_i+0x23c>)
 800ba16:	e7e4      	b.n	800b9e2 <_printf_i+0x176>
 800ba18:	4615      	mov	r5, r2
 800ba1a:	e7bd      	b.n	800b998 <_printf_i+0x12c>
 800ba1c:	682b      	ldr	r3, [r5, #0]
 800ba1e:	6826      	ldr	r6, [r4, #0]
 800ba20:	6961      	ldr	r1, [r4, #20]
 800ba22:	1d18      	adds	r0, r3, #4
 800ba24:	6028      	str	r0, [r5, #0]
 800ba26:	0635      	lsls	r5, r6, #24
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	d501      	bpl.n	800ba30 <_printf_i+0x1c4>
 800ba2c:	6019      	str	r1, [r3, #0]
 800ba2e:	e002      	b.n	800ba36 <_printf_i+0x1ca>
 800ba30:	0670      	lsls	r0, r6, #25
 800ba32:	d5fb      	bpl.n	800ba2c <_printf_i+0x1c0>
 800ba34:	8019      	strh	r1, [r3, #0]
 800ba36:	2300      	movs	r3, #0
 800ba38:	6123      	str	r3, [r4, #16]
 800ba3a:	4615      	mov	r5, r2
 800ba3c:	e7bc      	b.n	800b9b8 <_printf_i+0x14c>
 800ba3e:	682b      	ldr	r3, [r5, #0]
 800ba40:	1d1a      	adds	r2, r3, #4
 800ba42:	602a      	str	r2, [r5, #0]
 800ba44:	681d      	ldr	r5, [r3, #0]
 800ba46:	6862      	ldr	r2, [r4, #4]
 800ba48:	2100      	movs	r1, #0
 800ba4a:	4628      	mov	r0, r5
 800ba4c:	f7f4 fbc0 	bl	80001d0 <memchr>
 800ba50:	b108      	cbz	r0, 800ba56 <_printf_i+0x1ea>
 800ba52:	1b40      	subs	r0, r0, r5
 800ba54:	6060      	str	r0, [r4, #4]
 800ba56:	6863      	ldr	r3, [r4, #4]
 800ba58:	6123      	str	r3, [r4, #16]
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba60:	e7aa      	b.n	800b9b8 <_printf_i+0x14c>
 800ba62:	6923      	ldr	r3, [r4, #16]
 800ba64:	462a      	mov	r2, r5
 800ba66:	4649      	mov	r1, r9
 800ba68:	4640      	mov	r0, r8
 800ba6a:	47d0      	blx	sl
 800ba6c:	3001      	adds	r0, #1
 800ba6e:	d0ad      	beq.n	800b9cc <_printf_i+0x160>
 800ba70:	6823      	ldr	r3, [r4, #0]
 800ba72:	079b      	lsls	r3, r3, #30
 800ba74:	d413      	bmi.n	800ba9e <_printf_i+0x232>
 800ba76:	68e0      	ldr	r0, [r4, #12]
 800ba78:	9b03      	ldr	r3, [sp, #12]
 800ba7a:	4298      	cmp	r0, r3
 800ba7c:	bfb8      	it	lt
 800ba7e:	4618      	movlt	r0, r3
 800ba80:	e7a6      	b.n	800b9d0 <_printf_i+0x164>
 800ba82:	2301      	movs	r3, #1
 800ba84:	4632      	mov	r2, r6
 800ba86:	4649      	mov	r1, r9
 800ba88:	4640      	mov	r0, r8
 800ba8a:	47d0      	blx	sl
 800ba8c:	3001      	adds	r0, #1
 800ba8e:	d09d      	beq.n	800b9cc <_printf_i+0x160>
 800ba90:	3501      	adds	r5, #1
 800ba92:	68e3      	ldr	r3, [r4, #12]
 800ba94:	9903      	ldr	r1, [sp, #12]
 800ba96:	1a5b      	subs	r3, r3, r1
 800ba98:	42ab      	cmp	r3, r5
 800ba9a:	dcf2      	bgt.n	800ba82 <_printf_i+0x216>
 800ba9c:	e7eb      	b.n	800ba76 <_printf_i+0x20a>
 800ba9e:	2500      	movs	r5, #0
 800baa0:	f104 0619 	add.w	r6, r4, #25
 800baa4:	e7f5      	b.n	800ba92 <_printf_i+0x226>
 800baa6:	bf00      	nop
 800baa8:	0800c73d 	.word	0x0800c73d
 800baac:	0800c74e 	.word	0x0800c74e

0800bab0 <memmove>:
 800bab0:	4288      	cmp	r0, r1
 800bab2:	b510      	push	{r4, lr}
 800bab4:	eb01 0402 	add.w	r4, r1, r2
 800bab8:	d902      	bls.n	800bac0 <memmove+0x10>
 800baba:	4284      	cmp	r4, r0
 800babc:	4623      	mov	r3, r4
 800babe:	d807      	bhi.n	800bad0 <memmove+0x20>
 800bac0:	1e43      	subs	r3, r0, #1
 800bac2:	42a1      	cmp	r1, r4
 800bac4:	d008      	beq.n	800bad8 <memmove+0x28>
 800bac6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800baca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bace:	e7f8      	b.n	800bac2 <memmove+0x12>
 800bad0:	4402      	add	r2, r0
 800bad2:	4601      	mov	r1, r0
 800bad4:	428a      	cmp	r2, r1
 800bad6:	d100      	bne.n	800bada <memmove+0x2a>
 800bad8:	bd10      	pop	{r4, pc}
 800bada:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bade:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bae2:	e7f7      	b.n	800bad4 <memmove+0x24>

0800bae4 <_realloc_r>:
 800bae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bae8:	4680      	mov	r8, r0
 800baea:	4614      	mov	r4, r2
 800baec:	460e      	mov	r6, r1
 800baee:	b921      	cbnz	r1, 800bafa <_realloc_r+0x16>
 800baf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800baf4:	4611      	mov	r1, r2
 800baf6:	f7ff bba9 	b.w	800b24c <_malloc_r>
 800bafa:	b92a      	cbnz	r2, 800bb08 <_realloc_r+0x24>
 800bafc:	f7ff fca4 	bl	800b448 <_free_r>
 800bb00:	4625      	mov	r5, r4
 800bb02:	4628      	mov	r0, r5
 800bb04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb08:	f000 f81b 	bl	800bb42 <_malloc_usable_size_r>
 800bb0c:	4284      	cmp	r4, r0
 800bb0e:	4607      	mov	r7, r0
 800bb10:	d802      	bhi.n	800bb18 <_realloc_r+0x34>
 800bb12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bb16:	d812      	bhi.n	800bb3e <_realloc_r+0x5a>
 800bb18:	4621      	mov	r1, r4
 800bb1a:	4640      	mov	r0, r8
 800bb1c:	f7ff fb96 	bl	800b24c <_malloc_r>
 800bb20:	4605      	mov	r5, r0
 800bb22:	2800      	cmp	r0, #0
 800bb24:	d0ed      	beq.n	800bb02 <_realloc_r+0x1e>
 800bb26:	42bc      	cmp	r4, r7
 800bb28:	4622      	mov	r2, r4
 800bb2a:	4631      	mov	r1, r6
 800bb2c:	bf28      	it	cs
 800bb2e:	463a      	movcs	r2, r7
 800bb30:	f7ff fc7c 	bl	800b42c <memcpy>
 800bb34:	4631      	mov	r1, r6
 800bb36:	4640      	mov	r0, r8
 800bb38:	f7ff fc86 	bl	800b448 <_free_r>
 800bb3c:	e7e1      	b.n	800bb02 <_realloc_r+0x1e>
 800bb3e:	4635      	mov	r5, r6
 800bb40:	e7df      	b.n	800bb02 <_realloc_r+0x1e>

0800bb42 <_malloc_usable_size_r>:
 800bb42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb46:	1f18      	subs	r0, r3, #4
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	bfbc      	itt	lt
 800bb4c:	580b      	ldrlt	r3, [r1, r0]
 800bb4e:	18c0      	addlt	r0, r0, r3
 800bb50:	4770      	bx	lr
	...

0800bb54 <_init>:
 800bb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb56:	bf00      	nop
 800bb58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb5a:	bc08      	pop	{r3}
 800bb5c:	469e      	mov	lr, r3
 800bb5e:	4770      	bx	lr

0800bb60 <_fini>:
 800bb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb62:	bf00      	nop
 800bb64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb66:	bc08      	pop	{r3}
 800bb68:	469e      	mov	lr, r3
 800bb6a:	4770      	bx	lr
