
MDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b00  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ba8  08007c90  08007c90  00017c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008838  08008838  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08008838  08008838  00018838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008840  08008840  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008840  08008840  00018840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008844  08008844  00018844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08008848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00005000  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005060  20005060  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   000178f8  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003574  00000000  00000000  000379cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001578  00000000  00000000  0003af40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010b1  00000000  00000000  0003c4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00003704  00000000  00000000  0003d569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017d83  00000000  00000000  00040c6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d5bc9  00000000  00000000  000589f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005f64  00000000  00000000  0012e5bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  00134520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007c78 	.word	0x08007c78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08007c78 	.word	0x08007c78

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f000 fe32 	bl	80011d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f852 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f000 fa2a 	bl	80009d0 <MX_GPIO_Init>
  MX_TIM8_Init();
 800057c:	f000 f954 	bl	8000828 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000580:	f000 f8aa 	bl	80006d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000584:	f000 f8fc 	bl	8000780 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000588:	f000 f9f8 	bl	800097c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 800058c:	f006 fe44 	bl	8007218 <OLED_Init>

  HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 10);
 8000590:	220a      	movs	r2, #10
 8000592:	4914      	ldr	r1, [pc, #80]	; (80005e4 <main+0x78>)
 8000594:	4814      	ldr	r0, [pc, #80]	; (80005e8 <main+0x7c>)
 8000596:	f002 ff9c 	bl	80034d2 <HAL_UART_Receive_IT>
  //HAL_UART_Transmit_IT(&huart3, (uint8_t *)aRxBuffer, 10);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800059a:	f003 ff49 	bl	8004430 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800059e:	4a13      	ldr	r2, [pc, #76]	; (80005ec <main+0x80>)
 80005a0:	2100      	movs	r1, #0
 80005a2:	4813      	ldr	r0, [pc, #76]	; (80005f0 <main+0x84>)
 80005a4:	f003 ff8e 	bl	80044c4 <osThreadNew>
 80005a8:	4603      	mov	r3, r0
 80005aa:	4a12      	ldr	r2, [pc, #72]	; (80005f4 <main+0x88>)
 80005ac:	6013      	str	r3, [r2, #0]

  /* creation of show */
  showHandle = osThreadNew(showMsg, NULL, &show_attributes);
 80005ae:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <main+0x8c>)
 80005b0:	2100      	movs	r1, #0
 80005b2:	4812      	ldr	r0, [pc, #72]	; (80005fc <main+0x90>)
 80005b4:	f003 ff86 	bl	80044c4 <osThreadNew>
 80005b8:	4603      	mov	r3, r0
 80005ba:	4a11      	ldr	r2, [pc, #68]	; (8000600 <main+0x94>)
 80005bc:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motors, NULL, &MotorTask_attributes);
 80005be:	4a11      	ldr	r2, [pc, #68]	; (8000604 <main+0x98>)
 80005c0:	2100      	movs	r1, #0
 80005c2:	4811      	ldr	r0, [pc, #68]	; (8000608 <main+0x9c>)
 80005c4:	f003 ff7e 	bl	80044c4 <osThreadNew>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4a10      	ldr	r2, [pc, #64]	; (800060c <main+0xa0>)
 80005cc:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(encoder, NULL, &EncoderTask_attributes);
 80005ce:	4a10      	ldr	r2, [pc, #64]	; (8000610 <main+0xa4>)
 80005d0:	2100      	movs	r1, #0
 80005d2:	4810      	ldr	r0, [pc, #64]	; (8000614 <main+0xa8>)
 80005d4:	f003 ff76 	bl	80044c4 <osThreadNew>
 80005d8:	4603      	mov	r3, r0
 80005da:	4a0f      	ldr	r2, [pc, #60]	; (8000618 <main+0xac>)
 80005dc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005de:	f003 ff4b 	bl	8004478 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e2:	e7fe      	b.n	80005e2 <main+0x76>
 80005e4:	200001ac 	.word	0x200001ac
 80005e8:	20000154 	.word	0x20000154
 80005ec:	08007cf8 	.word	0x08007cf8
 80005f0:	08000b0d 	.word	0x08000b0d
 80005f4:	2000019c 	.word	0x2000019c
 80005f8:	08007d1c 	.word	0x08007d1c
 80005fc:	08000b59 	.word	0x08000b59
 8000600:	200001a0 	.word	0x200001a0
 8000604:	08007d40 	.word	0x08007d40
 8000608:	08000bb1 	.word	0x08000bb1
 800060c:	200001a4 	.word	0x200001a4
 8000610:	08007d64 	.word	0x08007d64
 8000614:	08000c79 	.word	0x08000c79
 8000618:	200001a8 	.word	0x200001a8

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f006 fea0 	bl	8007370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <SystemClock_Config+0xb4>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a21      	ldr	r2, [pc, #132]	; (80006d0 <SystemClock_Config+0xb4>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <SystemClock_Config+0xb4>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <SystemClock_Config+0xb8>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a1b      	ldr	r2, [pc, #108]	; (80006d4 <SystemClock_Config+0xb8>)
 8000666:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <SystemClock_Config+0xb8>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000684:	2300      	movs	r3, #0
 8000686:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0320 	add.w	r3, r7, #32
 800068c:	4618      	mov	r0, r3
 800068e:	f001 f9d5 	bl	8001a3c <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000698:	f000 fb9a 	bl	8000dd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a0:	2300      	movs	r3, #0
 80006a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 fc38 	bl	8001f2c <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006c2:	f000 fb85 	bl	8000dd0 <Error_Handler>
  }
}
 80006c6:	bf00      	nop
 80006c8:	3750      	adds	r7, #80	; 0x50
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08c      	sub	sp, #48	; 0x30
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006de:	f107 030c 	add.w	r3, r7, #12
 80006e2:	2224      	movs	r2, #36	; 0x24
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f006 fe42 	bl	8007370 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006f4:	4b21      	ldr	r3, [pc, #132]	; (800077c <MX_TIM2_Init+0xa4>)
 80006f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006fc:	4b1f      	ldr	r3, [pc, #124]	; (800077c <MX_TIM2_Init+0xa4>)
 80006fe:	2200      	movs	r2, #0
 8000700:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <MX_TIM2_Init+0xa4>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000708:	4b1c      	ldr	r3, [pc, #112]	; (800077c <MX_TIM2_Init+0xa4>)
 800070a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800070e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000710:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_TIM2_Init+0xa4>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000716:	4b19      	ldr	r3, [pc, #100]	; (800077c <MX_TIM2_Init+0xa4>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800071c:	2303      	movs	r3, #3
 800071e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000724:	2301      	movs	r3, #1
 8000726:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800072c:	230a      	movs	r3, #10
 800072e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000730:	2300      	movs	r3, #0
 8000732:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000734:	2301      	movs	r3, #1
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	4619      	mov	r1, r3
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <MX_TIM2_Init+0xa4>)
 8000748:	f001 ff40 	bl	80025cc <HAL_TIM_Encoder_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000752:	f000 fb3d 	bl	8000dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	4619      	mov	r1, r3
 8000762:	4806      	ldr	r0, [pc, #24]	; (800077c <MX_TIM2_Init+0xa4>)
 8000764:	f002 fd0c 	bl	8003180 <HAL_TIMEx_MasterConfigSynchronization>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800076e:	f000 fb2f 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	3730      	adds	r7, #48	; 0x30
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	2000007c 	.word	0x2000007c

08000780 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08c      	sub	sp, #48	; 0x30
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	2224      	movs	r2, #36	; 0x24
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f006 fdee 	bl	8007370 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800079c:	4b20      	ldr	r3, [pc, #128]	; (8000820 <MX_TIM3_Init+0xa0>)
 800079e:	4a21      	ldr	r2, [pc, #132]	; (8000824 <MX_TIM3_Init+0xa4>)
 80007a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007a2:	4b1f      	ldr	r3, [pc, #124]	; (8000820 <MX_TIM3_Init+0xa0>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a8:	4b1d      	ldr	r3, [pc, #116]	; (8000820 <MX_TIM3_Init+0xa0>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_TIM3_Init+0xa0>)
 80007b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b6:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <MX_TIM3_Init+0xa0>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007bc:	4b18      	ldr	r3, [pc, #96]	; (8000820 <MX_TIM3_Init+0xa0>)
 80007be:	2200      	movs	r2, #0
 80007c0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80007c2:	2303      	movs	r3, #3
 80007c4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80007ca:	2301      	movs	r3, #1
 80007cc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80007d2:	230a      	movs	r3, #10
 80007d4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80007d6:	2300      	movs	r3, #0
 80007d8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007da:	2301      	movs	r3, #1
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80007e2:	230a      	movs	r3, #10
 80007e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80007e6:	f107 030c 	add.w	r3, r7, #12
 80007ea:	4619      	mov	r1, r3
 80007ec:	480c      	ldr	r0, [pc, #48]	; (8000820 <MX_TIM3_Init+0xa0>)
 80007ee:	f001 feed 	bl	80025cc <HAL_TIM_Encoder_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80007f8:	f000 faea 	bl	8000dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fc:	2300      	movs	r3, #0
 80007fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000800:	2300      	movs	r3, #0
 8000802:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	4619      	mov	r1, r3
 8000808:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_TIM3_Init+0xa0>)
 800080a:	f002 fcb9 	bl	8003180 <HAL_TIMEx_MasterConfigSynchronization>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000814:	f000 fadc 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000818:	bf00      	nop
 800081a:	3730      	adds	r7, #48	; 0x30
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200000c4 	.word	0x200000c4
 8000824:	40000400 	.word	0x40000400

08000828 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b096      	sub	sp, #88	; 0x58
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800082e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800083c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]
 8000856:	615a      	str	r2, [r3, #20]
 8000858:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2220      	movs	r2, #32
 800085e:	2100      	movs	r1, #0
 8000860:	4618      	mov	r0, r3
 8000862:	f006 fd85 	bl	8007370 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000866:	4b43      	ldr	r3, [pc, #268]	; (8000974 <MX_TIM8_Init+0x14c>)
 8000868:	4a43      	ldr	r2, [pc, #268]	; (8000978 <MX_TIM8_Init+0x150>)
 800086a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800086c:	4b41      	ldr	r3, [pc, #260]	; (8000974 <MX_TIM8_Init+0x14c>)
 800086e:	2200      	movs	r2, #0
 8000870:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000872:	4b40      	ldr	r3, [pc, #256]	; (8000974 <MX_TIM8_Init+0x14c>)
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8000878:	4b3e      	ldr	r3, [pc, #248]	; (8000974 <MX_TIM8_Init+0x14c>)
 800087a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800087e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000880:	4b3c      	ldr	r3, [pc, #240]	; (8000974 <MX_TIM8_Init+0x14c>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000886:	4b3b      	ldr	r3, [pc, #236]	; (8000974 <MX_TIM8_Init+0x14c>)
 8000888:	2200      	movs	r2, #0
 800088a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088c:	4b39      	ldr	r3, [pc, #228]	; (8000974 <MX_TIM8_Init+0x14c>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000892:	4838      	ldr	r0, [pc, #224]	; (8000974 <MX_TIM8_Init+0x14c>)
 8000894:	f001 fd2a 	bl	80022ec <HAL_TIM_Base_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800089e:	f000 fa97 	bl	8000dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80008a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008ac:	4619      	mov	r1, r3
 80008ae:	4831      	ldr	r0, [pc, #196]	; (8000974 <MX_TIM8_Init+0x14c>)
 80008b0:	f002 f882 	bl	80029b8 <HAL_TIM_ConfigClockSource>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80008ba:	f000 fa89 	bl	8000dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80008be:	482d      	ldr	r0, [pc, #180]	; (8000974 <MX_TIM8_Init+0x14c>)
 80008c0:	f001 fd63 	bl	800238a <HAL_TIM_PWM_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80008ca:	f000 fa81 	bl	8000dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ce:	2300      	movs	r3, #0
 80008d0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80008d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008da:	4619      	mov	r1, r3
 80008dc:	4825      	ldr	r0, [pc, #148]	; (8000974 <MX_TIM8_Init+0x14c>)
 80008de:	f002 fc4f 	bl	8003180 <HAL_TIMEx_MasterConfigSynchronization>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80008e8:	f000 fa72 	bl	8000dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ec:	2360      	movs	r3, #96	; 0x60
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008f8:	2300      	movs	r3, #0
 80008fa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000900:	2300      	movs	r3, #0
 8000902:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000904:	2300      	movs	r3, #0
 8000906:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090c:	2200      	movs	r2, #0
 800090e:	4619      	mov	r1, r3
 8000910:	4818      	ldr	r0, [pc, #96]	; (8000974 <MX_TIM8_Init+0x14c>)
 8000912:	f001 ff8f 	bl	8002834 <HAL_TIM_PWM_ConfigChannel>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800091c:	f000 fa58 	bl	8000dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000924:	2204      	movs	r2, #4
 8000926:	4619      	mov	r1, r3
 8000928:	4812      	ldr	r0, [pc, #72]	; (8000974 <MX_TIM8_Init+0x14c>)
 800092a:	f001 ff83 	bl	8002834 <HAL_TIM_PWM_ConfigChannel>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000934:	f000 fa4c 	bl	8000dd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000938:	2300      	movs	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800093c:	2300      	movs	r3, #0
 800093e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000940:	2300      	movs	r3, #0
 8000942:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800094c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000950:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000952:	2300      	movs	r3, #0
 8000954:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	4619      	mov	r1, r3
 800095a:	4806      	ldr	r0, [pc, #24]	; (8000974 <MX_TIM8_Init+0x14c>)
 800095c:	f002 fc8c 	bl	8003278 <HAL_TIMEx_ConfigBreakDeadTime>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8000966:	f000 fa33 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	3758      	adds	r7, #88	; 0x58
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	2000010c 	.word	0x2000010c
 8000978:	40010400 	.word	0x40010400

0800097c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000980:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_USART3_UART_Init+0x4c>)
 8000982:	4a12      	ldr	r2, [pc, #72]	; (80009cc <MX_USART3_UART_Init+0x50>)
 8000984:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <MX_USART3_UART_Init+0x4c>)
 8000988:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800098c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_USART3_UART_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_USART3_UART_Init+0x4c>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <MX_USART3_UART_Init+0x4c>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <MX_USART3_UART_Init+0x4c>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <MX_USART3_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ac:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <MX_USART3_UART_Init+0x4c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_USART3_UART_Init+0x4c>)
 80009b4:	f002 fcb2 	bl	800331c <HAL_UART_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009be:	f000 fa07 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000154 	.word	0x20000154
 80009cc:	40004800 	.word	0x40004800

080009d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	; 0x28
 80009d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	4b38      	ldr	r3, [pc, #224]	; (8000acc <MX_GPIO_Init+0xfc>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a37      	ldr	r2, [pc, #220]	; (8000acc <MX_GPIO_Init+0xfc>)
 80009f0:	f043 0310 	orr.w	r3, r3, #16
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b35      	ldr	r3, [pc, #212]	; (8000acc <MX_GPIO_Init+0xfc>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0310 	and.w	r3, r3, #16
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	4b31      	ldr	r3, [pc, #196]	; (8000acc <MX_GPIO_Init+0xfc>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a30      	ldr	r2, [pc, #192]	; (8000acc <MX_GPIO_Init+0xfc>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b2e      	ldr	r3, [pc, #184]	; (8000acc <MX_GPIO_Init+0xfc>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	4b2a      	ldr	r3, [pc, #168]	; (8000acc <MX_GPIO_Init+0xfc>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a29      	ldr	r2, [pc, #164]	; (8000acc <MX_GPIO_Init+0xfc>)
 8000a28:	f043 0304 	orr.w	r3, r3, #4
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b27      	ldr	r3, [pc, #156]	; (8000acc <MX_GPIO_Init+0xfc>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0304 	and.w	r3, r3, #4
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	4b23      	ldr	r3, [pc, #140]	; (8000acc <MX_GPIO_Init+0xfc>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a22      	ldr	r2, [pc, #136]	; (8000acc <MX_GPIO_Init+0xfc>)
 8000a44:	f043 0302 	orr.w	r3, r3, #2
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b20      	ldr	r3, [pc, #128]	; (8000acc <MX_GPIO_Init+0xfc>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0302 	and.w	r3, r3, #2
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8000a56:	2200      	movs	r2, #0
 8000a58:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8000a5c:	481c      	ldr	r0, [pc, #112]	; (8000ad0 <MX_GPIO_Init+0x100>)
 8000a5e:	f000 ff91 	bl	8001984 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	213c      	movs	r1, #60	; 0x3c
 8000a66:	481b      	ldr	r0, [pc, #108]	; (8000ad4 <MX_GPIO_Init+0x104>)
 8000a68:	f000 ff8c 	bl	8001984 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8000a6c:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8000a70:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	4812      	ldr	r0, [pc, #72]	; (8000ad0 <MX_GPIO_Init+0x100>)
 8000a86:	f000 fde1 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin;
 8000a8a:	230c      	movs	r3, #12
 8000a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a96:	2302      	movs	r3, #2
 8000a98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <MX_GPIO_Init+0x104>)
 8000aa2:	f000 fdd3 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = BIN1_Pin|BIN2_Pin;
 8000aa6:	2330      	movs	r3, #48	; 0x30
 8000aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_GPIO_Init+0x104>)
 8000abe:	f000 fdc5 	bl	800164c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ac2:	bf00      	nop
 8000ac4:	3728      	adds	r7, #40	; 0x28
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40020000 	.word	0x40020000

08000ad8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]

	UNUSED(huart);

	//enqueue(&q,aRxBuffer);

	HAL_UART_Transmit(&huart3,(uint8_t *) aRxBuffer,10,0xFFFF);
 8000ae0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ae4:	220a      	movs	r2, #10
 8000ae6:	4906      	ldr	r1, [pc, #24]	; (8000b00 <HAL_UART_RxCpltCallback+0x28>)
 8000ae8:	4806      	ldr	r0, [pc, #24]	; (8000b04 <HAL_UART_RxCpltCallback+0x2c>)
 8000aea:	f002 fc67 	bl	80033bc <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000aee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <HAL_UART_RxCpltCallback+0x30>)
 8000af4:	f000 ff5f 	bl	80019b6 <HAL_GPIO_TogglePin>
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	200001ac 	.word	0x200001ac
 8000b04:	20000154 	.word	0x20000154
 8000b08:	40021000 	.word	0x40021000

08000b0c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  uint8_t ch = 'A';
 8000b14:	2341      	movs	r3, #65	; 0x41
 8000b16:	73fb      	strb	r3, [r7, #15]
  for(;;)
  {
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch,1, 0xFFFF);
 8000b18:	f107 010f 	add.w	r1, r7, #15
 8000b1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b20:	2201      	movs	r2, #1
 8000b22:	480b      	ldr	r0, [pc, #44]	; (8000b50 <StartDefaultTask+0x44>)
 8000b24:	f002 fc4a 	bl	80033bc <HAL_UART_Transmit>
	if(ch<'Z')
 8000b28:	7bfb      	ldrb	r3, [r7, #15]
 8000b2a:	2b59      	cmp	r3, #89	; 0x59
 8000b2c:	d804      	bhi.n	8000b38 <StartDefaultTask+0x2c>
		ch++;
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
 8000b30:	3301      	adds	r3, #1
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	73fb      	strb	r3, [r7, #15]
 8000b36:	e001      	b.n	8000b3c <StartDefaultTask+0x30>
	else ch = 'A';
 8000b38:	2341      	movs	r3, #65	; 0x41
 8000b3a:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000b3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b40:	4804      	ldr	r0, [pc, #16]	; (8000b54 <StartDefaultTask+0x48>)
 8000b42:	f000 ff38 	bl	80019b6 <HAL_GPIO_TogglePin>
	osDelay(1000);
 8000b46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b4a:	f003 fd4d 	bl	80045e8 <osDelay>
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch,1, 0xFFFF);
 8000b4e:	e7e3      	b.n	8000b18 <StartDefaultTask+0xc>
 8000b50:	20000154 	.word	0x20000154
 8000b54:	40021000 	.word	0x40021000

08000b58 <showMsg>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_showMsg */
void showMsg(void *argument)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b088      	sub	sp, #32
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN showMsg */
  uint8_t test[20] = "testing\0";
 8000b60:	4a10      	ldr	r2, [pc, #64]	; (8000ba4 <showMsg+0x4c>)
 8000b62:	f107 030c 	add.w	r3, r7, #12
 8000b66:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b68:	c303      	stmia	r3!, {r0, r1}
 8000b6a:	701a      	strb	r2, [r3, #0]
 8000b6c:	f107 0315 	add.w	r3, r7, #21
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	f8c3 2007 	str.w	r2, [r3, #7]

  /* Infinite loop */
  for(;;)
  {
   sprintf(test, "%s\0", aRxBuffer);
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <showMsg+0x50>)
 8000b80:	490a      	ldr	r1, [pc, #40]	; (8000bac <showMsg+0x54>)
 8000b82:	4618      	mov	r0, r3
 8000b84:	f006 fbd4 	bl	8007330 <siprintf>
   OLED_ShowString(10,20,test);
 8000b88:	f107 030c 	add.w	r3, r7, #12
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	2114      	movs	r1, #20
 8000b90:	200a      	movs	r0, #10
 8000b92:	f006 fb0f 	bl	80071b4 <OLED_ShowString>
   OLED_Refresh_Gram();
 8000b96:	f006 f999 	bl	8006ecc <OLED_Refresh_Gram>
   osDelay(1000);
 8000b9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b9e:	f003 fd23 	bl	80045e8 <osDelay>
  {
 8000ba2:	e7ea      	b.n	8000b7a <showMsg+0x22>
 8000ba4:	08007cc0 	.word	0x08007cc0
 8000ba8:	200001ac 	.word	0x200001ac
 8000bac:	08007cbc 	.word	0x08007cbc

08000bb0 <motors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motors */
void motors(void *argument)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motors */
  /* Infinite loop */
  uint16_t pwmVal = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	81fb      	strh	r3, [r7, #14]
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	482c      	ldr	r0, [pc, #176]	; (8000c70 <motors+0xc0>)
 8000bc0:	f001 fc3c 	bl	800243c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000bc4:	2104      	movs	r1, #4
 8000bc6:	482a      	ldr	r0, [pc, #168]	; (8000c70 <motors+0xc0>)
 8000bc8:	f001 fc38 	bl	800243c <HAL_TIM_PWM_Start>

  for(;;)
  {
	//clockwise
	while (pwmVal<4000){
 8000bcc:	e021      	b.n	8000c12 <motors+0x62>
	  	HAL_GPIO_WritePin(GPIOA, AIN2_Pin,  GPIO_PIN_SET);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2104      	movs	r1, #4
 8000bd2:	4828      	ldr	r0, [pc, #160]	; (8000c74 <motors+0xc4>)
 8000bd4:	f000 fed6 	bl	8001984 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2108      	movs	r1, #8
 8000bdc:	4825      	ldr	r0, [pc, #148]	; (8000c74 <motors+0xc4>)
 8000bde:	f000 fed1 	bl	8001984 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8000be2:	2201      	movs	r2, #1
 8000be4:	2120      	movs	r1, #32
 8000be6:	4823      	ldr	r0, [pc, #140]	; (8000c74 <motors+0xc4>)
 8000be8:	f000 fecc 	bl	8001984 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2110      	movs	r1, #16
 8000bf0:	4820      	ldr	r0, [pc, #128]	; (8000c74 <motors+0xc4>)
 8000bf2:	f000 fec7 	bl	8001984 <HAL_GPIO_WritePin>
	  	pwmVal++;
 8000bf6:	89fb      	ldrh	r3, [r7, #14]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	81fb      	strh	r3, [r7, #14]
	  	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmVal);
 8000bfc:	4b1c      	ldr	r3, [pc, #112]	; (8000c70 <motors+0xc0>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	89fa      	ldrh	r2, [r7, #14]
 8000c02:	635a      	str	r2, [r3, #52]	; 0x34
	  	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmVal);
 8000c04:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <motors+0xc0>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	89fa      	ldrh	r2, [r7, #14]
 8000c0a:	639a      	str	r2, [r3, #56]	; 0x38
	    osDelay(10);
 8000c0c:	200a      	movs	r0, #10
 8000c0e:	f003 fceb 	bl	80045e8 <osDelay>
	while (pwmVal<4000){
 8000c12:	89fb      	ldrh	r3, [r7, #14]
 8000c14:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000c18:	d3d9      	bcc.n	8000bce <motors+0x1e>
	}
	//anti-clockwise
	while(pwmVal>0){
 8000c1a:	e021      	b.n	8000c60 <motors+0xb0>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2104      	movs	r1, #4
 8000c20:	4814      	ldr	r0, [pc, #80]	; (8000c74 <motors+0xc4>)
 8000c22:	f000 feaf 	bl	8001984 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8000c26:	2201      	movs	r2, #1
 8000c28:	2108      	movs	r1, #8
 8000c2a:	4812      	ldr	r0, [pc, #72]	; (8000c74 <motors+0xc4>)
 8000c2c:	f000 feaa 	bl	8001984 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2120      	movs	r1, #32
 8000c34:	480f      	ldr	r0, [pc, #60]	; (8000c74 <motors+0xc4>)
 8000c36:	f000 fea5 	bl	8001984 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	2110      	movs	r1, #16
 8000c3e:	480d      	ldr	r0, [pc, #52]	; (8000c74 <motors+0xc4>)
 8000c40:	f000 fea0 	bl	8001984 <HAL_GPIO_WritePin>
		pwmVal--;
 8000c44:	89fb      	ldrh	r3, [r7, #14]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	81fb      	strh	r3, [r7, #14]
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmVal);
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <motors+0xc0>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	89fa      	ldrh	r2, [r7, #14]
 8000c50:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmVal);
 8000c52:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <motors+0xc0>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	89fa      	ldrh	r2, [r7, #14]
 8000c58:	639a      	str	r2, [r3, #56]	; 0x38
		osDelay(10);
 8000c5a:	200a      	movs	r0, #10
 8000c5c:	f003 fcc4 	bl	80045e8 <osDelay>
	while(pwmVal>0){
 8000c60:	89fb      	ldrh	r3, [r7, #14]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d1da      	bne.n	8000c1c <motors+0x6c>
	}
    osDelay(1);
 8000c66:	2001      	movs	r0, #1
 8000c68:	f003 fcbe 	bl	80045e8 <osDelay>
	while (pwmVal<4000){
 8000c6c:	e7d1      	b.n	8000c12 <motors+0x62>
 8000c6e:	bf00      	nop
 8000c70:	2000010c 	.word	0x2000010c
 8000c74:	40020000 	.word	0x40020000

08000c78 <encoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder */
void encoder(void *argument)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b092      	sub	sp, #72	; 0x48
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder */
  /* Infinite loop */

  //Initializes Timer 2 to start counting pulses from encoder on input channels
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000c80:	213c      	movs	r1, #60	; 0x3c
 8000c82:	4850      	ldr	r0, [pc, #320]	; (8000dc4 <encoder+0x14c>)
 8000c84:	f001 fd48 	bl	8002718 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000c88:	213c      	movs	r1, #60	; 0x3c
 8000c8a:	484f      	ldr	r0, [pc, #316]	; (8000dc8 <encoder+0x150>)
 8000c8c:	f001 fd44 	bl	8002718 <HAL_TIM_Encoder_Start>
  uint8_t msg[20];
  //store direction of encoder movement (down/up counting)
  uint16_t dir;

  //adds to motor pwm for straight movement
  int encoder_offset = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	633b      	str	r3, [r7, #48]	; 0x30
  //current error value for encoder
  int encoder_error = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  //used for distance estimation
  uint32_t encoder_dist = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28

  //fetch current encoder count from rising edge of the clock
  cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8000c9c:	4b49      	ldr	r3, [pc, #292]	; (8000dc4 <encoder+0x14c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ca2:	647b      	str	r3, [r7, #68]	; 0x44
  cnt3 = __HAL_TIM_GET_COUNTER(&htim3);
 8000ca4:	4b48      	ldr	r3, [pc, #288]	; (8000dc8 <encoder+0x150>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000caa:	643b      	str	r3, [r7, #64]	; 0x40

  //obtain current system time in ms
  tick = HAL_GetTick();
 8000cac:	f000 fafa 	bl	80012a4 <HAL_GetTick>
 8000cb0:	6378      	str	r0, [r7, #52]	; 0x34

  //checks encoder's position and calculating speed based on position change over time
  for(;;)
  {
		if(HAL_GetTick()-tick > 1000L){
 8000cb2:	f000 faf7 	bl	80012a4 <HAL_GetTick>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cc0:	d9f7      	bls.n	8000cb2 <encoder+0x3a>

		cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8000cc2:	4b40      	ldr	r3, [pc, #256]	; (8000dc4 <encoder+0x14c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
		cnt4 = __HAL_TIM_GET_COUNTER(&htim3);
 8000cca:	4b3f      	ldr	r3, [pc, #252]	; (8000dc8 <encoder+0x150>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd0:	623b      	str	r3, [r7, #32]

		//determine if encoder is moving forward or backwards
		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 8000cd2:	4b3c      	ldr	r3, [pc, #240]	; (8000dc4 <encoder+0x14c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f003 0310 	and.w	r3, r3, #16
 8000cdc:	2b10      	cmp	r3, #16
 8000cde:	d110      	bne.n	8000d02 <encoder+0x8a>
		    if (cnt2 < cnt1) {
 8000ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ce2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	da04      	bge.n	8000cf2 <encoder+0x7a>
		        diffa = cnt1 - cnt2;
 8000ce8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000cf0:	e017      	b.n	8000d22 <encoder+0xaa>
		    } else {
		    	//accounts for overflow/underflow
		        diffa = (65535 - cnt2) + cnt1;
 8000cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf4:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000cf8:	33ff      	adds	r3, #255	; 0xff
 8000cfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000cfc:	4413      	add	r3, r2
 8000cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d00:	e00f      	b.n	8000d22 <encoder+0xaa>
		    }
		}

		else {
		    if (cnt2 > cnt1) {
 8000d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d06:	429a      	cmp	r2, r3
 8000d08:	dd04      	ble.n	8000d14 <encoder+0x9c>
		        diffa = cnt2 - cnt1;
 8000d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d12:	e006      	b.n	8000d22 <encoder+0xaa>
		    } else {
		        diffa = (65535 - cnt1) + cnt2;
 8000d14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d16:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000d1a:	33ff      	adds	r3, #255	; 0xff
 8000d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d1e:	4413      	add	r3, r2
 8000d20:	63fb      	str	r3, [r7, #60]	; 0x3c
		    }
		}

		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)) {
 8000d22:	4b29      	ldr	r3, [pc, #164]	; (8000dc8 <encoder+0x150>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f003 0310 	and.w	r3, r3, #16
 8000d2c:	2b10      	cmp	r3, #16
 8000d2e:	d110      	bne.n	8000d52 <encoder+0xda>
		    if (cnt4 < cnt3) {
 8000d30:	6a3a      	ldr	r2, [r7, #32]
 8000d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d34:	429a      	cmp	r2, r3
 8000d36:	da04      	bge.n	8000d42 <encoder+0xca>
		        diffb = cnt3 - cnt4;
 8000d38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000d3a:	6a3b      	ldr	r3, [r7, #32]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000d40:	e017      	b.n	8000d72 <encoder+0xfa>
		    } else {
		        diffb = (65535 - cnt4) + cnt3;
 8000d42:	6a3b      	ldr	r3, [r7, #32]
 8000d44:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000d48:	33ff      	adds	r3, #255	; 0xff
 8000d4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000d4c:	4413      	add	r3, r2
 8000d4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000d50:	e00f      	b.n	8000d72 <encoder+0xfa>
		    }
		}

		else {
		    if (cnt4 > cnt3) {
 8000d52:	6a3a      	ldr	r2, [r7, #32]
 8000d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d56:	429a      	cmp	r2, r3
 8000d58:	dd04      	ble.n	8000d64 <encoder+0xec>
		        diffb = cnt4 - cnt3;
 8000d5a:	6a3a      	ldr	r2, [r7, #32]
 8000d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	63bb      	str	r3, [r7, #56]	; 0x38
 8000d62:	e006      	b.n	8000d72 <encoder+0xfa>
		    } else {
		        diffb = (65535 - cnt3) + cnt4;
 8000d64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d66:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000d6a:	33ff      	adds	r3, #255	; 0xff
 8000d6c:	6a3a      	ldr	r2, [r7, #32]
 8000d6e:	4413      	add	r3, r2
 8000d70:	63bb      	str	r3, [r7, #56]	; 0x38
		    }
		}

		sprintf(msg, "Speed:%5d\0", diffa);
 8000d72:	f107 030c 	add.w	r3, r7, #12
 8000d76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d78:	4914      	ldr	r1, [pc, #80]	; (8000dcc <encoder+0x154>)
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f006 fad8 	bl	8007330 <siprintf>
		OLED_ShowString(10,30,msg);
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	461a      	mov	r2, r3
 8000d86:	211e      	movs	r1, #30
 8000d88:	200a      	movs	r0, #10
 8000d8a:	f006 fa13 	bl	80071b4 <OLED_ShowString>
		cnt3 = __HAL_TIM_GET_COUNTER(&htim3);
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <encoder+0x150>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d94:	643b      	str	r3, [r7, #64]	; 0x40
		//dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);


		sprintf(msg, "Speed:%5d\0", diffb);
 8000d96:	f107 030c 	add.w	r3, r7, #12
 8000d9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000d9c:	490b      	ldr	r1, [pc, #44]	; (8000dcc <encoder+0x154>)
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f006 fac6 	bl	8007330 <siprintf>
		OLED_ShowString(10,40,msg);
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	461a      	mov	r2, r3
 8000daa:	2128      	movs	r1, #40	; 0x28
 8000dac:	200a      	movs	r0, #10
 8000dae:	f006 fa01 	bl	80071b4 <OLED_ShowString>
		cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8000db2:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <encoder+0x14c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db8:	647b      	str	r3, [r7, #68]	; 0x44

		tick = HAL_GetTick();
 8000dba:	f000 fa73 	bl	80012a4 <HAL_GetTick>
 8000dbe:	6378      	str	r0, [r7, #52]	; 0x34
		if(HAL_GetTick()-tick > 1000L){
 8000dc0:	e777      	b.n	8000cb2 <encoder+0x3a>
 8000dc2:	bf00      	nop
 8000dc4:	2000007c 	.word	0x2000007c
 8000dc8:	200000c4 	.word	0x200000c4
 8000dcc:	08007cd4 	.word	0x08007cd4

08000dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd4:	b672      	cpsid	i
}
 8000dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <Error_Handler+0x8>
	...

08000ddc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <HAL_MspInit+0x54>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	4a11      	ldr	r2, [pc, #68]	; (8000e30 <HAL_MspInit+0x54>)
 8000dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df0:	6453      	str	r3, [r2, #68]	; 0x44
 8000df2:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <HAL_MspInit+0x54>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	603b      	str	r3, [r7, #0]
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <HAL_MspInit+0x54>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	4a0a      	ldr	r2, [pc, #40]	; (8000e30 <HAL_MspInit+0x54>)
 8000e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <HAL_MspInit+0x54>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	210f      	movs	r1, #15
 8000e1e:	f06f 0001 	mvn.w	r0, #1
 8000e22:	f000 fb4a 	bl	80014ba <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40023800 	.word	0x40023800

08000e34 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08c      	sub	sp, #48	; 0x30
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 031c 	add.w	r3, r7, #28
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e54:	d14b      	bne.n	8000eee <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	61bb      	str	r3, [r7, #24]
 8000e5a:	4b3f      	ldr	r3, [pc, #252]	; (8000f58 <HAL_TIM_Encoder_MspInit+0x124>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	4a3e      	ldr	r2, [pc, #248]	; (8000f58 <HAL_TIM_Encoder_MspInit+0x124>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6413      	str	r3, [r2, #64]	; 0x40
 8000e66:	4b3c      	ldr	r3, [pc, #240]	; (8000f58 <HAL_TIM_Encoder_MspInit+0x124>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	61bb      	str	r3, [r7, #24]
 8000e70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	4b38      	ldr	r3, [pc, #224]	; (8000f58 <HAL_TIM_Encoder_MspInit+0x124>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a37      	ldr	r2, [pc, #220]	; (8000f58 <HAL_TIM_Encoder_MspInit+0x124>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b35      	ldr	r3, [pc, #212]	; (8000f58 <HAL_TIM_Encoder_MspInit+0x124>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	4b31      	ldr	r3, [pc, #196]	; (8000f58 <HAL_TIM_Encoder_MspInit+0x124>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a30      	ldr	r2, [pc, #192]	; (8000f58 <HAL_TIM_Encoder_MspInit+0x124>)
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b2e      	ldr	r3, [pc, #184]	; (8000f58 <HAL_TIM_Encoder_MspInit+0x124>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec0:	f107 031c 	add.w	r3, r7, #28
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4825      	ldr	r0, [pc, #148]	; (8000f5c <HAL_TIM_Encoder_MspInit+0x128>)
 8000ec8:	f000 fbc0 	bl	800164c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ecc:	2308      	movs	r3, #8
 8000ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000edc:	2301      	movs	r3, #1
 8000ede:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee0:	f107 031c 	add.w	r3, r7, #28
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	481e      	ldr	r0, [pc, #120]	; (8000f60 <HAL_TIM_Encoder_MspInit+0x12c>)
 8000ee8:	f000 fbb0 	bl	800164c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000eec:	e030      	b.n	8000f50 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a1c      	ldr	r2, [pc, #112]	; (8000f64 <HAL_TIM_Encoder_MspInit+0x130>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d12b      	bne.n	8000f50 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <HAL_TIM_Encoder_MspInit+0x124>)
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	4a15      	ldr	r2, [pc, #84]	; (8000f58 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f02:	f043 0302 	orr.w	r3, r3, #2
 8000f06:	6413      	str	r3, [r2, #64]	; 0x40
 8000f08:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0c:	f003 0302 	and.w	r3, r3, #2
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f14:	2300      	movs	r3, #0
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1c:	4a0e      	ldr	r2, [pc, #56]	; (8000f58 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	6313      	str	r3, [r2, #48]	; 0x30
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f30:	23c0      	movs	r3, #192	; 0xc0
 8000f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f40:	2302      	movs	r3, #2
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 031c 	add.w	r3, r7, #28
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4804      	ldr	r0, [pc, #16]	; (8000f5c <HAL_TIM_Encoder_MspInit+0x128>)
 8000f4c:	f000 fb7e 	bl	800164c <HAL_GPIO_Init>
}
 8000f50:	bf00      	nop
 8000f52:	3730      	adds	r7, #48	; 0x30
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020000 	.word	0x40020000
 8000f60:	40020400 	.word	0x40020400
 8000f64:	40000400 	.word	0x40000400

08000f68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM8)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a19      	ldr	r2, [pc, #100]	; (8000fec <HAL_TIM_Base_MspInit+0x84>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d12b      	bne.n	8000fe2 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	613b      	str	r3, [r7, #16]
 8000f8e:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <HAL_TIM_Base_MspInit+0x88>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	4a17      	ldr	r2, [pc, #92]	; (8000ff0 <HAL_TIM_Base_MspInit+0x88>)
 8000f94:	f043 0302 	orr.w	r3, r3, #2
 8000f98:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <HAL_TIM_Base_MspInit+0x88>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <HAL_TIM_Base_MspInit+0x88>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a10      	ldr	r2, [pc, #64]	; (8000ff0 <HAL_TIM_Base_MspInit+0x88>)
 8000fb0:	f043 0304 	orr.w	r3, r3, #4
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <HAL_TIM_Base_MspInit+0x88>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0304 	and.w	r3, r3, #4
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8000fc2:	23c0      	movs	r3, #192	; 0xc0
 8000fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <HAL_TIM_Base_MspInit+0x8c>)
 8000fde:	f000 fb35 	bl	800164c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000fe2:	bf00      	nop
 8000fe4:	3728      	adds	r7, #40	; 0x28
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40010400 	.word	0x40010400
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40020800 	.word	0x40020800

08000ff8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a1d      	ldr	r2, [pc, #116]	; (800108c <HAL_UART_MspInit+0x94>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d134      	bne.n	8001084 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <HAL_UART_MspInit+0x98>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	4a1b      	ldr	r2, [pc, #108]	; (8001090 <HAL_UART_MspInit+0x98>)
 8001024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001028:	6413      	str	r3, [r2, #64]	; 0x40
 800102a:	4b19      	ldr	r3, [pc, #100]	; (8001090 <HAL_UART_MspInit+0x98>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	4b15      	ldr	r3, [pc, #84]	; (8001090 <HAL_UART_MspInit+0x98>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a14      	ldr	r2, [pc, #80]	; (8001090 <HAL_UART_MspInit+0x98>)
 8001040:	f043 0304 	orr.w	r3, r3, #4
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b12      	ldr	r3, [pc, #72]	; (8001090 <HAL_UART_MspInit+0x98>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0304 	and.w	r3, r3, #4
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001052:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001064:	2307      	movs	r3, #7
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	4809      	ldr	r0, [pc, #36]	; (8001094 <HAL_UART_MspInit+0x9c>)
 8001070:	f000 faec 	bl	800164c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001074:	2200      	movs	r2, #0
 8001076:	2105      	movs	r1, #5
 8001078:	2027      	movs	r0, #39	; 0x27
 800107a:	f000 fa1e 	bl	80014ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800107e:	2027      	movs	r0, #39	; 0x27
 8001080:	f000 fa37 	bl	80014f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001084:	bf00      	nop
 8001086:	3728      	adds	r7, #40	; 0x28
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40004800 	.word	0x40004800
 8001090:	40023800 	.word	0x40023800
 8001094:	40020800 	.word	0x40020800

08001098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800109c:	e7fe      	b.n	800109c <NMI_Handler+0x4>

0800109e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <HardFault_Handler+0x4>

080010a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <MemManage_Handler+0x4>

080010aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ae:	e7fe      	b.n	80010ae <BusFault_Handler+0x4>

080010b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <UsageFault_Handler+0x4>

080010b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c8:	f000 f8d8 	bl	800127c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80010cc:	f004 fe9a 	bl	8005e04 <xTaskGetSchedulerState>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d001      	beq.n	80010da <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80010d6:	f005 fc7f 	bl	80069d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80010e4:	4802      	ldr	r0, [pc, #8]	; (80010f0 <USART3_IRQHandler+0x10>)
 80010e6:	f002 fa19 	bl	800351c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000154 	.word	0x20000154

080010f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010fc:	4a14      	ldr	r2, [pc, #80]	; (8001150 <_sbrk+0x5c>)
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <_sbrk+0x60>)
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001108:	4b13      	ldr	r3, [pc, #76]	; (8001158 <_sbrk+0x64>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d102      	bne.n	8001116 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <_sbrk+0x64>)
 8001112:	4a12      	ldr	r2, [pc, #72]	; (800115c <_sbrk+0x68>)
 8001114:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <_sbrk+0x64>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	429a      	cmp	r2, r3
 8001122:	d207      	bcs.n	8001134 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001124:	f006 f92c 	bl	8007380 <__errno>
 8001128:	4603      	mov	r3, r0
 800112a:	220c      	movs	r2, #12
 800112c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800112e:	f04f 33ff 	mov.w	r3, #4294967295
 8001132:	e009      	b.n	8001148 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <_sbrk+0x64>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800113a:	4b07      	ldr	r3, [pc, #28]	; (8001158 <_sbrk+0x64>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	4a05      	ldr	r2, [pc, #20]	; (8001158 <_sbrk+0x64>)
 8001144:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001146:	68fb      	ldr	r3, [r7, #12]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20020000 	.word	0x20020000
 8001154:	00000400 	.word	0x00000400
 8001158:	200001c0 	.word	0x200001c0
 800115c:	20005060 	.word	0x20005060

08001160 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <SystemInit+0x20>)
 8001166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800116a:	4a05      	ldr	r2, [pc, #20]	; (8001180 <SystemInit+0x20>)
 800116c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001170:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001184:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011bc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001188:	f7ff ffea 	bl	8001160 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800118c:	480c      	ldr	r0, [pc, #48]	; (80011c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800118e:	490d      	ldr	r1, [pc, #52]	; (80011c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001190:	4a0d      	ldr	r2, [pc, #52]	; (80011c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001194:	e002      	b.n	800119c <LoopCopyDataInit>

08001196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119a:	3304      	adds	r3, #4

0800119c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800119c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a0:	d3f9      	bcc.n	8001196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a2:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011a4:	4c0a      	ldr	r4, [pc, #40]	; (80011d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a8:	e001      	b.n	80011ae <LoopFillZerobss>

080011aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ac:	3204      	adds	r2, #4

080011ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b0:	d3fb      	bcc.n	80011aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011b2:	f006 f8eb 	bl	800738c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011b6:	f7ff f9d9 	bl	800056c <main>
  bx  lr    
 80011ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80011c8:	08008848 	.word	0x08008848
  ldr r2, =_sbss
 80011cc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80011d0:	20005060 	.word	0x20005060

080011d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011d4:	e7fe      	b.n	80011d4 <ADC_IRQHandler>
	...

080011d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011dc:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <HAL_Init+0x40>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a0d      	ldr	r2, [pc, #52]	; (8001218 <HAL_Init+0x40>)
 80011e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <HAL_Init+0x40>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <HAL_Init+0x40>)
 80011ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <HAL_Init+0x40>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a07      	ldr	r2, [pc, #28]	; (8001218 <HAL_Init+0x40>)
 80011fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001200:	2003      	movs	r0, #3
 8001202:	f000 f94f 	bl	80014a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001206:	200f      	movs	r0, #15
 8001208:	f000 f808 	bl	800121c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800120c:	f7ff fde6 	bl	8000ddc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40023c00 	.word	0x40023c00

0800121c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_InitTick+0x54>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <HAL_InitTick+0x58>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4619      	mov	r1, r3
 800122e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001232:	fbb3 f3f1 	udiv	r3, r3, r1
 8001236:	fbb2 f3f3 	udiv	r3, r2, r3
 800123a:	4618      	mov	r0, r3
 800123c:	f000 f967 	bl	800150e <HAL_SYSTICK_Config>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e00e      	b.n	8001268 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b0f      	cmp	r3, #15
 800124e:	d80a      	bhi.n	8001266 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001250:	2200      	movs	r2, #0
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	f04f 30ff 	mov.w	r0, #4294967295
 8001258:	f000 f92f 	bl	80014ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800125c:	4a06      	ldr	r2, [pc, #24]	; (8001278 <HAL_InitTick+0x5c>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001262:	2300      	movs	r3, #0
 8001264:	e000      	b.n	8001268 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
}
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000000 	.word	0x20000000
 8001274:	20000008 	.word	0x20000008
 8001278:	20000004 	.word	0x20000004

0800127c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_IncTick+0x20>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_IncTick+0x24>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4413      	add	r3, r2
 800128c:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <HAL_IncTick+0x24>)
 800128e:	6013      	str	r3, [r2, #0]
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	20000008 	.word	0x20000008
 80012a0:	200001c4 	.word	0x200001c4

080012a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return uwTick;
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <HAL_GetTick+0x14>)
 80012aa:	681b      	ldr	r3, [r3, #0]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	200001c4 	.word	0x200001c4

080012bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c4:	f7ff ffee 	bl	80012a4 <HAL_GetTick>
 80012c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d4:	d005      	beq.n	80012e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <HAL_Delay+0x44>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	461a      	mov	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4413      	add	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012e2:	bf00      	nop
 80012e4:	f7ff ffde 	bl	80012a4 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d8f7      	bhi.n	80012e4 <HAL_Delay+0x28>
  {
  }
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000008 	.word	0x20000008

08001304 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001320:	4013      	ands	r3, r2
 8001322:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800132c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001336:	4a04      	ldr	r2, [pc, #16]	; (8001348 <__NVIC_SetPriorityGrouping+0x44>)
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	60d3      	str	r3, [r2, #12]
}
 800133c:	bf00      	nop
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <__NVIC_GetPriorityGrouping+0x18>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	0a1b      	lsrs	r3, r3, #8
 8001356:	f003 0307 	and.w	r3, r3, #7
}
 800135a:	4618      	mov	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001376:	2b00      	cmp	r3, #0
 8001378:	db0b      	blt.n	8001392 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	f003 021f 	and.w	r2, r3, #31
 8001380:	4907      	ldr	r1, [pc, #28]	; (80013a0 <__NVIC_EnableIRQ+0x38>)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	095b      	lsrs	r3, r3, #5
 8001388:	2001      	movs	r0, #1
 800138a:	fa00 f202 	lsl.w	r2, r0, r2
 800138e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000e100 	.word	0xe000e100

080013a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	6039      	str	r1, [r7, #0]
 80013ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	db0a      	blt.n	80013ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	490c      	ldr	r1, [pc, #48]	; (80013f0 <__NVIC_SetPriority+0x4c>)
 80013be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c2:	0112      	lsls	r2, r2, #4
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	440b      	add	r3, r1
 80013c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013cc:	e00a      	b.n	80013e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4908      	ldr	r1, [pc, #32]	; (80013f4 <__NVIC_SetPriority+0x50>)
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	f003 030f 	and.w	r3, r3, #15
 80013da:	3b04      	subs	r3, #4
 80013dc:	0112      	lsls	r2, r2, #4
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	440b      	add	r3, r1
 80013e2:	761a      	strb	r2, [r3, #24]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000e100 	.word	0xe000e100
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b089      	sub	sp, #36	; 0x24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f1c3 0307 	rsb	r3, r3, #7
 8001412:	2b04      	cmp	r3, #4
 8001414:	bf28      	it	cs
 8001416:	2304      	movcs	r3, #4
 8001418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3304      	adds	r3, #4
 800141e:	2b06      	cmp	r3, #6
 8001420:	d902      	bls.n	8001428 <NVIC_EncodePriority+0x30>
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3b03      	subs	r3, #3
 8001426:	e000      	b.n	800142a <NVIC_EncodePriority+0x32>
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800142c:	f04f 32ff 	mov.w	r2, #4294967295
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43da      	mvns	r2, r3
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	401a      	ands	r2, r3
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001440:	f04f 31ff 	mov.w	r1, #4294967295
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	fa01 f303 	lsl.w	r3, r1, r3
 800144a:	43d9      	mvns	r1, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	4313      	orrs	r3, r2
         );
}
 8001452:	4618      	mov	r0, r3
 8001454:	3724      	adds	r7, #36	; 0x24
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3b01      	subs	r3, #1
 800146c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001470:	d301      	bcc.n	8001476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001472:	2301      	movs	r3, #1
 8001474:	e00f      	b.n	8001496 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001476:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <SysTick_Config+0x40>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3b01      	subs	r3, #1
 800147c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147e:	210f      	movs	r1, #15
 8001480:	f04f 30ff 	mov.w	r0, #4294967295
 8001484:	f7ff ff8e 	bl	80013a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <SysTick_Config+0x40>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148e:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <SysTick_Config+0x40>)
 8001490:	2207      	movs	r2, #7
 8001492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	e000e010 	.word	0xe000e010

080014a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff ff29 	bl	8001304 <__NVIC_SetPriorityGrouping>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b086      	sub	sp, #24
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014cc:	f7ff ff3e 	bl	800134c <__NVIC_GetPriorityGrouping>
 80014d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	68b9      	ldr	r1, [r7, #8]
 80014d6:	6978      	ldr	r0, [r7, #20]
 80014d8:	f7ff ff8e 	bl	80013f8 <NVIC_EncodePriority>
 80014dc:	4602      	mov	r2, r0
 80014de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e2:	4611      	mov	r1, r2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff5d 	bl	80013a4 <__NVIC_SetPriority>
}
 80014ea:	bf00      	nop
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff31 	bl	8001368 <__NVIC_EnableIRQ>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff ffa2 	bl	8001460 <SysTick_Config>
 800151c:	4603      	mov	r3, r0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b084      	sub	sp, #16
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001532:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001534:	f7ff feb6 	bl	80012a4 <HAL_GetTick>
 8001538:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001540:	b2db      	uxtb	r3, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d008      	beq.n	8001558 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2280      	movs	r2, #128	; 0x80
 800154a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e052      	b.n	80015fe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 0216 	bic.w	r2, r2, #22
 8001566:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	695a      	ldr	r2, [r3, #20]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001576:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	2b00      	cmp	r3, #0
 800157e:	d103      	bne.n	8001588 <HAL_DMA_Abort+0x62>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001584:	2b00      	cmp	r3, #0
 8001586:	d007      	beq.n	8001598 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 0208 	bic.w	r2, r2, #8
 8001596:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 0201 	bic.w	r2, r2, #1
 80015a6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015a8:	e013      	b.n	80015d2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015aa:	f7ff fe7b 	bl	80012a4 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b05      	cmp	r3, #5
 80015b6:	d90c      	bls.n	80015d2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2220      	movs	r2, #32
 80015bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2203      	movs	r2, #3
 80015c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e015      	b.n	80015fe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1e4      	bne.n	80015aa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e4:	223f      	movs	r2, #63	; 0x3f
 80015e6:	409a      	lsls	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d004      	beq.n	8001624 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2280      	movs	r2, #128	; 0x80
 800161e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e00c      	b.n	800163e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2205      	movs	r2, #5
 8001628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f022 0201 	bic.w	r2, r2, #1
 800163a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800164c:	b480      	push	{r7}
 800164e:	b089      	sub	sp, #36	; 0x24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001662:	2300      	movs	r3, #0
 8001664:	61fb      	str	r3, [r7, #28]
 8001666:	e16b      	b.n	8001940 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001668:	2201      	movs	r2, #1
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	4013      	ands	r3, r2
 800167a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	429a      	cmp	r2, r3
 8001682:	f040 815a 	bne.w	800193a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f003 0303 	and.w	r3, r3, #3
 800168e:	2b01      	cmp	r3, #1
 8001690:	d005      	beq.n	800169e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800169a:	2b02      	cmp	r3, #2
 800169c:	d130      	bne.n	8001700 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	2203      	movs	r2, #3
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4013      	ands	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	68da      	ldr	r2, [r3, #12]
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016d4:	2201      	movs	r2, #1
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	091b      	lsrs	r3, r3, #4
 80016ea:	f003 0201 	and.w	r2, r3, #1
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 0303 	and.w	r3, r3, #3
 8001708:	2b03      	cmp	r3, #3
 800170a:	d017      	beq.n	800173c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	2203      	movs	r2, #3
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d123      	bne.n	8001790 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	08da      	lsrs	r2, r3, #3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3208      	adds	r2, #8
 8001750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001754:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	220f      	movs	r2, #15
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4013      	ands	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	691a      	ldr	r2, [r3, #16]
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	08da      	lsrs	r2, r3, #3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3208      	adds	r2, #8
 800178a:	69b9      	ldr	r1, [r7, #24]
 800178c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	2203      	movs	r2, #3
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 0203 	and.w	r2, r3, #3
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 80b4 	beq.w	800193a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	4b60      	ldr	r3, [pc, #384]	; (8001958 <HAL_GPIO_Init+0x30c>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	4a5f      	ldr	r2, [pc, #380]	; (8001958 <HAL_GPIO_Init+0x30c>)
 80017dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e0:	6453      	str	r3, [r2, #68]	; 0x44
 80017e2:	4b5d      	ldr	r3, [pc, #372]	; (8001958 <HAL_GPIO_Init+0x30c>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ee:	4a5b      	ldr	r2, [pc, #364]	; (800195c <HAL_GPIO_Init+0x310>)
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	089b      	lsrs	r3, r3, #2
 80017f4:	3302      	adds	r3, #2
 80017f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	220f      	movs	r2, #15
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a52      	ldr	r2, [pc, #328]	; (8001960 <HAL_GPIO_Init+0x314>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d02b      	beq.n	8001872 <HAL_GPIO_Init+0x226>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a51      	ldr	r2, [pc, #324]	; (8001964 <HAL_GPIO_Init+0x318>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d025      	beq.n	800186e <HAL_GPIO_Init+0x222>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a50      	ldr	r2, [pc, #320]	; (8001968 <HAL_GPIO_Init+0x31c>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d01f      	beq.n	800186a <HAL_GPIO_Init+0x21e>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a4f      	ldr	r2, [pc, #316]	; (800196c <HAL_GPIO_Init+0x320>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d019      	beq.n	8001866 <HAL_GPIO_Init+0x21a>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a4e      	ldr	r2, [pc, #312]	; (8001970 <HAL_GPIO_Init+0x324>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d013      	beq.n	8001862 <HAL_GPIO_Init+0x216>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a4d      	ldr	r2, [pc, #308]	; (8001974 <HAL_GPIO_Init+0x328>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d00d      	beq.n	800185e <HAL_GPIO_Init+0x212>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a4c      	ldr	r2, [pc, #304]	; (8001978 <HAL_GPIO_Init+0x32c>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d007      	beq.n	800185a <HAL_GPIO_Init+0x20e>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a4b      	ldr	r2, [pc, #300]	; (800197c <HAL_GPIO_Init+0x330>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d101      	bne.n	8001856 <HAL_GPIO_Init+0x20a>
 8001852:	2307      	movs	r3, #7
 8001854:	e00e      	b.n	8001874 <HAL_GPIO_Init+0x228>
 8001856:	2308      	movs	r3, #8
 8001858:	e00c      	b.n	8001874 <HAL_GPIO_Init+0x228>
 800185a:	2306      	movs	r3, #6
 800185c:	e00a      	b.n	8001874 <HAL_GPIO_Init+0x228>
 800185e:	2305      	movs	r3, #5
 8001860:	e008      	b.n	8001874 <HAL_GPIO_Init+0x228>
 8001862:	2304      	movs	r3, #4
 8001864:	e006      	b.n	8001874 <HAL_GPIO_Init+0x228>
 8001866:	2303      	movs	r3, #3
 8001868:	e004      	b.n	8001874 <HAL_GPIO_Init+0x228>
 800186a:	2302      	movs	r3, #2
 800186c:	e002      	b.n	8001874 <HAL_GPIO_Init+0x228>
 800186e:	2301      	movs	r3, #1
 8001870:	e000      	b.n	8001874 <HAL_GPIO_Init+0x228>
 8001872:	2300      	movs	r3, #0
 8001874:	69fa      	ldr	r2, [r7, #28]
 8001876:	f002 0203 	and.w	r2, r2, #3
 800187a:	0092      	lsls	r2, r2, #2
 800187c:	4093      	lsls	r3, r2
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4313      	orrs	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001884:	4935      	ldr	r1, [pc, #212]	; (800195c <HAL_GPIO_Init+0x310>)
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	089b      	lsrs	r3, r3, #2
 800188a:	3302      	adds	r3, #2
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001892:	4b3b      	ldr	r3, [pc, #236]	; (8001980 <HAL_GPIO_Init+0x334>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	43db      	mvns	r3, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4013      	ands	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018b6:	4a32      	ldr	r2, [pc, #200]	; (8001980 <HAL_GPIO_Init+0x334>)
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018bc:	4b30      	ldr	r3, [pc, #192]	; (8001980 <HAL_GPIO_Init+0x334>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4013      	ands	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	4313      	orrs	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018e0:	4a27      	ldr	r2, [pc, #156]	; (8001980 <HAL_GPIO_Init+0x334>)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018e6:	4b26      	ldr	r3, [pc, #152]	; (8001980 <HAL_GPIO_Init+0x334>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4013      	ands	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800190a:	4a1d      	ldr	r2, [pc, #116]	; (8001980 <HAL_GPIO_Init+0x334>)
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001910:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <HAL_GPIO_Init+0x334>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	43db      	mvns	r3, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4013      	ands	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d003      	beq.n	8001934 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001934:	4a12      	ldr	r2, [pc, #72]	; (8001980 <HAL_GPIO_Init+0x334>)
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3301      	adds	r3, #1
 800193e:	61fb      	str	r3, [r7, #28]
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	2b0f      	cmp	r3, #15
 8001944:	f67f ae90 	bls.w	8001668 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	3724      	adds	r7, #36	; 0x24
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40023800 	.word	0x40023800
 800195c:	40013800 	.word	0x40013800
 8001960:	40020000 	.word	0x40020000
 8001964:	40020400 	.word	0x40020400
 8001968:	40020800 	.word	0x40020800
 800196c:	40020c00 	.word	0x40020c00
 8001970:	40021000 	.word	0x40021000
 8001974:	40021400 	.word	0x40021400
 8001978:	40021800 	.word	0x40021800
 800197c:	40021c00 	.word	0x40021c00
 8001980:	40013c00 	.word	0x40013c00

08001984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	807b      	strh	r3, [r7, #2]
 8001990:	4613      	mov	r3, r2
 8001992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001994:	787b      	ldrb	r3, [r7, #1]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800199a:	887a      	ldrh	r2, [r7, #2]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019a0:	e003      	b.n	80019aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019a2:	887b      	ldrh	r3, [r7, #2]
 80019a4:	041a      	lsls	r2, r3, #16
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	619a      	str	r2, [r3, #24]
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b085      	sub	sp, #20
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	460b      	mov	r3, r1
 80019c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019c8:	887a      	ldrh	r2, [r7, #2]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4013      	ands	r3, r2
 80019ce:	041a      	lsls	r2, r3, #16
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	43d9      	mvns	r1, r3
 80019d4:	887b      	ldrh	r3, [r7, #2]
 80019d6:	400b      	ands	r3, r1
 80019d8:	431a      	orrs	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	619a      	str	r2, [r3, #24]
}
 80019de:	bf00      	nop
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
	...

080019ec <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <HAL_PWR_EnableBkUpAccess+0x20>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <HAL_PWR_EnableBkUpAccess+0x24>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80019fe:	687b      	ldr	r3, [r7, #4]
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	420e0020 	.word	0x420e0020
 8001a10:	40007000 	.word	0x40007000

08001a14 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_PWR_DisableBkUpAccess+0x20>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8001a20:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <HAL_PWR_DisableBkUpAccess+0x24>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8001a26:	687b      	ldr	r3, [r7, #4]
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	420e0020 	.word	0x420e0020
 8001a38:	40007000 	.word	0x40007000

08001a3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e267      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d075      	beq.n	8001b46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a5a:	4b88      	ldr	r3, [pc, #544]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d00c      	beq.n	8001a80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a66:	4b85      	ldr	r3, [pc, #532]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a6e:	2b08      	cmp	r3, #8
 8001a70:	d112      	bne.n	8001a98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a72:	4b82      	ldr	r3, [pc, #520]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a7e:	d10b      	bne.n	8001a98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a80:	4b7e      	ldr	r3, [pc, #504]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d05b      	beq.n	8001b44 <HAL_RCC_OscConfig+0x108>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d157      	bne.n	8001b44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e242      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa0:	d106      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x74>
 8001aa2:	4b76      	ldr	r3, [pc, #472]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a75      	ldr	r2, [pc, #468]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	e01d      	b.n	8001aec <HAL_RCC_OscConfig+0xb0>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ab8:	d10c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x98>
 8001aba:	4b70      	ldr	r3, [pc, #448]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a6f      	ldr	r2, [pc, #444]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	4b6d      	ldr	r3, [pc, #436]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a6c      	ldr	r2, [pc, #432]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e00b      	b.n	8001aec <HAL_RCC_OscConfig+0xb0>
 8001ad4:	4b69      	ldr	r3, [pc, #420]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a68      	ldr	r2, [pc, #416]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	4b66      	ldr	r3, [pc, #408]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a65      	ldr	r2, [pc, #404]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d013      	beq.n	8001b1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af4:	f7ff fbd6 	bl	80012a4 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001afc:	f7ff fbd2 	bl	80012a4 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b64      	cmp	r3, #100	; 0x64
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e207      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0e:	4b5b      	ldr	r3, [pc, #364]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0xc0>
 8001b1a:	e014      	b.n	8001b46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fbc2 	bl	80012a4 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b24:	f7ff fbbe 	bl	80012a4 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b64      	cmp	r3, #100	; 0x64
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e1f3      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b36:	4b51      	ldr	r3, [pc, #324]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0xe8>
 8001b42:	e000      	b.n	8001b46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d063      	beq.n	8001c1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b52:	4b4a      	ldr	r3, [pc, #296]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 030c 	and.w	r3, r3, #12
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00b      	beq.n	8001b76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b5e:	4b47      	ldr	r3, [pc, #284]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b66:	2b08      	cmp	r3, #8
 8001b68:	d11c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b6a:	4b44      	ldr	r3, [pc, #272]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d116      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b76:	4b41      	ldr	r3, [pc, #260]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d005      	beq.n	8001b8e <HAL_RCC_OscConfig+0x152>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d001      	beq.n	8001b8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e1c7      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b8e:	4b3b      	ldr	r3, [pc, #236]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	4937      	ldr	r1, [pc, #220]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba2:	e03a      	b.n	8001c1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d020      	beq.n	8001bee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bac:	4b34      	ldr	r3, [pc, #208]	; (8001c80 <HAL_RCC_OscConfig+0x244>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb2:	f7ff fb77 	bl	80012a4 <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bba:	f7ff fb73 	bl	80012a4 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e1a8      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bcc:	4b2b      	ldr	r3, [pc, #172]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0f0      	beq.n	8001bba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd8:	4b28      	ldr	r3, [pc, #160]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	4925      	ldr	r1, [pc, #148]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	600b      	str	r3, [r1, #0]
 8001bec:	e015      	b.n	8001c1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bee:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <HAL_RCC_OscConfig+0x244>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fb56 	bl	80012a4 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bfc:	f7ff fb52 	bl	80012a4 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e187      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c0e:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d036      	beq.n	8001c94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d016      	beq.n	8001c5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <HAL_RCC_OscConfig+0x248>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c34:	f7ff fb36 	bl	80012a4 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c3c:	f7ff fb32 	bl	80012a4 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e167      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <HAL_RCC_OscConfig+0x240>)
 8001c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCC_OscConfig+0x200>
 8001c5a:	e01b      	b.n	8001c94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c5c:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <HAL_RCC_OscConfig+0x248>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c62:	f7ff fb1f 	bl	80012a4 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c68:	e00e      	b.n	8001c88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c6a:	f7ff fb1b 	bl	80012a4 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d907      	bls.n	8001c88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e150      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	42470000 	.word	0x42470000
 8001c84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c88:	4b88      	ldr	r3, [pc, #544]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001c8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1ea      	bne.n	8001c6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f000 8097 	beq.w	8001dd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ca6:	4b81      	ldr	r3, [pc, #516]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10f      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	4b7d      	ldr	r3, [pc, #500]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	4a7c      	ldr	r2, [pc, #496]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc2:	4b7a      	ldr	r3, [pc, #488]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cca:	60bb      	str	r3, [r7, #8]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd2:	4b77      	ldr	r3, [pc, #476]	; (8001eb0 <HAL_RCC_OscConfig+0x474>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d118      	bne.n	8001d10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cde:	4b74      	ldr	r3, [pc, #464]	; (8001eb0 <HAL_RCC_OscConfig+0x474>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a73      	ldr	r2, [pc, #460]	; (8001eb0 <HAL_RCC_OscConfig+0x474>)
 8001ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cea:	f7ff fadb 	bl	80012a4 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf2:	f7ff fad7 	bl	80012a4 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e10c      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d04:	4b6a      	ldr	r3, [pc, #424]	; (8001eb0 <HAL_RCC_OscConfig+0x474>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0f0      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d106      	bne.n	8001d26 <HAL_RCC_OscConfig+0x2ea>
 8001d18:	4b64      	ldr	r3, [pc, #400]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1c:	4a63      	ldr	r2, [pc, #396]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	6713      	str	r3, [r2, #112]	; 0x70
 8001d24:	e01c      	b.n	8001d60 <HAL_RCC_OscConfig+0x324>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	2b05      	cmp	r3, #5
 8001d2c:	d10c      	bne.n	8001d48 <HAL_RCC_OscConfig+0x30c>
 8001d2e:	4b5f      	ldr	r3, [pc, #380]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d32:	4a5e      	ldr	r2, [pc, #376]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d34:	f043 0304 	orr.w	r3, r3, #4
 8001d38:	6713      	str	r3, [r2, #112]	; 0x70
 8001d3a:	4b5c      	ldr	r3, [pc, #368]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3e:	4a5b      	ldr	r2, [pc, #364]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6713      	str	r3, [r2, #112]	; 0x70
 8001d46:	e00b      	b.n	8001d60 <HAL_RCC_OscConfig+0x324>
 8001d48:	4b58      	ldr	r3, [pc, #352]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4c:	4a57      	ldr	r2, [pc, #348]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d4e:	f023 0301 	bic.w	r3, r3, #1
 8001d52:	6713      	str	r3, [r2, #112]	; 0x70
 8001d54:	4b55      	ldr	r3, [pc, #340]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d58:	4a54      	ldr	r2, [pc, #336]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d5a:	f023 0304 	bic.w	r3, r3, #4
 8001d5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d015      	beq.n	8001d94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d68:	f7ff fa9c 	bl	80012a4 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d6e:	e00a      	b.n	8001d86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d70:	f7ff fa98 	bl	80012a4 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e0cb      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d86:	4b49      	ldr	r3, [pc, #292]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0ee      	beq.n	8001d70 <HAL_RCC_OscConfig+0x334>
 8001d92:	e014      	b.n	8001dbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d94:	f7ff fa86 	bl	80012a4 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d9a:	e00a      	b.n	8001db2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d9c:	f7ff fa82 	bl	80012a4 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e0b5      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db2:	4b3e      	ldr	r3, [pc, #248]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1ee      	bne.n	8001d9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dbe:	7dfb      	ldrb	r3, [r7, #23]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d105      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc4:	4b39      	ldr	r3, [pc, #228]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	4a38      	ldr	r2, [pc, #224]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001dca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 80a1 	beq.w	8001f1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dda:	4b34      	ldr	r3, [pc, #208]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 030c 	and.w	r3, r3, #12
 8001de2:	2b08      	cmp	r3, #8
 8001de4:	d05c      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d141      	bne.n	8001e72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dee:	4b31      	ldr	r3, [pc, #196]	; (8001eb4 <HAL_RCC_OscConfig+0x478>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df4:	f7ff fa56 	bl	80012a4 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dfc:	f7ff fa52 	bl	80012a4 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e087      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e0e:	4b27      	ldr	r3, [pc, #156]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69da      	ldr	r2, [r3, #28]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	019b      	lsls	r3, r3, #6
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e30:	085b      	lsrs	r3, r3, #1
 8001e32:	3b01      	subs	r3, #1
 8001e34:	041b      	lsls	r3, r3, #16
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3c:	061b      	lsls	r3, r3, #24
 8001e3e:	491b      	ldr	r1, [pc, #108]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e44:	4b1b      	ldr	r3, [pc, #108]	; (8001eb4 <HAL_RCC_OscConfig+0x478>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4a:	f7ff fa2b 	bl	80012a4 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e52:	f7ff fa27 	bl	80012a4 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e05c      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x416>
 8001e70:	e054      	b.n	8001f1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e72:	4b10      	ldr	r3, [pc, #64]	; (8001eb4 <HAL_RCC_OscConfig+0x478>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e78:	f7ff fa14 	bl	80012a4 <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e80:	f7ff fa10 	bl	80012a4 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e045      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_RCC_OscConfig+0x470>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f0      	bne.n	8001e80 <HAL_RCC_OscConfig+0x444>
 8001e9e:	e03d      	b.n	8001f1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d107      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e038      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40007000 	.word	0x40007000
 8001eb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001eb8:	4b1b      	ldr	r3, [pc, #108]	; (8001f28 <HAL_RCC_OscConfig+0x4ec>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d028      	beq.n	8001f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d121      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d11a      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ee8:	4013      	ands	r3, r2
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001eee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d111      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efe:	085b      	lsrs	r3, r3, #1
 8001f00:	3b01      	subs	r3, #1
 8001f02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d107      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d001      	beq.n	8001f1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800

08001f2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e0cc      	b.n	80020da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f40:	4b68      	ldr	r3, [pc, #416]	; (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d90c      	bls.n	8001f68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4e:	4b65      	ldr	r3, [pc, #404]	; (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f56:	4b63      	ldr	r3, [pc, #396]	; (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d001      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e0b8      	b.n	80020da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d020      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f80:	4b59      	ldr	r3, [pc, #356]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	4a58      	ldr	r2, [pc, #352]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f98:	4b53      	ldr	r3, [pc, #332]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	4a52      	ldr	r2, [pc, #328]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fa2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa4:	4b50      	ldr	r3, [pc, #320]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	494d      	ldr	r1, [pc, #308]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d044      	beq.n	800204c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d107      	bne.n	8001fda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fca:	4b47      	ldr	r3, [pc, #284]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d119      	bne.n	800200a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e07f      	b.n	80020da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d003      	beq.n	8001fea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fe6:	2b03      	cmp	r3, #3
 8001fe8:	d107      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fea:	4b3f      	ldr	r3, [pc, #252]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d109      	bne.n	800200a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e06f      	b.n	80020da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffa:	4b3b      	ldr	r3, [pc, #236]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e067      	b.n	80020da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800200a:	4b37      	ldr	r3, [pc, #220]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f023 0203 	bic.w	r2, r3, #3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	4934      	ldr	r1, [pc, #208]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002018:	4313      	orrs	r3, r2
 800201a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800201c:	f7ff f942 	bl	80012a4 <HAL_GetTick>
 8002020:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002022:	e00a      	b.n	800203a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002024:	f7ff f93e 	bl	80012a4 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002032:	4293      	cmp	r3, r2
 8002034:	d901      	bls.n	800203a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e04f      	b.n	80020da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203a:	4b2b      	ldr	r3, [pc, #172]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 020c 	and.w	r2, r3, #12
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	429a      	cmp	r2, r3
 800204a:	d1eb      	bne.n	8002024 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800204c:	4b25      	ldr	r3, [pc, #148]	; (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	d20c      	bcs.n	8002074 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205a:	4b22      	ldr	r3, [pc, #136]	; (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002062:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d001      	beq.n	8002074 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e032      	b.n	80020da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d008      	beq.n	8002092 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002080:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	4916      	ldr	r1, [pc, #88]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	4313      	orrs	r3, r2
 8002090:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	2b00      	cmp	r3, #0
 800209c:	d009      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800209e:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	490e      	ldr	r1, [pc, #56]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020b2:	f000 f821 	bl	80020f8 <HAL_RCC_GetSysClockFreq>
 80020b6:	4602      	mov	r2, r0
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	091b      	lsrs	r3, r3, #4
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	490a      	ldr	r1, [pc, #40]	; (80020ec <HAL_RCC_ClockConfig+0x1c0>)
 80020c4:	5ccb      	ldrb	r3, [r1, r3]
 80020c6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ca:	4a09      	ldr	r2, [pc, #36]	; (80020f0 <HAL_RCC_ClockConfig+0x1c4>)
 80020cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020ce:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <HAL_RCC_ClockConfig+0x1c8>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff f8a2 	bl	800121c <HAL_InitTick>

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40023c00 	.word	0x40023c00
 80020e8:	40023800 	.word	0x40023800
 80020ec:	08007d88 	.word	0x08007d88
 80020f0:	20000000 	.word	0x20000000
 80020f4:	20000004 	.word	0x20000004

080020f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020fc:	b090      	sub	sp, #64	; 0x40
 80020fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	637b      	str	r3, [r7, #52]	; 0x34
 8002104:	2300      	movs	r3, #0
 8002106:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002108:	2300      	movs	r3, #0
 800210a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002110:	4b59      	ldr	r3, [pc, #356]	; (8002278 <HAL_RCC_GetSysClockFreq+0x180>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 030c 	and.w	r3, r3, #12
 8002118:	2b08      	cmp	r3, #8
 800211a:	d00d      	beq.n	8002138 <HAL_RCC_GetSysClockFreq+0x40>
 800211c:	2b08      	cmp	r3, #8
 800211e:	f200 80a1 	bhi.w	8002264 <HAL_RCC_GetSysClockFreq+0x16c>
 8002122:	2b00      	cmp	r3, #0
 8002124:	d002      	beq.n	800212c <HAL_RCC_GetSysClockFreq+0x34>
 8002126:	2b04      	cmp	r3, #4
 8002128:	d003      	beq.n	8002132 <HAL_RCC_GetSysClockFreq+0x3a>
 800212a:	e09b      	b.n	8002264 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800212c:	4b53      	ldr	r3, [pc, #332]	; (800227c <HAL_RCC_GetSysClockFreq+0x184>)
 800212e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002130:	e09b      	b.n	800226a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002132:	4b53      	ldr	r3, [pc, #332]	; (8002280 <HAL_RCC_GetSysClockFreq+0x188>)
 8002134:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002136:	e098      	b.n	800226a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002138:	4b4f      	ldr	r3, [pc, #316]	; (8002278 <HAL_RCC_GetSysClockFreq+0x180>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002140:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002142:	4b4d      	ldr	r3, [pc, #308]	; (8002278 <HAL_RCC_GetSysClockFreq+0x180>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d028      	beq.n	80021a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800214e:	4b4a      	ldr	r3, [pc, #296]	; (8002278 <HAL_RCC_GetSysClockFreq+0x180>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	099b      	lsrs	r3, r3, #6
 8002154:	2200      	movs	r2, #0
 8002156:	623b      	str	r3, [r7, #32]
 8002158:	627a      	str	r2, [r7, #36]	; 0x24
 800215a:	6a3b      	ldr	r3, [r7, #32]
 800215c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002160:	2100      	movs	r1, #0
 8002162:	4b47      	ldr	r3, [pc, #284]	; (8002280 <HAL_RCC_GetSysClockFreq+0x188>)
 8002164:	fb03 f201 	mul.w	r2, r3, r1
 8002168:	2300      	movs	r3, #0
 800216a:	fb00 f303 	mul.w	r3, r0, r3
 800216e:	4413      	add	r3, r2
 8002170:	4a43      	ldr	r2, [pc, #268]	; (8002280 <HAL_RCC_GetSysClockFreq+0x188>)
 8002172:	fba0 1202 	umull	r1, r2, r0, r2
 8002176:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002178:	460a      	mov	r2, r1
 800217a:	62ba      	str	r2, [r7, #40]	; 0x28
 800217c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800217e:	4413      	add	r3, r2
 8002180:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002184:	2200      	movs	r2, #0
 8002186:	61bb      	str	r3, [r7, #24]
 8002188:	61fa      	str	r2, [r7, #28]
 800218a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800218e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002192:	f7fe f86d 	bl	8000270 <__aeabi_uldivmod>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4613      	mov	r3, r2
 800219c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800219e:	e053      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021a0:	4b35      	ldr	r3, [pc, #212]	; (8002278 <HAL_RCC_GetSysClockFreq+0x180>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	099b      	lsrs	r3, r3, #6
 80021a6:	2200      	movs	r2, #0
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	617a      	str	r2, [r7, #20]
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80021b2:	f04f 0b00 	mov.w	fp, #0
 80021b6:	4652      	mov	r2, sl
 80021b8:	465b      	mov	r3, fp
 80021ba:	f04f 0000 	mov.w	r0, #0
 80021be:	f04f 0100 	mov.w	r1, #0
 80021c2:	0159      	lsls	r1, r3, #5
 80021c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021c8:	0150      	lsls	r0, r2, #5
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	ebb2 080a 	subs.w	r8, r2, sl
 80021d2:	eb63 090b 	sbc.w	r9, r3, fp
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	f04f 0300 	mov.w	r3, #0
 80021de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80021e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80021e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80021ea:	ebb2 0408 	subs.w	r4, r2, r8
 80021ee:	eb63 0509 	sbc.w	r5, r3, r9
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	f04f 0300 	mov.w	r3, #0
 80021fa:	00eb      	lsls	r3, r5, #3
 80021fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002200:	00e2      	lsls	r2, r4, #3
 8002202:	4614      	mov	r4, r2
 8002204:	461d      	mov	r5, r3
 8002206:	eb14 030a 	adds.w	r3, r4, sl
 800220a:	603b      	str	r3, [r7, #0]
 800220c:	eb45 030b 	adc.w	r3, r5, fp
 8002210:	607b      	str	r3, [r7, #4]
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	f04f 0300 	mov.w	r3, #0
 800221a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800221e:	4629      	mov	r1, r5
 8002220:	028b      	lsls	r3, r1, #10
 8002222:	4621      	mov	r1, r4
 8002224:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002228:	4621      	mov	r1, r4
 800222a:	028a      	lsls	r2, r1, #10
 800222c:	4610      	mov	r0, r2
 800222e:	4619      	mov	r1, r3
 8002230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002232:	2200      	movs	r2, #0
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	60fa      	str	r2, [r7, #12]
 8002238:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800223c:	f7fe f818 	bl	8000270 <__aeabi_uldivmod>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4613      	mov	r3, r2
 8002246:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <HAL_RCC_GetSysClockFreq+0x180>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	0c1b      	lsrs	r3, r3, #16
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	3301      	adds	r3, #1
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002258:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800225a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002260:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002262:	e002      	b.n	800226a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002264:	4b05      	ldr	r3, [pc, #20]	; (800227c <HAL_RCC_GetSysClockFreq+0x184>)
 8002266:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002268:	bf00      	nop
    }
  }
  return sysclockfreq;
 800226a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800226c:	4618      	mov	r0, r3
 800226e:	3740      	adds	r7, #64	; 0x40
 8002270:	46bd      	mov	sp, r7
 8002272:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002276:	bf00      	nop
 8002278:	40023800 	.word	0x40023800
 800227c:	00f42400 	.word	0x00f42400
 8002280:	017d7840 	.word	0x017d7840

08002284 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002288:	4b03      	ldr	r3, [pc, #12]	; (8002298 <HAL_RCC_GetHCLKFreq+0x14>)
 800228a:	681b      	ldr	r3, [r3, #0]
}
 800228c:	4618      	mov	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	20000000 	.word	0x20000000

0800229c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022a0:	f7ff fff0 	bl	8002284 <HAL_RCC_GetHCLKFreq>
 80022a4:	4602      	mov	r2, r0
 80022a6:	4b05      	ldr	r3, [pc, #20]	; (80022bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	0a9b      	lsrs	r3, r3, #10
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	4903      	ldr	r1, [pc, #12]	; (80022c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022b2:	5ccb      	ldrb	r3, [r1, r3]
 80022b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40023800 	.word	0x40023800
 80022c0:	08007d98 	.word	0x08007d98

080022c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80022c8:	f7ff ffdc 	bl	8002284 <HAL_RCC_GetHCLKFreq>
 80022cc:	4602      	mov	r2, r0
 80022ce:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	0b5b      	lsrs	r3, r3, #13
 80022d4:	f003 0307 	and.w	r3, r3, #7
 80022d8:	4903      	ldr	r1, [pc, #12]	; (80022e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022da:	5ccb      	ldrb	r3, [r1, r3]
 80022dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40023800 	.word	0x40023800
 80022e8:	08007d98 	.word	0x08007d98

080022ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e041      	b.n	8002382 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d106      	bne.n	8002318 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7fe fe28 	bl	8000f68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2202      	movs	r2, #2
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3304      	adds	r3, #4
 8002328:	4619      	mov	r1, r3
 800232a:	4610      	mov	r0, r2
 800232c:	f000 fc0c 	bl	8002b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b082      	sub	sp, #8
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e041      	b.n	8002420 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d106      	bne.n	80023b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f839 	bl	8002428 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2202      	movs	r2, #2
 80023ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3304      	adds	r3, #4
 80023c6:	4619      	mov	r1, r3
 80023c8:	4610      	mov	r0, r2
 80023ca:	f000 fbbd 	bl	8002b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d109      	bne.n	8002460 <HAL_TIM_PWM_Start+0x24>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b01      	cmp	r3, #1
 8002456:	bf14      	ite	ne
 8002458:	2301      	movne	r3, #1
 800245a:	2300      	moveq	r3, #0
 800245c:	b2db      	uxtb	r3, r3
 800245e:	e022      	b.n	80024a6 <HAL_TIM_PWM_Start+0x6a>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	2b04      	cmp	r3, #4
 8002464:	d109      	bne.n	800247a <HAL_TIM_PWM_Start+0x3e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b01      	cmp	r3, #1
 8002470:	bf14      	ite	ne
 8002472:	2301      	movne	r3, #1
 8002474:	2300      	moveq	r3, #0
 8002476:	b2db      	uxtb	r3, r3
 8002478:	e015      	b.n	80024a6 <HAL_TIM_PWM_Start+0x6a>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	2b08      	cmp	r3, #8
 800247e:	d109      	bne.n	8002494 <HAL_TIM_PWM_Start+0x58>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b01      	cmp	r3, #1
 800248a:	bf14      	ite	ne
 800248c:	2301      	movne	r3, #1
 800248e:	2300      	moveq	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	e008      	b.n	80024a6 <HAL_TIM_PWM_Start+0x6a>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b01      	cmp	r3, #1
 800249e:	bf14      	ite	ne
 80024a0:	2301      	movne	r3, #1
 80024a2:	2300      	moveq	r3, #0
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e07c      	b.n	80025a8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d104      	bne.n	80024be <HAL_TIM_PWM_Start+0x82>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2202      	movs	r2, #2
 80024b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024bc:	e013      	b.n	80024e6 <HAL_TIM_PWM_Start+0xaa>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	d104      	bne.n	80024ce <HAL_TIM_PWM_Start+0x92>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2202      	movs	r2, #2
 80024c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024cc:	e00b      	b.n	80024e6 <HAL_TIM_PWM_Start+0xaa>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d104      	bne.n	80024de <HAL_TIM_PWM_Start+0xa2>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2202      	movs	r2, #2
 80024d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024dc:	e003      	b.n	80024e6 <HAL_TIM_PWM_Start+0xaa>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2202      	movs	r2, #2
 80024e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2201      	movs	r2, #1
 80024ec:	6839      	ldr	r1, [r7, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 fe20 	bl	8003134 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a2d      	ldr	r2, [pc, #180]	; (80025b0 <HAL_TIM_PWM_Start+0x174>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d004      	beq.n	8002508 <HAL_TIM_PWM_Start+0xcc>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a2c      	ldr	r2, [pc, #176]	; (80025b4 <HAL_TIM_PWM_Start+0x178>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d101      	bne.n	800250c <HAL_TIM_PWM_Start+0xd0>
 8002508:	2301      	movs	r3, #1
 800250a:	e000      	b.n	800250e <HAL_TIM_PWM_Start+0xd2>
 800250c:	2300      	movs	r3, #0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d007      	beq.n	8002522 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002520:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a22      	ldr	r2, [pc, #136]	; (80025b0 <HAL_TIM_PWM_Start+0x174>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d022      	beq.n	8002572 <HAL_TIM_PWM_Start+0x136>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002534:	d01d      	beq.n	8002572 <HAL_TIM_PWM_Start+0x136>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a1f      	ldr	r2, [pc, #124]	; (80025b8 <HAL_TIM_PWM_Start+0x17c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d018      	beq.n	8002572 <HAL_TIM_PWM_Start+0x136>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a1d      	ldr	r2, [pc, #116]	; (80025bc <HAL_TIM_PWM_Start+0x180>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d013      	beq.n	8002572 <HAL_TIM_PWM_Start+0x136>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a1c      	ldr	r2, [pc, #112]	; (80025c0 <HAL_TIM_PWM_Start+0x184>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d00e      	beq.n	8002572 <HAL_TIM_PWM_Start+0x136>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a16      	ldr	r2, [pc, #88]	; (80025b4 <HAL_TIM_PWM_Start+0x178>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d009      	beq.n	8002572 <HAL_TIM_PWM_Start+0x136>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a18      	ldr	r2, [pc, #96]	; (80025c4 <HAL_TIM_PWM_Start+0x188>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d004      	beq.n	8002572 <HAL_TIM_PWM_Start+0x136>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a16      	ldr	r2, [pc, #88]	; (80025c8 <HAL_TIM_PWM_Start+0x18c>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d111      	bne.n	8002596 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2b06      	cmp	r3, #6
 8002582:	d010      	beq.n	80025a6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0201 	orr.w	r2, r2, #1
 8002592:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002594:	e007      	b.n	80025a6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f042 0201 	orr.w	r2, r2, #1
 80025a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40010000 	.word	0x40010000
 80025b4:	40010400 	.word	0x40010400
 80025b8:	40000400 	.word	0x40000400
 80025bc:	40000800 	.word	0x40000800
 80025c0:	40000c00 	.word	0x40000c00
 80025c4:	40014000 	.word	0x40014000
 80025c8:	40001800 	.word	0x40001800

080025cc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e097      	b.n	8002710 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d106      	bne.n	80025fa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7fe fc1d 	bl	8000e34 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2202      	movs	r2, #2
 80025fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002610:	f023 0307 	bic.w	r3, r3, #7
 8002614:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3304      	adds	r3, #4
 800261e:	4619      	mov	r1, r3
 8002620:	4610      	mov	r0, r2
 8002622:	f000 fa91 	bl	8002b48 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	4313      	orrs	r3, r2
 8002646:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800264e:	f023 0303 	bic.w	r3, r3, #3
 8002652:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	021b      	lsls	r3, r3, #8
 800265e:	4313      	orrs	r3, r2
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	4313      	orrs	r3, r2
 8002664:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800266c:	f023 030c 	bic.w	r3, r3, #12
 8002670:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002678:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800267c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	021b      	lsls	r3, r3, #8
 8002688:	4313      	orrs	r3, r2
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	4313      	orrs	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	011a      	lsls	r2, r3, #4
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	031b      	lsls	r3, r3, #12
 800269c:	4313      	orrs	r3, r2
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80026aa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80026b2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	011b      	lsls	r3, r3, #4
 80026be:	4313      	orrs	r3, r2
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3718      	adds	r7, #24
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002728:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002730:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002738:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002740:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d110      	bne.n	800276a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d102      	bne.n	8002754 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800274e:	7b7b      	ldrb	r3, [r7, #13]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d001      	beq.n	8002758 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e069      	b.n	800282c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2202      	movs	r2, #2
 800275c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2202      	movs	r2, #2
 8002764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002768:	e031      	b.n	80027ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	2b04      	cmp	r3, #4
 800276e:	d110      	bne.n	8002792 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002770:	7bbb      	ldrb	r3, [r7, #14]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d102      	bne.n	800277c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002776:	7b3b      	ldrb	r3, [r7, #12]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d001      	beq.n	8002780 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e055      	b.n	800282c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2202      	movs	r2, #2
 800278c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002790:	e01d      	b.n	80027ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002792:	7bfb      	ldrb	r3, [r7, #15]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d108      	bne.n	80027aa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002798:	7bbb      	ldrb	r3, [r7, #14]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d105      	bne.n	80027aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800279e:	7b7b      	ldrb	r3, [r7, #13]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d102      	bne.n	80027aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80027a4:	7b3b      	ldrb	r3, [r7, #12]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d001      	beq.n	80027ae <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e03e      	b.n	800282c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2202      	movs	r2, #2
 80027b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2202      	movs	r2, #2
 80027ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2202      	movs	r2, #2
 80027c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2202      	movs	r2, #2
 80027ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_TIM_Encoder_Start+0xc4>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	2b04      	cmp	r3, #4
 80027d8:	d008      	beq.n	80027ec <HAL_TIM_Encoder_Start+0xd4>
 80027da:	e00f      	b.n	80027fc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2201      	movs	r2, #1
 80027e2:	2100      	movs	r1, #0
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 fca5 	bl	8003134 <TIM_CCxChannelCmd>
      break;
 80027ea:	e016      	b.n	800281a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2201      	movs	r2, #1
 80027f2:	2104      	movs	r1, #4
 80027f4:	4618      	mov	r0, r3
 80027f6:	f000 fc9d 	bl	8003134 <TIM_CCxChannelCmd>
      break;
 80027fa:	e00e      	b.n	800281a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2201      	movs	r2, #1
 8002802:	2100      	movs	r1, #0
 8002804:	4618      	mov	r0, r3
 8002806:	f000 fc95 	bl	8003134 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2201      	movs	r2, #1
 8002810:	2104      	movs	r1, #4
 8002812:	4618      	mov	r0, r3
 8002814:	f000 fc8e 	bl	8003134 <TIM_CCxChannelCmd>
      break;
 8002818:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f042 0201 	orr.w	r2, r2, #1
 8002828:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002840:	2300      	movs	r3, #0
 8002842:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800284a:	2b01      	cmp	r3, #1
 800284c:	d101      	bne.n	8002852 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800284e:	2302      	movs	r3, #2
 8002850:	e0ae      	b.n	80029b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b0c      	cmp	r3, #12
 800285e:	f200 809f 	bhi.w	80029a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002862:	a201      	add	r2, pc, #4	; (adr r2, 8002868 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002868:	0800289d 	.word	0x0800289d
 800286c:	080029a1 	.word	0x080029a1
 8002870:	080029a1 	.word	0x080029a1
 8002874:	080029a1 	.word	0x080029a1
 8002878:	080028dd 	.word	0x080028dd
 800287c:	080029a1 	.word	0x080029a1
 8002880:	080029a1 	.word	0x080029a1
 8002884:	080029a1 	.word	0x080029a1
 8002888:	0800291f 	.word	0x0800291f
 800288c:	080029a1 	.word	0x080029a1
 8002890:	080029a1 	.word	0x080029a1
 8002894:	080029a1 	.word	0x080029a1
 8002898:	0800295f 	.word	0x0800295f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68b9      	ldr	r1, [r7, #8]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 f9fc 	bl	8002ca0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	699a      	ldr	r2, [r3, #24]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0208 	orr.w	r2, r2, #8
 80028b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699a      	ldr	r2, [r3, #24]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 0204 	bic.w	r2, r2, #4
 80028c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6999      	ldr	r1, [r3, #24]
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	691a      	ldr	r2, [r3, #16]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	619a      	str	r2, [r3, #24]
      break;
 80028da:	e064      	b.n	80029a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 fa4c 	bl	8002d80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699a      	ldr	r2, [r3, #24]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699a      	ldr	r2, [r3, #24]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002906:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6999      	ldr	r1, [r3, #24]
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	021a      	lsls	r2, r3, #8
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	619a      	str	r2, [r3, #24]
      break;
 800291c:	e043      	b.n	80029a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68b9      	ldr	r1, [r7, #8]
 8002924:	4618      	mov	r0, r3
 8002926:	f000 faa1 	bl	8002e6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	69da      	ldr	r2, [r3, #28]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f042 0208 	orr.w	r2, r2, #8
 8002938:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	69da      	ldr	r2, [r3, #28]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0204 	bic.w	r2, r2, #4
 8002948:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	69d9      	ldr	r1, [r3, #28]
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	691a      	ldr	r2, [r3, #16]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	61da      	str	r2, [r3, #28]
      break;
 800295c:	e023      	b.n	80029a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68b9      	ldr	r1, [r7, #8]
 8002964:	4618      	mov	r0, r3
 8002966:	f000 faf5 	bl	8002f54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	69da      	ldr	r2, [r3, #28]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002978:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	69da      	ldr	r2, [r3, #28]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002988:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	69d9      	ldr	r1, [r3, #28]
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	021a      	lsls	r2, r3, #8
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	61da      	str	r2, [r3, #28]
      break;
 800299e:	e002      	b.n	80029a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	75fb      	strb	r3, [r7, #23]
      break;
 80029a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <HAL_TIM_ConfigClockSource+0x1c>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e0b4      	b.n	8002b3e <HAL_TIM_ConfigClockSource+0x186>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a0c:	d03e      	beq.n	8002a8c <HAL_TIM_ConfigClockSource+0xd4>
 8002a0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a12:	f200 8087 	bhi.w	8002b24 <HAL_TIM_ConfigClockSource+0x16c>
 8002a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a1a:	f000 8086 	beq.w	8002b2a <HAL_TIM_ConfigClockSource+0x172>
 8002a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a22:	d87f      	bhi.n	8002b24 <HAL_TIM_ConfigClockSource+0x16c>
 8002a24:	2b70      	cmp	r3, #112	; 0x70
 8002a26:	d01a      	beq.n	8002a5e <HAL_TIM_ConfigClockSource+0xa6>
 8002a28:	2b70      	cmp	r3, #112	; 0x70
 8002a2a:	d87b      	bhi.n	8002b24 <HAL_TIM_ConfigClockSource+0x16c>
 8002a2c:	2b60      	cmp	r3, #96	; 0x60
 8002a2e:	d050      	beq.n	8002ad2 <HAL_TIM_ConfigClockSource+0x11a>
 8002a30:	2b60      	cmp	r3, #96	; 0x60
 8002a32:	d877      	bhi.n	8002b24 <HAL_TIM_ConfigClockSource+0x16c>
 8002a34:	2b50      	cmp	r3, #80	; 0x50
 8002a36:	d03c      	beq.n	8002ab2 <HAL_TIM_ConfigClockSource+0xfa>
 8002a38:	2b50      	cmp	r3, #80	; 0x50
 8002a3a:	d873      	bhi.n	8002b24 <HAL_TIM_ConfigClockSource+0x16c>
 8002a3c:	2b40      	cmp	r3, #64	; 0x40
 8002a3e:	d058      	beq.n	8002af2 <HAL_TIM_ConfigClockSource+0x13a>
 8002a40:	2b40      	cmp	r3, #64	; 0x40
 8002a42:	d86f      	bhi.n	8002b24 <HAL_TIM_ConfigClockSource+0x16c>
 8002a44:	2b30      	cmp	r3, #48	; 0x30
 8002a46:	d064      	beq.n	8002b12 <HAL_TIM_ConfigClockSource+0x15a>
 8002a48:	2b30      	cmp	r3, #48	; 0x30
 8002a4a:	d86b      	bhi.n	8002b24 <HAL_TIM_ConfigClockSource+0x16c>
 8002a4c:	2b20      	cmp	r3, #32
 8002a4e:	d060      	beq.n	8002b12 <HAL_TIM_ConfigClockSource+0x15a>
 8002a50:	2b20      	cmp	r3, #32
 8002a52:	d867      	bhi.n	8002b24 <HAL_TIM_ConfigClockSource+0x16c>
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d05c      	beq.n	8002b12 <HAL_TIM_ConfigClockSource+0x15a>
 8002a58:	2b10      	cmp	r3, #16
 8002a5a:	d05a      	beq.n	8002b12 <HAL_TIM_ConfigClockSource+0x15a>
 8002a5c:	e062      	b.n	8002b24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a6e:	f000 fb41 	bl	80030f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	609a      	str	r2, [r3, #8]
      break;
 8002a8a:	e04f      	b.n	8002b2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a9c:	f000 fb2a 	bl	80030f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002aae:	609a      	str	r2, [r3, #8]
      break;
 8002ab0:	e03c      	b.n	8002b2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002abe:	461a      	mov	r2, r3
 8002ac0:	f000 fa9e 	bl	8003000 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2150      	movs	r1, #80	; 0x50
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 faf7 	bl	80030be <TIM_ITRx_SetConfig>
      break;
 8002ad0:	e02c      	b.n	8002b2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ade:	461a      	mov	r2, r3
 8002ae0:	f000 fabd 	bl	800305e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2160      	movs	r1, #96	; 0x60
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 fae7 	bl	80030be <TIM_ITRx_SetConfig>
      break;
 8002af0:	e01c      	b.n	8002b2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002afe:	461a      	mov	r2, r3
 8002b00:	f000 fa7e 	bl	8003000 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2140      	movs	r1, #64	; 0x40
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f000 fad7 	bl	80030be <TIM_ITRx_SetConfig>
      break;
 8002b10:	e00c      	b.n	8002b2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4610      	mov	r0, r2
 8002b1e:	f000 face 	bl	80030be <TIM_ITRx_SetConfig>
      break;
 8002b22:	e003      	b.n	8002b2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	73fb      	strb	r3, [r7, #15]
      break;
 8002b28:	e000      	b.n	8002b2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a46      	ldr	r2, [pc, #280]	; (8002c74 <TIM_Base_SetConfig+0x12c>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d013      	beq.n	8002b88 <TIM_Base_SetConfig+0x40>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b66:	d00f      	beq.n	8002b88 <TIM_Base_SetConfig+0x40>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a43      	ldr	r2, [pc, #268]	; (8002c78 <TIM_Base_SetConfig+0x130>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d00b      	beq.n	8002b88 <TIM_Base_SetConfig+0x40>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a42      	ldr	r2, [pc, #264]	; (8002c7c <TIM_Base_SetConfig+0x134>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d007      	beq.n	8002b88 <TIM_Base_SetConfig+0x40>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a41      	ldr	r2, [pc, #260]	; (8002c80 <TIM_Base_SetConfig+0x138>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d003      	beq.n	8002b88 <TIM_Base_SetConfig+0x40>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a40      	ldr	r2, [pc, #256]	; (8002c84 <TIM_Base_SetConfig+0x13c>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d108      	bne.n	8002b9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a35      	ldr	r2, [pc, #212]	; (8002c74 <TIM_Base_SetConfig+0x12c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d02b      	beq.n	8002bfa <TIM_Base_SetConfig+0xb2>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba8:	d027      	beq.n	8002bfa <TIM_Base_SetConfig+0xb2>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a32      	ldr	r2, [pc, #200]	; (8002c78 <TIM_Base_SetConfig+0x130>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d023      	beq.n	8002bfa <TIM_Base_SetConfig+0xb2>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a31      	ldr	r2, [pc, #196]	; (8002c7c <TIM_Base_SetConfig+0x134>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d01f      	beq.n	8002bfa <TIM_Base_SetConfig+0xb2>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a30      	ldr	r2, [pc, #192]	; (8002c80 <TIM_Base_SetConfig+0x138>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d01b      	beq.n	8002bfa <TIM_Base_SetConfig+0xb2>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a2f      	ldr	r2, [pc, #188]	; (8002c84 <TIM_Base_SetConfig+0x13c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d017      	beq.n	8002bfa <TIM_Base_SetConfig+0xb2>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a2e      	ldr	r2, [pc, #184]	; (8002c88 <TIM_Base_SetConfig+0x140>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d013      	beq.n	8002bfa <TIM_Base_SetConfig+0xb2>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a2d      	ldr	r2, [pc, #180]	; (8002c8c <TIM_Base_SetConfig+0x144>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d00f      	beq.n	8002bfa <TIM_Base_SetConfig+0xb2>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a2c      	ldr	r2, [pc, #176]	; (8002c90 <TIM_Base_SetConfig+0x148>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d00b      	beq.n	8002bfa <TIM_Base_SetConfig+0xb2>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a2b      	ldr	r2, [pc, #172]	; (8002c94 <TIM_Base_SetConfig+0x14c>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d007      	beq.n	8002bfa <TIM_Base_SetConfig+0xb2>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a2a      	ldr	r2, [pc, #168]	; (8002c98 <TIM_Base_SetConfig+0x150>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d003      	beq.n	8002bfa <TIM_Base_SetConfig+0xb2>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a29      	ldr	r2, [pc, #164]	; (8002c9c <TIM_Base_SetConfig+0x154>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d108      	bne.n	8002c0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a10      	ldr	r2, [pc, #64]	; (8002c74 <TIM_Base_SetConfig+0x12c>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d003      	beq.n	8002c40 <TIM_Base_SetConfig+0xf8>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a12      	ldr	r2, [pc, #72]	; (8002c84 <TIM_Base_SetConfig+0x13c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d103      	bne.n	8002c48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	691a      	ldr	r2, [r3, #16]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d105      	bne.n	8002c66 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	f023 0201 	bic.w	r2, r3, #1
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	611a      	str	r2, [r3, #16]
  }
}
 8002c66:	bf00      	nop
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	40010000 	.word	0x40010000
 8002c78:	40000400 	.word	0x40000400
 8002c7c:	40000800 	.word	0x40000800
 8002c80:	40000c00 	.word	0x40000c00
 8002c84:	40010400 	.word	0x40010400
 8002c88:	40014000 	.word	0x40014000
 8002c8c:	40014400 	.word	0x40014400
 8002c90:	40014800 	.word	0x40014800
 8002c94:	40001800 	.word	0x40001800
 8002c98:	40001c00 	.word	0x40001c00
 8002c9c:	40002000 	.word	0x40002000

08002ca0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	f023 0201 	bic.w	r2, r3, #1
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f023 0303 	bic.w	r3, r3, #3
 8002cd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f023 0302 	bic.w	r3, r3, #2
 8002ce8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a20      	ldr	r2, [pc, #128]	; (8002d78 <TIM_OC1_SetConfig+0xd8>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d003      	beq.n	8002d04 <TIM_OC1_SetConfig+0x64>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a1f      	ldr	r2, [pc, #124]	; (8002d7c <TIM_OC1_SetConfig+0xdc>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d10c      	bne.n	8002d1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f023 0308 	bic.w	r3, r3, #8
 8002d0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f023 0304 	bic.w	r3, r3, #4
 8002d1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a15      	ldr	r2, [pc, #84]	; (8002d78 <TIM_OC1_SetConfig+0xd8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d003      	beq.n	8002d2e <TIM_OC1_SetConfig+0x8e>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a14      	ldr	r2, [pc, #80]	; (8002d7c <TIM_OC1_SetConfig+0xdc>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d111      	bne.n	8002d52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	621a      	str	r2, [r3, #32]
}
 8002d6c:	bf00      	nop
 8002d6e:	371c      	adds	r7, #28
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	40010000 	.word	0x40010000
 8002d7c:	40010400 	.word	0x40010400

08002d80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	f023 0210 	bic.w	r2, r3, #16
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002db6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	021b      	lsls	r3, r3, #8
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f023 0320 	bic.w	r3, r3, #32
 8002dca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a22      	ldr	r2, [pc, #136]	; (8002e64 <TIM_OC2_SetConfig+0xe4>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d003      	beq.n	8002de8 <TIM_OC2_SetConfig+0x68>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a21      	ldr	r2, [pc, #132]	; (8002e68 <TIM_OC2_SetConfig+0xe8>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d10d      	bne.n	8002e04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a17      	ldr	r2, [pc, #92]	; (8002e64 <TIM_OC2_SetConfig+0xe4>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d003      	beq.n	8002e14 <TIM_OC2_SetConfig+0x94>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a16      	ldr	r2, [pc, #88]	; (8002e68 <TIM_OC2_SetConfig+0xe8>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d113      	bne.n	8002e3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	621a      	str	r2, [r3, #32]
}
 8002e56:	bf00      	nop
 8002e58:	371c      	adds	r7, #28
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	40010000 	.word	0x40010000
 8002e68:	40010400 	.word	0x40010400

08002e6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b087      	sub	sp, #28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
 8002e80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f023 0303 	bic.w	r3, r3, #3
 8002ea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002eb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	021b      	lsls	r3, r3, #8
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a21      	ldr	r2, [pc, #132]	; (8002f4c <TIM_OC3_SetConfig+0xe0>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d003      	beq.n	8002ed2 <TIM_OC3_SetConfig+0x66>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a20      	ldr	r2, [pc, #128]	; (8002f50 <TIM_OC3_SetConfig+0xe4>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d10d      	bne.n	8002eee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ed8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	021b      	lsls	r3, r3, #8
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002eec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a16      	ldr	r2, [pc, #88]	; (8002f4c <TIM_OC3_SetConfig+0xe0>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d003      	beq.n	8002efe <TIM_OC3_SetConfig+0x92>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a15      	ldr	r2, [pc, #84]	; (8002f50 <TIM_OC3_SetConfig+0xe4>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d113      	bne.n	8002f26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	011b      	lsls	r3, r3, #4
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	621a      	str	r2, [r3, #32]
}
 8002f40:	bf00      	nop
 8002f42:	371c      	adds	r7, #28
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	40010000 	.word	0x40010000
 8002f50:	40010400 	.word	0x40010400

08002f54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b087      	sub	sp, #28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	021b      	lsls	r3, r3, #8
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	031b      	lsls	r3, r3, #12
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a12      	ldr	r2, [pc, #72]	; (8002ff8 <TIM_OC4_SetConfig+0xa4>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d003      	beq.n	8002fbc <TIM_OC4_SetConfig+0x68>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a11      	ldr	r2, [pc, #68]	; (8002ffc <TIM_OC4_SetConfig+0xa8>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d109      	bne.n	8002fd0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	019b      	lsls	r3, r3, #6
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	621a      	str	r2, [r3, #32]
}
 8002fea:	bf00      	nop
 8002fec:	371c      	adds	r7, #28
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	40010000 	.word	0x40010000
 8002ffc:	40010400 	.word	0x40010400

08003000 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	f023 0201 	bic.w	r2, r3, #1
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800302a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	4313      	orrs	r3, r2
 8003034:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f023 030a 	bic.w	r3, r3, #10
 800303c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	4313      	orrs	r3, r2
 8003044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	621a      	str	r2, [r3, #32]
}
 8003052:	bf00      	nop
 8003054:	371c      	adds	r7, #28
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800305e:	b480      	push	{r7}
 8003060:	b087      	sub	sp, #28
 8003062:	af00      	add	r7, sp, #0
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	f023 0210 	bic.w	r2, r3, #16
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003088:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	031b      	lsls	r3, r3, #12
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	4313      	orrs	r3, r2
 8003092:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800309a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	011b      	lsls	r3, r3, #4
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	621a      	str	r2, [r3, #32]
}
 80030b2:	bf00      	nop
 80030b4:	371c      	adds	r7, #28
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030be:	b480      	push	{r7}
 80030c0:	b085      	sub	sp, #20
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
 80030c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4313      	orrs	r3, r2
 80030dc:	f043 0307 	orr.w	r3, r3, #7
 80030e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	609a      	str	r2, [r3, #8]
}
 80030e8:	bf00      	nop
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b087      	sub	sp, #28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800310e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	021a      	lsls	r2, r3, #8
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	431a      	orrs	r2, r3
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	4313      	orrs	r3, r2
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	4313      	orrs	r3, r2
 8003120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	609a      	str	r2, [r3, #8]
}
 8003128:	bf00      	nop
 800312a:	371c      	adds	r7, #28
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003134:	b480      	push	{r7}
 8003136:	b087      	sub	sp, #28
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	f003 031f 	and.w	r3, r3, #31
 8003146:	2201      	movs	r2, #1
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6a1a      	ldr	r2, [r3, #32]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	43db      	mvns	r3, r3
 8003156:	401a      	ands	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a1a      	ldr	r2, [r3, #32]
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f003 031f 	and.w	r3, r3, #31
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	fa01 f303 	lsl.w	r3, r1, r3
 800316c:	431a      	orrs	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	621a      	str	r2, [r3, #32]
}
 8003172:	bf00      	nop
 8003174:	371c      	adds	r7, #28
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
	...

08003180 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003194:	2302      	movs	r3, #2
 8003196:	e05a      	b.n	800324e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a21      	ldr	r2, [pc, #132]	; (800325c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d022      	beq.n	8003222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e4:	d01d      	beq.n	8003222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a1d      	ldr	r2, [pc, #116]	; (8003260 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d018      	beq.n	8003222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a1b      	ldr	r2, [pc, #108]	; (8003264 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d013      	beq.n	8003222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a1a      	ldr	r2, [pc, #104]	; (8003268 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d00e      	beq.n	8003222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a18      	ldr	r2, [pc, #96]	; (800326c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d009      	beq.n	8003222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a17      	ldr	r2, [pc, #92]	; (8003270 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d004      	beq.n	8003222 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a15      	ldr	r2, [pc, #84]	; (8003274 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d10c      	bne.n	800323c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003228:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	4313      	orrs	r3, r2
 8003232:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	40010000 	.word	0x40010000
 8003260:	40000400 	.word	0x40000400
 8003264:	40000800 	.word	0x40000800
 8003268:	40000c00 	.word	0x40000c00
 800326c:	40010400 	.word	0x40010400
 8003270:	40014000 	.word	0x40014000
 8003274:	40001800 	.word	0x40001800

08003278 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800328c:	2b01      	cmp	r3, #1
 800328e:	d101      	bne.n	8003294 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003290:	2302      	movs	r3, #2
 8003292:	e03d      	b.n	8003310 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	4313      	orrs	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	69db      	ldr	r3, [r3, #28]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e042      	b.n	80033b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d106      	bne.n	8003348 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7fd fe58 	bl	8000ff8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2224      	movs	r2, #36	; 0x24
 800334c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800335e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 fdbd 	bl	8003ee0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003374:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695a      	ldr	r2, [r3, #20]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003384:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003394:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2220      	movs	r2, #32
 80033a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2220      	movs	r2, #32
 80033a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b08a      	sub	sp, #40	; 0x28
 80033c0:	af02      	add	r7, sp, #8
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	603b      	str	r3, [r7, #0]
 80033c8:	4613      	mov	r3, r2
 80033ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b20      	cmp	r3, #32
 80033da:	d175      	bne.n	80034c8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <HAL_UART_Transmit+0x2c>
 80033e2:	88fb      	ldrh	r3, [r7, #6]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e06e      	b.n	80034ca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2221      	movs	r2, #33	; 0x21
 80033f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033fa:	f7fd ff53 	bl	80012a4 <HAL_GetTick>
 80033fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	88fa      	ldrh	r2, [r7, #6]
 8003404:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	88fa      	ldrh	r2, [r7, #6]
 800340a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003414:	d108      	bne.n	8003428 <HAL_UART_Transmit+0x6c>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d104      	bne.n	8003428 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800341e:	2300      	movs	r3, #0
 8003420:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	61bb      	str	r3, [r7, #24]
 8003426:	e003      	b.n	8003430 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800342c:	2300      	movs	r3, #0
 800342e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003430:	e02e      	b.n	8003490 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2200      	movs	r2, #0
 800343a:	2180      	movs	r1, #128	; 0x80
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 fb1f 	bl	8003a80 <UART_WaitOnFlagUntilTimeout>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d005      	beq.n	8003454 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e03a      	b.n	80034ca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d10b      	bne.n	8003472 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	881b      	ldrh	r3, [r3, #0]
 800345e:	461a      	mov	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003468:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	3302      	adds	r3, #2
 800346e:	61bb      	str	r3, [r7, #24]
 8003470:	e007      	b.n	8003482 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	781a      	ldrb	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	3301      	adds	r3, #1
 8003480:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003486:	b29b      	uxth	r3, r3
 8003488:	3b01      	subs	r3, #1
 800348a:	b29a      	uxth	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003494:	b29b      	uxth	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1cb      	bne.n	8003432 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2200      	movs	r2, #0
 80034a2:	2140      	movs	r1, #64	; 0x40
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 faeb 	bl	8003a80 <UART_WaitOnFlagUntilTimeout>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d005      	beq.n	80034bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e006      	b.n	80034ca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2220      	movs	r2, #32
 80034c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80034c4:	2300      	movs	r3, #0
 80034c6:	e000      	b.n	80034ca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80034c8:	2302      	movs	r3, #2
  }
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3720      	adds	r7, #32
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b084      	sub	sp, #16
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	60f8      	str	r0, [r7, #12]
 80034da:	60b9      	str	r1, [r7, #8]
 80034dc:	4613      	mov	r3, r2
 80034de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b20      	cmp	r3, #32
 80034ea:	d112      	bne.n	8003512 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d002      	beq.n	80034f8 <HAL_UART_Receive_IT+0x26>
 80034f2:	88fb      	ldrh	r3, [r7, #6]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e00b      	b.n	8003514 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003502:	88fb      	ldrh	r3, [r7, #6]
 8003504:	461a      	mov	r2, r3
 8003506:	68b9      	ldr	r1, [r7, #8]
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 fb12 	bl	8003b32 <UART_Start_Receive_IT>
 800350e:	4603      	mov	r3, r0
 8003510:	e000      	b.n	8003514 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003512:	2302      	movs	r3, #2
  }
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b0ba      	sub	sp, #232	; 0xe8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003542:	2300      	movs	r3, #0
 8003544:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003548:	2300      	movs	r3, #0
 800354a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800354e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800355a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10f      	bne.n	8003582 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003566:	f003 0320 	and.w	r3, r3, #32
 800356a:	2b00      	cmp	r3, #0
 800356c:	d009      	beq.n	8003582 <HAL_UART_IRQHandler+0x66>
 800356e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003572:	f003 0320 	and.w	r3, r3, #32
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 fbf2 	bl	8003d64 <UART_Receive_IT>
      return;
 8003580:	e25b      	b.n	8003a3a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003582:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 80de 	beq.w	8003748 <HAL_UART_IRQHandler+0x22c>
 800358c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b00      	cmp	r3, #0
 8003596:	d106      	bne.n	80035a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800359c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 80d1 	beq.w	8003748 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00b      	beq.n	80035ca <HAL_UART_IRQHandler+0xae>
 80035b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d005      	beq.n	80035ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c2:	f043 0201 	orr.w	r2, r3, #1
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ce:	f003 0304 	and.w	r3, r3, #4
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00b      	beq.n	80035ee <HAL_UART_IRQHandler+0xd2>
 80035d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d005      	beq.n	80035ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e6:	f043 0202 	orr.w	r2, r3, #2
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00b      	beq.n	8003612 <HAL_UART_IRQHandler+0xf6>
 80035fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d005      	beq.n	8003612 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360a:	f043 0204 	orr.w	r2, r3, #4
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b00      	cmp	r3, #0
 800361c:	d011      	beq.n	8003642 <HAL_UART_IRQHandler+0x126>
 800361e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003622:	f003 0320 	and.w	r3, r3, #32
 8003626:	2b00      	cmp	r3, #0
 8003628:	d105      	bne.n	8003636 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800362a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d005      	beq.n	8003642 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363a:	f043 0208 	orr.w	r2, r3, #8
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 81f2 	beq.w	8003a30 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800364c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003650:	f003 0320 	and.w	r3, r3, #32
 8003654:	2b00      	cmp	r3, #0
 8003656:	d008      	beq.n	800366a <HAL_UART_IRQHandler+0x14e>
 8003658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800365c:	f003 0320 	and.w	r3, r3, #32
 8003660:	2b00      	cmp	r3, #0
 8003662:	d002      	beq.n	800366a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 fb7d 	bl	8003d64 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003674:	2b40      	cmp	r3, #64	; 0x40
 8003676:	bf0c      	ite	eq
 8003678:	2301      	moveq	r3, #1
 800367a:	2300      	movne	r3, #0
 800367c:	b2db      	uxtb	r3, r3
 800367e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003686:	f003 0308 	and.w	r3, r3, #8
 800368a:	2b00      	cmp	r3, #0
 800368c:	d103      	bne.n	8003696 <HAL_UART_IRQHandler+0x17a>
 800368e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003692:	2b00      	cmp	r3, #0
 8003694:	d04f      	beq.n	8003736 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 fa85 	bl	8003ba6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a6:	2b40      	cmp	r3, #64	; 0x40
 80036a8:	d141      	bne.n	800372e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	3314      	adds	r3, #20
 80036b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036b8:	e853 3f00 	ldrex	r3, [r3]
 80036bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80036c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80036c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	3314      	adds	r3, #20
 80036d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80036d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80036da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80036e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80036e6:	e841 2300 	strex	r3, r2, [r1]
 80036ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80036ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1d9      	bne.n	80036aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d013      	beq.n	8003726 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003702:	4a7e      	ldr	r2, [pc, #504]	; (80038fc <HAL_UART_IRQHandler+0x3e0>)
 8003704:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370a:	4618      	mov	r0, r3
 800370c:	f7fd ff7b 	bl	8001606 <HAL_DMA_Abort_IT>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d016      	beq.n	8003744 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003720:	4610      	mov	r0, r2
 8003722:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003724:	e00e      	b.n	8003744 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f994 	bl	8003a54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800372c:	e00a      	b.n	8003744 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f990 	bl	8003a54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003734:	e006      	b.n	8003744 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f98c 	bl	8003a54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003742:	e175      	b.n	8003a30 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003744:	bf00      	nop
    return;
 8003746:	e173      	b.n	8003a30 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374c:	2b01      	cmp	r3, #1
 800374e:	f040 814f 	bne.w	80039f0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003756:	f003 0310 	and.w	r3, r3, #16
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 8148 	beq.w	80039f0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 8141 	beq.w	80039f0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800376e:	2300      	movs	r3, #0
 8003770:	60bb      	str	r3, [r7, #8]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	60bb      	str	r3, [r7, #8]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	60bb      	str	r3, [r7, #8]
 8003782:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378e:	2b40      	cmp	r3, #64	; 0x40
 8003790:	f040 80b6 	bne.w	8003900 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80037a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 8145 	beq.w	8003a34 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037b2:	429a      	cmp	r2, r3
 80037b4:	f080 813e 	bcs.w	8003a34 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ca:	f000 8088 	beq.w	80038de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	330c      	adds	r3, #12
 80037d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037dc:	e853 3f00 	ldrex	r3, [r3]
 80037e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80037e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	330c      	adds	r3, #12
 80037f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80037fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003802:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003806:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800380a:	e841 2300 	strex	r3, r2, [r1]
 800380e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003812:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1d9      	bne.n	80037ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	3314      	adds	r3, #20
 8003820:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003822:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003824:	e853 3f00 	ldrex	r3, [r3]
 8003828:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800382a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800382c:	f023 0301 	bic.w	r3, r3, #1
 8003830:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	3314      	adds	r3, #20
 800383a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800383e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003842:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003844:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003846:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800384a:	e841 2300 	strex	r3, r2, [r1]
 800384e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003850:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1e1      	bne.n	800381a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	3314      	adds	r3, #20
 800385c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003860:	e853 3f00 	ldrex	r3, [r3]
 8003864:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003866:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800386c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3314      	adds	r3, #20
 8003876:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800387a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800387c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003880:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003882:	e841 2300 	strex	r3, r2, [r1]
 8003886:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003888:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1e3      	bne.n	8003856 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2220      	movs	r2, #32
 8003892:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	330c      	adds	r3, #12
 80038a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038a6:	e853 3f00 	ldrex	r3, [r3]
 80038aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80038ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ae:	f023 0310 	bic.w	r3, r3, #16
 80038b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	330c      	adds	r3, #12
 80038bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80038c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80038c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80038c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038c8:	e841 2300 	strex	r3, r2, [r1]
 80038cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80038ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1e3      	bne.n	800389c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d8:	4618      	mov	r0, r3
 80038da:	f7fd fe24 	bl	8001526 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2202      	movs	r2, #2
 80038e2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	4619      	mov	r1, r3
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 f8b7 	bl	8003a68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038fa:	e09b      	b.n	8003a34 <HAL_UART_IRQHandler+0x518>
 80038fc:	08003c6d 	.word	0x08003c6d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003908:	b29b      	uxth	r3, r3
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003914:	b29b      	uxth	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	f000 808e 	beq.w	8003a38 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800391c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 8089 	beq.w	8003a38 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	330c      	adds	r3, #12
 800392c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003930:	e853 3f00 	ldrex	r3, [r3]
 8003934:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003938:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800393c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	330c      	adds	r3, #12
 8003946:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800394a:	647a      	str	r2, [r7, #68]	; 0x44
 800394c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003950:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003952:	e841 2300 	strex	r3, r2, [r1]
 8003956:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1e3      	bne.n	8003926 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	3314      	adds	r3, #20
 8003964:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	e853 3f00 	ldrex	r3, [r3]
 800396c:	623b      	str	r3, [r7, #32]
   return(result);
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	f023 0301 	bic.w	r3, r3, #1
 8003974:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3314      	adds	r3, #20
 800397e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003982:	633a      	str	r2, [r7, #48]	; 0x30
 8003984:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003986:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800398a:	e841 2300 	strex	r3, r2, [r1]
 800398e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1e3      	bne.n	800395e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2220      	movs	r2, #32
 800399a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	330c      	adds	r3, #12
 80039aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	e853 3f00 	ldrex	r3, [r3]
 80039b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f023 0310 	bic.w	r3, r3, #16
 80039ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	330c      	adds	r3, #12
 80039c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80039c8:	61fa      	str	r2, [r7, #28]
 80039ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039cc:	69b9      	ldr	r1, [r7, #24]
 80039ce:	69fa      	ldr	r2, [r7, #28]
 80039d0:	e841 2300 	strex	r3, r2, [r1]
 80039d4:	617b      	str	r3, [r7, #20]
   return(result);
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1e3      	bne.n	80039a4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2202      	movs	r2, #2
 80039e0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039e6:	4619      	mov	r1, r3
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f83d 	bl	8003a68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039ee:	e023      	b.n	8003a38 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d009      	beq.n	8003a10 <HAL_UART_IRQHandler+0x4f4>
 80039fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d003      	beq.n	8003a10 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f943 	bl	8003c94 <UART_Transmit_IT>
    return;
 8003a0e:	e014      	b.n	8003a3a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00e      	beq.n	8003a3a <HAL_UART_IRQHandler+0x51e>
 8003a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d008      	beq.n	8003a3a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f983 	bl	8003d34 <UART_EndTransmit_IT>
    return;
 8003a2e:	e004      	b.n	8003a3a <HAL_UART_IRQHandler+0x51e>
    return;
 8003a30:	bf00      	nop
 8003a32:	e002      	b.n	8003a3a <HAL_UART_IRQHandler+0x51e>
      return;
 8003a34:	bf00      	nop
 8003a36:	e000      	b.n	8003a3a <HAL_UART_IRQHandler+0x51e>
      return;
 8003a38:	bf00      	nop
  }
}
 8003a3a:	37e8      	adds	r7, #232	; 0xe8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	460b      	mov	r3, r1
 8003a72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	603b      	str	r3, [r7, #0]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a90:	e03b      	b.n	8003b0a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a98:	d037      	beq.n	8003b0a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a9a:	f7fd fc03 	bl	80012a4 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	6a3a      	ldr	r2, [r7, #32]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d302      	bcc.n	8003ab0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e03a      	b.n	8003b2a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f003 0304 	and.w	r3, r3, #4
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d023      	beq.n	8003b0a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2b80      	cmp	r3, #128	; 0x80
 8003ac6:	d020      	beq.n	8003b0a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b40      	cmp	r3, #64	; 0x40
 8003acc:	d01d      	beq.n	8003b0a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d116      	bne.n	8003b0a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003adc:	2300      	movs	r3, #0
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 f857 	bl	8003ba6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2208      	movs	r2, #8
 8003afc:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e00f      	b.n	8003b2a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	4013      	ands	r3, r2
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	bf0c      	ite	eq
 8003b1a:	2301      	moveq	r3, #1
 8003b1c:	2300      	movne	r3, #0
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	461a      	mov	r2, r3
 8003b22:	79fb      	ldrb	r3, [r7, #7]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d0b4      	beq.n	8003a92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b085      	sub	sp, #20
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	60b9      	str	r1, [r7, #8]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	88fa      	ldrh	r2, [r7, #6]
 8003b4a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	88fa      	ldrh	r2, [r7, #6]
 8003b50:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2222      	movs	r2, #34	; 0x22
 8003b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d007      	beq.n	8003b78 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b76:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695a      	ldr	r2, [r3, #20]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0201 	orr.w	r2, r2, #1
 8003b86:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68da      	ldr	r2, [r3, #12]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0220 	orr.w	r2, r2, #32
 8003b96:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b095      	sub	sp, #84	; 0x54
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	330c      	adds	r3, #12
 8003bb4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb8:	e853 3f00 	ldrex	r3, [r3]
 8003bbc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	330c      	adds	r3, #12
 8003bcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bce:	643a      	str	r2, [r7, #64]	; 0x40
 8003bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bd6:	e841 2300 	strex	r3, r2, [r1]
 8003bda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1e5      	bne.n	8003bae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	3314      	adds	r3, #20
 8003be8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	e853 3f00 	ldrex	r3, [r3]
 8003bf0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	f023 0301 	bic.w	r3, r3, #1
 8003bf8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	3314      	adds	r3, #20
 8003c00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c0a:	e841 2300 	strex	r3, r2, [r1]
 8003c0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1e5      	bne.n	8003be2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d119      	bne.n	8003c52 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	330c      	adds	r3, #12
 8003c24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	e853 3f00 	ldrex	r3, [r3]
 8003c2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	f023 0310 	bic.w	r3, r3, #16
 8003c34:	647b      	str	r3, [r7, #68]	; 0x44
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	330c      	adds	r3, #12
 8003c3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c3e:	61ba      	str	r2, [r7, #24]
 8003c40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c42:	6979      	ldr	r1, [r7, #20]
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	e841 2300 	strex	r3, r2, [r1]
 8003c4a:	613b      	str	r3, [r7, #16]
   return(result);
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1e5      	bne.n	8003c1e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2220      	movs	r2, #32
 8003c56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c60:	bf00      	nop
 8003c62:	3754      	adds	r7, #84	; 0x54
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f7ff fee4 	bl	8003a54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c8c:	bf00      	nop
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b21      	cmp	r3, #33	; 0x21
 8003ca6:	d13e      	bne.n	8003d26 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb0:	d114      	bne.n	8003cdc <UART_Transmit_IT+0x48>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d110      	bne.n	8003cdc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	1c9a      	adds	r2, r3, #2
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	621a      	str	r2, [r3, #32]
 8003cda:	e008      	b.n	8003cee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	1c59      	adds	r1, r3, #1
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6211      	str	r1, [r2, #32]
 8003ce6:	781a      	ldrb	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10f      	bne.n	8003d22 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d10:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d20:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d22:	2300      	movs	r3, #0
 8003d24:	e000      	b.n	8003d28 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d26:	2302      	movs	r3, #2
  }
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d4a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7ff fe73 	bl	8003a40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b08c      	sub	sp, #48	; 0x30
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b22      	cmp	r3, #34	; 0x22
 8003d76:	f040 80ae 	bne.w	8003ed6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d82:	d117      	bne.n	8003db4 <UART_Receive_IT+0x50>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d113      	bne.n	8003db4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d94:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dac:	1c9a      	adds	r2, r3, #2
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	629a      	str	r2, [r3, #40]	; 0x28
 8003db2:	e026      	b.n	8003e02 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc6:	d007      	beq.n	8003dd8 <UART_Receive_IT+0x74>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10a      	bne.n	8003de6 <UART_Receive_IT+0x82>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d106      	bne.n	8003de6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de2:	701a      	strb	r2, [r3, #0]
 8003de4:	e008      	b.n	8003df8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfc:	1c5a      	adds	r2, r3, #1
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	3b01      	subs	r3, #1
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	4619      	mov	r1, r3
 8003e10:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d15d      	bne.n	8003ed2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68da      	ldr	r2, [r3, #12]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0220 	bic.w	r2, r2, #32
 8003e24:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68da      	ldr	r2, [r3, #12]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e34:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	695a      	ldr	r2, [r3, #20]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0201 	bic.w	r2, r2, #1
 8003e44:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d135      	bne.n	8003ec8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	330c      	adds	r3, #12
 8003e68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	e853 3f00 	ldrex	r3, [r3]
 8003e70:	613b      	str	r3, [r7, #16]
   return(result);
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	f023 0310 	bic.w	r3, r3, #16
 8003e78:	627b      	str	r3, [r7, #36]	; 0x24
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	330c      	adds	r3, #12
 8003e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e82:	623a      	str	r2, [r7, #32]
 8003e84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e86:	69f9      	ldr	r1, [r7, #28]
 8003e88:	6a3a      	ldr	r2, [r7, #32]
 8003e8a:	e841 2300 	strex	r3, r2, [r1]
 8003e8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1e5      	bne.n	8003e62 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0310 	and.w	r3, r3, #16
 8003ea0:	2b10      	cmp	r3, #16
 8003ea2:	d10a      	bne.n	8003eba <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7ff fdd1 	bl	8003a68 <HAL_UARTEx_RxEventCallback>
 8003ec6:	e002      	b.n	8003ece <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f7fc fe05 	bl	8000ad8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	e002      	b.n	8003ed8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	e000      	b.n	8003ed8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003ed6:	2302      	movs	r3, #2
  }
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3730      	adds	r7, #48	; 0x30
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ee4:	b0c0      	sub	sp, #256	; 0x100
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003efc:	68d9      	ldr	r1, [r3, #12]
 8003efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	ea40 0301 	orr.w	r3, r0, r1
 8003f08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	431a      	orrs	r2, r3
 8003f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f38:	f021 010c 	bic.w	r1, r1, #12
 8003f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f46:	430b      	orrs	r3, r1
 8003f48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f5a:	6999      	ldr	r1, [r3, #24]
 8003f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	ea40 0301 	orr.w	r3, r0, r1
 8003f66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	4b8f      	ldr	r3, [pc, #572]	; (80041ac <UART_SetConfig+0x2cc>)
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d005      	beq.n	8003f80 <UART_SetConfig+0xa0>
 8003f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	4b8d      	ldr	r3, [pc, #564]	; (80041b0 <UART_SetConfig+0x2d0>)
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d104      	bne.n	8003f8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f80:	f7fe f9a0 	bl	80022c4 <HAL_RCC_GetPCLK2Freq>
 8003f84:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f88:	e003      	b.n	8003f92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f8a:	f7fe f987 	bl	800229c <HAL_RCC_GetPCLK1Freq>
 8003f8e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f9c:	f040 810c 	bne.w	80041b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003faa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003fae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003fb2:	4622      	mov	r2, r4
 8003fb4:	462b      	mov	r3, r5
 8003fb6:	1891      	adds	r1, r2, r2
 8003fb8:	65b9      	str	r1, [r7, #88]	; 0x58
 8003fba:	415b      	adcs	r3, r3
 8003fbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003fc2:	4621      	mov	r1, r4
 8003fc4:	eb12 0801 	adds.w	r8, r2, r1
 8003fc8:	4629      	mov	r1, r5
 8003fca:	eb43 0901 	adc.w	r9, r3, r1
 8003fce:	f04f 0200 	mov.w	r2, #0
 8003fd2:	f04f 0300 	mov.w	r3, #0
 8003fd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fe2:	4690      	mov	r8, r2
 8003fe4:	4699      	mov	r9, r3
 8003fe6:	4623      	mov	r3, r4
 8003fe8:	eb18 0303 	adds.w	r3, r8, r3
 8003fec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ff0:	462b      	mov	r3, r5
 8003ff2:	eb49 0303 	adc.w	r3, r9, r3
 8003ff6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004006:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800400a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800400e:	460b      	mov	r3, r1
 8004010:	18db      	adds	r3, r3, r3
 8004012:	653b      	str	r3, [r7, #80]	; 0x50
 8004014:	4613      	mov	r3, r2
 8004016:	eb42 0303 	adc.w	r3, r2, r3
 800401a:	657b      	str	r3, [r7, #84]	; 0x54
 800401c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004020:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004024:	f7fc f924 	bl	8000270 <__aeabi_uldivmod>
 8004028:	4602      	mov	r2, r0
 800402a:	460b      	mov	r3, r1
 800402c:	4b61      	ldr	r3, [pc, #388]	; (80041b4 <UART_SetConfig+0x2d4>)
 800402e:	fba3 2302 	umull	r2, r3, r3, r2
 8004032:	095b      	lsrs	r3, r3, #5
 8004034:	011c      	lsls	r4, r3, #4
 8004036:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800403a:	2200      	movs	r2, #0
 800403c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004040:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004044:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004048:	4642      	mov	r2, r8
 800404a:	464b      	mov	r3, r9
 800404c:	1891      	adds	r1, r2, r2
 800404e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004050:	415b      	adcs	r3, r3
 8004052:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004054:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004058:	4641      	mov	r1, r8
 800405a:	eb12 0a01 	adds.w	sl, r2, r1
 800405e:	4649      	mov	r1, r9
 8004060:	eb43 0b01 	adc.w	fp, r3, r1
 8004064:	f04f 0200 	mov.w	r2, #0
 8004068:	f04f 0300 	mov.w	r3, #0
 800406c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004070:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004074:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004078:	4692      	mov	sl, r2
 800407a:	469b      	mov	fp, r3
 800407c:	4643      	mov	r3, r8
 800407e:	eb1a 0303 	adds.w	r3, sl, r3
 8004082:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004086:	464b      	mov	r3, r9
 8004088:	eb4b 0303 	adc.w	r3, fp, r3
 800408c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800409c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80040a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80040a4:	460b      	mov	r3, r1
 80040a6:	18db      	adds	r3, r3, r3
 80040a8:	643b      	str	r3, [r7, #64]	; 0x40
 80040aa:	4613      	mov	r3, r2
 80040ac:	eb42 0303 	adc.w	r3, r2, r3
 80040b0:	647b      	str	r3, [r7, #68]	; 0x44
 80040b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80040ba:	f7fc f8d9 	bl	8000270 <__aeabi_uldivmod>
 80040be:	4602      	mov	r2, r0
 80040c0:	460b      	mov	r3, r1
 80040c2:	4611      	mov	r1, r2
 80040c4:	4b3b      	ldr	r3, [pc, #236]	; (80041b4 <UART_SetConfig+0x2d4>)
 80040c6:	fba3 2301 	umull	r2, r3, r3, r1
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	2264      	movs	r2, #100	; 0x64
 80040ce:	fb02 f303 	mul.w	r3, r2, r3
 80040d2:	1acb      	subs	r3, r1, r3
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80040da:	4b36      	ldr	r3, [pc, #216]	; (80041b4 <UART_SetConfig+0x2d4>)
 80040dc:	fba3 2302 	umull	r2, r3, r3, r2
 80040e0:	095b      	lsrs	r3, r3, #5
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040e8:	441c      	add	r4, r3
 80040ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040ee:	2200      	movs	r2, #0
 80040f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80040f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80040fc:	4642      	mov	r2, r8
 80040fe:	464b      	mov	r3, r9
 8004100:	1891      	adds	r1, r2, r2
 8004102:	63b9      	str	r1, [r7, #56]	; 0x38
 8004104:	415b      	adcs	r3, r3
 8004106:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004108:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800410c:	4641      	mov	r1, r8
 800410e:	1851      	adds	r1, r2, r1
 8004110:	6339      	str	r1, [r7, #48]	; 0x30
 8004112:	4649      	mov	r1, r9
 8004114:	414b      	adcs	r3, r1
 8004116:	637b      	str	r3, [r7, #52]	; 0x34
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004124:	4659      	mov	r1, fp
 8004126:	00cb      	lsls	r3, r1, #3
 8004128:	4651      	mov	r1, sl
 800412a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800412e:	4651      	mov	r1, sl
 8004130:	00ca      	lsls	r2, r1, #3
 8004132:	4610      	mov	r0, r2
 8004134:	4619      	mov	r1, r3
 8004136:	4603      	mov	r3, r0
 8004138:	4642      	mov	r2, r8
 800413a:	189b      	adds	r3, r3, r2
 800413c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004140:	464b      	mov	r3, r9
 8004142:	460a      	mov	r2, r1
 8004144:	eb42 0303 	adc.w	r3, r2, r3
 8004148:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800414c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004158:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800415c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004160:	460b      	mov	r3, r1
 8004162:	18db      	adds	r3, r3, r3
 8004164:	62bb      	str	r3, [r7, #40]	; 0x28
 8004166:	4613      	mov	r3, r2
 8004168:	eb42 0303 	adc.w	r3, r2, r3
 800416c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800416e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004172:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004176:	f7fc f87b 	bl	8000270 <__aeabi_uldivmod>
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	4b0d      	ldr	r3, [pc, #52]	; (80041b4 <UART_SetConfig+0x2d4>)
 8004180:	fba3 1302 	umull	r1, r3, r3, r2
 8004184:	095b      	lsrs	r3, r3, #5
 8004186:	2164      	movs	r1, #100	; 0x64
 8004188:	fb01 f303 	mul.w	r3, r1, r3
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	3332      	adds	r3, #50	; 0x32
 8004192:	4a08      	ldr	r2, [pc, #32]	; (80041b4 <UART_SetConfig+0x2d4>)
 8004194:	fba2 2303 	umull	r2, r3, r2, r3
 8004198:	095b      	lsrs	r3, r3, #5
 800419a:	f003 0207 	and.w	r2, r3, #7
 800419e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4422      	add	r2, r4
 80041a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041a8:	e106      	b.n	80043b8 <UART_SetConfig+0x4d8>
 80041aa:	bf00      	nop
 80041ac:	40011000 	.word	0x40011000
 80041b0:	40011400 	.word	0x40011400
 80041b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041bc:	2200      	movs	r2, #0
 80041be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80041c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80041c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80041ca:	4642      	mov	r2, r8
 80041cc:	464b      	mov	r3, r9
 80041ce:	1891      	adds	r1, r2, r2
 80041d0:	6239      	str	r1, [r7, #32]
 80041d2:	415b      	adcs	r3, r3
 80041d4:	627b      	str	r3, [r7, #36]	; 0x24
 80041d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041da:	4641      	mov	r1, r8
 80041dc:	1854      	adds	r4, r2, r1
 80041de:	4649      	mov	r1, r9
 80041e0:	eb43 0501 	adc.w	r5, r3, r1
 80041e4:	f04f 0200 	mov.w	r2, #0
 80041e8:	f04f 0300 	mov.w	r3, #0
 80041ec:	00eb      	lsls	r3, r5, #3
 80041ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041f2:	00e2      	lsls	r2, r4, #3
 80041f4:	4614      	mov	r4, r2
 80041f6:	461d      	mov	r5, r3
 80041f8:	4643      	mov	r3, r8
 80041fa:	18e3      	adds	r3, r4, r3
 80041fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004200:	464b      	mov	r3, r9
 8004202:	eb45 0303 	adc.w	r3, r5, r3
 8004206:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800420a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004216:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800421a:	f04f 0200 	mov.w	r2, #0
 800421e:	f04f 0300 	mov.w	r3, #0
 8004222:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004226:	4629      	mov	r1, r5
 8004228:	008b      	lsls	r3, r1, #2
 800422a:	4621      	mov	r1, r4
 800422c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004230:	4621      	mov	r1, r4
 8004232:	008a      	lsls	r2, r1, #2
 8004234:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004238:	f7fc f81a 	bl	8000270 <__aeabi_uldivmod>
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	4b60      	ldr	r3, [pc, #384]	; (80043c4 <UART_SetConfig+0x4e4>)
 8004242:	fba3 2302 	umull	r2, r3, r3, r2
 8004246:	095b      	lsrs	r3, r3, #5
 8004248:	011c      	lsls	r4, r3, #4
 800424a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800424e:	2200      	movs	r2, #0
 8004250:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004254:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004258:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800425c:	4642      	mov	r2, r8
 800425e:	464b      	mov	r3, r9
 8004260:	1891      	adds	r1, r2, r2
 8004262:	61b9      	str	r1, [r7, #24]
 8004264:	415b      	adcs	r3, r3
 8004266:	61fb      	str	r3, [r7, #28]
 8004268:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800426c:	4641      	mov	r1, r8
 800426e:	1851      	adds	r1, r2, r1
 8004270:	6139      	str	r1, [r7, #16]
 8004272:	4649      	mov	r1, r9
 8004274:	414b      	adcs	r3, r1
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	f04f 0200 	mov.w	r2, #0
 800427c:	f04f 0300 	mov.w	r3, #0
 8004280:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004284:	4659      	mov	r1, fp
 8004286:	00cb      	lsls	r3, r1, #3
 8004288:	4651      	mov	r1, sl
 800428a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800428e:	4651      	mov	r1, sl
 8004290:	00ca      	lsls	r2, r1, #3
 8004292:	4610      	mov	r0, r2
 8004294:	4619      	mov	r1, r3
 8004296:	4603      	mov	r3, r0
 8004298:	4642      	mov	r2, r8
 800429a:	189b      	adds	r3, r3, r2
 800429c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042a0:	464b      	mov	r3, r9
 80042a2:	460a      	mov	r2, r1
 80042a4:	eb42 0303 	adc.w	r3, r2, r3
 80042a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80042b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80042b8:	f04f 0200 	mov.w	r2, #0
 80042bc:	f04f 0300 	mov.w	r3, #0
 80042c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80042c4:	4649      	mov	r1, r9
 80042c6:	008b      	lsls	r3, r1, #2
 80042c8:	4641      	mov	r1, r8
 80042ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042ce:	4641      	mov	r1, r8
 80042d0:	008a      	lsls	r2, r1, #2
 80042d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80042d6:	f7fb ffcb 	bl	8000270 <__aeabi_uldivmod>
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	4611      	mov	r1, r2
 80042e0:	4b38      	ldr	r3, [pc, #224]	; (80043c4 <UART_SetConfig+0x4e4>)
 80042e2:	fba3 2301 	umull	r2, r3, r3, r1
 80042e6:	095b      	lsrs	r3, r3, #5
 80042e8:	2264      	movs	r2, #100	; 0x64
 80042ea:	fb02 f303 	mul.w	r3, r2, r3
 80042ee:	1acb      	subs	r3, r1, r3
 80042f0:	011b      	lsls	r3, r3, #4
 80042f2:	3332      	adds	r3, #50	; 0x32
 80042f4:	4a33      	ldr	r2, [pc, #204]	; (80043c4 <UART_SetConfig+0x4e4>)
 80042f6:	fba2 2303 	umull	r2, r3, r2, r3
 80042fa:	095b      	lsrs	r3, r3, #5
 80042fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004300:	441c      	add	r4, r3
 8004302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004306:	2200      	movs	r2, #0
 8004308:	673b      	str	r3, [r7, #112]	; 0x70
 800430a:	677a      	str	r2, [r7, #116]	; 0x74
 800430c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004310:	4642      	mov	r2, r8
 8004312:	464b      	mov	r3, r9
 8004314:	1891      	adds	r1, r2, r2
 8004316:	60b9      	str	r1, [r7, #8]
 8004318:	415b      	adcs	r3, r3
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004320:	4641      	mov	r1, r8
 8004322:	1851      	adds	r1, r2, r1
 8004324:	6039      	str	r1, [r7, #0]
 8004326:	4649      	mov	r1, r9
 8004328:	414b      	adcs	r3, r1
 800432a:	607b      	str	r3, [r7, #4]
 800432c:	f04f 0200 	mov.w	r2, #0
 8004330:	f04f 0300 	mov.w	r3, #0
 8004334:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004338:	4659      	mov	r1, fp
 800433a:	00cb      	lsls	r3, r1, #3
 800433c:	4651      	mov	r1, sl
 800433e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004342:	4651      	mov	r1, sl
 8004344:	00ca      	lsls	r2, r1, #3
 8004346:	4610      	mov	r0, r2
 8004348:	4619      	mov	r1, r3
 800434a:	4603      	mov	r3, r0
 800434c:	4642      	mov	r2, r8
 800434e:	189b      	adds	r3, r3, r2
 8004350:	66bb      	str	r3, [r7, #104]	; 0x68
 8004352:	464b      	mov	r3, r9
 8004354:	460a      	mov	r2, r1
 8004356:	eb42 0303 	adc.w	r3, r2, r3
 800435a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800435c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	663b      	str	r3, [r7, #96]	; 0x60
 8004366:	667a      	str	r2, [r7, #100]	; 0x64
 8004368:	f04f 0200 	mov.w	r2, #0
 800436c:	f04f 0300 	mov.w	r3, #0
 8004370:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004374:	4649      	mov	r1, r9
 8004376:	008b      	lsls	r3, r1, #2
 8004378:	4641      	mov	r1, r8
 800437a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800437e:	4641      	mov	r1, r8
 8004380:	008a      	lsls	r2, r1, #2
 8004382:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004386:	f7fb ff73 	bl	8000270 <__aeabi_uldivmod>
 800438a:	4602      	mov	r2, r0
 800438c:	460b      	mov	r3, r1
 800438e:	4b0d      	ldr	r3, [pc, #52]	; (80043c4 <UART_SetConfig+0x4e4>)
 8004390:	fba3 1302 	umull	r1, r3, r3, r2
 8004394:	095b      	lsrs	r3, r3, #5
 8004396:	2164      	movs	r1, #100	; 0x64
 8004398:	fb01 f303 	mul.w	r3, r1, r3
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	011b      	lsls	r3, r3, #4
 80043a0:	3332      	adds	r3, #50	; 0x32
 80043a2:	4a08      	ldr	r2, [pc, #32]	; (80043c4 <UART_SetConfig+0x4e4>)
 80043a4:	fba2 2303 	umull	r2, r3, r2, r3
 80043a8:	095b      	lsrs	r3, r3, #5
 80043aa:	f003 020f 	and.w	r2, r3, #15
 80043ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4422      	add	r2, r4
 80043b6:	609a      	str	r2, [r3, #8]
}
 80043b8:	bf00      	nop
 80043ba:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80043be:	46bd      	mov	sp, r7
 80043c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043c4:	51eb851f 	.word	0x51eb851f

080043c8 <__NVIC_SetPriority>:
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	4603      	mov	r3, r0
 80043d0:	6039      	str	r1, [r7, #0]
 80043d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	db0a      	blt.n	80043f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	490c      	ldr	r1, [pc, #48]	; (8004414 <__NVIC_SetPriority+0x4c>)
 80043e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e6:	0112      	lsls	r2, r2, #4
 80043e8:	b2d2      	uxtb	r2, r2
 80043ea:	440b      	add	r3, r1
 80043ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80043f0:	e00a      	b.n	8004408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	4908      	ldr	r1, [pc, #32]	; (8004418 <__NVIC_SetPriority+0x50>)
 80043f8:	79fb      	ldrb	r3, [r7, #7]
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	3b04      	subs	r3, #4
 8004400:	0112      	lsls	r2, r2, #4
 8004402:	b2d2      	uxtb	r2, r2
 8004404:	440b      	add	r3, r1
 8004406:	761a      	strb	r2, [r3, #24]
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	e000e100 	.word	0xe000e100
 8004418:	e000ed00 	.word	0xe000ed00

0800441c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004420:	2100      	movs	r1, #0
 8004422:	f06f 0004 	mvn.w	r0, #4
 8004426:	f7ff ffcf 	bl	80043c8 <__NVIC_SetPriority>
#endif
}
 800442a:	bf00      	nop
 800442c:	bd80      	pop	{r7, pc}
	...

08004430 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004436:	f3ef 8305 	mrs	r3, IPSR
 800443a:	603b      	str	r3, [r7, #0]
  return(result);
 800443c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004442:	f06f 0305 	mvn.w	r3, #5
 8004446:	607b      	str	r3, [r7, #4]
 8004448:	e00c      	b.n	8004464 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800444a:	4b0a      	ldr	r3, [pc, #40]	; (8004474 <osKernelInitialize+0x44>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d105      	bne.n	800445e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004452:	4b08      	ldr	r3, [pc, #32]	; (8004474 <osKernelInitialize+0x44>)
 8004454:	2201      	movs	r2, #1
 8004456:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004458:	2300      	movs	r3, #0
 800445a:	607b      	str	r3, [r7, #4]
 800445c:	e002      	b.n	8004464 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800445e:	f04f 33ff 	mov.w	r3, #4294967295
 8004462:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004464:	687b      	ldr	r3, [r7, #4]
}
 8004466:	4618      	mov	r0, r3
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	200001c8 	.word	0x200001c8

08004478 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800447e:	f3ef 8305 	mrs	r3, IPSR
 8004482:	603b      	str	r3, [r7, #0]
  return(result);
 8004484:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <osKernelStart+0x1a>
    stat = osErrorISR;
 800448a:	f06f 0305 	mvn.w	r3, #5
 800448e:	607b      	str	r3, [r7, #4]
 8004490:	e010      	b.n	80044b4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004492:	4b0b      	ldr	r3, [pc, #44]	; (80044c0 <osKernelStart+0x48>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d109      	bne.n	80044ae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800449a:	f7ff ffbf 	bl	800441c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800449e:	4b08      	ldr	r3, [pc, #32]	; (80044c0 <osKernelStart+0x48>)
 80044a0:	2202      	movs	r2, #2
 80044a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80044a4:	f001 f866 	bl	8005574 <vTaskStartScheduler>
      stat = osOK;
 80044a8:	2300      	movs	r3, #0
 80044aa:	607b      	str	r3, [r7, #4]
 80044ac:	e002      	b.n	80044b4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80044ae:	f04f 33ff 	mov.w	r3, #4294967295
 80044b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80044b4:	687b      	ldr	r3, [r7, #4]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	200001c8 	.word	0x200001c8

080044c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08e      	sub	sp, #56	; 0x38
 80044c8:	af04      	add	r7, sp, #16
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80044d0:	2300      	movs	r3, #0
 80044d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044d4:	f3ef 8305 	mrs	r3, IPSR
 80044d8:	617b      	str	r3, [r7, #20]
  return(result);
 80044da:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d17e      	bne.n	80045de <osThreadNew+0x11a>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d07b      	beq.n	80045de <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80044e6:	2380      	movs	r3, #128	; 0x80
 80044e8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80044ea:	2318      	movs	r3, #24
 80044ec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80044f2:	f04f 33ff 	mov.w	r3, #4294967295
 80044f6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d045      	beq.n	800458a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d002      	beq.n	800450c <osThreadNew+0x48>
        name = attr->name;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d002      	beq.n	800451a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d008      	beq.n	8004532 <osThreadNew+0x6e>
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	2b38      	cmp	r3, #56	; 0x38
 8004524:	d805      	bhi.n	8004532 <osThreadNew+0x6e>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <osThreadNew+0x72>
        return (NULL);
 8004532:	2300      	movs	r3, #0
 8004534:	e054      	b.n	80045e0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	089b      	lsrs	r3, r3, #2
 8004544:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00e      	beq.n	800456c <osThreadNew+0xa8>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	2b5b      	cmp	r3, #91	; 0x5b
 8004554:	d90a      	bls.n	800456c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800455a:	2b00      	cmp	r3, #0
 800455c:	d006      	beq.n	800456c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d002      	beq.n	800456c <osThreadNew+0xa8>
        mem = 1;
 8004566:	2301      	movs	r3, #1
 8004568:	61bb      	str	r3, [r7, #24]
 800456a:	e010      	b.n	800458e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10c      	bne.n	800458e <osThreadNew+0xca>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d108      	bne.n	800458e <osThreadNew+0xca>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d104      	bne.n	800458e <osThreadNew+0xca>
          mem = 0;
 8004584:	2300      	movs	r3, #0
 8004586:	61bb      	str	r3, [r7, #24]
 8004588:	e001      	b.n	800458e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800458a:	2300      	movs	r3, #0
 800458c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d110      	bne.n	80045b6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800459c:	9202      	str	r2, [sp, #8]
 800459e:	9301      	str	r3, [sp, #4]
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	6a3a      	ldr	r2, [r7, #32]
 80045a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 fe0c 	bl	80051c8 <xTaskCreateStatic>
 80045b0:	4603      	mov	r3, r0
 80045b2:	613b      	str	r3, [r7, #16]
 80045b4:	e013      	b.n	80045de <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d110      	bne.n	80045de <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80045bc:	6a3b      	ldr	r3, [r7, #32]
 80045be:	b29a      	uxth	r2, r3
 80045c0:	f107 0310 	add.w	r3, r7, #16
 80045c4:	9301      	str	r3, [sp, #4]
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 fe57 	bl	8005282 <xTaskCreate>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d001      	beq.n	80045de <osThreadNew+0x11a>
            hTask = NULL;
 80045da:	2300      	movs	r3, #0
 80045dc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80045de:	693b      	ldr	r3, [r7, #16]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3728      	adds	r7, #40	; 0x28
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045f0:	f3ef 8305 	mrs	r3, IPSR
 80045f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80045f6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <osDelay+0x1c>
    stat = osErrorISR;
 80045fc:	f06f 0305 	mvn.w	r3, #5
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	e007      	b.n	8004614 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004604:	2300      	movs	r3, #0
 8004606:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <osDelay+0x2c>
      vTaskDelay(ticks);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 ff7c 	bl	800550c <vTaskDelay>
    }
  }

  return (stat);
 8004614:	68fb      	ldr	r3, [r7, #12]
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
	...

08004620 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4a07      	ldr	r2, [pc, #28]	; (800464c <vApplicationGetIdleTaskMemory+0x2c>)
 8004630:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	4a06      	ldr	r2, [pc, #24]	; (8004650 <vApplicationGetIdleTaskMemory+0x30>)
 8004636:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2280      	movs	r2, #128	; 0x80
 800463c:	601a      	str	r2, [r3, #0]
}
 800463e:	bf00      	nop
 8004640:	3714      	adds	r7, #20
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	200001cc 	.word	0x200001cc
 8004650:	20000228 	.word	0x20000228

08004654 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4a07      	ldr	r2, [pc, #28]	; (8004680 <vApplicationGetTimerTaskMemory+0x2c>)
 8004664:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	4a06      	ldr	r2, [pc, #24]	; (8004684 <vApplicationGetTimerTaskMemory+0x30>)
 800466a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004672:	601a      	str	r2, [r3, #0]
}
 8004674:	bf00      	nop
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	20000428 	.word	0x20000428
 8004684:	20000484 	.word	0x20000484

08004688 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f103 0208 	add.w	r2, r3, #8
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f04f 32ff 	mov.w	r2, #4294967295
 80046a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f103 0208 	add.w	r2, r3, #8
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f103 0208 	add.w	r2, r3, #8
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046e2:	b480      	push	{r7}
 80046e4:	b085      	sub	sp, #20
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
 80046ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	1c5a      	adds	r2, r3, #1
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	601a      	str	r2, [r3, #0]
}
 800471e:	bf00      	nop
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800472a:	b480      	push	{r7}
 800472c:	b085      	sub	sp, #20
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004740:	d103      	bne.n	800474a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	e00c      	b.n	8004764 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3308      	adds	r3, #8
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	e002      	b.n	8004758 <vListInsert+0x2e>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	429a      	cmp	r2, r3
 8004762:	d2f6      	bcs.n	8004752 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	1c5a      	adds	r2, r3, #1
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	601a      	str	r2, [r3, #0]
}
 8004790:	bf00      	nop
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6892      	ldr	r2, [r2, #8]
 80047b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	6852      	ldr	r2, [r2, #4]
 80047bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d103      	bne.n	80047d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	1e5a      	subs	r2, r3, #1
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10a      	bne.n	800481a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004816:	bf00      	nop
 8004818:	e7fe      	b.n	8004818 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800481a:	f002 f84b 	bl	80068b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004826:	68f9      	ldr	r1, [r7, #12]
 8004828:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800482a:	fb01 f303 	mul.w	r3, r1, r3
 800482e:	441a      	add	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484a:	3b01      	subs	r3, #1
 800484c:	68f9      	ldr	r1, [r7, #12]
 800484e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004850:	fb01 f303 	mul.w	r3, r1, r3
 8004854:	441a      	add	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	22ff      	movs	r2, #255	; 0xff
 800485e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	22ff      	movs	r2, #255	; 0xff
 8004866:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d114      	bne.n	800489a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d01a      	beq.n	80048ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	3310      	adds	r3, #16
 800487c:	4618      	mov	r0, r3
 800487e:	f001 f903 	bl	8005a88 <xTaskRemoveFromEventList>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d012      	beq.n	80048ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004888:	4b0c      	ldr	r3, [pc, #48]	; (80048bc <xQueueGenericReset+0xcc>)
 800488a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	e009      	b.n	80048ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	3310      	adds	r3, #16
 800489e:	4618      	mov	r0, r3
 80048a0:	f7ff fef2 	bl	8004688 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	3324      	adds	r3, #36	; 0x24
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7ff feed 	bl	8004688 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80048ae:	f002 f831 	bl	8006914 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80048b2:	2301      	movs	r3, #1
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	e000ed04 	.word	0xe000ed04

080048c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08e      	sub	sp, #56	; 0x38
 80048c4:	af02      	add	r7, sp, #8
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
 80048cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10a      	bne.n	80048ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80048d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d8:	f383 8811 	msr	BASEPRI, r3
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80048e6:	bf00      	nop
 80048e8:	e7fe      	b.n	80048e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10a      	bne.n	8004906 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004902:	bf00      	nop
 8004904:	e7fe      	b.n	8004904 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <xQueueGenericCreateStatic+0x52>
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <xQueueGenericCreateStatic+0x56>
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <xQueueGenericCreateStatic+0x58>
 8004916:	2300      	movs	r3, #0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10a      	bne.n	8004932 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800491c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	623b      	str	r3, [r7, #32]
}
 800492e:	bf00      	nop
 8004930:	e7fe      	b.n	8004930 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d102      	bne.n	800493e <xQueueGenericCreateStatic+0x7e>
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <xQueueGenericCreateStatic+0x82>
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <xQueueGenericCreateStatic+0x84>
 8004942:	2300      	movs	r3, #0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10a      	bne.n	800495e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494c:	f383 8811 	msr	BASEPRI, r3
 8004950:	f3bf 8f6f 	isb	sy
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	61fb      	str	r3, [r7, #28]
}
 800495a:	bf00      	nop
 800495c:	e7fe      	b.n	800495c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800495e:	2350      	movs	r3, #80	; 0x50
 8004960:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2b50      	cmp	r3, #80	; 0x50
 8004966:	d00a      	beq.n	800497e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	61bb      	str	r3, [r7, #24]
}
 800497a:	bf00      	nop
 800497c:	e7fe      	b.n	800497c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800497e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00d      	beq.n	80049a6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800498a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004992:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	4613      	mov	r3, r2
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	68b9      	ldr	r1, [r7, #8]
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f000 f805 	bl	80049b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80049a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3730      	adds	r7, #48	; 0x30
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
 80049bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d103      	bne.n	80049cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	e002      	b.n	80049d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80049de:	2101      	movs	r1, #1
 80049e0:	69b8      	ldr	r0, [r7, #24]
 80049e2:	f7ff ff05 	bl	80047f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	78fa      	ldrb	r2, [r7, #3]
 80049ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80049ee:	bf00      	nop
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
	...

080049f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b08e      	sub	sp, #56	; 0x38
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a06:	2300      	movs	r3, #0
 8004a08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10a      	bne.n	8004a2a <xQueueGenericSend+0x32>
	__asm volatile
 8004a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a18:	f383 8811 	msr	BASEPRI, r3
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a26:	bf00      	nop
 8004a28:	e7fe      	b.n	8004a28 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d103      	bne.n	8004a38 <xQueueGenericSend+0x40>
 8004a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <xQueueGenericSend+0x44>
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e000      	b.n	8004a3e <xQueueGenericSend+0x46>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10a      	bne.n	8004a58 <xQueueGenericSend+0x60>
	__asm volatile
 8004a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a54:	bf00      	nop
 8004a56:	e7fe      	b.n	8004a56 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d103      	bne.n	8004a66 <xQueueGenericSend+0x6e>
 8004a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d101      	bne.n	8004a6a <xQueueGenericSend+0x72>
 8004a66:	2301      	movs	r3, #1
 8004a68:	e000      	b.n	8004a6c <xQueueGenericSend+0x74>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10a      	bne.n	8004a86 <xQueueGenericSend+0x8e>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	623b      	str	r3, [r7, #32]
}
 8004a82:	bf00      	nop
 8004a84:	e7fe      	b.n	8004a84 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a86:	f001 f9bd 	bl	8005e04 <xTaskGetSchedulerState>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d102      	bne.n	8004a96 <xQueueGenericSend+0x9e>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <xQueueGenericSend+0xa2>
 8004a96:	2301      	movs	r3, #1
 8004a98:	e000      	b.n	8004a9c <xQueueGenericSend+0xa4>
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10a      	bne.n	8004ab6 <xQueueGenericSend+0xbe>
	__asm volatile
 8004aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	61fb      	str	r3, [r7, #28]
}
 8004ab2:	bf00      	nop
 8004ab4:	e7fe      	b.n	8004ab4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ab6:	f001 fefd 	bl	80068b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d302      	bcc.n	8004acc <xQueueGenericSend+0xd4>
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d129      	bne.n	8004b20 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	68b9      	ldr	r1, [r7, #8]
 8004ad0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ad2:	f000 fa0b 	bl	8004eec <prvCopyDataToQueue>
 8004ad6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d010      	beq.n	8004b02 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae2:	3324      	adds	r3, #36	; 0x24
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 ffcf 	bl	8005a88 <xTaskRemoveFromEventList>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d013      	beq.n	8004b18 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004af0:	4b3f      	ldr	r3, [pc, #252]	; (8004bf0 <xQueueGenericSend+0x1f8>)
 8004af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	e00a      	b.n	8004b18 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d007      	beq.n	8004b18 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004b08:	4b39      	ldr	r3, [pc, #228]	; (8004bf0 <xQueueGenericSend+0x1f8>)
 8004b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	f3bf 8f4f 	dsb	sy
 8004b14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004b18:	f001 fefc 	bl	8006914 <vPortExitCritical>
				return pdPASS;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e063      	b.n	8004be8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d103      	bne.n	8004b2e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b26:	f001 fef5 	bl	8006914 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	e05c      	b.n	8004be8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d106      	bne.n	8004b42 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b34:	f107 0314 	add.w	r3, r7, #20
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f001 f809 	bl	8005b50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b42:	f001 fee7 	bl	8006914 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b46:	f000 fd7b 	bl	8005640 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b4a:	f001 feb3 	bl	80068b4 <vPortEnterCritical>
 8004b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b54:	b25b      	sxtb	r3, r3
 8004b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5a:	d103      	bne.n	8004b64 <xQueueGenericSend+0x16c>
 8004b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b6a:	b25b      	sxtb	r3, r3
 8004b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b70:	d103      	bne.n	8004b7a <xQueueGenericSend+0x182>
 8004b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b7a:	f001 fecb 	bl	8006914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b7e:	1d3a      	adds	r2, r7, #4
 8004b80:	f107 0314 	add.w	r3, r7, #20
 8004b84:	4611      	mov	r1, r2
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 fff8 	bl	8005b7c <xTaskCheckForTimeOut>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d124      	bne.n	8004bdc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b94:	f000 faa2 	bl	80050dc <prvIsQueueFull>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d018      	beq.n	8004bd0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba0:	3310      	adds	r3, #16
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	4611      	mov	r1, r2
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 ff1e 	bl	80059e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004bac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bae:	f000 fa2d 	bl	800500c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004bb2:	f000 fd53 	bl	800565c <xTaskResumeAll>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f47f af7c 	bne.w	8004ab6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004bbe:	4b0c      	ldr	r3, [pc, #48]	; (8004bf0 <xQueueGenericSend+0x1f8>)
 8004bc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	f3bf 8f4f 	dsb	sy
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	e772      	b.n	8004ab6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004bd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bd2:	f000 fa1b 	bl	800500c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bd6:	f000 fd41 	bl	800565c <xTaskResumeAll>
 8004bda:	e76c      	b.n	8004ab6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004bdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bde:	f000 fa15 	bl	800500c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004be2:	f000 fd3b 	bl	800565c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004be6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3738      	adds	r7, #56	; 0x38
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	e000ed04 	.word	0xe000ed04

08004bf4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b090      	sub	sp, #64	; 0x40
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
 8004c00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d10a      	bne.n	8004c22 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c10:	f383 8811 	msr	BASEPRI, r3
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c1e:	bf00      	nop
 8004c20:	e7fe      	b.n	8004c20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d103      	bne.n	8004c30 <xQueueGenericSendFromISR+0x3c>
 8004c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <xQueueGenericSendFromISR+0x40>
 8004c30:	2301      	movs	r3, #1
 8004c32:	e000      	b.n	8004c36 <xQueueGenericSendFromISR+0x42>
 8004c34:	2300      	movs	r3, #0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10a      	bne.n	8004c50 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3e:	f383 8811 	msr	BASEPRI, r3
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c4c:	bf00      	nop
 8004c4e:	e7fe      	b.n	8004c4e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d103      	bne.n	8004c5e <xQueueGenericSendFromISR+0x6a>
 8004c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d101      	bne.n	8004c62 <xQueueGenericSendFromISR+0x6e>
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e000      	b.n	8004c64 <xQueueGenericSendFromISR+0x70>
 8004c62:	2300      	movs	r3, #0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10a      	bne.n	8004c7e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6c:	f383 8811 	msr	BASEPRI, r3
 8004c70:	f3bf 8f6f 	isb	sy
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	623b      	str	r3, [r7, #32]
}
 8004c7a:	bf00      	nop
 8004c7c:	e7fe      	b.n	8004c7c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c7e:	f001 fefb 	bl	8006a78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004c82:	f3ef 8211 	mrs	r2, BASEPRI
 8004c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8a:	f383 8811 	msr	BASEPRI, r3
 8004c8e:	f3bf 8f6f 	isb	sy
 8004c92:	f3bf 8f4f 	dsb	sy
 8004c96:	61fa      	str	r2, [r7, #28]
 8004c98:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004c9a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c9c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d302      	bcc.n	8004cb0 <xQueueGenericSendFromISR+0xbc>
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d12f      	bne.n	8004d10 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	68b9      	ldr	r1, [r7, #8]
 8004cc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004cc6:	f000 f911 	bl	8004eec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004cca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd2:	d112      	bne.n	8004cfa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d016      	beq.n	8004d0a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cde:	3324      	adds	r3, #36	; 0x24
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f000 fed1 	bl	8005a88 <xTaskRemoveFromEventList>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00e      	beq.n	8004d0a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00b      	beq.n	8004d0a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	e007      	b.n	8004d0a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004cfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004cfe:	3301      	adds	r3, #1
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	b25a      	sxtb	r2, r3
 8004d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004d0e:	e001      	b.n	8004d14 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d10:	2300      	movs	r3, #0
 8004d12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d16:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004d1e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3740      	adds	r7, #64	; 0x40
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b08c      	sub	sp, #48	; 0x30
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10a      	bne.n	8004d5c <xQueueReceive+0x30>
	__asm volatile
 8004d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4a:	f383 8811 	msr	BASEPRI, r3
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	f3bf 8f4f 	dsb	sy
 8004d56:	623b      	str	r3, [r7, #32]
}
 8004d58:	bf00      	nop
 8004d5a:	e7fe      	b.n	8004d5a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d103      	bne.n	8004d6a <xQueueReceive+0x3e>
 8004d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <xQueueReceive+0x42>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e000      	b.n	8004d70 <xQueueReceive+0x44>
 8004d6e:	2300      	movs	r3, #0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10a      	bne.n	8004d8a <xQueueReceive+0x5e>
	__asm volatile
 8004d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d78:	f383 8811 	msr	BASEPRI, r3
 8004d7c:	f3bf 8f6f 	isb	sy
 8004d80:	f3bf 8f4f 	dsb	sy
 8004d84:	61fb      	str	r3, [r7, #28]
}
 8004d86:	bf00      	nop
 8004d88:	e7fe      	b.n	8004d88 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d8a:	f001 f83b 	bl	8005e04 <xTaskGetSchedulerState>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d102      	bne.n	8004d9a <xQueueReceive+0x6e>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <xQueueReceive+0x72>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e000      	b.n	8004da0 <xQueueReceive+0x74>
 8004d9e:	2300      	movs	r3, #0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10a      	bne.n	8004dba <xQueueReceive+0x8e>
	__asm volatile
 8004da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	61bb      	str	r3, [r7, #24]
}
 8004db6:	bf00      	nop
 8004db8:	e7fe      	b.n	8004db8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004dba:	f001 fd7b 	bl	80068b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d01f      	beq.n	8004e0a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004dca:	68b9      	ldr	r1, [r7, #8]
 8004dcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dce:	f000 f8f7 	bl	8004fc0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd4:	1e5a      	subs	r2, r3, #1
 8004dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00f      	beq.n	8004e02 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de4:	3310      	adds	r3, #16
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 fe4e 	bl	8005a88 <xTaskRemoveFromEventList>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d007      	beq.n	8004e02 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004df2:	4b3d      	ldr	r3, [pc, #244]	; (8004ee8 <xQueueReceive+0x1bc>)
 8004df4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004df8:	601a      	str	r2, [r3, #0]
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e02:	f001 fd87 	bl	8006914 <vPortExitCritical>
				return pdPASS;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e069      	b.n	8004ede <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d103      	bne.n	8004e18 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e10:	f001 fd80 	bl	8006914 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e14:	2300      	movs	r3, #0
 8004e16:	e062      	b.n	8004ede <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d106      	bne.n	8004e2c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e1e:	f107 0310 	add.w	r3, r7, #16
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 fe94 	bl	8005b50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e2c:	f001 fd72 	bl	8006914 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e30:	f000 fc06 	bl	8005640 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e34:	f001 fd3e 	bl	80068b4 <vPortEnterCritical>
 8004e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e3e:	b25b      	sxtb	r3, r3
 8004e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e44:	d103      	bne.n	8004e4e <xQueueReceive+0x122>
 8004e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e54:	b25b      	sxtb	r3, r3
 8004e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5a:	d103      	bne.n	8004e64 <xQueueReceive+0x138>
 8004e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e64:	f001 fd56 	bl	8006914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e68:	1d3a      	adds	r2, r7, #4
 8004e6a:	f107 0310 	add.w	r3, r7, #16
 8004e6e:	4611      	mov	r1, r2
 8004e70:	4618      	mov	r0, r3
 8004e72:	f000 fe83 	bl	8005b7c <xTaskCheckForTimeOut>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d123      	bne.n	8004ec4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e7e:	f000 f917 	bl	80050b0 <prvIsQueueEmpty>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d017      	beq.n	8004eb8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8a:	3324      	adds	r3, #36	; 0x24
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	4611      	mov	r1, r2
 8004e90:	4618      	mov	r0, r3
 8004e92:	f000 fda9 	bl	80059e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e98:	f000 f8b8 	bl	800500c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e9c:	f000 fbde 	bl	800565c <xTaskResumeAll>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d189      	bne.n	8004dba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004ea6:	4b10      	ldr	r3, [pc, #64]	; (8004ee8 <xQueueReceive+0x1bc>)
 8004ea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eac:	601a      	str	r2, [r3, #0]
 8004eae:	f3bf 8f4f 	dsb	sy
 8004eb2:	f3bf 8f6f 	isb	sy
 8004eb6:	e780      	b.n	8004dba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004eb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004eba:	f000 f8a7 	bl	800500c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ebe:	f000 fbcd 	bl	800565c <xTaskResumeAll>
 8004ec2:	e77a      	b.n	8004dba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ec4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ec6:	f000 f8a1 	bl	800500c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004eca:	f000 fbc7 	bl	800565c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ed0:	f000 f8ee 	bl	80050b0 <prvIsQueueEmpty>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f43f af6f 	beq.w	8004dba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004edc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3730      	adds	r7, #48	; 0x30
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	e000ed04 	.word	0xe000ed04

08004eec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f00:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10d      	bne.n	8004f26 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d14d      	bne.n	8004fae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 ff92 	bl	8005e40 <xTaskPriorityDisinherit>
 8004f1c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	609a      	str	r2, [r3, #8]
 8004f24:	e043      	b.n	8004fae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d119      	bne.n	8004f60 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6858      	ldr	r0, [r3, #4]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f34:	461a      	mov	r2, r3
 8004f36:	68b9      	ldr	r1, [r7, #8]
 8004f38:	f002 fa4e 	bl	80073d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f44:	441a      	add	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d32b      	bcc.n	8004fae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	605a      	str	r2, [r3, #4]
 8004f5e:	e026      	b.n	8004fae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	68d8      	ldr	r0, [r3, #12]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f68:	461a      	mov	r2, r3
 8004f6a:	68b9      	ldr	r1, [r7, #8]
 8004f6c:	f002 fa34 	bl	80073d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	68da      	ldr	r2, [r3, #12]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f78:	425b      	negs	r3, r3
 8004f7a:	441a      	add	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d207      	bcs.n	8004f9c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	689a      	ldr	r2, [r3, #8]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f94:	425b      	negs	r3, r3
 8004f96:	441a      	add	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d105      	bne.n	8004fae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d002      	beq.n	8004fae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1c5a      	adds	r2, r3, #1
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004fb6:	697b      	ldr	r3, [r7, #20]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3718      	adds	r7, #24
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d018      	beq.n	8005004 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	441a      	add	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68da      	ldr	r2, [r3, #12]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d303      	bcc.n	8004ff4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68d9      	ldr	r1, [r3, #12]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	6838      	ldr	r0, [r7, #0]
 8005000:	f002 f9ea 	bl	80073d8 <memcpy>
	}
}
 8005004:	bf00      	nop
 8005006:	3708      	adds	r7, #8
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005014:	f001 fc4e 	bl	80068b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800501e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005020:	e011      	b.n	8005046 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	2b00      	cmp	r3, #0
 8005028:	d012      	beq.n	8005050 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	3324      	adds	r3, #36	; 0x24
 800502e:	4618      	mov	r0, r3
 8005030:	f000 fd2a 	bl	8005a88 <xTaskRemoveFromEventList>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800503a:	f000 fe01 	bl	8005c40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800503e:	7bfb      	ldrb	r3, [r7, #15]
 8005040:	3b01      	subs	r3, #1
 8005042:	b2db      	uxtb	r3, r3
 8005044:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800504a:	2b00      	cmp	r3, #0
 800504c:	dce9      	bgt.n	8005022 <prvUnlockQueue+0x16>
 800504e:	e000      	b.n	8005052 <prvUnlockQueue+0x46>
					break;
 8005050:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	22ff      	movs	r2, #255	; 0xff
 8005056:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800505a:	f001 fc5b 	bl	8006914 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800505e:	f001 fc29 	bl	80068b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005068:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800506a:	e011      	b.n	8005090 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d012      	beq.n	800509a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	3310      	adds	r3, #16
 8005078:	4618      	mov	r0, r3
 800507a:	f000 fd05 	bl	8005a88 <xTaskRemoveFromEventList>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d001      	beq.n	8005088 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005084:	f000 fddc 	bl	8005c40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005088:	7bbb      	ldrb	r3, [r7, #14]
 800508a:	3b01      	subs	r3, #1
 800508c:	b2db      	uxtb	r3, r3
 800508e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005090:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005094:	2b00      	cmp	r3, #0
 8005096:	dce9      	bgt.n	800506c <prvUnlockQueue+0x60>
 8005098:	e000      	b.n	800509c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800509a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	22ff      	movs	r2, #255	; 0xff
 80050a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80050a4:	f001 fc36 	bl	8006914 <vPortExitCritical>
}
 80050a8:	bf00      	nop
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050b8:	f001 fbfc 	bl	80068b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d102      	bne.n	80050ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80050c4:	2301      	movs	r3, #1
 80050c6:	60fb      	str	r3, [r7, #12]
 80050c8:	e001      	b.n	80050ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80050ca:	2300      	movs	r3, #0
 80050cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050ce:	f001 fc21 	bl	8006914 <vPortExitCritical>

	return xReturn;
 80050d2:	68fb      	ldr	r3, [r7, #12]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050e4:	f001 fbe6 	bl	80068b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d102      	bne.n	80050fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80050f4:	2301      	movs	r3, #1
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	e001      	b.n	80050fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80050fa:	2300      	movs	r3, #0
 80050fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80050fe:	f001 fc09 	bl	8006914 <vPortExitCritical>

	return xReturn;
 8005102:	68fb      	ldr	r3, [r7, #12]
}
 8005104:	4618      	mov	r0, r3
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005116:	2300      	movs	r3, #0
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	e014      	b.n	8005146 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800511c:	4a0f      	ldr	r2, [pc, #60]	; (800515c <vQueueAddToRegistry+0x50>)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10b      	bne.n	8005140 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005128:	490c      	ldr	r1, [pc, #48]	; (800515c <vQueueAddToRegistry+0x50>)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005132:	4a0a      	ldr	r2, [pc, #40]	; (800515c <vQueueAddToRegistry+0x50>)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	4413      	add	r3, r2
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800513e:	e006      	b.n	800514e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	3301      	adds	r3, #1
 8005144:	60fb      	str	r3, [r7, #12]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2b07      	cmp	r3, #7
 800514a:	d9e7      	bls.n	800511c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800514c:	bf00      	nop
 800514e:	bf00      	nop
 8005150:	3714      	adds	r7, #20
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	20000884 	.word	0x20000884

08005160 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005170:	f001 fba0 	bl	80068b4 <vPortEnterCritical>
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800517a:	b25b      	sxtb	r3, r3
 800517c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005180:	d103      	bne.n	800518a <vQueueWaitForMessageRestricted+0x2a>
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005190:	b25b      	sxtb	r3, r3
 8005192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005196:	d103      	bne.n	80051a0 <vQueueWaitForMessageRestricted+0x40>
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051a0:	f001 fbb8 	bl	8006914 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d106      	bne.n	80051ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	3324      	adds	r3, #36	; 0x24
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	68b9      	ldr	r1, [r7, #8]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 fc3b 	bl	8005a30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80051ba:	6978      	ldr	r0, [r7, #20]
 80051bc:	f7ff ff26 	bl	800500c <prvUnlockQueue>
	}
 80051c0:	bf00      	nop
 80051c2:	3718      	adds	r7, #24
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b08e      	sub	sp, #56	; 0x38
 80051cc:	af04      	add	r7, sp, #16
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
 80051d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80051d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10a      	bne.n	80051f2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	623b      	str	r3, [r7, #32]
}
 80051ee:	bf00      	nop
 80051f0:	e7fe      	b.n	80051f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80051f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10a      	bne.n	800520e <xTaskCreateStatic+0x46>
	__asm volatile
 80051f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fc:	f383 8811 	msr	BASEPRI, r3
 8005200:	f3bf 8f6f 	isb	sy
 8005204:	f3bf 8f4f 	dsb	sy
 8005208:	61fb      	str	r3, [r7, #28]
}
 800520a:	bf00      	nop
 800520c:	e7fe      	b.n	800520c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800520e:	235c      	movs	r3, #92	; 0x5c
 8005210:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	2b5c      	cmp	r3, #92	; 0x5c
 8005216:	d00a      	beq.n	800522e <xTaskCreateStatic+0x66>
	__asm volatile
 8005218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521c:	f383 8811 	msr	BASEPRI, r3
 8005220:	f3bf 8f6f 	isb	sy
 8005224:	f3bf 8f4f 	dsb	sy
 8005228:	61bb      	str	r3, [r7, #24]
}
 800522a:	bf00      	nop
 800522c:	e7fe      	b.n	800522c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800522e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005232:	2b00      	cmp	r3, #0
 8005234:	d01e      	beq.n	8005274 <xTaskCreateStatic+0xac>
 8005236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005238:	2b00      	cmp	r3, #0
 800523a:	d01b      	beq.n	8005274 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800523c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005244:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005248:	2202      	movs	r2, #2
 800524a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800524e:	2300      	movs	r3, #0
 8005250:	9303      	str	r3, [sp, #12]
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	9302      	str	r3, [sp, #8]
 8005256:	f107 0314 	add.w	r3, r7, #20
 800525a:	9301      	str	r3, [sp, #4]
 800525c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	68b9      	ldr	r1, [r7, #8]
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f000 f850 	bl	800530c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800526c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800526e:	f000 f8dd 	bl	800542c <prvAddNewTaskToReadyList>
 8005272:	e001      	b.n	8005278 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005274:	2300      	movs	r3, #0
 8005276:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005278:	697b      	ldr	r3, [r7, #20]
	}
 800527a:	4618      	mov	r0, r3
 800527c:	3728      	adds	r7, #40	; 0x28
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005282:	b580      	push	{r7, lr}
 8005284:	b08c      	sub	sp, #48	; 0x30
 8005286:	af04      	add	r7, sp, #16
 8005288:	60f8      	str	r0, [r7, #12]
 800528a:	60b9      	str	r1, [r7, #8]
 800528c:	603b      	str	r3, [r7, #0]
 800528e:	4613      	mov	r3, r2
 8005290:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005292:	88fb      	ldrh	r3, [r7, #6]
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4618      	mov	r0, r3
 8005298:	f001 fc2e 	bl	8006af8 <pvPortMalloc>
 800529c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00e      	beq.n	80052c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80052a4:	205c      	movs	r0, #92	; 0x5c
 80052a6:	f001 fc27 	bl	8006af8 <pvPortMalloc>
 80052aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d003      	beq.n	80052ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	631a      	str	r2, [r3, #48]	; 0x30
 80052b8:	e005      	b.n	80052c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80052ba:	6978      	ldr	r0, [r7, #20]
 80052bc:	f001 fce8 	bl	8006c90 <vPortFree>
 80052c0:	e001      	b.n	80052c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80052c2:	2300      	movs	r3, #0
 80052c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d017      	beq.n	80052fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80052d4:	88fa      	ldrh	r2, [r7, #6]
 80052d6:	2300      	movs	r3, #0
 80052d8:	9303      	str	r3, [sp, #12]
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	9302      	str	r3, [sp, #8]
 80052de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e0:	9301      	str	r3, [sp, #4]
 80052e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	68b9      	ldr	r1, [r7, #8]
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 f80e 	bl	800530c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052f0:	69f8      	ldr	r0, [r7, #28]
 80052f2:	f000 f89b 	bl	800542c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80052f6:	2301      	movs	r3, #1
 80052f8:	61bb      	str	r3, [r7, #24]
 80052fa:	e002      	b.n	8005302 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80052fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005300:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005302:	69bb      	ldr	r3, [r7, #24]
	}
 8005304:	4618      	mov	r0, r3
 8005306:	3720      	adds	r7, #32
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b088      	sub	sp, #32
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
 8005318:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800531a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	461a      	mov	r2, r3
 8005324:	21a5      	movs	r1, #165	; 0xa5
 8005326:	f002 f823 	bl	8007370 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800532a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005334:	3b01      	subs	r3, #1
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	f023 0307 	bic.w	r3, r3, #7
 8005342:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	f003 0307 	and.w	r3, r3, #7
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00a      	beq.n	8005364 <prvInitialiseNewTask+0x58>
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	617b      	str	r3, [r7, #20]
}
 8005360:	bf00      	nop
 8005362:	e7fe      	b.n	8005362 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d01f      	beq.n	80053aa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800536a:	2300      	movs	r3, #0
 800536c:	61fb      	str	r3, [r7, #28]
 800536e:	e012      	b.n	8005396 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	4413      	add	r3, r2
 8005376:	7819      	ldrb	r1, [r3, #0]
 8005378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	4413      	add	r3, r2
 800537e:	3334      	adds	r3, #52	; 0x34
 8005380:	460a      	mov	r2, r1
 8005382:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	4413      	add	r3, r2
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d006      	beq.n	800539e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	3301      	adds	r3, #1
 8005394:	61fb      	str	r3, [r7, #28]
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	2b0f      	cmp	r3, #15
 800539a:	d9e9      	bls.n	8005370 <prvInitialiseNewTask+0x64>
 800539c:	e000      	b.n	80053a0 <prvInitialiseNewTask+0x94>
			{
				break;
 800539e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053a8:	e003      	b.n	80053b2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80053aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b4:	2b37      	cmp	r3, #55	; 0x37
 80053b6:	d901      	bls.n	80053bc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80053b8:	2337      	movs	r3, #55	; 0x37
 80053ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80053bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80053c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80053c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ca:	2200      	movs	r2, #0
 80053cc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80053ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d0:	3304      	adds	r3, #4
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7ff f978 	bl	80046c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053da:	3318      	adds	r3, #24
 80053dc:	4618      	mov	r0, r3
 80053de:	f7ff f973 	bl	80046c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80053ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80053f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80053f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fa:	2200      	movs	r2, #0
 80053fc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80053fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	68f9      	ldr	r1, [r7, #12]
 800540a:	69b8      	ldr	r0, [r7, #24]
 800540c:	f001 f928 	bl	8006660 <pxPortInitialiseStack>
 8005410:	4602      	mov	r2, r0
 8005412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005414:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005418:	2b00      	cmp	r3, #0
 800541a:	d002      	beq.n	8005422 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800541c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005420:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005422:	bf00      	nop
 8005424:	3720      	adds	r7, #32
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
	...

0800542c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005434:	f001 fa3e 	bl	80068b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005438:	4b2d      	ldr	r3, [pc, #180]	; (80054f0 <prvAddNewTaskToReadyList+0xc4>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3301      	adds	r3, #1
 800543e:	4a2c      	ldr	r2, [pc, #176]	; (80054f0 <prvAddNewTaskToReadyList+0xc4>)
 8005440:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005442:	4b2c      	ldr	r3, [pc, #176]	; (80054f4 <prvAddNewTaskToReadyList+0xc8>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d109      	bne.n	800545e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800544a:	4a2a      	ldr	r2, [pc, #168]	; (80054f4 <prvAddNewTaskToReadyList+0xc8>)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005450:	4b27      	ldr	r3, [pc, #156]	; (80054f0 <prvAddNewTaskToReadyList+0xc4>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d110      	bne.n	800547a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005458:	f000 fc16 	bl	8005c88 <prvInitialiseTaskLists>
 800545c:	e00d      	b.n	800547a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800545e:	4b26      	ldr	r3, [pc, #152]	; (80054f8 <prvAddNewTaskToReadyList+0xcc>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d109      	bne.n	800547a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005466:	4b23      	ldr	r3, [pc, #140]	; (80054f4 <prvAddNewTaskToReadyList+0xc8>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005470:	429a      	cmp	r2, r3
 8005472:	d802      	bhi.n	800547a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005474:	4a1f      	ldr	r2, [pc, #124]	; (80054f4 <prvAddNewTaskToReadyList+0xc8>)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800547a:	4b20      	ldr	r3, [pc, #128]	; (80054fc <prvAddNewTaskToReadyList+0xd0>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	3301      	adds	r3, #1
 8005480:	4a1e      	ldr	r2, [pc, #120]	; (80054fc <prvAddNewTaskToReadyList+0xd0>)
 8005482:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005484:	4b1d      	ldr	r3, [pc, #116]	; (80054fc <prvAddNewTaskToReadyList+0xd0>)
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005490:	4b1b      	ldr	r3, [pc, #108]	; (8005500 <prvAddNewTaskToReadyList+0xd4>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	429a      	cmp	r2, r3
 8005496:	d903      	bls.n	80054a0 <prvAddNewTaskToReadyList+0x74>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549c:	4a18      	ldr	r2, [pc, #96]	; (8005500 <prvAddNewTaskToReadyList+0xd4>)
 800549e:	6013      	str	r3, [r2, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a4:	4613      	mov	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4a15      	ldr	r2, [pc, #84]	; (8005504 <prvAddNewTaskToReadyList+0xd8>)
 80054ae:	441a      	add	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	3304      	adds	r3, #4
 80054b4:	4619      	mov	r1, r3
 80054b6:	4610      	mov	r0, r2
 80054b8:	f7ff f913 	bl	80046e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80054bc:	f001 fa2a 	bl	8006914 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80054c0:	4b0d      	ldr	r3, [pc, #52]	; (80054f8 <prvAddNewTaskToReadyList+0xcc>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00e      	beq.n	80054e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80054c8:	4b0a      	ldr	r3, [pc, #40]	; (80054f4 <prvAddNewTaskToReadyList+0xc8>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d207      	bcs.n	80054e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80054d6:	4b0c      	ldr	r3, [pc, #48]	; (8005508 <prvAddNewTaskToReadyList+0xdc>)
 80054d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054e6:	bf00      	nop
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	20000d98 	.word	0x20000d98
 80054f4:	200008c4 	.word	0x200008c4
 80054f8:	20000da4 	.word	0x20000da4
 80054fc:	20000db4 	.word	0x20000db4
 8005500:	20000da0 	.word	0x20000da0
 8005504:	200008c8 	.word	0x200008c8
 8005508:	e000ed04 	.word	0xe000ed04

0800550c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005514:	2300      	movs	r3, #0
 8005516:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d017      	beq.n	800554e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800551e:	4b13      	ldr	r3, [pc, #76]	; (800556c <vTaskDelay+0x60>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00a      	beq.n	800553c <vTaskDelay+0x30>
	__asm volatile
 8005526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552a:	f383 8811 	msr	BASEPRI, r3
 800552e:	f3bf 8f6f 	isb	sy
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	60bb      	str	r3, [r7, #8]
}
 8005538:	bf00      	nop
 800553a:	e7fe      	b.n	800553a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800553c:	f000 f880 	bl	8005640 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005540:	2100      	movs	r1, #0
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 fcea 	bl	8005f1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005548:	f000 f888 	bl	800565c <xTaskResumeAll>
 800554c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d107      	bne.n	8005564 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005554:	4b06      	ldr	r3, [pc, #24]	; (8005570 <vTaskDelay+0x64>)
 8005556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005564:	bf00      	nop
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	20000dc0 	.word	0x20000dc0
 8005570:	e000ed04 	.word	0xe000ed04

08005574 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b08a      	sub	sp, #40	; 0x28
 8005578:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800557a:	2300      	movs	r3, #0
 800557c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800557e:	2300      	movs	r3, #0
 8005580:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005582:	463a      	mov	r2, r7
 8005584:	1d39      	adds	r1, r7, #4
 8005586:	f107 0308 	add.w	r3, r7, #8
 800558a:	4618      	mov	r0, r3
 800558c:	f7ff f848 	bl	8004620 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005590:	6839      	ldr	r1, [r7, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	9202      	str	r2, [sp, #8]
 8005598:	9301      	str	r3, [sp, #4]
 800559a:	2300      	movs	r3, #0
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	2300      	movs	r3, #0
 80055a0:	460a      	mov	r2, r1
 80055a2:	4921      	ldr	r1, [pc, #132]	; (8005628 <vTaskStartScheduler+0xb4>)
 80055a4:	4821      	ldr	r0, [pc, #132]	; (800562c <vTaskStartScheduler+0xb8>)
 80055a6:	f7ff fe0f 	bl	80051c8 <xTaskCreateStatic>
 80055aa:	4603      	mov	r3, r0
 80055ac:	4a20      	ldr	r2, [pc, #128]	; (8005630 <vTaskStartScheduler+0xbc>)
 80055ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80055b0:	4b1f      	ldr	r3, [pc, #124]	; (8005630 <vTaskStartScheduler+0xbc>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d002      	beq.n	80055be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80055b8:	2301      	movs	r3, #1
 80055ba:	617b      	str	r3, [r7, #20]
 80055bc:	e001      	b.n	80055c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80055be:	2300      	movs	r3, #0
 80055c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d102      	bne.n	80055ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80055c8:	f000 fcfc 	bl	8005fc4 <xTimerCreateTimerTask>
 80055cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d116      	bne.n	8005602 <vTaskStartScheduler+0x8e>
	__asm volatile
 80055d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d8:	f383 8811 	msr	BASEPRI, r3
 80055dc:	f3bf 8f6f 	isb	sy
 80055e0:	f3bf 8f4f 	dsb	sy
 80055e4:	613b      	str	r3, [r7, #16]
}
 80055e6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80055e8:	4b12      	ldr	r3, [pc, #72]	; (8005634 <vTaskStartScheduler+0xc0>)
 80055ea:	f04f 32ff 	mov.w	r2, #4294967295
 80055ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055f0:	4b11      	ldr	r3, [pc, #68]	; (8005638 <vTaskStartScheduler+0xc4>)
 80055f2:	2201      	movs	r2, #1
 80055f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80055f6:	4b11      	ldr	r3, [pc, #68]	; (800563c <vTaskStartScheduler+0xc8>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80055fc:	f001 f8b8 	bl	8006770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005600:	e00e      	b.n	8005620 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005608:	d10a      	bne.n	8005620 <vTaskStartScheduler+0xac>
	__asm volatile
 800560a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560e:	f383 8811 	msr	BASEPRI, r3
 8005612:	f3bf 8f6f 	isb	sy
 8005616:	f3bf 8f4f 	dsb	sy
 800561a:	60fb      	str	r3, [r7, #12]
}
 800561c:	bf00      	nop
 800561e:	e7fe      	b.n	800561e <vTaskStartScheduler+0xaa>
}
 8005620:	bf00      	nop
 8005622:	3718      	adds	r7, #24
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	08007ce0 	.word	0x08007ce0
 800562c:	08005c59 	.word	0x08005c59
 8005630:	20000dbc 	.word	0x20000dbc
 8005634:	20000db8 	.word	0x20000db8
 8005638:	20000da4 	.word	0x20000da4
 800563c:	20000d9c 	.word	0x20000d9c

08005640 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005640:	b480      	push	{r7}
 8005642:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005644:	4b04      	ldr	r3, [pc, #16]	; (8005658 <vTaskSuspendAll+0x18>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	3301      	adds	r3, #1
 800564a:	4a03      	ldr	r2, [pc, #12]	; (8005658 <vTaskSuspendAll+0x18>)
 800564c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800564e:	bf00      	nop
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr
 8005658:	20000dc0 	.word	0x20000dc0

0800565c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005662:	2300      	movs	r3, #0
 8005664:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005666:	2300      	movs	r3, #0
 8005668:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800566a:	4b42      	ldr	r3, [pc, #264]	; (8005774 <xTaskResumeAll+0x118>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d10a      	bne.n	8005688 <xTaskResumeAll+0x2c>
	__asm volatile
 8005672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005676:	f383 8811 	msr	BASEPRI, r3
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	603b      	str	r3, [r7, #0]
}
 8005684:	bf00      	nop
 8005686:	e7fe      	b.n	8005686 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005688:	f001 f914 	bl	80068b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800568c:	4b39      	ldr	r3, [pc, #228]	; (8005774 <xTaskResumeAll+0x118>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	3b01      	subs	r3, #1
 8005692:	4a38      	ldr	r2, [pc, #224]	; (8005774 <xTaskResumeAll+0x118>)
 8005694:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005696:	4b37      	ldr	r3, [pc, #220]	; (8005774 <xTaskResumeAll+0x118>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d162      	bne.n	8005764 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800569e:	4b36      	ldr	r3, [pc, #216]	; (8005778 <xTaskResumeAll+0x11c>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d05e      	beq.n	8005764 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056a6:	e02f      	b.n	8005708 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056a8:	4b34      	ldr	r3, [pc, #208]	; (800577c <xTaskResumeAll+0x120>)
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	3318      	adds	r3, #24
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7ff f871 	bl	800479c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	3304      	adds	r3, #4
 80056be:	4618      	mov	r0, r3
 80056c0:	f7ff f86c 	bl	800479c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056c8:	4b2d      	ldr	r3, [pc, #180]	; (8005780 <xTaskResumeAll+0x124>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d903      	bls.n	80056d8 <xTaskResumeAll+0x7c>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d4:	4a2a      	ldr	r2, [pc, #168]	; (8005780 <xTaskResumeAll+0x124>)
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056dc:	4613      	mov	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4413      	add	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4a27      	ldr	r2, [pc, #156]	; (8005784 <xTaskResumeAll+0x128>)
 80056e6:	441a      	add	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	3304      	adds	r3, #4
 80056ec:	4619      	mov	r1, r3
 80056ee:	4610      	mov	r0, r2
 80056f0:	f7fe fff7 	bl	80046e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f8:	4b23      	ldr	r3, [pc, #140]	; (8005788 <xTaskResumeAll+0x12c>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fe:	429a      	cmp	r2, r3
 8005700:	d302      	bcc.n	8005708 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005702:	4b22      	ldr	r3, [pc, #136]	; (800578c <xTaskResumeAll+0x130>)
 8005704:	2201      	movs	r2, #1
 8005706:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005708:	4b1c      	ldr	r3, [pc, #112]	; (800577c <xTaskResumeAll+0x120>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1cb      	bne.n	80056a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005716:	f000 fb55 	bl	8005dc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800571a:	4b1d      	ldr	r3, [pc, #116]	; (8005790 <xTaskResumeAll+0x134>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d010      	beq.n	8005748 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005726:	f000 f847 	bl	80057b8 <xTaskIncrementTick>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005730:	4b16      	ldr	r3, [pc, #88]	; (800578c <xTaskResumeAll+0x130>)
 8005732:	2201      	movs	r2, #1
 8005734:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	3b01      	subs	r3, #1
 800573a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1f1      	bne.n	8005726 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005742:	4b13      	ldr	r3, [pc, #76]	; (8005790 <xTaskResumeAll+0x134>)
 8005744:	2200      	movs	r2, #0
 8005746:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005748:	4b10      	ldr	r3, [pc, #64]	; (800578c <xTaskResumeAll+0x130>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d009      	beq.n	8005764 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005750:	2301      	movs	r3, #1
 8005752:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005754:	4b0f      	ldr	r3, [pc, #60]	; (8005794 <xTaskResumeAll+0x138>)
 8005756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005764:	f001 f8d6 	bl	8006914 <vPortExitCritical>

	return xAlreadyYielded;
 8005768:	68bb      	ldr	r3, [r7, #8]
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	20000dc0 	.word	0x20000dc0
 8005778:	20000d98 	.word	0x20000d98
 800577c:	20000d58 	.word	0x20000d58
 8005780:	20000da0 	.word	0x20000da0
 8005784:	200008c8 	.word	0x200008c8
 8005788:	200008c4 	.word	0x200008c4
 800578c:	20000dac 	.word	0x20000dac
 8005790:	20000da8 	.word	0x20000da8
 8005794:	e000ed04 	.word	0xe000ed04

08005798 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800579e:	4b05      	ldr	r3, [pc, #20]	; (80057b4 <xTaskGetTickCount+0x1c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80057a4:	687b      	ldr	r3, [r7, #4]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	370c      	adds	r7, #12
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop
 80057b4:	20000d9c 	.word	0x20000d9c

080057b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80057be:	2300      	movs	r3, #0
 80057c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057c2:	4b4f      	ldr	r3, [pc, #316]	; (8005900 <xTaskIncrementTick+0x148>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	f040 808f 	bne.w	80058ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80057cc:	4b4d      	ldr	r3, [pc, #308]	; (8005904 <xTaskIncrementTick+0x14c>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	3301      	adds	r3, #1
 80057d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80057d4:	4a4b      	ldr	r2, [pc, #300]	; (8005904 <xTaskIncrementTick+0x14c>)
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d120      	bne.n	8005822 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80057e0:	4b49      	ldr	r3, [pc, #292]	; (8005908 <xTaskIncrementTick+0x150>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00a      	beq.n	8005800 <xTaskIncrementTick+0x48>
	__asm volatile
 80057ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ee:	f383 8811 	msr	BASEPRI, r3
 80057f2:	f3bf 8f6f 	isb	sy
 80057f6:	f3bf 8f4f 	dsb	sy
 80057fa:	603b      	str	r3, [r7, #0]
}
 80057fc:	bf00      	nop
 80057fe:	e7fe      	b.n	80057fe <xTaskIncrementTick+0x46>
 8005800:	4b41      	ldr	r3, [pc, #260]	; (8005908 <xTaskIncrementTick+0x150>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	60fb      	str	r3, [r7, #12]
 8005806:	4b41      	ldr	r3, [pc, #260]	; (800590c <xTaskIncrementTick+0x154>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a3f      	ldr	r2, [pc, #252]	; (8005908 <xTaskIncrementTick+0x150>)
 800580c:	6013      	str	r3, [r2, #0]
 800580e:	4a3f      	ldr	r2, [pc, #252]	; (800590c <xTaskIncrementTick+0x154>)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6013      	str	r3, [r2, #0]
 8005814:	4b3e      	ldr	r3, [pc, #248]	; (8005910 <xTaskIncrementTick+0x158>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	3301      	adds	r3, #1
 800581a:	4a3d      	ldr	r2, [pc, #244]	; (8005910 <xTaskIncrementTick+0x158>)
 800581c:	6013      	str	r3, [r2, #0]
 800581e:	f000 fad1 	bl	8005dc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005822:	4b3c      	ldr	r3, [pc, #240]	; (8005914 <xTaskIncrementTick+0x15c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	429a      	cmp	r2, r3
 800582a:	d349      	bcc.n	80058c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800582c:	4b36      	ldr	r3, [pc, #216]	; (8005908 <xTaskIncrementTick+0x150>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d104      	bne.n	8005840 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005836:	4b37      	ldr	r3, [pc, #220]	; (8005914 <xTaskIncrementTick+0x15c>)
 8005838:	f04f 32ff 	mov.w	r2, #4294967295
 800583c:	601a      	str	r2, [r3, #0]
					break;
 800583e:	e03f      	b.n	80058c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005840:	4b31      	ldr	r3, [pc, #196]	; (8005908 <xTaskIncrementTick+0x150>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	429a      	cmp	r2, r3
 8005856:	d203      	bcs.n	8005860 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005858:	4a2e      	ldr	r2, [pc, #184]	; (8005914 <xTaskIncrementTick+0x15c>)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800585e:	e02f      	b.n	80058c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	3304      	adds	r3, #4
 8005864:	4618      	mov	r0, r3
 8005866:	f7fe ff99 	bl	800479c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586e:	2b00      	cmp	r3, #0
 8005870:	d004      	beq.n	800587c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	3318      	adds	r3, #24
 8005876:	4618      	mov	r0, r3
 8005878:	f7fe ff90 	bl	800479c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005880:	4b25      	ldr	r3, [pc, #148]	; (8005918 <xTaskIncrementTick+0x160>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	429a      	cmp	r2, r3
 8005886:	d903      	bls.n	8005890 <xTaskIncrementTick+0xd8>
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588c:	4a22      	ldr	r2, [pc, #136]	; (8005918 <xTaskIncrementTick+0x160>)
 800588e:	6013      	str	r3, [r2, #0]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005894:	4613      	mov	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4a1f      	ldr	r2, [pc, #124]	; (800591c <xTaskIncrementTick+0x164>)
 800589e:	441a      	add	r2, r3
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	3304      	adds	r3, #4
 80058a4:	4619      	mov	r1, r3
 80058a6:	4610      	mov	r0, r2
 80058a8:	f7fe ff1b 	bl	80046e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b0:	4b1b      	ldr	r3, [pc, #108]	; (8005920 <xTaskIncrementTick+0x168>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d3b8      	bcc.n	800582c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80058ba:	2301      	movs	r3, #1
 80058bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058be:	e7b5      	b.n	800582c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80058c0:	4b17      	ldr	r3, [pc, #92]	; (8005920 <xTaskIncrementTick+0x168>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c6:	4915      	ldr	r1, [pc, #84]	; (800591c <xTaskIncrementTick+0x164>)
 80058c8:	4613      	mov	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4413      	add	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	440b      	add	r3, r1
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d901      	bls.n	80058dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80058d8:	2301      	movs	r3, #1
 80058da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80058dc:	4b11      	ldr	r3, [pc, #68]	; (8005924 <xTaskIncrementTick+0x16c>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d007      	beq.n	80058f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80058e4:	2301      	movs	r3, #1
 80058e6:	617b      	str	r3, [r7, #20]
 80058e8:	e004      	b.n	80058f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80058ea:	4b0f      	ldr	r3, [pc, #60]	; (8005928 <xTaskIncrementTick+0x170>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	3301      	adds	r3, #1
 80058f0:	4a0d      	ldr	r2, [pc, #52]	; (8005928 <xTaskIncrementTick+0x170>)
 80058f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80058f4:	697b      	ldr	r3, [r7, #20]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3718      	adds	r7, #24
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	20000dc0 	.word	0x20000dc0
 8005904:	20000d9c 	.word	0x20000d9c
 8005908:	20000d50 	.word	0x20000d50
 800590c:	20000d54 	.word	0x20000d54
 8005910:	20000db0 	.word	0x20000db0
 8005914:	20000db8 	.word	0x20000db8
 8005918:	20000da0 	.word	0x20000da0
 800591c:	200008c8 	.word	0x200008c8
 8005920:	200008c4 	.word	0x200008c4
 8005924:	20000dac 	.word	0x20000dac
 8005928:	20000da8 	.word	0x20000da8

0800592c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005932:	4b28      	ldr	r3, [pc, #160]	; (80059d4 <vTaskSwitchContext+0xa8>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800593a:	4b27      	ldr	r3, [pc, #156]	; (80059d8 <vTaskSwitchContext+0xac>)
 800593c:	2201      	movs	r2, #1
 800593e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005940:	e041      	b.n	80059c6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005942:	4b25      	ldr	r3, [pc, #148]	; (80059d8 <vTaskSwitchContext+0xac>)
 8005944:	2200      	movs	r2, #0
 8005946:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005948:	4b24      	ldr	r3, [pc, #144]	; (80059dc <vTaskSwitchContext+0xb0>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	60fb      	str	r3, [r7, #12]
 800594e:	e010      	b.n	8005972 <vTaskSwitchContext+0x46>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10a      	bne.n	800596c <vTaskSwitchContext+0x40>
	__asm volatile
 8005956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595a:	f383 8811 	msr	BASEPRI, r3
 800595e:	f3bf 8f6f 	isb	sy
 8005962:	f3bf 8f4f 	dsb	sy
 8005966:	607b      	str	r3, [r7, #4]
}
 8005968:	bf00      	nop
 800596a:	e7fe      	b.n	800596a <vTaskSwitchContext+0x3e>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	3b01      	subs	r3, #1
 8005970:	60fb      	str	r3, [r7, #12]
 8005972:	491b      	ldr	r1, [pc, #108]	; (80059e0 <vTaskSwitchContext+0xb4>)
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	4613      	mov	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	440b      	add	r3, r1
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d0e4      	beq.n	8005950 <vTaskSwitchContext+0x24>
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	4613      	mov	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4413      	add	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4a13      	ldr	r2, [pc, #76]	; (80059e0 <vTaskSwitchContext+0xb4>)
 8005992:	4413      	add	r3, r2
 8005994:	60bb      	str	r3, [r7, #8]
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	605a      	str	r2, [r3, #4]
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	685a      	ldr	r2, [r3, #4]
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	3308      	adds	r3, #8
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d104      	bne.n	80059b6 <vTaskSwitchContext+0x8a>
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	605a      	str	r2, [r3, #4]
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	4a09      	ldr	r2, [pc, #36]	; (80059e4 <vTaskSwitchContext+0xb8>)
 80059be:	6013      	str	r3, [r2, #0]
 80059c0:	4a06      	ldr	r2, [pc, #24]	; (80059dc <vTaskSwitchContext+0xb0>)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6013      	str	r3, [r2, #0]
}
 80059c6:	bf00      	nop
 80059c8:	3714      	adds	r7, #20
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	20000dc0 	.word	0x20000dc0
 80059d8:	20000dac 	.word	0x20000dac
 80059dc:	20000da0 	.word	0x20000da0
 80059e0:	200008c8 	.word	0x200008c8
 80059e4:	200008c4 	.word	0x200008c4

080059e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10a      	bne.n	8005a0e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80059f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fc:	f383 8811 	msr	BASEPRI, r3
 8005a00:	f3bf 8f6f 	isb	sy
 8005a04:	f3bf 8f4f 	dsb	sy
 8005a08:	60fb      	str	r3, [r7, #12]
}
 8005a0a:	bf00      	nop
 8005a0c:	e7fe      	b.n	8005a0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a0e:	4b07      	ldr	r3, [pc, #28]	; (8005a2c <vTaskPlaceOnEventList+0x44>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	3318      	adds	r3, #24
 8005a14:	4619      	mov	r1, r3
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7fe fe87 	bl	800472a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	6838      	ldr	r0, [r7, #0]
 8005a20:	f000 fa7c 	bl	8005f1c <prvAddCurrentTaskToDelayedList>
}
 8005a24:	bf00      	nop
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	200008c4 	.word	0x200008c4

08005a30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10a      	bne.n	8005a58 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a46:	f383 8811 	msr	BASEPRI, r3
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	617b      	str	r3, [r7, #20]
}
 8005a54:	bf00      	nop
 8005a56:	e7fe      	b.n	8005a56 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a58:	4b0a      	ldr	r3, [pc, #40]	; (8005a84 <vTaskPlaceOnEventListRestricted+0x54>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	3318      	adds	r3, #24
 8005a5e:	4619      	mov	r1, r3
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f7fe fe3e 	bl	80046e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d002      	beq.n	8005a72 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a70:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005a72:	6879      	ldr	r1, [r7, #4]
 8005a74:	68b8      	ldr	r0, [r7, #8]
 8005a76:	f000 fa51 	bl	8005f1c <prvAddCurrentTaskToDelayedList>
	}
 8005a7a:	bf00      	nop
 8005a7c:	3718      	adds	r7, #24
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	200008c4 	.word	0x200008c4

08005a88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b086      	sub	sp, #24
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10a      	bne.n	8005ab4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	60fb      	str	r3, [r7, #12]
}
 8005ab0:	bf00      	nop
 8005ab2:	e7fe      	b.n	8005ab2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	3318      	adds	r3, #24
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7fe fe6f 	bl	800479c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005abe:	4b1e      	ldr	r3, [pc, #120]	; (8005b38 <xTaskRemoveFromEventList+0xb0>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d11d      	bne.n	8005b02 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	3304      	adds	r3, #4
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fe fe66 	bl	800479c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad4:	4b19      	ldr	r3, [pc, #100]	; (8005b3c <xTaskRemoveFromEventList+0xb4>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d903      	bls.n	8005ae4 <xTaskRemoveFromEventList+0x5c>
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae0:	4a16      	ldr	r2, [pc, #88]	; (8005b3c <xTaskRemoveFromEventList+0xb4>)
 8005ae2:	6013      	str	r3, [r2, #0]
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae8:	4613      	mov	r3, r2
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	4413      	add	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4a13      	ldr	r2, [pc, #76]	; (8005b40 <xTaskRemoveFromEventList+0xb8>)
 8005af2:	441a      	add	r2, r3
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	3304      	adds	r3, #4
 8005af8:	4619      	mov	r1, r3
 8005afa:	4610      	mov	r0, r2
 8005afc:	f7fe fdf1 	bl	80046e2 <vListInsertEnd>
 8005b00:	e005      	b.n	8005b0e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	3318      	adds	r3, #24
 8005b06:	4619      	mov	r1, r3
 8005b08:	480e      	ldr	r0, [pc, #56]	; (8005b44 <xTaskRemoveFromEventList+0xbc>)
 8005b0a:	f7fe fdea 	bl	80046e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b12:	4b0d      	ldr	r3, [pc, #52]	; (8005b48 <xTaskRemoveFromEventList+0xc0>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d905      	bls.n	8005b28 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005b20:	4b0a      	ldr	r3, [pc, #40]	; (8005b4c <xTaskRemoveFromEventList+0xc4>)
 8005b22:	2201      	movs	r2, #1
 8005b24:	601a      	str	r2, [r3, #0]
 8005b26:	e001      	b.n	8005b2c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005b2c:	697b      	ldr	r3, [r7, #20]
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3718      	adds	r7, #24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	20000dc0 	.word	0x20000dc0
 8005b3c:	20000da0 	.word	0x20000da0
 8005b40:	200008c8 	.word	0x200008c8
 8005b44:	20000d58 	.word	0x20000d58
 8005b48:	200008c4 	.word	0x200008c4
 8005b4c:	20000dac 	.word	0x20000dac

08005b50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b58:	4b06      	ldr	r3, [pc, #24]	; (8005b74 <vTaskInternalSetTimeOutState+0x24>)
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005b60:	4b05      	ldr	r3, [pc, #20]	; (8005b78 <vTaskInternalSetTimeOutState+0x28>)
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	605a      	str	r2, [r3, #4]
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr
 8005b74:	20000db0 	.word	0x20000db0
 8005b78:	20000d9c 	.word	0x20000d9c

08005b7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b088      	sub	sp, #32
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10a      	bne.n	8005ba2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b90:	f383 8811 	msr	BASEPRI, r3
 8005b94:	f3bf 8f6f 	isb	sy
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	613b      	str	r3, [r7, #16]
}
 8005b9e:	bf00      	nop
 8005ba0:	e7fe      	b.n	8005ba0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10a      	bne.n	8005bbe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bac:	f383 8811 	msr	BASEPRI, r3
 8005bb0:	f3bf 8f6f 	isb	sy
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	60fb      	str	r3, [r7, #12]
}
 8005bba:	bf00      	nop
 8005bbc:	e7fe      	b.n	8005bbc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005bbe:	f000 fe79 	bl	80068b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005bc2:	4b1d      	ldr	r3, [pc, #116]	; (8005c38 <xTaskCheckForTimeOut+0xbc>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bda:	d102      	bne.n	8005be2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	61fb      	str	r3, [r7, #28]
 8005be0:	e023      	b.n	8005c2a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	4b15      	ldr	r3, [pc, #84]	; (8005c3c <xTaskCheckForTimeOut+0xc0>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d007      	beq.n	8005bfe <xTaskCheckForTimeOut+0x82>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d302      	bcc.n	8005bfe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	61fb      	str	r3, [r7, #28]
 8005bfc:	e015      	b.n	8005c2a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d20b      	bcs.n	8005c20 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	1ad2      	subs	r2, r2, r3
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f7ff ff9b 	bl	8005b50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	61fb      	str	r3, [r7, #28]
 8005c1e:	e004      	b.n	8005c2a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	2200      	movs	r2, #0
 8005c24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005c26:	2301      	movs	r3, #1
 8005c28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005c2a:	f000 fe73 	bl	8006914 <vPortExitCritical>

	return xReturn;
 8005c2e:	69fb      	ldr	r3, [r7, #28]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3720      	adds	r7, #32
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	20000d9c 	.word	0x20000d9c
 8005c3c:	20000db0 	.word	0x20000db0

08005c40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005c40:	b480      	push	{r7}
 8005c42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005c44:	4b03      	ldr	r3, [pc, #12]	; (8005c54 <vTaskMissedYield+0x14>)
 8005c46:	2201      	movs	r2, #1
 8005c48:	601a      	str	r2, [r3, #0]
}
 8005c4a:	bf00      	nop
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr
 8005c54:	20000dac 	.word	0x20000dac

08005c58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005c60:	f000 f852 	bl	8005d08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005c64:	4b06      	ldr	r3, [pc, #24]	; (8005c80 <prvIdleTask+0x28>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d9f9      	bls.n	8005c60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005c6c:	4b05      	ldr	r3, [pc, #20]	; (8005c84 <prvIdleTask+0x2c>)
 8005c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	f3bf 8f4f 	dsb	sy
 8005c78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c7c:	e7f0      	b.n	8005c60 <prvIdleTask+0x8>
 8005c7e:	bf00      	nop
 8005c80:	200008c8 	.word	0x200008c8
 8005c84:	e000ed04 	.word	0xe000ed04

08005c88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c8e:	2300      	movs	r3, #0
 8005c90:	607b      	str	r3, [r7, #4]
 8005c92:	e00c      	b.n	8005cae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	4613      	mov	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4a12      	ldr	r2, [pc, #72]	; (8005ce8 <prvInitialiseTaskLists+0x60>)
 8005ca0:	4413      	add	r3, r2
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7fe fcf0 	bl	8004688 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	3301      	adds	r3, #1
 8005cac:	607b      	str	r3, [r7, #4]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2b37      	cmp	r3, #55	; 0x37
 8005cb2:	d9ef      	bls.n	8005c94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005cb4:	480d      	ldr	r0, [pc, #52]	; (8005cec <prvInitialiseTaskLists+0x64>)
 8005cb6:	f7fe fce7 	bl	8004688 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005cba:	480d      	ldr	r0, [pc, #52]	; (8005cf0 <prvInitialiseTaskLists+0x68>)
 8005cbc:	f7fe fce4 	bl	8004688 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005cc0:	480c      	ldr	r0, [pc, #48]	; (8005cf4 <prvInitialiseTaskLists+0x6c>)
 8005cc2:	f7fe fce1 	bl	8004688 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005cc6:	480c      	ldr	r0, [pc, #48]	; (8005cf8 <prvInitialiseTaskLists+0x70>)
 8005cc8:	f7fe fcde 	bl	8004688 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ccc:	480b      	ldr	r0, [pc, #44]	; (8005cfc <prvInitialiseTaskLists+0x74>)
 8005cce:	f7fe fcdb 	bl	8004688 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005cd2:	4b0b      	ldr	r3, [pc, #44]	; (8005d00 <prvInitialiseTaskLists+0x78>)
 8005cd4:	4a05      	ldr	r2, [pc, #20]	; (8005cec <prvInitialiseTaskLists+0x64>)
 8005cd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005cd8:	4b0a      	ldr	r3, [pc, #40]	; (8005d04 <prvInitialiseTaskLists+0x7c>)
 8005cda:	4a05      	ldr	r2, [pc, #20]	; (8005cf0 <prvInitialiseTaskLists+0x68>)
 8005cdc:	601a      	str	r2, [r3, #0]
}
 8005cde:	bf00      	nop
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	200008c8 	.word	0x200008c8
 8005cec:	20000d28 	.word	0x20000d28
 8005cf0:	20000d3c 	.word	0x20000d3c
 8005cf4:	20000d58 	.word	0x20000d58
 8005cf8:	20000d6c 	.word	0x20000d6c
 8005cfc:	20000d84 	.word	0x20000d84
 8005d00:	20000d50 	.word	0x20000d50
 8005d04:	20000d54 	.word	0x20000d54

08005d08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d0e:	e019      	b.n	8005d44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005d10:	f000 fdd0 	bl	80068b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d14:	4b10      	ldr	r3, [pc, #64]	; (8005d58 <prvCheckTasksWaitingTermination+0x50>)
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	3304      	adds	r3, #4
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7fe fd3b 	bl	800479c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d26:	4b0d      	ldr	r3, [pc, #52]	; (8005d5c <prvCheckTasksWaitingTermination+0x54>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	4a0b      	ldr	r2, [pc, #44]	; (8005d5c <prvCheckTasksWaitingTermination+0x54>)
 8005d2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d30:	4b0b      	ldr	r3, [pc, #44]	; (8005d60 <prvCheckTasksWaitingTermination+0x58>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3b01      	subs	r3, #1
 8005d36:	4a0a      	ldr	r2, [pc, #40]	; (8005d60 <prvCheckTasksWaitingTermination+0x58>)
 8005d38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005d3a:	f000 fdeb 	bl	8006914 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f810 	bl	8005d64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d44:	4b06      	ldr	r3, [pc, #24]	; (8005d60 <prvCheckTasksWaitingTermination+0x58>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1e1      	bne.n	8005d10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005d4c:	bf00      	nop
 8005d4e:	bf00      	nop
 8005d50:	3708      	adds	r7, #8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	20000d6c 	.word	0x20000d6c
 8005d5c:	20000d98 	.word	0x20000d98
 8005d60:	20000d80 	.word	0x20000d80

08005d64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d108      	bne.n	8005d88 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 ff88 	bl	8006c90 <vPortFree>
				vPortFree( pxTCB );
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 ff85 	bl	8006c90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005d86:	e018      	b.n	8005dba <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d103      	bne.n	8005d9a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 ff7c 	bl	8006c90 <vPortFree>
	}
 8005d98:	e00f      	b.n	8005dba <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d00a      	beq.n	8005dba <prvDeleteTCB+0x56>
	__asm volatile
 8005da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da8:	f383 8811 	msr	BASEPRI, r3
 8005dac:	f3bf 8f6f 	isb	sy
 8005db0:	f3bf 8f4f 	dsb	sy
 8005db4:	60fb      	str	r3, [r7, #12]
}
 8005db6:	bf00      	nop
 8005db8:	e7fe      	b.n	8005db8 <prvDeleteTCB+0x54>
	}
 8005dba:	bf00      	nop
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
	...

08005dc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dca:	4b0c      	ldr	r3, [pc, #48]	; (8005dfc <prvResetNextTaskUnblockTime+0x38>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d104      	bne.n	8005dde <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005dd4:	4b0a      	ldr	r3, [pc, #40]	; (8005e00 <prvResetNextTaskUnblockTime+0x3c>)
 8005dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8005dda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ddc:	e008      	b.n	8005df0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dde:	4b07      	ldr	r3, [pc, #28]	; (8005dfc <prvResetNextTaskUnblockTime+0x38>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	4a04      	ldr	r2, [pc, #16]	; (8005e00 <prvResetNextTaskUnblockTime+0x3c>)
 8005dee:	6013      	str	r3, [r2, #0]
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr
 8005dfc:	20000d50 	.word	0x20000d50
 8005e00:	20000db8 	.word	0x20000db8

08005e04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005e0a:	4b0b      	ldr	r3, [pc, #44]	; (8005e38 <xTaskGetSchedulerState+0x34>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d102      	bne.n	8005e18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005e12:	2301      	movs	r3, #1
 8005e14:	607b      	str	r3, [r7, #4]
 8005e16:	e008      	b.n	8005e2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e18:	4b08      	ldr	r3, [pc, #32]	; (8005e3c <xTaskGetSchedulerState+0x38>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d102      	bne.n	8005e26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005e20:	2302      	movs	r3, #2
 8005e22:	607b      	str	r3, [r7, #4]
 8005e24:	e001      	b.n	8005e2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005e26:	2300      	movs	r3, #0
 8005e28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005e2a:	687b      	ldr	r3, [r7, #4]
	}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr
 8005e38:	20000da4 	.word	0x20000da4
 8005e3c:	20000dc0 	.word	0x20000dc0

08005e40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d056      	beq.n	8005f04 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005e56:	4b2e      	ldr	r3, [pc, #184]	; (8005f10 <xTaskPriorityDisinherit+0xd0>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d00a      	beq.n	8005e76 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e64:	f383 8811 	msr	BASEPRI, r3
 8005e68:	f3bf 8f6f 	isb	sy
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	60fb      	str	r3, [r7, #12]
}
 8005e72:	bf00      	nop
 8005e74:	e7fe      	b.n	8005e74 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10a      	bne.n	8005e94 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e82:	f383 8811 	msr	BASEPRI, r3
 8005e86:	f3bf 8f6f 	isb	sy
 8005e8a:	f3bf 8f4f 	dsb	sy
 8005e8e:	60bb      	str	r3, [r7, #8]
}
 8005e90:	bf00      	nop
 8005e92:	e7fe      	b.n	8005e92 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e98:	1e5a      	subs	r2, r3, #1
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d02c      	beq.n	8005f04 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d128      	bne.n	8005f04 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7fe fc70 	bl	800479c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed4:	4b0f      	ldr	r3, [pc, #60]	; (8005f14 <xTaskPriorityDisinherit+0xd4>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d903      	bls.n	8005ee4 <xTaskPriorityDisinherit+0xa4>
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee0:	4a0c      	ldr	r2, [pc, #48]	; (8005f14 <xTaskPriorityDisinherit+0xd4>)
 8005ee2:	6013      	str	r3, [r2, #0]
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee8:	4613      	mov	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4a09      	ldr	r2, [pc, #36]	; (8005f18 <xTaskPriorityDisinherit+0xd8>)
 8005ef2:	441a      	add	r2, r3
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	3304      	adds	r3, #4
 8005ef8:	4619      	mov	r1, r3
 8005efa:	4610      	mov	r0, r2
 8005efc:	f7fe fbf1 	bl	80046e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005f00:	2301      	movs	r3, #1
 8005f02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f04:	697b      	ldr	r3, [r7, #20]
	}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3718      	adds	r7, #24
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	200008c4 	.word	0x200008c4
 8005f14:	20000da0 	.word	0x20000da0
 8005f18:	200008c8 	.word	0x200008c8

08005f1c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f26:	4b21      	ldr	r3, [pc, #132]	; (8005fac <prvAddCurrentTaskToDelayedList+0x90>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f2c:	4b20      	ldr	r3, [pc, #128]	; (8005fb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3304      	adds	r3, #4
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7fe fc32 	bl	800479c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3e:	d10a      	bne.n	8005f56 <prvAddCurrentTaskToDelayedList+0x3a>
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d007      	beq.n	8005f56 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f46:	4b1a      	ldr	r3, [pc, #104]	; (8005fb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4819      	ldr	r0, [pc, #100]	; (8005fb4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005f50:	f7fe fbc7 	bl	80046e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f54:	e026      	b.n	8005fa4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f5e:	4b14      	ldr	r3, [pc, #80]	; (8005fb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f66:	68ba      	ldr	r2, [r7, #8]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d209      	bcs.n	8005f82 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f6e:	4b12      	ldr	r3, [pc, #72]	; (8005fb8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	4b0f      	ldr	r3, [pc, #60]	; (8005fb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	3304      	adds	r3, #4
 8005f78:	4619      	mov	r1, r3
 8005f7a:	4610      	mov	r0, r2
 8005f7c:	f7fe fbd5 	bl	800472a <vListInsert>
}
 8005f80:	e010      	b.n	8005fa4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f82:	4b0e      	ldr	r3, [pc, #56]	; (8005fbc <prvAddCurrentTaskToDelayedList+0xa0>)
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	4b0a      	ldr	r3, [pc, #40]	; (8005fb0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	3304      	adds	r3, #4
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	4610      	mov	r0, r2
 8005f90:	f7fe fbcb 	bl	800472a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f94:	4b0a      	ldr	r3, [pc, #40]	; (8005fc0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68ba      	ldr	r2, [r7, #8]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d202      	bcs.n	8005fa4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005f9e:	4a08      	ldr	r2, [pc, #32]	; (8005fc0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	6013      	str	r3, [r2, #0]
}
 8005fa4:	bf00      	nop
 8005fa6:	3710      	adds	r7, #16
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	20000d9c 	.word	0x20000d9c
 8005fb0:	200008c4 	.word	0x200008c4
 8005fb4:	20000d84 	.word	0x20000d84
 8005fb8:	20000d54 	.word	0x20000d54
 8005fbc:	20000d50 	.word	0x20000d50
 8005fc0:	20000db8 	.word	0x20000db8

08005fc4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b08a      	sub	sp, #40	; 0x28
 8005fc8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005fce:	f000 fb07 	bl	80065e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005fd2:	4b1c      	ldr	r3, [pc, #112]	; (8006044 <xTimerCreateTimerTask+0x80>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d021      	beq.n	800601e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005fe2:	1d3a      	adds	r2, r7, #4
 8005fe4:	f107 0108 	add.w	r1, r7, #8
 8005fe8:	f107 030c 	add.w	r3, r7, #12
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7fe fb31 	bl	8004654 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005ff2:	6879      	ldr	r1, [r7, #4]
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	9202      	str	r2, [sp, #8]
 8005ffa:	9301      	str	r3, [sp, #4]
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	2300      	movs	r3, #0
 8006002:	460a      	mov	r2, r1
 8006004:	4910      	ldr	r1, [pc, #64]	; (8006048 <xTimerCreateTimerTask+0x84>)
 8006006:	4811      	ldr	r0, [pc, #68]	; (800604c <xTimerCreateTimerTask+0x88>)
 8006008:	f7ff f8de 	bl	80051c8 <xTaskCreateStatic>
 800600c:	4603      	mov	r3, r0
 800600e:	4a10      	ldr	r2, [pc, #64]	; (8006050 <xTimerCreateTimerTask+0x8c>)
 8006010:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006012:	4b0f      	ldr	r3, [pc, #60]	; (8006050 <xTimerCreateTimerTask+0x8c>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d001      	beq.n	800601e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800601a:	2301      	movs	r3, #1
 800601c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10a      	bne.n	800603a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006028:	f383 8811 	msr	BASEPRI, r3
 800602c:	f3bf 8f6f 	isb	sy
 8006030:	f3bf 8f4f 	dsb	sy
 8006034:	613b      	str	r3, [r7, #16]
}
 8006036:	bf00      	nop
 8006038:	e7fe      	b.n	8006038 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800603a:	697b      	ldr	r3, [r7, #20]
}
 800603c:	4618      	mov	r0, r3
 800603e:	3718      	adds	r7, #24
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	20000df4 	.word	0x20000df4
 8006048:	08007ce8 	.word	0x08007ce8
 800604c:	08006189 	.word	0x08006189
 8006050:	20000df8 	.word	0x20000df8

08006054 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b08a      	sub	sp, #40	; 0x28
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
 8006060:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006062:	2300      	movs	r3, #0
 8006064:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10a      	bne.n	8006082 <xTimerGenericCommand+0x2e>
	__asm volatile
 800606c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006070:	f383 8811 	msr	BASEPRI, r3
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	f3bf 8f4f 	dsb	sy
 800607c:	623b      	str	r3, [r7, #32]
}
 800607e:	bf00      	nop
 8006080:	e7fe      	b.n	8006080 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006082:	4b1a      	ldr	r3, [pc, #104]	; (80060ec <xTimerGenericCommand+0x98>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d02a      	beq.n	80060e0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	2b05      	cmp	r3, #5
 800609a:	dc18      	bgt.n	80060ce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800609c:	f7ff feb2 	bl	8005e04 <xTaskGetSchedulerState>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d109      	bne.n	80060ba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80060a6:	4b11      	ldr	r3, [pc, #68]	; (80060ec <xTimerGenericCommand+0x98>)
 80060a8:	6818      	ldr	r0, [r3, #0]
 80060aa:	f107 0110 	add.w	r1, r7, #16
 80060ae:	2300      	movs	r3, #0
 80060b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060b2:	f7fe fca1 	bl	80049f8 <xQueueGenericSend>
 80060b6:	6278      	str	r0, [r7, #36]	; 0x24
 80060b8:	e012      	b.n	80060e0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80060ba:	4b0c      	ldr	r3, [pc, #48]	; (80060ec <xTimerGenericCommand+0x98>)
 80060bc:	6818      	ldr	r0, [r3, #0]
 80060be:	f107 0110 	add.w	r1, r7, #16
 80060c2:	2300      	movs	r3, #0
 80060c4:	2200      	movs	r2, #0
 80060c6:	f7fe fc97 	bl	80049f8 <xQueueGenericSend>
 80060ca:	6278      	str	r0, [r7, #36]	; 0x24
 80060cc:	e008      	b.n	80060e0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80060ce:	4b07      	ldr	r3, [pc, #28]	; (80060ec <xTimerGenericCommand+0x98>)
 80060d0:	6818      	ldr	r0, [r3, #0]
 80060d2:	f107 0110 	add.w	r1, r7, #16
 80060d6:	2300      	movs	r3, #0
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	f7fe fd8b 	bl	8004bf4 <xQueueGenericSendFromISR>
 80060de:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3728      	adds	r7, #40	; 0x28
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	20000df4 	.word	0x20000df4

080060f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b088      	sub	sp, #32
 80060f4:	af02      	add	r7, sp, #8
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060fa:	4b22      	ldr	r3, [pc, #136]	; (8006184 <prvProcessExpiredTimer+0x94>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	3304      	adds	r3, #4
 8006108:	4618      	mov	r0, r3
 800610a:	f7fe fb47 	bl	800479c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006114:	f003 0304 	and.w	r3, r3, #4
 8006118:	2b00      	cmp	r3, #0
 800611a:	d022      	beq.n	8006162 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	699a      	ldr	r2, [r3, #24]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	18d1      	adds	r1, r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	6978      	ldr	r0, [r7, #20]
 800612a:	f000 f8d1 	bl	80062d0 <prvInsertTimerInActiveList>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d01f      	beq.n	8006174 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006134:	2300      	movs	r3, #0
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	2300      	movs	r3, #0
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	2100      	movs	r1, #0
 800613e:	6978      	ldr	r0, [r7, #20]
 8006140:	f7ff ff88 	bl	8006054 <xTimerGenericCommand>
 8006144:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d113      	bne.n	8006174 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800614c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	60fb      	str	r3, [r7, #12]
}
 800615e:	bf00      	nop
 8006160:	e7fe      	b.n	8006160 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006168:	f023 0301 	bic.w	r3, r3, #1
 800616c:	b2da      	uxtb	r2, r3
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	6978      	ldr	r0, [r7, #20]
 800617a:	4798      	blx	r3
}
 800617c:	bf00      	nop
 800617e:	3718      	adds	r7, #24
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	20000dec 	.word	0x20000dec

08006188 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006190:	f107 0308 	add.w	r3, r7, #8
 8006194:	4618      	mov	r0, r3
 8006196:	f000 f857 	bl	8006248 <prvGetNextExpireTime>
 800619a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	4619      	mov	r1, r3
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f000 f803 	bl	80061ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80061a6:	f000 f8d5 	bl	8006354 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80061aa:	e7f1      	b.n	8006190 <prvTimerTask+0x8>

080061ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80061b6:	f7ff fa43 	bl	8005640 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80061ba:	f107 0308 	add.w	r3, r7, #8
 80061be:	4618      	mov	r0, r3
 80061c0:	f000 f866 	bl	8006290 <prvSampleTimeNow>
 80061c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d130      	bne.n	800622e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10a      	bne.n	80061e8 <prvProcessTimerOrBlockTask+0x3c>
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d806      	bhi.n	80061e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80061da:	f7ff fa3f 	bl	800565c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80061de:	68f9      	ldr	r1, [r7, #12]
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f7ff ff85 	bl	80060f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80061e6:	e024      	b.n	8006232 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d008      	beq.n	8006200 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80061ee:	4b13      	ldr	r3, [pc, #76]	; (800623c <prvProcessTimerOrBlockTask+0x90>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d101      	bne.n	80061fc <prvProcessTimerOrBlockTask+0x50>
 80061f8:	2301      	movs	r3, #1
 80061fa:	e000      	b.n	80061fe <prvProcessTimerOrBlockTask+0x52>
 80061fc:	2300      	movs	r3, #0
 80061fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006200:	4b0f      	ldr	r3, [pc, #60]	; (8006240 <prvProcessTimerOrBlockTask+0x94>)
 8006202:	6818      	ldr	r0, [r3, #0]
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	4619      	mov	r1, r3
 800620e:	f7fe ffa7 	bl	8005160 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006212:	f7ff fa23 	bl	800565c <xTaskResumeAll>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10a      	bne.n	8006232 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800621c:	4b09      	ldr	r3, [pc, #36]	; (8006244 <prvProcessTimerOrBlockTask+0x98>)
 800621e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006222:	601a      	str	r2, [r3, #0]
 8006224:	f3bf 8f4f 	dsb	sy
 8006228:	f3bf 8f6f 	isb	sy
}
 800622c:	e001      	b.n	8006232 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800622e:	f7ff fa15 	bl	800565c <xTaskResumeAll>
}
 8006232:	bf00      	nop
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	20000df0 	.word	0x20000df0
 8006240:	20000df4 	.word	0x20000df4
 8006244:	e000ed04 	.word	0xe000ed04

08006248 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006250:	4b0e      	ldr	r3, [pc, #56]	; (800628c <prvGetNextExpireTime+0x44>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d101      	bne.n	800625e <prvGetNextExpireTime+0x16>
 800625a:	2201      	movs	r2, #1
 800625c:	e000      	b.n	8006260 <prvGetNextExpireTime+0x18>
 800625e:	2200      	movs	r2, #0
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d105      	bne.n	8006278 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800626c:	4b07      	ldr	r3, [pc, #28]	; (800628c <prvGetNextExpireTime+0x44>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	60fb      	str	r3, [r7, #12]
 8006276:	e001      	b.n	800627c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006278:	2300      	movs	r3, #0
 800627a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800627c:	68fb      	ldr	r3, [r7, #12]
}
 800627e:	4618      	mov	r0, r3
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	20000dec 	.word	0x20000dec

08006290 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006298:	f7ff fa7e 	bl	8005798 <xTaskGetTickCount>
 800629c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800629e:	4b0b      	ldr	r3, [pc, #44]	; (80062cc <prvSampleTimeNow+0x3c>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d205      	bcs.n	80062b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80062a8:	f000 f936 	bl	8006518 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	601a      	str	r2, [r3, #0]
 80062b2:	e002      	b.n	80062ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80062ba:	4a04      	ldr	r2, [pc, #16]	; (80062cc <prvSampleTimeNow+0x3c>)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80062c0:	68fb      	ldr	r3, [r7, #12]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	20000dfc 	.word	0x20000dfc

080062d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
 80062dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80062de:	2300      	movs	r3, #0
 80062e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	68ba      	ldr	r2, [r7, #8]
 80062e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d812      	bhi.n	800631c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	1ad2      	subs	r2, r2, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	429a      	cmp	r2, r3
 8006302:	d302      	bcc.n	800630a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006304:	2301      	movs	r3, #1
 8006306:	617b      	str	r3, [r7, #20]
 8006308:	e01b      	b.n	8006342 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800630a:	4b10      	ldr	r3, [pc, #64]	; (800634c <prvInsertTimerInActiveList+0x7c>)
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	3304      	adds	r3, #4
 8006312:	4619      	mov	r1, r3
 8006314:	4610      	mov	r0, r2
 8006316:	f7fe fa08 	bl	800472a <vListInsert>
 800631a:	e012      	b.n	8006342 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	429a      	cmp	r2, r3
 8006322:	d206      	bcs.n	8006332 <prvInsertTimerInActiveList+0x62>
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	429a      	cmp	r2, r3
 800632a:	d302      	bcc.n	8006332 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800632c:	2301      	movs	r3, #1
 800632e:	617b      	str	r3, [r7, #20]
 8006330:	e007      	b.n	8006342 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006332:	4b07      	ldr	r3, [pc, #28]	; (8006350 <prvInsertTimerInActiveList+0x80>)
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	3304      	adds	r3, #4
 800633a:	4619      	mov	r1, r3
 800633c:	4610      	mov	r0, r2
 800633e:	f7fe f9f4 	bl	800472a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006342:	697b      	ldr	r3, [r7, #20]
}
 8006344:	4618      	mov	r0, r3
 8006346:	3718      	adds	r7, #24
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	20000df0 	.word	0x20000df0
 8006350:	20000dec 	.word	0x20000dec

08006354 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b08e      	sub	sp, #56	; 0x38
 8006358:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800635a:	e0ca      	b.n	80064f2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	da18      	bge.n	8006394 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006362:	1d3b      	adds	r3, r7, #4
 8006364:	3304      	adds	r3, #4
 8006366:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10a      	bne.n	8006384 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800636e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006372:	f383 8811 	msr	BASEPRI, r3
 8006376:	f3bf 8f6f 	isb	sy
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	61fb      	str	r3, [r7, #28]
}
 8006380:	bf00      	nop
 8006382:	e7fe      	b.n	8006382 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800638a:	6850      	ldr	r0, [r2, #4]
 800638c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800638e:	6892      	ldr	r2, [r2, #8]
 8006390:	4611      	mov	r1, r2
 8006392:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	f2c0 80ab 	blt.w	80064f2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80063a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d004      	beq.n	80063b2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063aa:	3304      	adds	r3, #4
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7fe f9f5 	bl	800479c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063b2:	463b      	mov	r3, r7
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7ff ff6b 	bl	8006290 <prvSampleTimeNow>
 80063ba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b09      	cmp	r3, #9
 80063c0:	f200 8096 	bhi.w	80064f0 <prvProcessReceivedCommands+0x19c>
 80063c4:	a201      	add	r2, pc, #4	; (adr r2, 80063cc <prvProcessReceivedCommands+0x78>)
 80063c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ca:	bf00      	nop
 80063cc:	080063f5 	.word	0x080063f5
 80063d0:	080063f5 	.word	0x080063f5
 80063d4:	080063f5 	.word	0x080063f5
 80063d8:	08006469 	.word	0x08006469
 80063dc:	0800647d 	.word	0x0800647d
 80063e0:	080064c7 	.word	0x080064c7
 80063e4:	080063f5 	.word	0x080063f5
 80063e8:	080063f5 	.word	0x080063f5
 80063ec:	08006469 	.word	0x08006469
 80063f0:	0800647d 	.word	0x0800647d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80063f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063fa:	f043 0301 	orr.w	r3, r3, #1
 80063fe:	b2da      	uxtb	r2, r3
 8006400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006402:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	18d1      	adds	r1, r2, r3
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006414:	f7ff ff5c 	bl	80062d0 <prvInsertTimerInActiveList>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d069      	beq.n	80064f2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800641e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006424:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006428:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800642c:	f003 0304 	and.w	r3, r3, #4
 8006430:	2b00      	cmp	r3, #0
 8006432:	d05e      	beq.n	80064f2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006434:	68ba      	ldr	r2, [r7, #8]
 8006436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	441a      	add	r2, r3
 800643c:	2300      	movs	r3, #0
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	2300      	movs	r3, #0
 8006442:	2100      	movs	r1, #0
 8006444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006446:	f7ff fe05 	bl	8006054 <xTimerGenericCommand>
 800644a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800644c:	6a3b      	ldr	r3, [r7, #32]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d14f      	bne.n	80064f2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006456:	f383 8811 	msr	BASEPRI, r3
 800645a:	f3bf 8f6f 	isb	sy
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	61bb      	str	r3, [r7, #24]
}
 8006464:	bf00      	nop
 8006466:	e7fe      	b.n	8006466 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800646e:	f023 0301 	bic.w	r3, r3, #1
 8006472:	b2da      	uxtb	r2, r3
 8006474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006476:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800647a:	e03a      	b.n	80064f2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800647c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006482:	f043 0301 	orr.w	r3, r3, #1
 8006486:	b2da      	uxtb	r2, r3
 8006488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006492:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10a      	bne.n	80064b2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800649c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a0:	f383 8811 	msr	BASEPRI, r3
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	617b      	str	r3, [r7, #20]
}
 80064ae:	bf00      	nop
 80064b0:	e7fe      	b.n	80064b0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80064b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b4:	699a      	ldr	r2, [r3, #24]
 80064b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b8:	18d1      	adds	r1, r2, r3
 80064ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064c0:	f7ff ff06 	bl	80062d0 <prvInsertTimerInActiveList>
					break;
 80064c4:	e015      	b.n	80064f2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80064c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064cc:	f003 0302 	and.w	r3, r3, #2
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d103      	bne.n	80064dc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80064d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064d6:	f000 fbdb 	bl	8006c90 <vPortFree>
 80064da:	e00a      	b.n	80064f2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80064dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064e2:	f023 0301 	bic.w	r3, r3, #1
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80064ee:	e000      	b.n	80064f2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80064f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80064f2:	4b08      	ldr	r3, [pc, #32]	; (8006514 <prvProcessReceivedCommands+0x1c0>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	1d39      	adds	r1, r7, #4
 80064f8:	2200      	movs	r2, #0
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7fe fc16 	bl	8004d2c <xQueueReceive>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	f47f af2a 	bne.w	800635c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006508:	bf00      	nop
 800650a:	bf00      	nop
 800650c:	3730      	adds	r7, #48	; 0x30
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	20000df4 	.word	0x20000df4

08006518 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b088      	sub	sp, #32
 800651c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800651e:	e048      	b.n	80065b2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006520:	4b2d      	ldr	r3, [pc, #180]	; (80065d8 <prvSwitchTimerLists+0xc0>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800652a:	4b2b      	ldr	r3, [pc, #172]	; (80065d8 <prvSwitchTimerLists+0xc0>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	3304      	adds	r3, #4
 8006538:	4618      	mov	r0, r3
 800653a:	f7fe f92f 	bl	800479c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800654c:	f003 0304 	and.w	r3, r3, #4
 8006550:	2b00      	cmp	r3, #0
 8006552:	d02e      	beq.n	80065b2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	4413      	add	r3, r2
 800655c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	429a      	cmp	r2, r3
 8006564:	d90e      	bls.n	8006584 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006572:	4b19      	ldr	r3, [pc, #100]	; (80065d8 <prvSwitchTimerLists+0xc0>)
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	3304      	adds	r3, #4
 800657a:	4619      	mov	r1, r3
 800657c:	4610      	mov	r0, r2
 800657e:	f7fe f8d4 	bl	800472a <vListInsert>
 8006582:	e016      	b.n	80065b2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006584:	2300      	movs	r3, #0
 8006586:	9300      	str	r3, [sp, #0]
 8006588:	2300      	movs	r3, #0
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	2100      	movs	r1, #0
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f7ff fd60 	bl	8006054 <xTimerGenericCommand>
 8006594:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10a      	bne.n	80065b2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800659c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a0:	f383 8811 	msr	BASEPRI, r3
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	f3bf 8f4f 	dsb	sy
 80065ac:	603b      	str	r3, [r7, #0]
}
 80065ae:	bf00      	nop
 80065b0:	e7fe      	b.n	80065b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065b2:	4b09      	ldr	r3, [pc, #36]	; (80065d8 <prvSwitchTimerLists+0xc0>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1b1      	bne.n	8006520 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80065bc:	4b06      	ldr	r3, [pc, #24]	; (80065d8 <prvSwitchTimerLists+0xc0>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80065c2:	4b06      	ldr	r3, [pc, #24]	; (80065dc <prvSwitchTimerLists+0xc4>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a04      	ldr	r2, [pc, #16]	; (80065d8 <prvSwitchTimerLists+0xc0>)
 80065c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80065ca:	4a04      	ldr	r2, [pc, #16]	; (80065dc <prvSwitchTimerLists+0xc4>)
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	6013      	str	r3, [r2, #0]
}
 80065d0:	bf00      	nop
 80065d2:	3718      	adds	r7, #24
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	20000dec 	.word	0x20000dec
 80065dc:	20000df0 	.word	0x20000df0

080065e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80065e6:	f000 f965 	bl	80068b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80065ea:	4b15      	ldr	r3, [pc, #84]	; (8006640 <prvCheckForValidListAndQueue+0x60>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d120      	bne.n	8006634 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80065f2:	4814      	ldr	r0, [pc, #80]	; (8006644 <prvCheckForValidListAndQueue+0x64>)
 80065f4:	f7fe f848 	bl	8004688 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80065f8:	4813      	ldr	r0, [pc, #76]	; (8006648 <prvCheckForValidListAndQueue+0x68>)
 80065fa:	f7fe f845 	bl	8004688 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80065fe:	4b13      	ldr	r3, [pc, #76]	; (800664c <prvCheckForValidListAndQueue+0x6c>)
 8006600:	4a10      	ldr	r2, [pc, #64]	; (8006644 <prvCheckForValidListAndQueue+0x64>)
 8006602:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006604:	4b12      	ldr	r3, [pc, #72]	; (8006650 <prvCheckForValidListAndQueue+0x70>)
 8006606:	4a10      	ldr	r2, [pc, #64]	; (8006648 <prvCheckForValidListAndQueue+0x68>)
 8006608:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800660a:	2300      	movs	r3, #0
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	4b11      	ldr	r3, [pc, #68]	; (8006654 <prvCheckForValidListAndQueue+0x74>)
 8006610:	4a11      	ldr	r2, [pc, #68]	; (8006658 <prvCheckForValidListAndQueue+0x78>)
 8006612:	2110      	movs	r1, #16
 8006614:	200a      	movs	r0, #10
 8006616:	f7fe f953 	bl	80048c0 <xQueueGenericCreateStatic>
 800661a:	4603      	mov	r3, r0
 800661c:	4a08      	ldr	r2, [pc, #32]	; (8006640 <prvCheckForValidListAndQueue+0x60>)
 800661e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006620:	4b07      	ldr	r3, [pc, #28]	; (8006640 <prvCheckForValidListAndQueue+0x60>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d005      	beq.n	8006634 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006628:	4b05      	ldr	r3, [pc, #20]	; (8006640 <prvCheckForValidListAndQueue+0x60>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	490b      	ldr	r1, [pc, #44]	; (800665c <prvCheckForValidListAndQueue+0x7c>)
 800662e:	4618      	mov	r0, r3
 8006630:	f7fe fd6c 	bl	800510c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006634:	f000 f96e 	bl	8006914 <vPortExitCritical>
}
 8006638:	bf00      	nop
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	20000df4 	.word	0x20000df4
 8006644:	20000dc4 	.word	0x20000dc4
 8006648:	20000dd8 	.word	0x20000dd8
 800664c:	20000dec 	.word	0x20000dec
 8006650:	20000df0 	.word	0x20000df0
 8006654:	20000ea0 	.word	0x20000ea0
 8006658:	20000e00 	.word	0x20000e00
 800665c:	08007cf0 	.word	0x08007cf0

08006660 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	3b04      	subs	r3, #4
 8006670:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006678:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	3b04      	subs	r3, #4
 800667e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	f023 0201 	bic.w	r2, r3, #1
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	3b04      	subs	r3, #4
 800668e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006690:	4a0c      	ldr	r2, [pc, #48]	; (80066c4 <pxPortInitialiseStack+0x64>)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	3b14      	subs	r3, #20
 800669a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	3b04      	subs	r3, #4
 80066a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f06f 0202 	mvn.w	r2, #2
 80066ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	3b20      	subs	r3, #32
 80066b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80066b6:	68fb      	ldr	r3, [r7, #12]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr
 80066c4:	080066c9 	.word	0x080066c9

080066c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80066ce:	2300      	movs	r3, #0
 80066d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80066d2:	4b12      	ldr	r3, [pc, #72]	; (800671c <prvTaskExitError+0x54>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066da:	d00a      	beq.n	80066f2 <prvTaskExitError+0x2a>
	__asm volatile
 80066dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e0:	f383 8811 	msr	BASEPRI, r3
 80066e4:	f3bf 8f6f 	isb	sy
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	60fb      	str	r3, [r7, #12]
}
 80066ee:	bf00      	nop
 80066f0:	e7fe      	b.n	80066f0 <prvTaskExitError+0x28>
	__asm volatile
 80066f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f6:	f383 8811 	msr	BASEPRI, r3
 80066fa:	f3bf 8f6f 	isb	sy
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	60bb      	str	r3, [r7, #8]
}
 8006704:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006706:	bf00      	nop
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d0fc      	beq.n	8006708 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800670e:	bf00      	nop
 8006710:	bf00      	nop
 8006712:	3714      	adds	r7, #20
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr
 800671c:	2000000c 	.word	0x2000000c

08006720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006720:	4b07      	ldr	r3, [pc, #28]	; (8006740 <pxCurrentTCBConst2>)
 8006722:	6819      	ldr	r1, [r3, #0]
 8006724:	6808      	ldr	r0, [r1, #0]
 8006726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800672a:	f380 8809 	msr	PSP, r0
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	f04f 0000 	mov.w	r0, #0
 8006736:	f380 8811 	msr	BASEPRI, r0
 800673a:	4770      	bx	lr
 800673c:	f3af 8000 	nop.w

08006740 <pxCurrentTCBConst2>:
 8006740:	200008c4 	.word	0x200008c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006744:	bf00      	nop
 8006746:	bf00      	nop

08006748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006748:	4808      	ldr	r0, [pc, #32]	; (800676c <prvPortStartFirstTask+0x24>)
 800674a:	6800      	ldr	r0, [r0, #0]
 800674c:	6800      	ldr	r0, [r0, #0]
 800674e:	f380 8808 	msr	MSP, r0
 8006752:	f04f 0000 	mov.w	r0, #0
 8006756:	f380 8814 	msr	CONTROL, r0
 800675a:	b662      	cpsie	i
 800675c:	b661      	cpsie	f
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	df00      	svc	0
 8006768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800676a:	bf00      	nop
 800676c:	e000ed08 	.word	0xe000ed08

08006770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006776:	4b46      	ldr	r3, [pc, #280]	; (8006890 <xPortStartScheduler+0x120>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a46      	ldr	r2, [pc, #280]	; (8006894 <xPortStartScheduler+0x124>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d10a      	bne.n	8006796 <xPortStartScheduler+0x26>
	__asm volatile
 8006780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	613b      	str	r3, [r7, #16]
}
 8006792:	bf00      	nop
 8006794:	e7fe      	b.n	8006794 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006796:	4b3e      	ldr	r3, [pc, #248]	; (8006890 <xPortStartScheduler+0x120>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a3f      	ldr	r2, [pc, #252]	; (8006898 <xPortStartScheduler+0x128>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d10a      	bne.n	80067b6 <xPortStartScheduler+0x46>
	__asm volatile
 80067a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a4:	f383 8811 	msr	BASEPRI, r3
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	f3bf 8f4f 	dsb	sy
 80067b0:	60fb      	str	r3, [r7, #12]
}
 80067b2:	bf00      	nop
 80067b4:	e7fe      	b.n	80067b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80067b6:	4b39      	ldr	r3, [pc, #228]	; (800689c <xPortStartScheduler+0x12c>)
 80067b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	22ff      	movs	r2, #255	; 0xff
 80067c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80067d0:	78fb      	ldrb	r3, [r7, #3]
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80067d8:	b2da      	uxtb	r2, r3
 80067da:	4b31      	ldr	r3, [pc, #196]	; (80068a0 <xPortStartScheduler+0x130>)
 80067dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80067de:	4b31      	ldr	r3, [pc, #196]	; (80068a4 <xPortStartScheduler+0x134>)
 80067e0:	2207      	movs	r2, #7
 80067e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067e4:	e009      	b.n	80067fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80067e6:	4b2f      	ldr	r3, [pc, #188]	; (80068a4 <xPortStartScheduler+0x134>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	3b01      	subs	r3, #1
 80067ec:	4a2d      	ldr	r2, [pc, #180]	; (80068a4 <xPortStartScheduler+0x134>)
 80067ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80067f0:	78fb      	ldrb	r3, [r7, #3]
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	005b      	lsls	r3, r3, #1
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067fa:	78fb      	ldrb	r3, [r7, #3]
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006802:	2b80      	cmp	r3, #128	; 0x80
 8006804:	d0ef      	beq.n	80067e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006806:	4b27      	ldr	r3, [pc, #156]	; (80068a4 <xPortStartScheduler+0x134>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f1c3 0307 	rsb	r3, r3, #7
 800680e:	2b04      	cmp	r3, #4
 8006810:	d00a      	beq.n	8006828 <xPortStartScheduler+0xb8>
	__asm volatile
 8006812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006816:	f383 8811 	msr	BASEPRI, r3
 800681a:	f3bf 8f6f 	isb	sy
 800681e:	f3bf 8f4f 	dsb	sy
 8006822:	60bb      	str	r3, [r7, #8]
}
 8006824:	bf00      	nop
 8006826:	e7fe      	b.n	8006826 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006828:	4b1e      	ldr	r3, [pc, #120]	; (80068a4 <xPortStartScheduler+0x134>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	021b      	lsls	r3, r3, #8
 800682e:	4a1d      	ldr	r2, [pc, #116]	; (80068a4 <xPortStartScheduler+0x134>)
 8006830:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006832:	4b1c      	ldr	r3, [pc, #112]	; (80068a4 <xPortStartScheduler+0x134>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800683a:	4a1a      	ldr	r2, [pc, #104]	; (80068a4 <xPortStartScheduler+0x134>)
 800683c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	b2da      	uxtb	r2, r3
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006846:	4b18      	ldr	r3, [pc, #96]	; (80068a8 <xPortStartScheduler+0x138>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a17      	ldr	r2, [pc, #92]	; (80068a8 <xPortStartScheduler+0x138>)
 800684c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006850:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006852:	4b15      	ldr	r3, [pc, #84]	; (80068a8 <xPortStartScheduler+0x138>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a14      	ldr	r2, [pc, #80]	; (80068a8 <xPortStartScheduler+0x138>)
 8006858:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800685c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800685e:	f000 f8dd 	bl	8006a1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006862:	4b12      	ldr	r3, [pc, #72]	; (80068ac <xPortStartScheduler+0x13c>)
 8006864:	2200      	movs	r2, #0
 8006866:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006868:	f000 f8fc 	bl	8006a64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800686c:	4b10      	ldr	r3, [pc, #64]	; (80068b0 <xPortStartScheduler+0x140>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a0f      	ldr	r2, [pc, #60]	; (80068b0 <xPortStartScheduler+0x140>)
 8006872:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006876:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006878:	f7ff ff66 	bl	8006748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800687c:	f7ff f856 	bl	800592c <vTaskSwitchContext>
	prvTaskExitError();
 8006880:	f7ff ff22 	bl	80066c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3718      	adds	r7, #24
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	e000ed00 	.word	0xe000ed00
 8006894:	410fc271 	.word	0x410fc271
 8006898:	410fc270 	.word	0x410fc270
 800689c:	e000e400 	.word	0xe000e400
 80068a0:	20000ef0 	.word	0x20000ef0
 80068a4:	20000ef4 	.word	0x20000ef4
 80068a8:	e000ed20 	.word	0xe000ed20
 80068ac:	2000000c 	.word	0x2000000c
 80068b0:	e000ef34 	.word	0xe000ef34

080068b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
	__asm volatile
 80068ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068be:	f383 8811 	msr	BASEPRI, r3
 80068c2:	f3bf 8f6f 	isb	sy
 80068c6:	f3bf 8f4f 	dsb	sy
 80068ca:	607b      	str	r3, [r7, #4]
}
 80068cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80068ce:	4b0f      	ldr	r3, [pc, #60]	; (800690c <vPortEnterCritical+0x58>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	3301      	adds	r3, #1
 80068d4:	4a0d      	ldr	r2, [pc, #52]	; (800690c <vPortEnterCritical+0x58>)
 80068d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80068d8:	4b0c      	ldr	r3, [pc, #48]	; (800690c <vPortEnterCritical+0x58>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d10f      	bne.n	8006900 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80068e0:	4b0b      	ldr	r3, [pc, #44]	; (8006910 <vPortEnterCritical+0x5c>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00a      	beq.n	8006900 <vPortEnterCritical+0x4c>
	__asm volatile
 80068ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ee:	f383 8811 	msr	BASEPRI, r3
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	f3bf 8f4f 	dsb	sy
 80068fa:	603b      	str	r3, [r7, #0]
}
 80068fc:	bf00      	nop
 80068fe:	e7fe      	b.n	80068fe <vPortEnterCritical+0x4a>
	}
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr
 800690c:	2000000c 	.word	0x2000000c
 8006910:	e000ed04 	.word	0xe000ed04

08006914 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800691a:	4b12      	ldr	r3, [pc, #72]	; (8006964 <vPortExitCritical+0x50>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10a      	bne.n	8006938 <vPortExitCritical+0x24>
	__asm volatile
 8006922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006926:	f383 8811 	msr	BASEPRI, r3
 800692a:	f3bf 8f6f 	isb	sy
 800692e:	f3bf 8f4f 	dsb	sy
 8006932:	607b      	str	r3, [r7, #4]
}
 8006934:	bf00      	nop
 8006936:	e7fe      	b.n	8006936 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006938:	4b0a      	ldr	r3, [pc, #40]	; (8006964 <vPortExitCritical+0x50>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	3b01      	subs	r3, #1
 800693e:	4a09      	ldr	r2, [pc, #36]	; (8006964 <vPortExitCritical+0x50>)
 8006940:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006942:	4b08      	ldr	r3, [pc, #32]	; (8006964 <vPortExitCritical+0x50>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d105      	bne.n	8006956 <vPortExitCritical+0x42>
 800694a:	2300      	movs	r3, #0
 800694c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	f383 8811 	msr	BASEPRI, r3
}
 8006954:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006956:	bf00      	nop
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	2000000c 	.word	0x2000000c
	...

08006970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006970:	f3ef 8009 	mrs	r0, PSP
 8006974:	f3bf 8f6f 	isb	sy
 8006978:	4b15      	ldr	r3, [pc, #84]	; (80069d0 <pxCurrentTCBConst>)
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	f01e 0f10 	tst.w	lr, #16
 8006980:	bf08      	it	eq
 8006982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800698a:	6010      	str	r0, [r2, #0]
 800698c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006990:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006994:	f380 8811 	msr	BASEPRI, r0
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f7fe ffc4 	bl	800592c <vTaskSwitchContext>
 80069a4:	f04f 0000 	mov.w	r0, #0
 80069a8:	f380 8811 	msr	BASEPRI, r0
 80069ac:	bc09      	pop	{r0, r3}
 80069ae:	6819      	ldr	r1, [r3, #0]
 80069b0:	6808      	ldr	r0, [r1, #0]
 80069b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b6:	f01e 0f10 	tst.w	lr, #16
 80069ba:	bf08      	it	eq
 80069bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80069c0:	f380 8809 	msr	PSP, r0
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	f3af 8000 	nop.w

080069d0 <pxCurrentTCBConst>:
 80069d0:	200008c4 	.word	0x200008c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80069d4:	bf00      	nop
 80069d6:	bf00      	nop

080069d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
	__asm volatile
 80069de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	607b      	str	r3, [r7, #4]
}
 80069f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80069f2:	f7fe fee1 	bl	80057b8 <xTaskIncrementTick>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d003      	beq.n	8006a04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80069fc:	4b06      	ldr	r3, [pc, #24]	; (8006a18 <xPortSysTickHandler+0x40>)
 80069fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a02:	601a      	str	r2, [r3, #0]
 8006a04:	2300      	movs	r3, #0
 8006a06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	f383 8811 	msr	BASEPRI, r3
}
 8006a0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a10:	bf00      	nop
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	e000ed04 	.word	0xe000ed04

08006a1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a20:	4b0b      	ldr	r3, [pc, #44]	; (8006a50 <vPortSetupTimerInterrupt+0x34>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a26:	4b0b      	ldr	r3, [pc, #44]	; (8006a54 <vPortSetupTimerInterrupt+0x38>)
 8006a28:	2200      	movs	r2, #0
 8006a2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a2c:	4b0a      	ldr	r3, [pc, #40]	; (8006a58 <vPortSetupTimerInterrupt+0x3c>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a0a      	ldr	r2, [pc, #40]	; (8006a5c <vPortSetupTimerInterrupt+0x40>)
 8006a32:	fba2 2303 	umull	r2, r3, r2, r3
 8006a36:	099b      	lsrs	r3, r3, #6
 8006a38:	4a09      	ldr	r2, [pc, #36]	; (8006a60 <vPortSetupTimerInterrupt+0x44>)
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a3e:	4b04      	ldr	r3, [pc, #16]	; (8006a50 <vPortSetupTimerInterrupt+0x34>)
 8006a40:	2207      	movs	r2, #7
 8006a42:	601a      	str	r2, [r3, #0]
}
 8006a44:	bf00      	nop
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	e000e010 	.word	0xe000e010
 8006a54:	e000e018 	.word	0xe000e018
 8006a58:	20000000 	.word	0x20000000
 8006a5c:	10624dd3 	.word	0x10624dd3
 8006a60:	e000e014 	.word	0xe000e014

08006a64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006a74 <vPortEnableVFP+0x10>
 8006a68:	6801      	ldr	r1, [r0, #0]
 8006a6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006a6e:	6001      	str	r1, [r0, #0]
 8006a70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a72:	bf00      	nop
 8006a74:	e000ed88 	.word	0xe000ed88

08006a78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006a7e:	f3ef 8305 	mrs	r3, IPSR
 8006a82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2b0f      	cmp	r3, #15
 8006a88:	d914      	bls.n	8006ab4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a8a:	4a17      	ldr	r2, [pc, #92]	; (8006ae8 <vPortValidateInterruptPriority+0x70>)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	4413      	add	r3, r2
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006a94:	4b15      	ldr	r3, [pc, #84]	; (8006aec <vPortValidateInterruptPriority+0x74>)
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	7afa      	ldrb	r2, [r7, #11]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d20a      	bcs.n	8006ab4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	607b      	str	r3, [r7, #4]
}
 8006ab0:	bf00      	nop
 8006ab2:	e7fe      	b.n	8006ab2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006ab4:	4b0e      	ldr	r3, [pc, #56]	; (8006af0 <vPortValidateInterruptPriority+0x78>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006abc:	4b0d      	ldr	r3, [pc, #52]	; (8006af4 <vPortValidateInterruptPriority+0x7c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d90a      	bls.n	8006ada <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac8:	f383 8811 	msr	BASEPRI, r3
 8006acc:	f3bf 8f6f 	isb	sy
 8006ad0:	f3bf 8f4f 	dsb	sy
 8006ad4:	603b      	str	r3, [r7, #0]
}
 8006ad6:	bf00      	nop
 8006ad8:	e7fe      	b.n	8006ad8 <vPortValidateInterruptPriority+0x60>
	}
 8006ada:	bf00      	nop
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	e000e3f0 	.word	0xe000e3f0
 8006aec:	20000ef0 	.word	0x20000ef0
 8006af0:	e000ed0c 	.word	0xe000ed0c
 8006af4:	20000ef4 	.word	0x20000ef4

08006af8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08a      	sub	sp, #40	; 0x28
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b00:	2300      	movs	r3, #0
 8006b02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006b04:	f7fe fd9c 	bl	8005640 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b08:	4b5b      	ldr	r3, [pc, #364]	; (8006c78 <pvPortMalloc+0x180>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b10:	f000 f920 	bl	8006d54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b14:	4b59      	ldr	r3, [pc, #356]	; (8006c7c <pvPortMalloc+0x184>)
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f040 8093 	bne.w	8006c48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d01d      	beq.n	8006b64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006b28:	2208      	movs	r2, #8
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f003 0307 	and.w	r3, r3, #7
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d014      	beq.n	8006b64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f023 0307 	bic.w	r3, r3, #7
 8006b40:	3308      	adds	r3, #8
 8006b42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f003 0307 	and.w	r3, r3, #7
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00a      	beq.n	8006b64 <pvPortMalloc+0x6c>
	__asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	617b      	str	r3, [r7, #20]
}
 8006b60:	bf00      	nop
 8006b62:	e7fe      	b.n	8006b62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d06e      	beq.n	8006c48 <pvPortMalloc+0x150>
 8006b6a:	4b45      	ldr	r3, [pc, #276]	; (8006c80 <pvPortMalloc+0x188>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d869      	bhi.n	8006c48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b74:	4b43      	ldr	r3, [pc, #268]	; (8006c84 <pvPortMalloc+0x18c>)
 8006b76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b78:	4b42      	ldr	r3, [pc, #264]	; (8006c84 <pvPortMalloc+0x18c>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b7e:	e004      	b.n	8006b8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d903      	bls.n	8006b9c <pvPortMalloc+0xa4>
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1f1      	bne.n	8006b80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b9c:	4b36      	ldr	r3, [pc, #216]	; (8006c78 <pvPortMalloc+0x180>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d050      	beq.n	8006c48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ba6:	6a3b      	ldr	r3, [r7, #32]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2208      	movs	r2, #8
 8006bac:	4413      	add	r3, r2
 8006bae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	6a3b      	ldr	r3, [r7, #32]
 8006bb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	1ad2      	subs	r2, r2, r3
 8006bc0:	2308      	movs	r3, #8
 8006bc2:	005b      	lsls	r3, r3, #1
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d91f      	bls.n	8006c08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4413      	add	r3, r2
 8006bce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	f003 0307 	and.w	r3, r3, #7
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00a      	beq.n	8006bf0 <pvPortMalloc+0xf8>
	__asm volatile
 8006bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bde:	f383 8811 	msr	BASEPRI, r3
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	613b      	str	r3, [r7, #16]
}
 8006bec:	bf00      	nop
 8006bee:	e7fe      	b.n	8006bee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	685a      	ldr	r2, [r3, #4]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	1ad2      	subs	r2, r2, r3
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c02:	69b8      	ldr	r0, [r7, #24]
 8006c04:	f000 f908 	bl	8006e18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c08:	4b1d      	ldr	r3, [pc, #116]	; (8006c80 <pvPortMalloc+0x188>)
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	4a1b      	ldr	r2, [pc, #108]	; (8006c80 <pvPortMalloc+0x188>)
 8006c14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c16:	4b1a      	ldr	r3, [pc, #104]	; (8006c80 <pvPortMalloc+0x188>)
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	4b1b      	ldr	r3, [pc, #108]	; (8006c88 <pvPortMalloc+0x190>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d203      	bcs.n	8006c2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c22:	4b17      	ldr	r3, [pc, #92]	; (8006c80 <pvPortMalloc+0x188>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a18      	ldr	r2, [pc, #96]	; (8006c88 <pvPortMalloc+0x190>)
 8006c28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	685a      	ldr	r2, [r3, #4]
 8006c2e:	4b13      	ldr	r3, [pc, #76]	; (8006c7c <pvPortMalloc+0x184>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	431a      	orrs	r2, r3
 8006c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006c3e:	4b13      	ldr	r3, [pc, #76]	; (8006c8c <pvPortMalloc+0x194>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	3301      	adds	r3, #1
 8006c44:	4a11      	ldr	r2, [pc, #68]	; (8006c8c <pvPortMalloc+0x194>)
 8006c46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c48:	f7fe fd08 	bl	800565c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	f003 0307 	and.w	r3, r3, #7
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00a      	beq.n	8006c6c <pvPortMalloc+0x174>
	__asm volatile
 8006c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5a:	f383 8811 	msr	BASEPRI, r3
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	60fb      	str	r3, [r7, #12]
}
 8006c68:	bf00      	nop
 8006c6a:	e7fe      	b.n	8006c6a <pvPortMalloc+0x172>
	return pvReturn;
 8006c6c:	69fb      	ldr	r3, [r7, #28]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3728      	adds	r7, #40	; 0x28
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	20004b00 	.word	0x20004b00
 8006c7c:	20004b14 	.word	0x20004b14
 8006c80:	20004b04 	.word	0x20004b04
 8006c84:	20004af8 	.word	0x20004af8
 8006c88:	20004b08 	.word	0x20004b08
 8006c8c:	20004b0c 	.word	0x20004b0c

08006c90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b086      	sub	sp, #24
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d04d      	beq.n	8006d3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006ca2:	2308      	movs	r3, #8
 8006ca4:	425b      	negs	r3, r3
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	4413      	add	r3, r2
 8006caa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	685a      	ldr	r2, [r3, #4]
 8006cb4:	4b24      	ldr	r3, [pc, #144]	; (8006d48 <vPortFree+0xb8>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4013      	ands	r3, r2
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10a      	bne.n	8006cd4 <vPortFree+0x44>
	__asm volatile
 8006cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	60fb      	str	r3, [r7, #12]
}
 8006cd0:	bf00      	nop
 8006cd2:	e7fe      	b.n	8006cd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00a      	beq.n	8006cf2 <vPortFree+0x62>
	__asm volatile
 8006cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce0:	f383 8811 	msr	BASEPRI, r3
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	f3bf 8f4f 	dsb	sy
 8006cec:	60bb      	str	r3, [r7, #8]
}
 8006cee:	bf00      	nop
 8006cf0:	e7fe      	b.n	8006cf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	685a      	ldr	r2, [r3, #4]
 8006cf6:	4b14      	ldr	r3, [pc, #80]	; (8006d48 <vPortFree+0xb8>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d01e      	beq.n	8006d3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d11a      	bne.n	8006d3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	4b0e      	ldr	r3, [pc, #56]	; (8006d48 <vPortFree+0xb8>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	43db      	mvns	r3, r3
 8006d12:	401a      	ands	r2, r3
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d18:	f7fe fc92 	bl	8005640 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	685a      	ldr	r2, [r3, #4]
 8006d20:	4b0a      	ldr	r3, [pc, #40]	; (8006d4c <vPortFree+0xbc>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4413      	add	r3, r2
 8006d26:	4a09      	ldr	r2, [pc, #36]	; (8006d4c <vPortFree+0xbc>)
 8006d28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d2a:	6938      	ldr	r0, [r7, #16]
 8006d2c:	f000 f874 	bl	8006e18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006d30:	4b07      	ldr	r3, [pc, #28]	; (8006d50 <vPortFree+0xc0>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	3301      	adds	r3, #1
 8006d36:	4a06      	ldr	r2, [pc, #24]	; (8006d50 <vPortFree+0xc0>)
 8006d38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006d3a:	f7fe fc8f 	bl	800565c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d3e:	bf00      	nop
 8006d40:	3718      	adds	r7, #24
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	20004b14 	.word	0x20004b14
 8006d4c:	20004b04 	.word	0x20004b04
 8006d50:	20004b10 	.word	0x20004b10

08006d54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006d5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d60:	4b27      	ldr	r3, [pc, #156]	; (8006e00 <prvHeapInit+0xac>)
 8006d62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f003 0307 	and.w	r3, r3, #7
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00c      	beq.n	8006d88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	3307      	adds	r3, #7
 8006d72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f023 0307 	bic.w	r3, r3, #7
 8006d7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	4a1f      	ldr	r2, [pc, #124]	; (8006e00 <prvHeapInit+0xac>)
 8006d84:	4413      	add	r3, r2
 8006d86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d8c:	4a1d      	ldr	r2, [pc, #116]	; (8006e04 <prvHeapInit+0xb0>)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d92:	4b1c      	ldr	r3, [pc, #112]	; (8006e04 <prvHeapInit+0xb0>)
 8006d94:	2200      	movs	r2, #0
 8006d96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006da0:	2208      	movs	r2, #8
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	1a9b      	subs	r3, r3, r2
 8006da6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f023 0307 	bic.w	r3, r3, #7
 8006dae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	4a15      	ldr	r2, [pc, #84]	; (8006e08 <prvHeapInit+0xb4>)
 8006db4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006db6:	4b14      	ldr	r3, [pc, #80]	; (8006e08 <prvHeapInit+0xb4>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006dbe:	4b12      	ldr	r3, [pc, #72]	; (8006e08 <prvHeapInit+0xb4>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	1ad2      	subs	r2, r2, r3
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006dd4:	4b0c      	ldr	r3, [pc, #48]	; (8006e08 <prvHeapInit+0xb4>)
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	4a0a      	ldr	r2, [pc, #40]	; (8006e0c <prvHeapInit+0xb8>)
 8006de2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	4a09      	ldr	r2, [pc, #36]	; (8006e10 <prvHeapInit+0xbc>)
 8006dea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006dec:	4b09      	ldr	r3, [pc, #36]	; (8006e14 <prvHeapInit+0xc0>)
 8006dee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006df2:	601a      	str	r2, [r3, #0]
}
 8006df4:	bf00      	nop
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	20000ef8 	.word	0x20000ef8
 8006e04:	20004af8 	.word	0x20004af8
 8006e08:	20004b00 	.word	0x20004b00
 8006e0c:	20004b08 	.word	0x20004b08
 8006e10:	20004b04 	.word	0x20004b04
 8006e14:	20004b14 	.word	0x20004b14

08006e18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e20:	4b28      	ldr	r3, [pc, #160]	; (8006ec4 <prvInsertBlockIntoFreeList+0xac>)
 8006e22:	60fb      	str	r3, [r7, #12]
 8006e24:	e002      	b.n	8006e2c <prvInsertBlockIntoFreeList+0x14>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	60fb      	str	r3, [r7, #12]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d8f7      	bhi.n	8006e26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	4413      	add	r3, r2
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d108      	bne.n	8006e5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	441a      	add	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	441a      	add	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d118      	bne.n	8006ea0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	4b15      	ldr	r3, [pc, #84]	; (8006ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d00d      	beq.n	8006e96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	441a      	add	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	601a      	str	r2, [r3, #0]
 8006e94:	e008      	b.n	8006ea8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e96:	4b0c      	ldr	r3, [pc, #48]	; (8006ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	601a      	str	r2, [r3, #0]
 8006e9e:	e003      	b.n	8006ea8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d002      	beq.n	8006eb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006eb6:	bf00      	nop
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	20004af8 	.word	0x20004af8
 8006ec8:	20004b00 	.word	0x20004b00

08006ecc <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	71fb      	strb	r3, [r7, #7]
 8006ed6:	e026      	b.n	8006f26 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8006ed8:	79fb      	ldrb	r3, [r7, #7]
 8006eda:	3b50      	subs	r3, #80	; 0x50
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2100      	movs	r1, #0
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f000 f82b 	bl	8006f3c <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8006ee6:	2100      	movs	r1, #0
 8006ee8:	2000      	movs	r0, #0
 8006eea:	f000 f827 	bl	8006f3c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 8006eee:	2100      	movs	r1, #0
 8006ef0:	2010      	movs	r0, #16
 8006ef2:	f000 f823 	bl	8006f3c <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	71bb      	strb	r3, [r7, #6]
 8006efa:	e00d      	b.n	8006f18 <OLED_Refresh_Gram+0x4c>
 8006efc:	79ba      	ldrb	r2, [r7, #6]
 8006efe:	79fb      	ldrb	r3, [r7, #7]
 8006f00:	490d      	ldr	r1, [pc, #52]	; (8006f38 <OLED_Refresh_Gram+0x6c>)
 8006f02:	00d2      	lsls	r2, r2, #3
 8006f04:	440a      	add	r2, r1
 8006f06:	4413      	add	r3, r2
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	2101      	movs	r1, #1
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f000 f815 	bl	8006f3c <OLED_WR_Byte>
 8006f12:	79bb      	ldrb	r3, [r7, #6]
 8006f14:	3301      	adds	r3, #1
 8006f16:	71bb      	strb	r3, [r7, #6]
 8006f18:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	daed      	bge.n	8006efc <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8006f20:	79fb      	ldrb	r3, [r7, #7]
 8006f22:	3301      	adds	r3, #1
 8006f24:	71fb      	strb	r3, [r7, #7]
 8006f26:	79fb      	ldrb	r3, [r7, #7]
 8006f28:	2b07      	cmp	r3, #7
 8006f2a:	d9d5      	bls.n	8006ed8 <OLED_Refresh_Gram+0xc>
	}   
}
 8006f2c:	bf00      	nop
 8006f2e:	bf00      	nop
 8006f30:	3708      	adds	r7, #8
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	20004b18 	.word	0x20004b18

08006f3c <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	4603      	mov	r3, r0
 8006f44:	460a      	mov	r2, r1
 8006f46:	71fb      	strb	r3, [r7, #7]
 8006f48:	4613      	mov	r3, r2
 8006f4a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8006f4c:	79bb      	ldrb	r3, [r7, #6]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d006      	beq.n	8006f60 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8006f52:	2201      	movs	r2, #1
 8006f54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f58:	481c      	ldr	r0, [pc, #112]	; (8006fcc <OLED_WR_Byte+0x90>)
 8006f5a:	f7fa fd13 	bl	8001984 <HAL_GPIO_WritePin>
 8006f5e:	e005      	b.n	8006f6c <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8006f60:	2200      	movs	r2, #0
 8006f62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f66:	4819      	ldr	r0, [pc, #100]	; (8006fcc <OLED_WR_Byte+0x90>)
 8006f68:	f7fa fd0c 	bl	8001984 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	73fb      	strb	r3, [r7, #15]
 8006f70:	e01e      	b.n	8006fb0 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8006f72:	2200      	movs	r2, #0
 8006f74:	2120      	movs	r1, #32
 8006f76:	4815      	ldr	r0, [pc, #84]	; (8006fcc <OLED_WR_Byte+0x90>)
 8006f78:	f7fa fd04 	bl	8001984 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8006f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	da05      	bge.n	8006f90 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8006f84:	2201      	movs	r2, #1
 8006f86:	2140      	movs	r1, #64	; 0x40
 8006f88:	4810      	ldr	r0, [pc, #64]	; (8006fcc <OLED_WR_Byte+0x90>)
 8006f8a:	f7fa fcfb 	bl	8001984 <HAL_GPIO_WritePin>
 8006f8e:	e004      	b.n	8006f9a <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8006f90:	2200      	movs	r2, #0
 8006f92:	2140      	movs	r1, #64	; 0x40
 8006f94:	480d      	ldr	r0, [pc, #52]	; (8006fcc <OLED_WR_Byte+0x90>)
 8006f96:	f7fa fcf5 	bl	8001984 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	2120      	movs	r1, #32
 8006f9e:	480b      	ldr	r0, [pc, #44]	; (8006fcc <OLED_WR_Byte+0x90>)
 8006fa0:	f7fa fcf0 	bl	8001984 <HAL_GPIO_WritePin>
		dat<<=1;   
 8006fa4:	79fb      	ldrb	r3, [r7, #7]
 8006fa6:	005b      	lsls	r3, r3, #1
 8006fa8:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8006faa:	7bfb      	ldrb	r3, [r7, #15]
 8006fac:	3301      	adds	r3, #1
 8006fae:	73fb      	strb	r3, [r7, #15]
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
 8006fb2:	2b07      	cmp	r3, #7
 8006fb4:	d9dd      	bls.n	8006f72 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006fbc:	4803      	ldr	r0, [pc, #12]	; (8006fcc <OLED_WR_Byte+0x90>)
 8006fbe:	f7fa fce1 	bl	8001984 <HAL_GPIO_WritePin>
} 
 8006fc2:	bf00      	nop
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	40021000 	.word	0x40021000

08006fd0 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	71fb      	strb	r3, [r7, #7]
 8006fda:	e014      	b.n	8007006 <OLED_Clear+0x36>
 8006fdc:	2300      	movs	r3, #0
 8006fde:	71bb      	strb	r3, [r7, #6]
 8006fe0:	e00a      	b.n	8006ff8 <OLED_Clear+0x28>
 8006fe2:	79ba      	ldrb	r2, [r7, #6]
 8006fe4:	79fb      	ldrb	r3, [r7, #7]
 8006fe6:	490c      	ldr	r1, [pc, #48]	; (8007018 <OLED_Clear+0x48>)
 8006fe8:	00d2      	lsls	r2, r2, #3
 8006fea:	440a      	add	r2, r1
 8006fec:	4413      	add	r3, r2
 8006fee:	2200      	movs	r2, #0
 8006ff0:	701a      	strb	r2, [r3, #0]
 8006ff2:	79bb      	ldrb	r3, [r7, #6]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	71bb      	strb	r3, [r7, #6]
 8006ff8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	daf0      	bge.n	8006fe2 <OLED_Clear+0x12>
 8007000:	79fb      	ldrb	r3, [r7, #7]
 8007002:	3301      	adds	r3, #1
 8007004:	71fb      	strb	r3, [r7, #7]
 8007006:	79fb      	ldrb	r3, [r7, #7]
 8007008:	2b07      	cmp	r3, #7
 800700a:	d9e7      	bls.n	8006fdc <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800700c:	f7ff ff5e 	bl	8006ecc <OLED_Refresh_Gram>
}
 8007010:	bf00      	nop
 8007012:	3708      	adds	r7, #8
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	20004b18 	.word	0x20004b18

0800701c <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
 8007022:	4603      	mov	r3, r0
 8007024:	71fb      	strb	r3, [r7, #7]
 8007026:	460b      	mov	r3, r1
 8007028:	71bb      	strb	r3, [r7, #6]
 800702a:	4613      	mov	r3, r2
 800702c:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800702e:	2300      	movs	r3, #0
 8007030:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8007032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007036:	2b00      	cmp	r3, #0
 8007038:	db41      	blt.n	80070be <OLED_DrawPoint+0xa2>
 800703a:	79bb      	ldrb	r3, [r7, #6]
 800703c:	2b3f      	cmp	r3, #63	; 0x3f
 800703e:	d83e      	bhi.n	80070be <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8007040:	79bb      	ldrb	r3, [r7, #6]
 8007042:	08db      	lsrs	r3, r3, #3
 8007044:	b2db      	uxtb	r3, r3
 8007046:	f1c3 0307 	rsb	r3, r3, #7
 800704a:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800704c:	79bb      	ldrb	r3, [r7, #6]
 800704e:	f003 0307 	and.w	r3, r3, #7
 8007052:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8007054:	7b7b      	ldrb	r3, [r7, #13]
 8007056:	f1c3 0307 	rsb	r3, r3, #7
 800705a:	2201      	movs	r2, #1
 800705c:	fa02 f303 	lsl.w	r3, r2, r3
 8007060:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8007062:	797b      	ldrb	r3, [r7, #5]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d012      	beq.n	800708e <OLED_DrawPoint+0x72>
 8007068:	79fa      	ldrb	r2, [r7, #7]
 800706a:	7bbb      	ldrb	r3, [r7, #14]
 800706c:	4917      	ldr	r1, [pc, #92]	; (80070cc <OLED_DrawPoint+0xb0>)
 800706e:	00d2      	lsls	r2, r2, #3
 8007070:	440a      	add	r2, r1
 8007072:	4413      	add	r3, r2
 8007074:	7818      	ldrb	r0, [r3, #0]
 8007076:	79fa      	ldrb	r2, [r7, #7]
 8007078:	7bbb      	ldrb	r3, [r7, #14]
 800707a:	7bf9      	ldrb	r1, [r7, #15]
 800707c:	4301      	orrs	r1, r0
 800707e:	b2c8      	uxtb	r0, r1
 8007080:	4912      	ldr	r1, [pc, #72]	; (80070cc <OLED_DrawPoint+0xb0>)
 8007082:	00d2      	lsls	r2, r2, #3
 8007084:	440a      	add	r2, r1
 8007086:	4413      	add	r3, r2
 8007088:	4602      	mov	r2, r0
 800708a:	701a      	strb	r2, [r3, #0]
 800708c:	e018      	b.n	80070c0 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800708e:	79fa      	ldrb	r2, [r7, #7]
 8007090:	7bbb      	ldrb	r3, [r7, #14]
 8007092:	490e      	ldr	r1, [pc, #56]	; (80070cc <OLED_DrawPoint+0xb0>)
 8007094:	00d2      	lsls	r2, r2, #3
 8007096:	440a      	add	r2, r1
 8007098:	4413      	add	r3, r2
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	b25a      	sxtb	r2, r3
 800709e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070a2:	43db      	mvns	r3, r3
 80070a4:	b25b      	sxtb	r3, r3
 80070a6:	4013      	ands	r3, r2
 80070a8:	b259      	sxtb	r1, r3
 80070aa:	79fa      	ldrb	r2, [r7, #7]
 80070ac:	7bbb      	ldrb	r3, [r7, #14]
 80070ae:	b2c8      	uxtb	r0, r1
 80070b0:	4906      	ldr	r1, [pc, #24]	; (80070cc <OLED_DrawPoint+0xb0>)
 80070b2:	00d2      	lsls	r2, r2, #3
 80070b4:	440a      	add	r2, r1
 80070b6:	4413      	add	r3, r2
 80070b8:	4602      	mov	r2, r0
 80070ba:	701a      	strb	r2, [r3, #0]
 80070bc:	e000      	b.n	80070c0 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 80070be:	bf00      	nop
}
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	20004b18 	.word	0x20004b18

080070d0 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 80070d0:	b590      	push	{r4, r7, lr}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	4604      	mov	r4, r0
 80070d8:	4608      	mov	r0, r1
 80070da:	4611      	mov	r1, r2
 80070dc:	461a      	mov	r2, r3
 80070de:	4623      	mov	r3, r4
 80070e0:	71fb      	strb	r3, [r7, #7]
 80070e2:	4603      	mov	r3, r0
 80070e4:	71bb      	strb	r3, [r7, #6]
 80070e6:	460b      	mov	r3, r1
 80070e8:	717b      	strb	r3, [r7, #5]
 80070ea:	4613      	mov	r3, r2
 80070ec:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 80070ee:	79bb      	ldrb	r3, [r7, #6]
 80070f0:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 80070f2:	797b      	ldrb	r3, [r7, #5]
 80070f4:	3b20      	subs	r3, #32
 80070f6:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 80070f8:	2300      	movs	r3, #0
 80070fa:	73bb      	strb	r3, [r7, #14]
 80070fc:	e04d      	b.n	800719a <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 80070fe:	793b      	ldrb	r3, [r7, #4]
 8007100:	2b0c      	cmp	r3, #12
 8007102:	d10b      	bne.n	800711c <OLED_ShowChar+0x4c>
 8007104:	797a      	ldrb	r2, [r7, #5]
 8007106:	7bb9      	ldrb	r1, [r7, #14]
 8007108:	4828      	ldr	r0, [pc, #160]	; (80071ac <OLED_ShowChar+0xdc>)
 800710a:	4613      	mov	r3, r2
 800710c:	005b      	lsls	r3, r3, #1
 800710e:	4413      	add	r3, r2
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	4403      	add	r3, r0
 8007114:	440b      	add	r3, r1
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	73fb      	strb	r3, [r7, #15]
 800711a:	e007      	b.n	800712c <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800711c:	797a      	ldrb	r2, [r7, #5]
 800711e:	7bbb      	ldrb	r3, [r7, #14]
 8007120:	4923      	ldr	r1, [pc, #140]	; (80071b0 <OLED_ShowChar+0xe0>)
 8007122:	0112      	lsls	r2, r2, #4
 8007124:	440a      	add	r2, r1
 8007126:	4413      	add	r3, r2
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800712c:	2300      	movs	r3, #0
 800712e:	737b      	strb	r3, [r7, #13]
 8007130:	e02d      	b.n	800718e <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8007132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007136:	2b00      	cmp	r3, #0
 8007138:	da07      	bge.n	800714a <OLED_ShowChar+0x7a>
 800713a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800713e:	79b9      	ldrb	r1, [r7, #6]
 8007140:	79fb      	ldrb	r3, [r7, #7]
 8007142:	4618      	mov	r0, r3
 8007144:	f7ff ff6a 	bl	800701c <OLED_DrawPoint>
 8007148:	e00c      	b.n	8007164 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800714a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800714e:	2b00      	cmp	r3, #0
 8007150:	bf0c      	ite	eq
 8007152:	2301      	moveq	r3, #1
 8007154:	2300      	movne	r3, #0
 8007156:	b2db      	uxtb	r3, r3
 8007158:	461a      	mov	r2, r3
 800715a:	79b9      	ldrb	r1, [r7, #6]
 800715c:	79fb      	ldrb	r3, [r7, #7]
 800715e:	4618      	mov	r0, r3
 8007160:	f7ff ff5c 	bl	800701c <OLED_DrawPoint>
			temp<<=1;
 8007164:	7bfb      	ldrb	r3, [r7, #15]
 8007166:	005b      	lsls	r3, r3, #1
 8007168:	73fb      	strb	r3, [r7, #15]
			y++;
 800716a:	79bb      	ldrb	r3, [r7, #6]
 800716c:	3301      	adds	r3, #1
 800716e:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8007170:	79ba      	ldrb	r2, [r7, #6]
 8007172:	7b3b      	ldrb	r3, [r7, #12]
 8007174:	1ad2      	subs	r2, r2, r3
 8007176:	793b      	ldrb	r3, [r7, #4]
 8007178:	429a      	cmp	r2, r3
 800717a:	d105      	bne.n	8007188 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800717c:	7b3b      	ldrb	r3, [r7, #12]
 800717e:	71bb      	strb	r3, [r7, #6]
				x++;
 8007180:	79fb      	ldrb	r3, [r7, #7]
 8007182:	3301      	adds	r3, #1
 8007184:	71fb      	strb	r3, [r7, #7]
				break;
 8007186:	e005      	b.n	8007194 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8007188:	7b7b      	ldrb	r3, [r7, #13]
 800718a:	3301      	adds	r3, #1
 800718c:	737b      	strb	r3, [r7, #13]
 800718e:	7b7b      	ldrb	r3, [r7, #13]
 8007190:	2b07      	cmp	r3, #7
 8007192:	d9ce      	bls.n	8007132 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8007194:	7bbb      	ldrb	r3, [r7, #14]
 8007196:	3301      	adds	r3, #1
 8007198:	73bb      	strb	r3, [r7, #14]
 800719a:	7bba      	ldrb	r2, [r7, #14]
 800719c:	793b      	ldrb	r3, [r7, #4]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d3ad      	bcc.n	80070fe <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 80071a2:	bf00      	nop
 80071a4:	bf00      	nop
 80071a6:	3714      	adds	r7, #20
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd90      	pop	{r4, r7, pc}
 80071ac:	08007da0 	.word	0x08007da0
 80071b0:	08008214 	.word	0x08008214

080071b4 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af02      	add	r7, sp, #8
 80071ba:	4603      	mov	r3, r0
 80071bc:	603a      	str	r2, [r7, #0]
 80071be:	71fb      	strb	r3, [r7, #7]
 80071c0:	460b      	mov	r3, r1
 80071c2:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 80071c4:	e01f      	b.n	8007206 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 80071c6:	79fb      	ldrb	r3, [r7, #7]
 80071c8:	2b7a      	cmp	r3, #122	; 0x7a
 80071ca:	d904      	bls.n	80071d6 <OLED_ShowString+0x22>
 80071cc:	2300      	movs	r3, #0
 80071ce:	71fb      	strb	r3, [r7, #7]
 80071d0:	79bb      	ldrb	r3, [r7, #6]
 80071d2:	3310      	adds	r3, #16
 80071d4:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 80071d6:	79bb      	ldrb	r3, [r7, #6]
 80071d8:	2b3a      	cmp	r3, #58	; 0x3a
 80071da:	d905      	bls.n	80071e8 <OLED_ShowString+0x34>
 80071dc:	2300      	movs	r3, #0
 80071de:	71fb      	strb	r3, [r7, #7]
 80071e0:	79fb      	ldrb	r3, [r7, #7]
 80071e2:	71bb      	strb	r3, [r7, #6]
 80071e4:	f7ff fef4 	bl	8006fd0 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	781a      	ldrb	r2, [r3, #0]
 80071ec:	79b9      	ldrb	r1, [r7, #6]
 80071ee:	79f8      	ldrb	r0, [r7, #7]
 80071f0:	2301      	movs	r3, #1
 80071f2:	9300      	str	r3, [sp, #0]
 80071f4:	230c      	movs	r3, #12
 80071f6:	f7ff ff6b 	bl	80070d0 <OLED_ShowChar>
        x+=8;
 80071fa:	79fb      	ldrb	r3, [r7, #7]
 80071fc:	3308      	adds	r3, #8
 80071fe:	71fb      	strb	r3, [r7, #7]
        p++;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	3301      	adds	r3, #1
 8007204:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1db      	bne.n	80071c6 <OLED_ShowString+0x12>
    }  
}	 
 800720e:	bf00      	nop
 8007210:	bf00      	nop
 8007212:	3708      	adds	r7, #8
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <OLED_Init>:

void OLED_Init(void)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800721c:	f7fa fbe6 	bl	80019ec <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8007220:	4b41      	ldr	r3, [pc, #260]	; (8007328 <OLED_Init+0x110>)
 8007222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007224:	4a40      	ldr	r2, [pc, #256]	; (8007328 <OLED_Init+0x110>)
 8007226:	f023 0301 	bic.w	r3, r3, #1
 800722a:	6713      	str	r3, [r2, #112]	; 0x70
 800722c:	4b3e      	ldr	r3, [pc, #248]	; (8007328 <OLED_Init+0x110>)
 800722e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007230:	4a3d      	ldr	r2, [pc, #244]	; (8007328 <OLED_Init+0x110>)
 8007232:	f023 0304 	bic.w	r3, r3, #4
 8007236:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8007238:	f7fa fbec 	bl	8001a14 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800723c:	2200      	movs	r2, #0
 800723e:	2180      	movs	r1, #128	; 0x80
 8007240:	483a      	ldr	r0, [pc, #232]	; (800732c <OLED_Init+0x114>)
 8007242:	f7fa fb9f 	bl	8001984 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8007246:	2064      	movs	r0, #100	; 0x64
 8007248:	f7fa f838 	bl	80012bc <HAL_Delay>
	OLED_RST_Set();
 800724c:	2201      	movs	r2, #1
 800724e:	2180      	movs	r1, #128	; 0x80
 8007250:	4836      	ldr	r0, [pc, #216]	; (800732c <OLED_Init+0x114>)
 8007252:	f7fa fb97 	bl	8001984 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8007256:	2100      	movs	r1, #0
 8007258:	20ae      	movs	r0, #174	; 0xae
 800725a:	f7ff fe6f 	bl	8006f3c <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800725e:	2100      	movs	r1, #0
 8007260:	20d5      	movs	r0, #213	; 0xd5
 8007262:	f7ff fe6b 	bl	8006f3c <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8007266:	2100      	movs	r1, #0
 8007268:	2050      	movs	r0, #80	; 0x50
 800726a:	f7ff fe67 	bl	8006f3c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800726e:	2100      	movs	r1, #0
 8007270:	20a8      	movs	r0, #168	; 0xa8
 8007272:	f7ff fe63 	bl	8006f3c <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8007276:	2100      	movs	r1, #0
 8007278:	203f      	movs	r0, #63	; 0x3f
 800727a:	f7ff fe5f 	bl	8006f3c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800727e:	2100      	movs	r1, #0
 8007280:	20d3      	movs	r0, #211	; 0xd3
 8007282:	f7ff fe5b 	bl	8006f3c <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8007286:	2100      	movs	r1, #0
 8007288:	2000      	movs	r0, #0
 800728a:	f7ff fe57 	bl	8006f3c <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800728e:	2100      	movs	r1, #0
 8007290:	2040      	movs	r0, #64	; 0x40
 8007292:	f7ff fe53 	bl	8006f3c <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8007296:	2100      	movs	r1, #0
 8007298:	208d      	movs	r0, #141	; 0x8d
 800729a:	f7ff fe4f 	bl	8006f3c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800729e:	2100      	movs	r1, #0
 80072a0:	2014      	movs	r0, #20
 80072a2:	f7ff fe4b 	bl	8006f3c <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 80072a6:	2100      	movs	r1, #0
 80072a8:	2020      	movs	r0, #32
 80072aa:	f7ff fe47 	bl	8006f3c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 80072ae:	2100      	movs	r1, #0
 80072b0:	2002      	movs	r0, #2
 80072b2:	f7ff fe43 	bl	8006f3c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 80072b6:	2100      	movs	r1, #0
 80072b8:	20a1      	movs	r0, #161	; 0xa1
 80072ba:	f7ff fe3f 	bl	8006f3c <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 80072be:	2100      	movs	r1, #0
 80072c0:	20c0      	movs	r0, #192	; 0xc0
 80072c2:	f7ff fe3b 	bl	8006f3c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 80072c6:	2100      	movs	r1, #0
 80072c8:	20da      	movs	r0, #218	; 0xda
 80072ca:	f7ff fe37 	bl	8006f3c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 80072ce:	2100      	movs	r1, #0
 80072d0:	2012      	movs	r0, #18
 80072d2:	f7ff fe33 	bl	8006f3c <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 80072d6:	2100      	movs	r1, #0
 80072d8:	2081      	movs	r0, #129	; 0x81
 80072da:	f7ff fe2f 	bl	8006f3c <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 80072de:	2100      	movs	r1, #0
 80072e0:	20ef      	movs	r0, #239	; 0xef
 80072e2:	f7ff fe2b 	bl	8006f3c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 80072e6:	2100      	movs	r1, #0
 80072e8:	20d9      	movs	r0, #217	; 0xd9
 80072ea:	f7ff fe27 	bl	8006f3c <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 80072ee:	2100      	movs	r1, #0
 80072f0:	20f1      	movs	r0, #241	; 0xf1
 80072f2:	f7ff fe23 	bl	8006f3c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 80072f6:	2100      	movs	r1, #0
 80072f8:	20db      	movs	r0, #219	; 0xdb
 80072fa:	f7ff fe1f 	bl	8006f3c <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 80072fe:	2100      	movs	r1, #0
 8007300:	2030      	movs	r0, #48	; 0x30
 8007302:	f7ff fe1b 	bl	8006f3c <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8007306:	2100      	movs	r1, #0
 8007308:	20a4      	movs	r0, #164	; 0xa4
 800730a:	f7ff fe17 	bl	8006f3c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800730e:	2100      	movs	r1, #0
 8007310:	20a6      	movs	r0, #166	; 0xa6
 8007312:	f7ff fe13 	bl	8006f3c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8007316:	2100      	movs	r1, #0
 8007318:	20af      	movs	r0, #175	; 0xaf
 800731a:	f7ff fe0f 	bl	8006f3c <OLED_WR_Byte>
	OLED_Clear(); 
 800731e:	f7ff fe57 	bl	8006fd0 <OLED_Clear>
 8007322:	bf00      	nop
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	40023800 	.word	0x40023800
 800732c:	40021000 	.word	0x40021000

08007330 <siprintf>:
 8007330:	b40e      	push	{r1, r2, r3}
 8007332:	b500      	push	{lr}
 8007334:	b09c      	sub	sp, #112	; 0x70
 8007336:	ab1d      	add	r3, sp, #116	; 0x74
 8007338:	9002      	str	r0, [sp, #8]
 800733a:	9006      	str	r0, [sp, #24]
 800733c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007340:	4809      	ldr	r0, [pc, #36]	; (8007368 <siprintf+0x38>)
 8007342:	9107      	str	r1, [sp, #28]
 8007344:	9104      	str	r1, [sp, #16]
 8007346:	4909      	ldr	r1, [pc, #36]	; (800736c <siprintf+0x3c>)
 8007348:	f853 2b04 	ldr.w	r2, [r3], #4
 800734c:	9105      	str	r1, [sp, #20]
 800734e:	6800      	ldr	r0, [r0, #0]
 8007350:	9301      	str	r3, [sp, #4]
 8007352:	a902      	add	r1, sp, #8
 8007354:	f000 f9a0 	bl	8007698 <_svfiprintf_r>
 8007358:	9b02      	ldr	r3, [sp, #8]
 800735a:	2200      	movs	r2, #0
 800735c:	701a      	strb	r2, [r3, #0]
 800735e:	b01c      	add	sp, #112	; 0x70
 8007360:	f85d eb04 	ldr.w	lr, [sp], #4
 8007364:	b003      	add	sp, #12
 8007366:	4770      	bx	lr
 8007368:	2000005c 	.word	0x2000005c
 800736c:	ffff0208 	.word	0xffff0208

08007370 <memset>:
 8007370:	4402      	add	r2, r0
 8007372:	4603      	mov	r3, r0
 8007374:	4293      	cmp	r3, r2
 8007376:	d100      	bne.n	800737a <memset+0xa>
 8007378:	4770      	bx	lr
 800737a:	f803 1b01 	strb.w	r1, [r3], #1
 800737e:	e7f9      	b.n	8007374 <memset+0x4>

08007380 <__errno>:
 8007380:	4b01      	ldr	r3, [pc, #4]	; (8007388 <__errno+0x8>)
 8007382:	6818      	ldr	r0, [r3, #0]
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	2000005c 	.word	0x2000005c

0800738c <__libc_init_array>:
 800738c:	b570      	push	{r4, r5, r6, lr}
 800738e:	4d0d      	ldr	r5, [pc, #52]	; (80073c4 <__libc_init_array+0x38>)
 8007390:	4c0d      	ldr	r4, [pc, #52]	; (80073c8 <__libc_init_array+0x3c>)
 8007392:	1b64      	subs	r4, r4, r5
 8007394:	10a4      	asrs	r4, r4, #2
 8007396:	2600      	movs	r6, #0
 8007398:	42a6      	cmp	r6, r4
 800739a:	d109      	bne.n	80073b0 <__libc_init_array+0x24>
 800739c:	4d0b      	ldr	r5, [pc, #44]	; (80073cc <__libc_init_array+0x40>)
 800739e:	4c0c      	ldr	r4, [pc, #48]	; (80073d0 <__libc_init_array+0x44>)
 80073a0:	f000 fc6a 	bl	8007c78 <_init>
 80073a4:	1b64      	subs	r4, r4, r5
 80073a6:	10a4      	asrs	r4, r4, #2
 80073a8:	2600      	movs	r6, #0
 80073aa:	42a6      	cmp	r6, r4
 80073ac:	d105      	bne.n	80073ba <__libc_init_array+0x2e>
 80073ae:	bd70      	pop	{r4, r5, r6, pc}
 80073b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80073b4:	4798      	blx	r3
 80073b6:	3601      	adds	r6, #1
 80073b8:	e7ee      	b.n	8007398 <__libc_init_array+0xc>
 80073ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80073be:	4798      	blx	r3
 80073c0:	3601      	adds	r6, #1
 80073c2:	e7f2      	b.n	80073aa <__libc_init_array+0x1e>
 80073c4:	08008840 	.word	0x08008840
 80073c8:	08008840 	.word	0x08008840
 80073cc:	08008840 	.word	0x08008840
 80073d0:	08008844 	.word	0x08008844

080073d4 <__retarget_lock_acquire_recursive>:
 80073d4:	4770      	bx	lr

080073d6 <__retarget_lock_release_recursive>:
 80073d6:	4770      	bx	lr

080073d8 <memcpy>:
 80073d8:	440a      	add	r2, r1
 80073da:	4291      	cmp	r1, r2
 80073dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80073e0:	d100      	bne.n	80073e4 <memcpy+0xc>
 80073e2:	4770      	bx	lr
 80073e4:	b510      	push	{r4, lr}
 80073e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073ee:	4291      	cmp	r1, r2
 80073f0:	d1f9      	bne.n	80073e6 <memcpy+0xe>
 80073f2:	bd10      	pop	{r4, pc}

080073f4 <_free_r>:
 80073f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073f6:	2900      	cmp	r1, #0
 80073f8:	d044      	beq.n	8007484 <_free_r+0x90>
 80073fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073fe:	9001      	str	r0, [sp, #4]
 8007400:	2b00      	cmp	r3, #0
 8007402:	f1a1 0404 	sub.w	r4, r1, #4
 8007406:	bfb8      	it	lt
 8007408:	18e4      	addlt	r4, r4, r3
 800740a:	f000 f8df 	bl	80075cc <__malloc_lock>
 800740e:	4a1e      	ldr	r2, [pc, #120]	; (8007488 <_free_r+0x94>)
 8007410:	9801      	ldr	r0, [sp, #4]
 8007412:	6813      	ldr	r3, [r2, #0]
 8007414:	b933      	cbnz	r3, 8007424 <_free_r+0x30>
 8007416:	6063      	str	r3, [r4, #4]
 8007418:	6014      	str	r4, [r2, #0]
 800741a:	b003      	add	sp, #12
 800741c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007420:	f000 b8da 	b.w	80075d8 <__malloc_unlock>
 8007424:	42a3      	cmp	r3, r4
 8007426:	d908      	bls.n	800743a <_free_r+0x46>
 8007428:	6825      	ldr	r5, [r4, #0]
 800742a:	1961      	adds	r1, r4, r5
 800742c:	428b      	cmp	r3, r1
 800742e:	bf01      	itttt	eq
 8007430:	6819      	ldreq	r1, [r3, #0]
 8007432:	685b      	ldreq	r3, [r3, #4]
 8007434:	1949      	addeq	r1, r1, r5
 8007436:	6021      	streq	r1, [r4, #0]
 8007438:	e7ed      	b.n	8007416 <_free_r+0x22>
 800743a:	461a      	mov	r2, r3
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	b10b      	cbz	r3, 8007444 <_free_r+0x50>
 8007440:	42a3      	cmp	r3, r4
 8007442:	d9fa      	bls.n	800743a <_free_r+0x46>
 8007444:	6811      	ldr	r1, [r2, #0]
 8007446:	1855      	adds	r5, r2, r1
 8007448:	42a5      	cmp	r5, r4
 800744a:	d10b      	bne.n	8007464 <_free_r+0x70>
 800744c:	6824      	ldr	r4, [r4, #0]
 800744e:	4421      	add	r1, r4
 8007450:	1854      	adds	r4, r2, r1
 8007452:	42a3      	cmp	r3, r4
 8007454:	6011      	str	r1, [r2, #0]
 8007456:	d1e0      	bne.n	800741a <_free_r+0x26>
 8007458:	681c      	ldr	r4, [r3, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	6053      	str	r3, [r2, #4]
 800745e:	440c      	add	r4, r1
 8007460:	6014      	str	r4, [r2, #0]
 8007462:	e7da      	b.n	800741a <_free_r+0x26>
 8007464:	d902      	bls.n	800746c <_free_r+0x78>
 8007466:	230c      	movs	r3, #12
 8007468:	6003      	str	r3, [r0, #0]
 800746a:	e7d6      	b.n	800741a <_free_r+0x26>
 800746c:	6825      	ldr	r5, [r4, #0]
 800746e:	1961      	adds	r1, r4, r5
 8007470:	428b      	cmp	r3, r1
 8007472:	bf04      	itt	eq
 8007474:	6819      	ldreq	r1, [r3, #0]
 8007476:	685b      	ldreq	r3, [r3, #4]
 8007478:	6063      	str	r3, [r4, #4]
 800747a:	bf04      	itt	eq
 800747c:	1949      	addeq	r1, r1, r5
 800747e:	6021      	streq	r1, [r4, #0]
 8007480:	6054      	str	r4, [r2, #4]
 8007482:	e7ca      	b.n	800741a <_free_r+0x26>
 8007484:	b003      	add	sp, #12
 8007486:	bd30      	pop	{r4, r5, pc}
 8007488:	20005058 	.word	0x20005058

0800748c <sbrk_aligned>:
 800748c:	b570      	push	{r4, r5, r6, lr}
 800748e:	4e0e      	ldr	r6, [pc, #56]	; (80074c8 <sbrk_aligned+0x3c>)
 8007490:	460c      	mov	r4, r1
 8007492:	6831      	ldr	r1, [r6, #0]
 8007494:	4605      	mov	r5, r0
 8007496:	b911      	cbnz	r1, 800749e <sbrk_aligned+0x12>
 8007498:	f000 fba6 	bl	8007be8 <_sbrk_r>
 800749c:	6030      	str	r0, [r6, #0]
 800749e:	4621      	mov	r1, r4
 80074a0:	4628      	mov	r0, r5
 80074a2:	f000 fba1 	bl	8007be8 <_sbrk_r>
 80074a6:	1c43      	adds	r3, r0, #1
 80074a8:	d00a      	beq.n	80074c0 <sbrk_aligned+0x34>
 80074aa:	1cc4      	adds	r4, r0, #3
 80074ac:	f024 0403 	bic.w	r4, r4, #3
 80074b0:	42a0      	cmp	r0, r4
 80074b2:	d007      	beq.n	80074c4 <sbrk_aligned+0x38>
 80074b4:	1a21      	subs	r1, r4, r0
 80074b6:	4628      	mov	r0, r5
 80074b8:	f000 fb96 	bl	8007be8 <_sbrk_r>
 80074bc:	3001      	adds	r0, #1
 80074be:	d101      	bne.n	80074c4 <sbrk_aligned+0x38>
 80074c0:	f04f 34ff 	mov.w	r4, #4294967295
 80074c4:	4620      	mov	r0, r4
 80074c6:	bd70      	pop	{r4, r5, r6, pc}
 80074c8:	2000505c 	.word	0x2000505c

080074cc <_malloc_r>:
 80074cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074d0:	1ccd      	adds	r5, r1, #3
 80074d2:	f025 0503 	bic.w	r5, r5, #3
 80074d6:	3508      	adds	r5, #8
 80074d8:	2d0c      	cmp	r5, #12
 80074da:	bf38      	it	cc
 80074dc:	250c      	movcc	r5, #12
 80074de:	2d00      	cmp	r5, #0
 80074e0:	4607      	mov	r7, r0
 80074e2:	db01      	blt.n	80074e8 <_malloc_r+0x1c>
 80074e4:	42a9      	cmp	r1, r5
 80074e6:	d905      	bls.n	80074f4 <_malloc_r+0x28>
 80074e8:	230c      	movs	r3, #12
 80074ea:	603b      	str	r3, [r7, #0]
 80074ec:	2600      	movs	r6, #0
 80074ee:	4630      	mov	r0, r6
 80074f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80075c8 <_malloc_r+0xfc>
 80074f8:	f000 f868 	bl	80075cc <__malloc_lock>
 80074fc:	f8d8 3000 	ldr.w	r3, [r8]
 8007500:	461c      	mov	r4, r3
 8007502:	bb5c      	cbnz	r4, 800755c <_malloc_r+0x90>
 8007504:	4629      	mov	r1, r5
 8007506:	4638      	mov	r0, r7
 8007508:	f7ff ffc0 	bl	800748c <sbrk_aligned>
 800750c:	1c43      	adds	r3, r0, #1
 800750e:	4604      	mov	r4, r0
 8007510:	d155      	bne.n	80075be <_malloc_r+0xf2>
 8007512:	f8d8 4000 	ldr.w	r4, [r8]
 8007516:	4626      	mov	r6, r4
 8007518:	2e00      	cmp	r6, #0
 800751a:	d145      	bne.n	80075a8 <_malloc_r+0xdc>
 800751c:	2c00      	cmp	r4, #0
 800751e:	d048      	beq.n	80075b2 <_malloc_r+0xe6>
 8007520:	6823      	ldr	r3, [r4, #0]
 8007522:	4631      	mov	r1, r6
 8007524:	4638      	mov	r0, r7
 8007526:	eb04 0903 	add.w	r9, r4, r3
 800752a:	f000 fb5d 	bl	8007be8 <_sbrk_r>
 800752e:	4581      	cmp	r9, r0
 8007530:	d13f      	bne.n	80075b2 <_malloc_r+0xe6>
 8007532:	6821      	ldr	r1, [r4, #0]
 8007534:	1a6d      	subs	r5, r5, r1
 8007536:	4629      	mov	r1, r5
 8007538:	4638      	mov	r0, r7
 800753a:	f7ff ffa7 	bl	800748c <sbrk_aligned>
 800753e:	3001      	adds	r0, #1
 8007540:	d037      	beq.n	80075b2 <_malloc_r+0xe6>
 8007542:	6823      	ldr	r3, [r4, #0]
 8007544:	442b      	add	r3, r5
 8007546:	6023      	str	r3, [r4, #0]
 8007548:	f8d8 3000 	ldr.w	r3, [r8]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d038      	beq.n	80075c2 <_malloc_r+0xf6>
 8007550:	685a      	ldr	r2, [r3, #4]
 8007552:	42a2      	cmp	r2, r4
 8007554:	d12b      	bne.n	80075ae <_malloc_r+0xe2>
 8007556:	2200      	movs	r2, #0
 8007558:	605a      	str	r2, [r3, #4]
 800755a:	e00f      	b.n	800757c <_malloc_r+0xb0>
 800755c:	6822      	ldr	r2, [r4, #0]
 800755e:	1b52      	subs	r2, r2, r5
 8007560:	d41f      	bmi.n	80075a2 <_malloc_r+0xd6>
 8007562:	2a0b      	cmp	r2, #11
 8007564:	d917      	bls.n	8007596 <_malloc_r+0xca>
 8007566:	1961      	adds	r1, r4, r5
 8007568:	42a3      	cmp	r3, r4
 800756a:	6025      	str	r5, [r4, #0]
 800756c:	bf18      	it	ne
 800756e:	6059      	strne	r1, [r3, #4]
 8007570:	6863      	ldr	r3, [r4, #4]
 8007572:	bf08      	it	eq
 8007574:	f8c8 1000 	streq.w	r1, [r8]
 8007578:	5162      	str	r2, [r4, r5]
 800757a:	604b      	str	r3, [r1, #4]
 800757c:	4638      	mov	r0, r7
 800757e:	f104 060b 	add.w	r6, r4, #11
 8007582:	f000 f829 	bl	80075d8 <__malloc_unlock>
 8007586:	f026 0607 	bic.w	r6, r6, #7
 800758a:	1d23      	adds	r3, r4, #4
 800758c:	1af2      	subs	r2, r6, r3
 800758e:	d0ae      	beq.n	80074ee <_malloc_r+0x22>
 8007590:	1b9b      	subs	r3, r3, r6
 8007592:	50a3      	str	r3, [r4, r2]
 8007594:	e7ab      	b.n	80074ee <_malloc_r+0x22>
 8007596:	42a3      	cmp	r3, r4
 8007598:	6862      	ldr	r2, [r4, #4]
 800759a:	d1dd      	bne.n	8007558 <_malloc_r+0x8c>
 800759c:	f8c8 2000 	str.w	r2, [r8]
 80075a0:	e7ec      	b.n	800757c <_malloc_r+0xb0>
 80075a2:	4623      	mov	r3, r4
 80075a4:	6864      	ldr	r4, [r4, #4]
 80075a6:	e7ac      	b.n	8007502 <_malloc_r+0x36>
 80075a8:	4634      	mov	r4, r6
 80075aa:	6876      	ldr	r6, [r6, #4]
 80075ac:	e7b4      	b.n	8007518 <_malloc_r+0x4c>
 80075ae:	4613      	mov	r3, r2
 80075b0:	e7cc      	b.n	800754c <_malloc_r+0x80>
 80075b2:	230c      	movs	r3, #12
 80075b4:	603b      	str	r3, [r7, #0]
 80075b6:	4638      	mov	r0, r7
 80075b8:	f000 f80e 	bl	80075d8 <__malloc_unlock>
 80075bc:	e797      	b.n	80074ee <_malloc_r+0x22>
 80075be:	6025      	str	r5, [r4, #0]
 80075c0:	e7dc      	b.n	800757c <_malloc_r+0xb0>
 80075c2:	605b      	str	r3, [r3, #4]
 80075c4:	deff      	udf	#255	; 0xff
 80075c6:	bf00      	nop
 80075c8:	20005058 	.word	0x20005058

080075cc <__malloc_lock>:
 80075cc:	4801      	ldr	r0, [pc, #4]	; (80075d4 <__malloc_lock+0x8>)
 80075ce:	f7ff bf01 	b.w	80073d4 <__retarget_lock_acquire_recursive>
 80075d2:	bf00      	nop
 80075d4:	20005054 	.word	0x20005054

080075d8 <__malloc_unlock>:
 80075d8:	4801      	ldr	r0, [pc, #4]	; (80075e0 <__malloc_unlock+0x8>)
 80075da:	f7ff befc 	b.w	80073d6 <__retarget_lock_release_recursive>
 80075de:	bf00      	nop
 80075e0:	20005054 	.word	0x20005054

080075e4 <__ssputs_r>:
 80075e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075e8:	688e      	ldr	r6, [r1, #8]
 80075ea:	461f      	mov	r7, r3
 80075ec:	42be      	cmp	r6, r7
 80075ee:	680b      	ldr	r3, [r1, #0]
 80075f0:	4682      	mov	sl, r0
 80075f2:	460c      	mov	r4, r1
 80075f4:	4690      	mov	r8, r2
 80075f6:	d82c      	bhi.n	8007652 <__ssputs_r+0x6e>
 80075f8:	898a      	ldrh	r2, [r1, #12]
 80075fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80075fe:	d026      	beq.n	800764e <__ssputs_r+0x6a>
 8007600:	6965      	ldr	r5, [r4, #20]
 8007602:	6909      	ldr	r1, [r1, #16]
 8007604:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007608:	eba3 0901 	sub.w	r9, r3, r1
 800760c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007610:	1c7b      	adds	r3, r7, #1
 8007612:	444b      	add	r3, r9
 8007614:	106d      	asrs	r5, r5, #1
 8007616:	429d      	cmp	r5, r3
 8007618:	bf38      	it	cc
 800761a:	461d      	movcc	r5, r3
 800761c:	0553      	lsls	r3, r2, #21
 800761e:	d527      	bpl.n	8007670 <__ssputs_r+0x8c>
 8007620:	4629      	mov	r1, r5
 8007622:	f7ff ff53 	bl	80074cc <_malloc_r>
 8007626:	4606      	mov	r6, r0
 8007628:	b360      	cbz	r0, 8007684 <__ssputs_r+0xa0>
 800762a:	6921      	ldr	r1, [r4, #16]
 800762c:	464a      	mov	r2, r9
 800762e:	f7ff fed3 	bl	80073d8 <memcpy>
 8007632:	89a3      	ldrh	r3, [r4, #12]
 8007634:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800763c:	81a3      	strh	r3, [r4, #12]
 800763e:	6126      	str	r6, [r4, #16]
 8007640:	6165      	str	r5, [r4, #20]
 8007642:	444e      	add	r6, r9
 8007644:	eba5 0509 	sub.w	r5, r5, r9
 8007648:	6026      	str	r6, [r4, #0]
 800764a:	60a5      	str	r5, [r4, #8]
 800764c:	463e      	mov	r6, r7
 800764e:	42be      	cmp	r6, r7
 8007650:	d900      	bls.n	8007654 <__ssputs_r+0x70>
 8007652:	463e      	mov	r6, r7
 8007654:	6820      	ldr	r0, [r4, #0]
 8007656:	4632      	mov	r2, r6
 8007658:	4641      	mov	r1, r8
 800765a:	f000 faab 	bl	8007bb4 <memmove>
 800765e:	68a3      	ldr	r3, [r4, #8]
 8007660:	1b9b      	subs	r3, r3, r6
 8007662:	60a3      	str	r3, [r4, #8]
 8007664:	6823      	ldr	r3, [r4, #0]
 8007666:	4433      	add	r3, r6
 8007668:	6023      	str	r3, [r4, #0]
 800766a:	2000      	movs	r0, #0
 800766c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007670:	462a      	mov	r2, r5
 8007672:	f000 fac9 	bl	8007c08 <_realloc_r>
 8007676:	4606      	mov	r6, r0
 8007678:	2800      	cmp	r0, #0
 800767a:	d1e0      	bne.n	800763e <__ssputs_r+0x5a>
 800767c:	6921      	ldr	r1, [r4, #16]
 800767e:	4650      	mov	r0, sl
 8007680:	f7ff feb8 	bl	80073f4 <_free_r>
 8007684:	230c      	movs	r3, #12
 8007686:	f8ca 3000 	str.w	r3, [sl]
 800768a:	89a3      	ldrh	r3, [r4, #12]
 800768c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007690:	81a3      	strh	r3, [r4, #12]
 8007692:	f04f 30ff 	mov.w	r0, #4294967295
 8007696:	e7e9      	b.n	800766c <__ssputs_r+0x88>

08007698 <_svfiprintf_r>:
 8007698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800769c:	4698      	mov	r8, r3
 800769e:	898b      	ldrh	r3, [r1, #12]
 80076a0:	061b      	lsls	r3, r3, #24
 80076a2:	b09d      	sub	sp, #116	; 0x74
 80076a4:	4607      	mov	r7, r0
 80076a6:	460d      	mov	r5, r1
 80076a8:	4614      	mov	r4, r2
 80076aa:	d50e      	bpl.n	80076ca <_svfiprintf_r+0x32>
 80076ac:	690b      	ldr	r3, [r1, #16]
 80076ae:	b963      	cbnz	r3, 80076ca <_svfiprintf_r+0x32>
 80076b0:	2140      	movs	r1, #64	; 0x40
 80076b2:	f7ff ff0b 	bl	80074cc <_malloc_r>
 80076b6:	6028      	str	r0, [r5, #0]
 80076b8:	6128      	str	r0, [r5, #16]
 80076ba:	b920      	cbnz	r0, 80076c6 <_svfiprintf_r+0x2e>
 80076bc:	230c      	movs	r3, #12
 80076be:	603b      	str	r3, [r7, #0]
 80076c0:	f04f 30ff 	mov.w	r0, #4294967295
 80076c4:	e0d0      	b.n	8007868 <_svfiprintf_r+0x1d0>
 80076c6:	2340      	movs	r3, #64	; 0x40
 80076c8:	616b      	str	r3, [r5, #20]
 80076ca:	2300      	movs	r3, #0
 80076cc:	9309      	str	r3, [sp, #36]	; 0x24
 80076ce:	2320      	movs	r3, #32
 80076d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80076d8:	2330      	movs	r3, #48	; 0x30
 80076da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007880 <_svfiprintf_r+0x1e8>
 80076de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076e2:	f04f 0901 	mov.w	r9, #1
 80076e6:	4623      	mov	r3, r4
 80076e8:	469a      	mov	sl, r3
 80076ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076ee:	b10a      	cbz	r2, 80076f4 <_svfiprintf_r+0x5c>
 80076f0:	2a25      	cmp	r2, #37	; 0x25
 80076f2:	d1f9      	bne.n	80076e8 <_svfiprintf_r+0x50>
 80076f4:	ebba 0b04 	subs.w	fp, sl, r4
 80076f8:	d00b      	beq.n	8007712 <_svfiprintf_r+0x7a>
 80076fa:	465b      	mov	r3, fp
 80076fc:	4622      	mov	r2, r4
 80076fe:	4629      	mov	r1, r5
 8007700:	4638      	mov	r0, r7
 8007702:	f7ff ff6f 	bl	80075e4 <__ssputs_r>
 8007706:	3001      	adds	r0, #1
 8007708:	f000 80a9 	beq.w	800785e <_svfiprintf_r+0x1c6>
 800770c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800770e:	445a      	add	r2, fp
 8007710:	9209      	str	r2, [sp, #36]	; 0x24
 8007712:	f89a 3000 	ldrb.w	r3, [sl]
 8007716:	2b00      	cmp	r3, #0
 8007718:	f000 80a1 	beq.w	800785e <_svfiprintf_r+0x1c6>
 800771c:	2300      	movs	r3, #0
 800771e:	f04f 32ff 	mov.w	r2, #4294967295
 8007722:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007726:	f10a 0a01 	add.w	sl, sl, #1
 800772a:	9304      	str	r3, [sp, #16]
 800772c:	9307      	str	r3, [sp, #28]
 800772e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007732:	931a      	str	r3, [sp, #104]	; 0x68
 8007734:	4654      	mov	r4, sl
 8007736:	2205      	movs	r2, #5
 8007738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800773c:	4850      	ldr	r0, [pc, #320]	; (8007880 <_svfiprintf_r+0x1e8>)
 800773e:	f7f8 fd47 	bl	80001d0 <memchr>
 8007742:	9a04      	ldr	r2, [sp, #16]
 8007744:	b9d8      	cbnz	r0, 800777e <_svfiprintf_r+0xe6>
 8007746:	06d0      	lsls	r0, r2, #27
 8007748:	bf44      	itt	mi
 800774a:	2320      	movmi	r3, #32
 800774c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007750:	0711      	lsls	r1, r2, #28
 8007752:	bf44      	itt	mi
 8007754:	232b      	movmi	r3, #43	; 0x2b
 8007756:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800775a:	f89a 3000 	ldrb.w	r3, [sl]
 800775e:	2b2a      	cmp	r3, #42	; 0x2a
 8007760:	d015      	beq.n	800778e <_svfiprintf_r+0xf6>
 8007762:	9a07      	ldr	r2, [sp, #28]
 8007764:	4654      	mov	r4, sl
 8007766:	2000      	movs	r0, #0
 8007768:	f04f 0c0a 	mov.w	ip, #10
 800776c:	4621      	mov	r1, r4
 800776e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007772:	3b30      	subs	r3, #48	; 0x30
 8007774:	2b09      	cmp	r3, #9
 8007776:	d94d      	bls.n	8007814 <_svfiprintf_r+0x17c>
 8007778:	b1b0      	cbz	r0, 80077a8 <_svfiprintf_r+0x110>
 800777a:	9207      	str	r2, [sp, #28]
 800777c:	e014      	b.n	80077a8 <_svfiprintf_r+0x110>
 800777e:	eba0 0308 	sub.w	r3, r0, r8
 8007782:	fa09 f303 	lsl.w	r3, r9, r3
 8007786:	4313      	orrs	r3, r2
 8007788:	9304      	str	r3, [sp, #16]
 800778a:	46a2      	mov	sl, r4
 800778c:	e7d2      	b.n	8007734 <_svfiprintf_r+0x9c>
 800778e:	9b03      	ldr	r3, [sp, #12]
 8007790:	1d19      	adds	r1, r3, #4
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	9103      	str	r1, [sp, #12]
 8007796:	2b00      	cmp	r3, #0
 8007798:	bfbb      	ittet	lt
 800779a:	425b      	neglt	r3, r3
 800779c:	f042 0202 	orrlt.w	r2, r2, #2
 80077a0:	9307      	strge	r3, [sp, #28]
 80077a2:	9307      	strlt	r3, [sp, #28]
 80077a4:	bfb8      	it	lt
 80077a6:	9204      	strlt	r2, [sp, #16]
 80077a8:	7823      	ldrb	r3, [r4, #0]
 80077aa:	2b2e      	cmp	r3, #46	; 0x2e
 80077ac:	d10c      	bne.n	80077c8 <_svfiprintf_r+0x130>
 80077ae:	7863      	ldrb	r3, [r4, #1]
 80077b0:	2b2a      	cmp	r3, #42	; 0x2a
 80077b2:	d134      	bne.n	800781e <_svfiprintf_r+0x186>
 80077b4:	9b03      	ldr	r3, [sp, #12]
 80077b6:	1d1a      	adds	r2, r3, #4
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	9203      	str	r2, [sp, #12]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	bfb8      	it	lt
 80077c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80077c4:	3402      	adds	r4, #2
 80077c6:	9305      	str	r3, [sp, #20]
 80077c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007890 <_svfiprintf_r+0x1f8>
 80077cc:	7821      	ldrb	r1, [r4, #0]
 80077ce:	2203      	movs	r2, #3
 80077d0:	4650      	mov	r0, sl
 80077d2:	f7f8 fcfd 	bl	80001d0 <memchr>
 80077d6:	b138      	cbz	r0, 80077e8 <_svfiprintf_r+0x150>
 80077d8:	9b04      	ldr	r3, [sp, #16]
 80077da:	eba0 000a 	sub.w	r0, r0, sl
 80077de:	2240      	movs	r2, #64	; 0x40
 80077e0:	4082      	lsls	r2, r0
 80077e2:	4313      	orrs	r3, r2
 80077e4:	3401      	adds	r4, #1
 80077e6:	9304      	str	r3, [sp, #16]
 80077e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077ec:	4825      	ldr	r0, [pc, #148]	; (8007884 <_svfiprintf_r+0x1ec>)
 80077ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077f2:	2206      	movs	r2, #6
 80077f4:	f7f8 fcec 	bl	80001d0 <memchr>
 80077f8:	2800      	cmp	r0, #0
 80077fa:	d038      	beq.n	800786e <_svfiprintf_r+0x1d6>
 80077fc:	4b22      	ldr	r3, [pc, #136]	; (8007888 <_svfiprintf_r+0x1f0>)
 80077fe:	bb1b      	cbnz	r3, 8007848 <_svfiprintf_r+0x1b0>
 8007800:	9b03      	ldr	r3, [sp, #12]
 8007802:	3307      	adds	r3, #7
 8007804:	f023 0307 	bic.w	r3, r3, #7
 8007808:	3308      	adds	r3, #8
 800780a:	9303      	str	r3, [sp, #12]
 800780c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800780e:	4433      	add	r3, r6
 8007810:	9309      	str	r3, [sp, #36]	; 0x24
 8007812:	e768      	b.n	80076e6 <_svfiprintf_r+0x4e>
 8007814:	fb0c 3202 	mla	r2, ip, r2, r3
 8007818:	460c      	mov	r4, r1
 800781a:	2001      	movs	r0, #1
 800781c:	e7a6      	b.n	800776c <_svfiprintf_r+0xd4>
 800781e:	2300      	movs	r3, #0
 8007820:	3401      	adds	r4, #1
 8007822:	9305      	str	r3, [sp, #20]
 8007824:	4619      	mov	r1, r3
 8007826:	f04f 0c0a 	mov.w	ip, #10
 800782a:	4620      	mov	r0, r4
 800782c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007830:	3a30      	subs	r2, #48	; 0x30
 8007832:	2a09      	cmp	r2, #9
 8007834:	d903      	bls.n	800783e <_svfiprintf_r+0x1a6>
 8007836:	2b00      	cmp	r3, #0
 8007838:	d0c6      	beq.n	80077c8 <_svfiprintf_r+0x130>
 800783a:	9105      	str	r1, [sp, #20]
 800783c:	e7c4      	b.n	80077c8 <_svfiprintf_r+0x130>
 800783e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007842:	4604      	mov	r4, r0
 8007844:	2301      	movs	r3, #1
 8007846:	e7f0      	b.n	800782a <_svfiprintf_r+0x192>
 8007848:	ab03      	add	r3, sp, #12
 800784a:	9300      	str	r3, [sp, #0]
 800784c:	462a      	mov	r2, r5
 800784e:	4b0f      	ldr	r3, [pc, #60]	; (800788c <_svfiprintf_r+0x1f4>)
 8007850:	a904      	add	r1, sp, #16
 8007852:	4638      	mov	r0, r7
 8007854:	f3af 8000 	nop.w
 8007858:	1c42      	adds	r2, r0, #1
 800785a:	4606      	mov	r6, r0
 800785c:	d1d6      	bne.n	800780c <_svfiprintf_r+0x174>
 800785e:	89ab      	ldrh	r3, [r5, #12]
 8007860:	065b      	lsls	r3, r3, #25
 8007862:	f53f af2d 	bmi.w	80076c0 <_svfiprintf_r+0x28>
 8007866:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007868:	b01d      	add	sp, #116	; 0x74
 800786a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800786e:	ab03      	add	r3, sp, #12
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	462a      	mov	r2, r5
 8007874:	4b05      	ldr	r3, [pc, #20]	; (800788c <_svfiprintf_r+0x1f4>)
 8007876:	a904      	add	r1, sp, #16
 8007878:	4638      	mov	r0, r7
 800787a:	f000 f879 	bl	8007970 <_printf_i>
 800787e:	e7eb      	b.n	8007858 <_svfiprintf_r+0x1c0>
 8007880:	08008804 	.word	0x08008804
 8007884:	0800880e 	.word	0x0800880e
 8007888:	00000000 	.word	0x00000000
 800788c:	080075e5 	.word	0x080075e5
 8007890:	0800880a 	.word	0x0800880a

08007894 <_printf_common>:
 8007894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007898:	4616      	mov	r6, r2
 800789a:	4699      	mov	r9, r3
 800789c:	688a      	ldr	r2, [r1, #8]
 800789e:	690b      	ldr	r3, [r1, #16]
 80078a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078a4:	4293      	cmp	r3, r2
 80078a6:	bfb8      	it	lt
 80078a8:	4613      	movlt	r3, r2
 80078aa:	6033      	str	r3, [r6, #0]
 80078ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078b0:	4607      	mov	r7, r0
 80078b2:	460c      	mov	r4, r1
 80078b4:	b10a      	cbz	r2, 80078ba <_printf_common+0x26>
 80078b6:	3301      	adds	r3, #1
 80078b8:	6033      	str	r3, [r6, #0]
 80078ba:	6823      	ldr	r3, [r4, #0]
 80078bc:	0699      	lsls	r1, r3, #26
 80078be:	bf42      	ittt	mi
 80078c0:	6833      	ldrmi	r3, [r6, #0]
 80078c2:	3302      	addmi	r3, #2
 80078c4:	6033      	strmi	r3, [r6, #0]
 80078c6:	6825      	ldr	r5, [r4, #0]
 80078c8:	f015 0506 	ands.w	r5, r5, #6
 80078cc:	d106      	bne.n	80078dc <_printf_common+0x48>
 80078ce:	f104 0a19 	add.w	sl, r4, #25
 80078d2:	68e3      	ldr	r3, [r4, #12]
 80078d4:	6832      	ldr	r2, [r6, #0]
 80078d6:	1a9b      	subs	r3, r3, r2
 80078d8:	42ab      	cmp	r3, r5
 80078da:	dc26      	bgt.n	800792a <_printf_common+0x96>
 80078dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078e0:	1e13      	subs	r3, r2, #0
 80078e2:	6822      	ldr	r2, [r4, #0]
 80078e4:	bf18      	it	ne
 80078e6:	2301      	movne	r3, #1
 80078e8:	0692      	lsls	r2, r2, #26
 80078ea:	d42b      	bmi.n	8007944 <_printf_common+0xb0>
 80078ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078f0:	4649      	mov	r1, r9
 80078f2:	4638      	mov	r0, r7
 80078f4:	47c0      	blx	r8
 80078f6:	3001      	adds	r0, #1
 80078f8:	d01e      	beq.n	8007938 <_printf_common+0xa4>
 80078fa:	6823      	ldr	r3, [r4, #0]
 80078fc:	6922      	ldr	r2, [r4, #16]
 80078fe:	f003 0306 	and.w	r3, r3, #6
 8007902:	2b04      	cmp	r3, #4
 8007904:	bf02      	ittt	eq
 8007906:	68e5      	ldreq	r5, [r4, #12]
 8007908:	6833      	ldreq	r3, [r6, #0]
 800790a:	1aed      	subeq	r5, r5, r3
 800790c:	68a3      	ldr	r3, [r4, #8]
 800790e:	bf0c      	ite	eq
 8007910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007914:	2500      	movne	r5, #0
 8007916:	4293      	cmp	r3, r2
 8007918:	bfc4      	itt	gt
 800791a:	1a9b      	subgt	r3, r3, r2
 800791c:	18ed      	addgt	r5, r5, r3
 800791e:	2600      	movs	r6, #0
 8007920:	341a      	adds	r4, #26
 8007922:	42b5      	cmp	r5, r6
 8007924:	d11a      	bne.n	800795c <_printf_common+0xc8>
 8007926:	2000      	movs	r0, #0
 8007928:	e008      	b.n	800793c <_printf_common+0xa8>
 800792a:	2301      	movs	r3, #1
 800792c:	4652      	mov	r2, sl
 800792e:	4649      	mov	r1, r9
 8007930:	4638      	mov	r0, r7
 8007932:	47c0      	blx	r8
 8007934:	3001      	adds	r0, #1
 8007936:	d103      	bne.n	8007940 <_printf_common+0xac>
 8007938:	f04f 30ff 	mov.w	r0, #4294967295
 800793c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007940:	3501      	adds	r5, #1
 8007942:	e7c6      	b.n	80078d2 <_printf_common+0x3e>
 8007944:	18e1      	adds	r1, r4, r3
 8007946:	1c5a      	adds	r2, r3, #1
 8007948:	2030      	movs	r0, #48	; 0x30
 800794a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800794e:	4422      	add	r2, r4
 8007950:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007954:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007958:	3302      	adds	r3, #2
 800795a:	e7c7      	b.n	80078ec <_printf_common+0x58>
 800795c:	2301      	movs	r3, #1
 800795e:	4622      	mov	r2, r4
 8007960:	4649      	mov	r1, r9
 8007962:	4638      	mov	r0, r7
 8007964:	47c0      	blx	r8
 8007966:	3001      	adds	r0, #1
 8007968:	d0e6      	beq.n	8007938 <_printf_common+0xa4>
 800796a:	3601      	adds	r6, #1
 800796c:	e7d9      	b.n	8007922 <_printf_common+0x8e>
	...

08007970 <_printf_i>:
 8007970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007974:	7e0f      	ldrb	r7, [r1, #24]
 8007976:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007978:	2f78      	cmp	r7, #120	; 0x78
 800797a:	4691      	mov	r9, r2
 800797c:	4680      	mov	r8, r0
 800797e:	460c      	mov	r4, r1
 8007980:	469a      	mov	sl, r3
 8007982:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007986:	d807      	bhi.n	8007998 <_printf_i+0x28>
 8007988:	2f62      	cmp	r7, #98	; 0x62
 800798a:	d80a      	bhi.n	80079a2 <_printf_i+0x32>
 800798c:	2f00      	cmp	r7, #0
 800798e:	f000 80d4 	beq.w	8007b3a <_printf_i+0x1ca>
 8007992:	2f58      	cmp	r7, #88	; 0x58
 8007994:	f000 80c0 	beq.w	8007b18 <_printf_i+0x1a8>
 8007998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800799c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079a0:	e03a      	b.n	8007a18 <_printf_i+0xa8>
 80079a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079a6:	2b15      	cmp	r3, #21
 80079a8:	d8f6      	bhi.n	8007998 <_printf_i+0x28>
 80079aa:	a101      	add	r1, pc, #4	; (adr r1, 80079b0 <_printf_i+0x40>)
 80079ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079b0:	08007a09 	.word	0x08007a09
 80079b4:	08007a1d 	.word	0x08007a1d
 80079b8:	08007999 	.word	0x08007999
 80079bc:	08007999 	.word	0x08007999
 80079c0:	08007999 	.word	0x08007999
 80079c4:	08007999 	.word	0x08007999
 80079c8:	08007a1d 	.word	0x08007a1d
 80079cc:	08007999 	.word	0x08007999
 80079d0:	08007999 	.word	0x08007999
 80079d4:	08007999 	.word	0x08007999
 80079d8:	08007999 	.word	0x08007999
 80079dc:	08007b21 	.word	0x08007b21
 80079e0:	08007a49 	.word	0x08007a49
 80079e4:	08007adb 	.word	0x08007adb
 80079e8:	08007999 	.word	0x08007999
 80079ec:	08007999 	.word	0x08007999
 80079f0:	08007b43 	.word	0x08007b43
 80079f4:	08007999 	.word	0x08007999
 80079f8:	08007a49 	.word	0x08007a49
 80079fc:	08007999 	.word	0x08007999
 8007a00:	08007999 	.word	0x08007999
 8007a04:	08007ae3 	.word	0x08007ae3
 8007a08:	682b      	ldr	r3, [r5, #0]
 8007a0a:	1d1a      	adds	r2, r3, #4
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	602a      	str	r2, [r5, #0]
 8007a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e09f      	b.n	8007b5c <_printf_i+0x1ec>
 8007a1c:	6820      	ldr	r0, [r4, #0]
 8007a1e:	682b      	ldr	r3, [r5, #0]
 8007a20:	0607      	lsls	r7, r0, #24
 8007a22:	f103 0104 	add.w	r1, r3, #4
 8007a26:	6029      	str	r1, [r5, #0]
 8007a28:	d501      	bpl.n	8007a2e <_printf_i+0xbe>
 8007a2a:	681e      	ldr	r6, [r3, #0]
 8007a2c:	e003      	b.n	8007a36 <_printf_i+0xc6>
 8007a2e:	0646      	lsls	r6, r0, #25
 8007a30:	d5fb      	bpl.n	8007a2a <_printf_i+0xba>
 8007a32:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007a36:	2e00      	cmp	r6, #0
 8007a38:	da03      	bge.n	8007a42 <_printf_i+0xd2>
 8007a3a:	232d      	movs	r3, #45	; 0x2d
 8007a3c:	4276      	negs	r6, r6
 8007a3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a42:	485a      	ldr	r0, [pc, #360]	; (8007bac <_printf_i+0x23c>)
 8007a44:	230a      	movs	r3, #10
 8007a46:	e012      	b.n	8007a6e <_printf_i+0xfe>
 8007a48:	682b      	ldr	r3, [r5, #0]
 8007a4a:	6820      	ldr	r0, [r4, #0]
 8007a4c:	1d19      	adds	r1, r3, #4
 8007a4e:	6029      	str	r1, [r5, #0]
 8007a50:	0605      	lsls	r5, r0, #24
 8007a52:	d501      	bpl.n	8007a58 <_printf_i+0xe8>
 8007a54:	681e      	ldr	r6, [r3, #0]
 8007a56:	e002      	b.n	8007a5e <_printf_i+0xee>
 8007a58:	0641      	lsls	r1, r0, #25
 8007a5a:	d5fb      	bpl.n	8007a54 <_printf_i+0xe4>
 8007a5c:	881e      	ldrh	r6, [r3, #0]
 8007a5e:	4853      	ldr	r0, [pc, #332]	; (8007bac <_printf_i+0x23c>)
 8007a60:	2f6f      	cmp	r7, #111	; 0x6f
 8007a62:	bf0c      	ite	eq
 8007a64:	2308      	moveq	r3, #8
 8007a66:	230a      	movne	r3, #10
 8007a68:	2100      	movs	r1, #0
 8007a6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a6e:	6865      	ldr	r5, [r4, #4]
 8007a70:	60a5      	str	r5, [r4, #8]
 8007a72:	2d00      	cmp	r5, #0
 8007a74:	bfa2      	ittt	ge
 8007a76:	6821      	ldrge	r1, [r4, #0]
 8007a78:	f021 0104 	bicge.w	r1, r1, #4
 8007a7c:	6021      	strge	r1, [r4, #0]
 8007a7e:	b90e      	cbnz	r6, 8007a84 <_printf_i+0x114>
 8007a80:	2d00      	cmp	r5, #0
 8007a82:	d04b      	beq.n	8007b1c <_printf_i+0x1ac>
 8007a84:	4615      	mov	r5, r2
 8007a86:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a8a:	fb03 6711 	mls	r7, r3, r1, r6
 8007a8e:	5dc7      	ldrb	r7, [r0, r7]
 8007a90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a94:	4637      	mov	r7, r6
 8007a96:	42bb      	cmp	r3, r7
 8007a98:	460e      	mov	r6, r1
 8007a9a:	d9f4      	bls.n	8007a86 <_printf_i+0x116>
 8007a9c:	2b08      	cmp	r3, #8
 8007a9e:	d10b      	bne.n	8007ab8 <_printf_i+0x148>
 8007aa0:	6823      	ldr	r3, [r4, #0]
 8007aa2:	07de      	lsls	r6, r3, #31
 8007aa4:	d508      	bpl.n	8007ab8 <_printf_i+0x148>
 8007aa6:	6923      	ldr	r3, [r4, #16]
 8007aa8:	6861      	ldr	r1, [r4, #4]
 8007aaa:	4299      	cmp	r1, r3
 8007aac:	bfde      	ittt	le
 8007aae:	2330      	movle	r3, #48	; 0x30
 8007ab0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ab4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ab8:	1b52      	subs	r2, r2, r5
 8007aba:	6122      	str	r2, [r4, #16]
 8007abc:	f8cd a000 	str.w	sl, [sp]
 8007ac0:	464b      	mov	r3, r9
 8007ac2:	aa03      	add	r2, sp, #12
 8007ac4:	4621      	mov	r1, r4
 8007ac6:	4640      	mov	r0, r8
 8007ac8:	f7ff fee4 	bl	8007894 <_printf_common>
 8007acc:	3001      	adds	r0, #1
 8007ace:	d14a      	bne.n	8007b66 <_printf_i+0x1f6>
 8007ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad4:	b004      	add	sp, #16
 8007ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ada:	6823      	ldr	r3, [r4, #0]
 8007adc:	f043 0320 	orr.w	r3, r3, #32
 8007ae0:	6023      	str	r3, [r4, #0]
 8007ae2:	4833      	ldr	r0, [pc, #204]	; (8007bb0 <_printf_i+0x240>)
 8007ae4:	2778      	movs	r7, #120	; 0x78
 8007ae6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	6829      	ldr	r1, [r5, #0]
 8007aee:	061f      	lsls	r7, r3, #24
 8007af0:	f851 6b04 	ldr.w	r6, [r1], #4
 8007af4:	d402      	bmi.n	8007afc <_printf_i+0x18c>
 8007af6:	065f      	lsls	r7, r3, #25
 8007af8:	bf48      	it	mi
 8007afa:	b2b6      	uxthmi	r6, r6
 8007afc:	07df      	lsls	r7, r3, #31
 8007afe:	bf48      	it	mi
 8007b00:	f043 0320 	orrmi.w	r3, r3, #32
 8007b04:	6029      	str	r1, [r5, #0]
 8007b06:	bf48      	it	mi
 8007b08:	6023      	strmi	r3, [r4, #0]
 8007b0a:	b91e      	cbnz	r6, 8007b14 <_printf_i+0x1a4>
 8007b0c:	6823      	ldr	r3, [r4, #0]
 8007b0e:	f023 0320 	bic.w	r3, r3, #32
 8007b12:	6023      	str	r3, [r4, #0]
 8007b14:	2310      	movs	r3, #16
 8007b16:	e7a7      	b.n	8007a68 <_printf_i+0xf8>
 8007b18:	4824      	ldr	r0, [pc, #144]	; (8007bac <_printf_i+0x23c>)
 8007b1a:	e7e4      	b.n	8007ae6 <_printf_i+0x176>
 8007b1c:	4615      	mov	r5, r2
 8007b1e:	e7bd      	b.n	8007a9c <_printf_i+0x12c>
 8007b20:	682b      	ldr	r3, [r5, #0]
 8007b22:	6826      	ldr	r6, [r4, #0]
 8007b24:	6961      	ldr	r1, [r4, #20]
 8007b26:	1d18      	adds	r0, r3, #4
 8007b28:	6028      	str	r0, [r5, #0]
 8007b2a:	0635      	lsls	r5, r6, #24
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	d501      	bpl.n	8007b34 <_printf_i+0x1c4>
 8007b30:	6019      	str	r1, [r3, #0]
 8007b32:	e002      	b.n	8007b3a <_printf_i+0x1ca>
 8007b34:	0670      	lsls	r0, r6, #25
 8007b36:	d5fb      	bpl.n	8007b30 <_printf_i+0x1c0>
 8007b38:	8019      	strh	r1, [r3, #0]
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	6123      	str	r3, [r4, #16]
 8007b3e:	4615      	mov	r5, r2
 8007b40:	e7bc      	b.n	8007abc <_printf_i+0x14c>
 8007b42:	682b      	ldr	r3, [r5, #0]
 8007b44:	1d1a      	adds	r2, r3, #4
 8007b46:	602a      	str	r2, [r5, #0]
 8007b48:	681d      	ldr	r5, [r3, #0]
 8007b4a:	6862      	ldr	r2, [r4, #4]
 8007b4c:	2100      	movs	r1, #0
 8007b4e:	4628      	mov	r0, r5
 8007b50:	f7f8 fb3e 	bl	80001d0 <memchr>
 8007b54:	b108      	cbz	r0, 8007b5a <_printf_i+0x1ea>
 8007b56:	1b40      	subs	r0, r0, r5
 8007b58:	6060      	str	r0, [r4, #4]
 8007b5a:	6863      	ldr	r3, [r4, #4]
 8007b5c:	6123      	str	r3, [r4, #16]
 8007b5e:	2300      	movs	r3, #0
 8007b60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b64:	e7aa      	b.n	8007abc <_printf_i+0x14c>
 8007b66:	6923      	ldr	r3, [r4, #16]
 8007b68:	462a      	mov	r2, r5
 8007b6a:	4649      	mov	r1, r9
 8007b6c:	4640      	mov	r0, r8
 8007b6e:	47d0      	blx	sl
 8007b70:	3001      	adds	r0, #1
 8007b72:	d0ad      	beq.n	8007ad0 <_printf_i+0x160>
 8007b74:	6823      	ldr	r3, [r4, #0]
 8007b76:	079b      	lsls	r3, r3, #30
 8007b78:	d413      	bmi.n	8007ba2 <_printf_i+0x232>
 8007b7a:	68e0      	ldr	r0, [r4, #12]
 8007b7c:	9b03      	ldr	r3, [sp, #12]
 8007b7e:	4298      	cmp	r0, r3
 8007b80:	bfb8      	it	lt
 8007b82:	4618      	movlt	r0, r3
 8007b84:	e7a6      	b.n	8007ad4 <_printf_i+0x164>
 8007b86:	2301      	movs	r3, #1
 8007b88:	4632      	mov	r2, r6
 8007b8a:	4649      	mov	r1, r9
 8007b8c:	4640      	mov	r0, r8
 8007b8e:	47d0      	blx	sl
 8007b90:	3001      	adds	r0, #1
 8007b92:	d09d      	beq.n	8007ad0 <_printf_i+0x160>
 8007b94:	3501      	adds	r5, #1
 8007b96:	68e3      	ldr	r3, [r4, #12]
 8007b98:	9903      	ldr	r1, [sp, #12]
 8007b9a:	1a5b      	subs	r3, r3, r1
 8007b9c:	42ab      	cmp	r3, r5
 8007b9e:	dcf2      	bgt.n	8007b86 <_printf_i+0x216>
 8007ba0:	e7eb      	b.n	8007b7a <_printf_i+0x20a>
 8007ba2:	2500      	movs	r5, #0
 8007ba4:	f104 0619 	add.w	r6, r4, #25
 8007ba8:	e7f5      	b.n	8007b96 <_printf_i+0x226>
 8007baa:	bf00      	nop
 8007bac:	08008815 	.word	0x08008815
 8007bb0:	08008826 	.word	0x08008826

08007bb4 <memmove>:
 8007bb4:	4288      	cmp	r0, r1
 8007bb6:	b510      	push	{r4, lr}
 8007bb8:	eb01 0402 	add.w	r4, r1, r2
 8007bbc:	d902      	bls.n	8007bc4 <memmove+0x10>
 8007bbe:	4284      	cmp	r4, r0
 8007bc0:	4623      	mov	r3, r4
 8007bc2:	d807      	bhi.n	8007bd4 <memmove+0x20>
 8007bc4:	1e43      	subs	r3, r0, #1
 8007bc6:	42a1      	cmp	r1, r4
 8007bc8:	d008      	beq.n	8007bdc <memmove+0x28>
 8007bca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007bd2:	e7f8      	b.n	8007bc6 <memmove+0x12>
 8007bd4:	4402      	add	r2, r0
 8007bd6:	4601      	mov	r1, r0
 8007bd8:	428a      	cmp	r2, r1
 8007bda:	d100      	bne.n	8007bde <memmove+0x2a>
 8007bdc:	bd10      	pop	{r4, pc}
 8007bde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007be2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007be6:	e7f7      	b.n	8007bd8 <memmove+0x24>

08007be8 <_sbrk_r>:
 8007be8:	b538      	push	{r3, r4, r5, lr}
 8007bea:	4d06      	ldr	r5, [pc, #24]	; (8007c04 <_sbrk_r+0x1c>)
 8007bec:	2300      	movs	r3, #0
 8007bee:	4604      	mov	r4, r0
 8007bf0:	4608      	mov	r0, r1
 8007bf2:	602b      	str	r3, [r5, #0]
 8007bf4:	f7f9 fa7e 	bl	80010f4 <_sbrk>
 8007bf8:	1c43      	adds	r3, r0, #1
 8007bfa:	d102      	bne.n	8007c02 <_sbrk_r+0x1a>
 8007bfc:	682b      	ldr	r3, [r5, #0]
 8007bfe:	b103      	cbz	r3, 8007c02 <_sbrk_r+0x1a>
 8007c00:	6023      	str	r3, [r4, #0]
 8007c02:	bd38      	pop	{r3, r4, r5, pc}
 8007c04:	20005050 	.word	0x20005050

08007c08 <_realloc_r>:
 8007c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c0c:	4680      	mov	r8, r0
 8007c0e:	4614      	mov	r4, r2
 8007c10:	460e      	mov	r6, r1
 8007c12:	b921      	cbnz	r1, 8007c1e <_realloc_r+0x16>
 8007c14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c18:	4611      	mov	r1, r2
 8007c1a:	f7ff bc57 	b.w	80074cc <_malloc_r>
 8007c1e:	b92a      	cbnz	r2, 8007c2c <_realloc_r+0x24>
 8007c20:	f7ff fbe8 	bl	80073f4 <_free_r>
 8007c24:	4625      	mov	r5, r4
 8007c26:	4628      	mov	r0, r5
 8007c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c2c:	f000 f81b 	bl	8007c66 <_malloc_usable_size_r>
 8007c30:	4284      	cmp	r4, r0
 8007c32:	4607      	mov	r7, r0
 8007c34:	d802      	bhi.n	8007c3c <_realloc_r+0x34>
 8007c36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c3a:	d812      	bhi.n	8007c62 <_realloc_r+0x5a>
 8007c3c:	4621      	mov	r1, r4
 8007c3e:	4640      	mov	r0, r8
 8007c40:	f7ff fc44 	bl	80074cc <_malloc_r>
 8007c44:	4605      	mov	r5, r0
 8007c46:	2800      	cmp	r0, #0
 8007c48:	d0ed      	beq.n	8007c26 <_realloc_r+0x1e>
 8007c4a:	42bc      	cmp	r4, r7
 8007c4c:	4622      	mov	r2, r4
 8007c4e:	4631      	mov	r1, r6
 8007c50:	bf28      	it	cs
 8007c52:	463a      	movcs	r2, r7
 8007c54:	f7ff fbc0 	bl	80073d8 <memcpy>
 8007c58:	4631      	mov	r1, r6
 8007c5a:	4640      	mov	r0, r8
 8007c5c:	f7ff fbca 	bl	80073f4 <_free_r>
 8007c60:	e7e1      	b.n	8007c26 <_realloc_r+0x1e>
 8007c62:	4635      	mov	r5, r6
 8007c64:	e7df      	b.n	8007c26 <_realloc_r+0x1e>

08007c66 <_malloc_usable_size_r>:
 8007c66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c6a:	1f18      	subs	r0, r3, #4
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	bfbc      	itt	lt
 8007c70:	580b      	ldrlt	r3, [r1, r0]
 8007c72:	18c0      	addlt	r0, r0, r3
 8007c74:	4770      	bx	lr
	...

08007c78 <_init>:
 8007c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7a:	bf00      	nop
 8007c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c7e:	bc08      	pop	{r3}
 8007c80:	469e      	mov	lr, r3
 8007c82:	4770      	bx	lr

08007c84 <_fini>:
 8007c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c86:	bf00      	nop
 8007c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c8a:	bc08      	pop	{r3}
 8007c8c:	469e      	mov	lr, r3
 8007c8e:	4770      	bx	lr
